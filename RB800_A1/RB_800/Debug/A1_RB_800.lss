
A1_RB_800.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00802000  0000de48  0000dedc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006ab  00802144  00802144  0000e020  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000e07c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  0000e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a24c  00000000  00000000  0000e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005985  00000000  00000000  00028a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a450  00000000  00000000  0002e389  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b10  00000000  00000000  000387dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004811  00000000  00000000  0003a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000071bb  00000000  00000000  0003eafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  00045cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__ctors_end>
       4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
       8:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__vector_2>
       c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      10:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      14:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      18:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      1c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      20:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      24:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      28:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      2c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      30:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      34:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      38:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      3c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      40:	0c 94 e9 5b 	jmp	0xb7d2	; 0xb7d2 <__vector_16>
      44:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      48:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      4c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      50:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      54:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      58:	0c 94 72 5d 	jmp	0xbae4	; 0xbae4 <__vector_22>
      5c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      60:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      64:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      68:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      6c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      70:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      74:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      78:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      7c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      80:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      84:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      88:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__vector_34>
      8c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      90:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      94:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      98:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      9c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      a0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      a4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      a8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      ac:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      b0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      b4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      b8:	0c 94 e7 39 	jmp	0x73ce	; 0x73ce <__vector_46>
      bc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      c0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      c4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      c8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      cc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      d0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      d4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      d8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      dc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      e0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      e4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      e8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      ec:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      f0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      f4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      f8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
      fc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     100:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     104:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     108:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__vector_66>
     10c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     110:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     114:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     118:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     11c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     120:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     124:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     128:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     12c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     130:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     134:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     138:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     13c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     140:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     144:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     148:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     14c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     150:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     154:	0c 94 55 5f 	jmp	0xbeaa	; 0xbeaa <__vector_85>
     158:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     15c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     160:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     164:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     168:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     16c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     170:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     174:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     178:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     17c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     180:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <__vector_96>
     184:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <__vector_97>
     188:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <__vector_98>
     18c:	0c 94 09 28 	jmp	0x5012	; 0x5012 <__vector_99>
     190:	0c 94 2d 28 	jmp	0x505a	; 0x505a <__vector_100>
     194:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <__vector_101>
     198:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     19c:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1a0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1a4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1a8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1ac:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1b0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1b4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1b8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1bc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1c0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1c4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1c8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1cc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1d0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1d4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1d8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1dc:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1e0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1e4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1e8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1ec:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1f0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1f4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1f8:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__bad_interrupt>
     1fc:	a8 22       	and	r10, r24
     1fe:	ef 22       	and	r14, r31
     200:	dd 23       	and	r29, r29
     202:	dd 23       	and	r29, r29
     204:	dd 23       	and	r29, r29
     206:	dd 23       	and	r29, r29
     208:	dd 23       	and	r29, r29
     20a:	dd 23       	and	r29, r29
     20c:	dd 23       	and	r29, r29
     20e:	dd 23       	and	r29, r29
     210:	dd 23       	and	r29, r29
     212:	dd 23       	and	r29, r29
     214:	dd 23       	and	r29, r29
     216:	dd 23       	and	r29, r29
     218:	dd 23       	and	r29, r29
     21a:	dd 23       	and	r29, r29
     21c:	dd 23       	and	r29, r29
     21e:	dd 23       	and	r29, r29
     220:	dd 23       	and	r29, r29
     222:	dd 23       	and	r29, r29
     224:	37 23       	and	r19, r23
     226:	dd 23       	and	r29, r29
     228:	dd 23       	and	r29, r29
     22a:	dd 23       	and	r29, r29
     22c:	dd 23       	and	r29, r29
     22e:	dd 23       	and	r29, r29
     230:	dd 23       	and	r29, r29
     232:	dd 23       	and	r29, r29
     234:	dd 23       	and	r29, r29
     236:	dd 23       	and	r29, r29
     238:	dd 23       	and	r29, r29
     23a:	dd 23       	and	r29, r29
     23c:	dd 23       	and	r29, r29
     23e:	dd 23       	and	r29, r29
     240:	dd 23       	and	r29, r29
     242:	dd 23       	and	r29, r29
     244:	dd 23       	and	r29, r29
     246:	dd 23       	and	r29, r29
     248:	dd 23       	and	r29, r29
     24a:	dd 23       	and	r29, r29
     24c:	dd 23       	and	r29, r29
     24e:	dd 23       	and	r29, r29
     250:	dd 23       	and	r29, r29
     252:	dd 23       	and	r29, r29
     254:	dd 23       	and	r29, r29
     256:	dd 23       	and	r29, r29
     258:	dd 23       	and	r29, r29
     25a:	dd 23       	and	r29, r29
     25c:	dd 23       	and	r29, r29
     25e:	dd 23       	and	r29, r29
     260:	dd 23       	and	r29, r29
     262:	dd 23       	and	r29, r29
     264:	dd 23       	and	r29, r29
     266:	dd 23       	and	r29, r29
     268:	dd 23       	and	r29, r29
     26a:	dd 23       	and	r29, r29
     26c:	dd 23       	and	r29, r29
     26e:	dd 23       	and	r29, r29
     270:	dd 23       	and	r29, r29
     272:	dd 23       	and	r29, r29
     274:	dd 23       	and	r29, r29
     276:	dd 23       	and	r29, r29
     278:	dd 23       	and	r29, r29
     27a:	dd 23       	and	r29, r29
     27c:	dd 23       	and	r29, r29
     27e:	dd 23       	and	r29, r29
     280:	cc 23       	and	r28, r28
     282:	bb 23       	and	r27, r27
     284:	dd 23       	and	r29, r29
     286:	5f 22       	and	r5, r31
     288:	dd 23       	and	r29, r29
     28a:	dd 23       	and	r29, r29
     28c:	dd 23       	and	r29, r29
     28e:	dd 23       	and	r29, r29
     290:	dd 23       	and	r29, r29
     292:	dd 23       	and	r29, r29
     294:	dd 23       	and	r29, r29
     296:	dd 23       	and	r29, r29
     298:	6c 22       	and	r6, r28
     29a:	a4 22       	and	r10, r20
     29c:	3f 21       	and	r19, r15
     29e:	dd 23       	and	r29, r29
     2a0:	63 21       	and	r22, r3
     2a2:	dd 23       	and	r29, r29
     2a4:	dd 23       	and	r29, r29
     2a6:	dd 23       	and	r29, r29
     2a8:	dd 23       	and	r29, r29
     2aa:	dd 23       	and	r29, r29
     2ac:	cc 20       	and	r12, r12
     2ae:	ec 20       	and	r14, r12
     2b0:	60 1f       	adc	r22, r16
     2b2:	f7 20       	and	r15, r7
     2b4:	21 21       	and	r18, r1
     2b6:	dd 23       	and	r29, r29
     2b8:	dd 23       	and	r29, r29
     2ba:	dd 23       	and	r29, r29
     2bc:	dd 23       	and	r29, r29
     2be:	dd 23       	and	r29, r29
     2c0:	dd 23       	and	r29, r29
     2c2:	dd 23       	and	r29, r29
     2c4:	dd 23       	and	r29, r29
     2c6:	dd 23       	and	r29, r29
     2c8:	dd 23       	and	r29, r29
     2ca:	dd 23       	and	r29, r29
     2cc:	c1 20       	and	r12, r1
     2ce:	dd 23       	and	r29, r29
     2d0:	dd 23       	and	r29, r29
     2d2:	dd 23       	and	r29, r29
     2d4:	dd 23       	and	r29, r29
     2d6:	dd 23       	and	r29, r29
     2d8:	dd 23       	and	r29, r29
     2da:	dd 23       	and	r29, r29
     2dc:	dd 23       	and	r29, r29
     2de:	dd 23       	and	r29, r29
     2e0:	dd 23       	and	r29, r29
     2e2:	dd 23       	and	r29, r29
     2e4:	dd 23       	and	r29, r29
     2e6:	dd 23       	and	r29, r29
     2e8:	dd 23       	and	r29, r29
     2ea:	dd 23       	and	r29, r29
     2ec:	dd 23       	and	r29, r29
     2ee:	dd 23       	and	r29, r29
     2f0:	dd 23       	and	r29, r29
     2f2:	f2 20       	and	r15, r2
     2f4:	dd 23       	and	r29, r29
     2f6:	dd 23       	and	r29, r29
     2f8:	dd 23       	and	r29, r29
     2fa:	dd 23       	and	r29, r29
     2fc:	dd 23       	and	r29, r29
     2fe:	dd 23       	and	r29, r29
     300:	dd 23       	and	r29, r29
     302:	dd 23       	and	r29, r29
     304:	dd 23       	and	r29, r29
     306:	dd 23       	and	r29, r29
     308:	dd 23       	and	r29, r29
     30a:	dd 23       	and	r29, r29
     30c:	dd 23       	and	r29, r29
     30e:	dd 23       	and	r29, r29
     310:	dd 23       	and	r29, r29
     312:	dd 23       	and	r29, r29
     314:	82 22       	and	r8, r18
     316:	44 23       	and	r20, r20
     318:	4d 23       	and	r20, r29
     31a:	55 23       	and	r21, r21
     31c:	5e 23       	and	r21, r30
     31e:	66 23       	and	r22, r22
     320:	6f 23       	and	r22, r31
     322:	77 23       	and	r23, r23
     324:	80 23       	and	r24, r16
     326:	88 23       	and	r24, r24
     328:	91 23       	and	r25, r17
     32a:	99 23       	and	r25, r25
     32c:	a2 23       	and	r26, r18
     32e:	aa 23       	and	r26, r26
     330:	b3 23       	and	r27, r19
     332:	21 26       	eor	r2, r17
     334:	29 26       	eor	r2, r25
     336:	30 26       	eor	r3, r16
     338:	38 26       	eor	r3, r24
     33a:	40 26       	eor	r4, r16
     33c:	47 26       	eor	r4, r23
     33e:	4f 26       	eor	r4, r31
     340:	57 26       	eor	r5, r23
     342:	5e 26       	eor	r5, r30
     344:	63 26       	eor	r6, r19
     346:	6b 26       	eor	r6, r27
     348:	72 26       	eor	r7, r18
     34a:	79 26       	eor	r7, r25
     34c:	81 26       	eor	r8, r17
     34e:	88 26       	eor	r8, r24
     350:	13 38       	cpi	r17, 0x83	; 131
     352:	16 38       	cpi	r17, 0x86	; 134
     354:	19 38       	cpi	r17, 0x89	; 137
     356:	1c 38       	cpi	r17, 0x8C	; 140
     358:	1f 38       	cpi	r17, 0x8F	; 143
     35a:	22 38       	cpi	r18, 0x82	; 130
     35c:	25 38       	cpi	r18, 0x85	; 133
     35e:	28 38       	cpi	r18, 0x88	; 136
     360:	2b 38       	cpi	r18, 0x8B	; 139
     362:	2e 38       	cpi	r18, 0x8E	; 142
     364:	31 38       	cpi	r19, 0x81	; 129
     366:	3c 38       	cpi	r19, 0x8C	; 140
     368:	34 38       	cpi	r19, 0x84	; 132
     36a:	37 38       	cpi	r19, 0x87	; 135
     36c:	3a 38       	cpi	r19, 0x8A	; 138
     36e:	97 3d       	cpi	r25, 0xD7	; 215
     370:	a0 3d       	cpi	r26, 0xD0	; 208
     372:	7e 42       	sbci	r23, 0x2E	; 46
     374:	e4 47       	sbci	r30, 0x74	; 116
     376:	86 47       	sbci	r24, 0x76	; 118
     378:	2b 48       	sbci	r18, 0x8B	; 139
     37a:	2b 48       	sbci	r18, 0x8B	; 139
     37c:	2b 48       	sbci	r18, 0x8B	; 139
     37e:	2b 48       	sbci	r18, 0x8B	; 139
     380:	2b 48       	sbci	r18, 0x8B	; 139
     382:	2b 48       	sbci	r18, 0x8B	; 139
     384:	2b 48       	sbci	r18, 0x8B	; 139
     386:	2b 48       	sbci	r18, 0x8B	; 139
     388:	2b 48       	sbci	r18, 0x8B	; 139
     38a:	2b 48       	sbci	r18, 0x8B	; 139
     38c:	2b 48       	sbci	r18, 0x8B	; 139
     38e:	a9 3d       	cpi	r26, 0xD9	; 217
     390:	d8 3d       	cpi	r29, 0xD8	; 216
     392:	06 3e       	cpi	r16, 0xE6	; 230
     394:	7c 3e       	cpi	r23, 0xEC	; 236
     396:	3e 3e       	cpi	r19, 0xEE	; 238
     398:	5d 3e       	cpi	r21, 0xED	; 237
     39a:	9b 3e       	cpi	r25, 0xEB	; 235
     39c:	ba 3e       	cpi	r27, 0xEA	; 234
     39e:	d9 3e       	cpi	r29, 0xE9	; 233
     3a0:	35 3e       	cpi	r19, 0xE5	; 229
     3a2:	b6 3f       	cpi	r27, 0xF6	; 246
     3a4:	bf 3f       	cpi	r27, 0xFF	; 255
     3a6:	ec 3f       	cpi	r30, 0xFC	; 252
     3a8:	f5 3f       	cpi	r31, 0xF5	; 245
     3aa:	22 40       	sbci	r18, 0x02	; 2
     3ac:	2b 40       	sbci	r18, 0x0B	; 11
     3ae:	56 40       	sbci	r21, 0x06	; 6
     3b0:	82 40       	sbci	r24, 0x02	; 2
     3b2:	ae 40       	sbci	r26, 0x0E	; 14
     3b4:	da 40       	sbci	r29, 0x0A	; 10
     3b6:	06 41       	sbci	r16, 0x16	; 22
     3b8:	32 41       	sbci	r19, 0x12	; 18
     3ba:	5e 41       	sbci	r21, 0x1E	; 30
     3bc:	8a 41       	sbci	r24, 0x1A	; 26
     3be:	b6 41       	sbci	r27, 0x16	; 22
     3c0:	e2 41       	sbci	r30, 0x12	; 18
     3c2:	16 42       	sbci	r17, 0x26	; 38
     3c4:	4a 42       	sbci	r20, 0x2A	; 42
     3c6:	2b 48       	sbci	r18, 0x8B	; 139
     3c8:	2b 48       	sbci	r18, 0x8B	; 139
     3ca:	2b 48       	sbci	r18, 0x8B	; 139
     3cc:	2b 48       	sbci	r18, 0x8B	; 139
     3ce:	9c 42       	sbci	r25, 0x2C	; 44
     3d0:	bb 42       	sbci	r27, 0x2B	; 43
     3d2:	da 42       	sbci	r29, 0x2A	; 42
     3d4:	2b 48       	sbci	r18, 0x8B	; 139
     3d6:	2b 48       	sbci	r18, 0x8B	; 139
     3d8:	2b 48       	sbci	r18, 0x8B	; 139
     3da:	2b 48       	sbci	r18, 0x8B	; 139
     3dc:	2b 48       	sbci	r18, 0x8B	; 139
     3de:	2b 48       	sbci	r18, 0x8B	; 139
     3e0:	2b 48       	sbci	r18, 0x8B	; 139
     3e2:	2b 48       	sbci	r18, 0x8B	; 139
     3e4:	2b 48       	sbci	r18, 0x8B	; 139
     3e6:	2b 48       	sbci	r18, 0x8B	; 139
     3e8:	2b 48       	sbci	r18, 0x8B	; 139
     3ea:	2b 48       	sbci	r18, 0x8B	; 139
     3ec:	2b 48       	sbci	r18, 0x8B	; 139
     3ee:	2b 48       	sbci	r18, 0x8B	; 139
     3f0:	2b 48       	sbci	r18, 0x8B	; 139
     3f2:	2b 48       	sbci	r18, 0x8B	; 139
     3f4:	2b 48       	sbci	r18, 0x8B	; 139
     3f6:	2b 48       	sbci	r18, 0x8B	; 139
     3f8:	2b 48       	sbci	r18, 0x8B	; 139
     3fa:	2b 48       	sbci	r18, 0x8B	; 139
     3fc:	2b 48       	sbci	r18, 0x8B	; 139
     3fe:	2b 48       	sbci	r18, 0x8B	; 139
     400:	2b 48       	sbci	r18, 0x8B	; 139
     402:	2b 48       	sbci	r18, 0x8B	; 139
     404:	2b 48       	sbci	r18, 0x8B	; 139
     406:	2b 48       	sbci	r18, 0x8B	; 139
     408:	2b 48       	sbci	r18, 0x8B	; 139
     40a:	2b 48       	sbci	r18, 0x8B	; 139
     40c:	2b 48       	sbci	r18, 0x8B	; 139
     40e:	96 47       	sbci	r25, 0x76	; 118
     410:	2b 48       	sbci	r18, 0x8B	; 139
     412:	2b 48       	sbci	r18, 0x8B	; 139
     414:	2b 48       	sbci	r18, 0x8B	; 139
     416:	2b 48       	sbci	r18, 0x8B	; 139
     418:	2b 48       	sbci	r18, 0x8B	; 139
     41a:	2b 48       	sbci	r18, 0x8B	; 139
     41c:	2b 48       	sbci	r18, 0x8B	; 139
     41e:	2b 48       	sbci	r18, 0x8B	; 139
     420:	2b 48       	sbci	r18, 0x8B	; 139
     422:	2b 48       	sbci	r18, 0x8B	; 139
     424:	2b 48       	sbci	r18, 0x8B	; 139
     426:	2b 48       	sbci	r18, 0x8B	; 139
     428:	2b 48       	sbci	r18, 0x8B	; 139
     42a:	2b 48       	sbci	r18, 0x8B	; 139
     42c:	2b 48       	sbci	r18, 0x8B	; 139
     42e:	2b 48       	sbci	r18, 0x8B	; 139
     430:	2b 48       	sbci	r18, 0x8B	; 139
     432:	2b 48       	sbci	r18, 0x8B	; 139
     434:	2b 48       	sbci	r18, 0x8B	; 139
     436:	2b 48       	sbci	r18, 0x8B	; 139
     438:	2b 48       	sbci	r18, 0x8B	; 139
     43a:	2b 48       	sbci	r18, 0x8B	; 139
     43c:	2b 48       	sbci	r18, 0x8B	; 139
     43e:	2b 48       	sbci	r18, 0x8B	; 139
     440:	2b 48       	sbci	r18, 0x8B	; 139
     442:	2b 48       	sbci	r18, 0x8B	; 139
     444:	2b 48       	sbci	r18, 0x8B	; 139
     446:	2b 48       	sbci	r18, 0x8B	; 139
     448:	2b 48       	sbci	r18, 0x8B	; 139
     44a:	2b 48       	sbci	r18, 0x8B	; 139
     44c:	2b 48       	sbci	r18, 0x8B	; 139
     44e:	15 45       	sbci	r17, 0x55	; 85
     450:	a7 45       	sbci	r26, 0x57	; 87
     452:	2b 48       	sbci	r18, 0x8B	; 139
     454:	2b 48       	sbci	r18, 0x8B	; 139
     456:	2b 48       	sbci	r18, 0x8B	; 139
     458:	2b 48       	sbci	r18, 0x8B	; 139
     45a:	2b 48       	sbci	r18, 0x8B	; 139
     45c:	2b 48       	sbci	r18, 0x8B	; 139
     45e:	2b 48       	sbci	r18, 0x8B	; 139
     460:	2b 48       	sbci	r18, 0x8B	; 139
     462:	2b 48       	sbci	r18, 0x8B	; 139
     464:	2b 48       	sbci	r18, 0x8B	; 139
     466:	2b 48       	sbci	r18, 0x8B	; 139
     468:	2b 48       	sbci	r18, 0x8B	; 139
     46a:	2b 48       	sbci	r18, 0x8B	; 139
     46c:	2b 48       	sbci	r18, 0x8B	; 139
     46e:	f8 3e       	cpi	r31, 0xE8	; 232
     470:	09 3f       	cpi	r16, 0xF9	; 249
     472:	12 3f       	cpi	r17, 0xF2	; 242
     474:	2b 48       	sbci	r18, 0x8B	; 139
     476:	a0 3f       	cpi	r26, 0xF0	; 240
     478:	2b 48       	sbci	r18, 0x8B	; 139
     47a:	2b 48       	sbci	r18, 0x8B	; 139
     47c:	2b 48       	sbci	r18, 0x8B	; 139
     47e:	2b 48       	sbci	r18, 0x8B	; 139
     480:	2b 48       	sbci	r18, 0x8B	; 139
     482:	2b 48       	sbci	r18, 0x8B	; 139
     484:	2b 48       	sbci	r18, 0x8B	; 139
     486:	2b 48       	sbci	r18, 0x8B	; 139
     488:	2b 48       	sbci	r18, 0x8B	; 139
     48a:	2b 48       	sbci	r18, 0x8B	; 139
     48c:	2b 48       	sbci	r18, 0x8B	; 139
     48e:	f9 42       	sbci	r31, 0x29	; 41
     490:	2b 48       	sbci	r18, 0x8B	; 139
     492:	24 43       	sbci	r18, 0x34	; 52
     494:	f2 43       	sbci	r31, 0x32	; 50
     496:	41 43       	sbci	r20, 0x31	; 49
     498:	52 44       	sbci	r21, 0x42	; 66
     49a:	5e 43       	sbci	r21, 0x3E	; 62
     49c:	af 44       	sbci	r26, 0x4F	; 79
     49e:	01 43       	sbci	r16, 0x31	; 49
     4a0:	7b 43       	sbci	r23, 0x3B	; 59
     4a2:	2b 48       	sbci	r18, 0x8B	; 139
     4a4:	2b 48       	sbci	r18, 0x8B	; 139
     4a6:	2b 48       	sbci	r18, 0x8B	; 139
     4a8:	2b 48       	sbci	r18, 0x8B	; 139
     4aa:	2b 48       	sbci	r18, 0x8B	; 139
     4ac:	2b 48       	sbci	r18, 0x8B	; 139
     4ae:	2b 48       	sbci	r18, 0x8B	; 139
     4b0:	fc 47       	sbci	r31, 0x7C	; 124
     4b2:	0c 48       	sbci	r16, 0x8C	; 140
     4b4:	1c 48       	sbci	r17, 0x8C	; 140
     4b6:	2b 48       	sbci	r18, 0x8B	; 139
     4b8:	2b 48       	sbci	r18, 0x8B	; 139
     4ba:	2b 48       	sbci	r18, 0x8B	; 139
     4bc:	2b 48       	sbci	r18, 0x8B	; 139
     4be:	2b 48       	sbci	r18, 0x8B	; 139
     4c0:	2b 48       	sbci	r18, 0x8B	; 139
     4c2:	ec 47       	sbci	r30, 0x7C	; 124
     4c4:	2b 48       	sbci	r18, 0x8B	; 139
     4c6:	2b 48       	sbci	r18, 0x8B	; 139
     4c8:	2b 48       	sbci	r18, 0x8B	; 139
     4ca:	2b 48       	sbci	r18, 0x8B	; 139
     4cc:	2b 48       	sbci	r18, 0x8B	; 139
     4ce:	c0 46       	sbci	r28, 0x60	; 96
     4d0:	c8 46       	sbci	r28, 0x68	; 104
     4d2:	ee 46       	sbci	r30, 0x6E	; 110
     4d4:	14 47       	sbci	r17, 0x74	; 116
     4d6:	3a 47       	sbci	r19, 0x7A	; 122
     4d8:	60 47       	sbci	r22, 0x70	; 112
     4da:	2b 48       	sbci	r18, 0x8B	; 139
     4dc:	2b 48       	sbci	r18, 0x8B	; 139
     4de:	2b 48       	sbci	r18, 0x8B	; 139
     4e0:	2b 48       	sbci	r18, 0x8B	; 139
     4e2:	2b 48       	sbci	r18, 0x8B	; 139
     4e4:	2b 48       	sbci	r18, 0x8B	; 139
     4e6:	2b 48       	sbci	r18, 0x8B	; 139
     4e8:	2b 48       	sbci	r18, 0x8B	; 139
     4ea:	2b 48       	sbci	r18, 0x8B	; 139
     4ec:	2b 48       	sbci	r18, 0x8B	; 139
     4ee:	2b 48       	sbci	r18, 0x8B	; 139
     4f0:	2b 48       	sbci	r18, 0x8B	; 139
     4f2:	2b 48       	sbci	r18, 0x8B	; 139
     4f4:	2b 48       	sbci	r18, 0x8B	; 139
     4f6:	2b 48       	sbci	r18, 0x8B	; 139
     4f8:	2b 48       	sbci	r18, 0x8B	; 139
     4fa:	2b 48       	sbci	r18, 0x8B	; 139
     4fc:	2b 48       	sbci	r18, 0x8B	; 139
     4fe:	2b 48       	sbci	r18, 0x8B	; 139
     500:	2b 48       	sbci	r18, 0x8B	; 139
     502:	2b 48       	sbci	r18, 0x8B	; 139
     504:	2b 48       	sbci	r18, 0x8B	; 139
     506:	2b 48       	sbci	r18, 0x8B	; 139
     508:	2b 48       	sbci	r18, 0x8B	; 139
     50a:	2b 48       	sbci	r18, 0x8B	; 139
     50c:	2b 48       	sbci	r18, 0x8B	; 139
     50e:	b5 47       	sbci	r27, 0x75	; 117
     510:	c5 47       	sbci	r28, 0x75	; 117
     512:	45 48       	sbci	r20, 0x85	; 133
     514:	2d 4c       	sbci	r18, 0xCD	; 205
     516:	2d 4c       	sbci	r18, 0xCD	; 205
     518:	2d 4c       	sbci	r18, 0xCD	; 205
     51a:	2d 4c       	sbci	r18, 0xCD	; 205
     51c:	2d 4c       	sbci	r18, 0xCD	; 205
     51e:	2d 4c       	sbci	r18, 0xCD	; 205
     520:	2d 4c       	sbci	r18, 0xCD	; 205
     522:	2d 4c       	sbci	r18, 0xCD	; 205
     524:	2d 4c       	sbci	r18, 0xCD	; 205
     526:	2d 4c       	sbci	r18, 0xCD	; 205
     528:	2d 4c       	sbci	r18, 0xCD	; 205
     52a:	2d 4c       	sbci	r18, 0xCD	; 205
     52c:	2d 4c       	sbci	r18, 0xCD	; 205
     52e:	2d 4c       	sbci	r18, 0xCD	; 205
     530:	2d 4c       	sbci	r18, 0xCD	; 205
     532:	4d 48       	sbci	r20, 0x8D	; 141
     534:	55 48       	sbci	r21, 0x85	; 133
     536:	5d 48       	sbci	r21, 0x8D	; 141
     538:	7d 48       	sbci	r23, 0x8D	; 141
     53a:	6d 48       	sbci	r22, 0x8D	; 141
     53c:	75 48       	sbci	r23, 0x85	; 133
     53e:	85 48       	sbci	r24, 0x85	; 133
     540:	8d 48       	sbci	r24, 0x8D	; 141
     542:	95 48       	sbci	r25, 0x85	; 133
     544:	65 48       	sbci	r22, 0x85	; 133
     546:	86 49       	sbci	r24, 0x96	; 150
     548:	8e 49       	sbci	r24, 0x9E	; 158
     54a:	96 49       	sbci	r25, 0x96	; 150
     54c:	9e 49       	sbci	r25, 0x9E	; 158
     54e:	a6 49       	sbci	r26, 0x96	; 150
     550:	ae 49       	sbci	r26, 0x9E	; 158
     552:	b6 49       	sbci	r27, 0x96	; 150
     554:	be 49       	sbci	r27, 0x9E	; 158
     556:	c6 49       	sbci	r28, 0x96	; 150
     558:	ce 49       	sbci	r28, 0x9E	; 158
     55a:	d6 49       	sbci	r29, 0x96	; 150
     55c:	de 49       	sbci	r29, 0x9E	; 158
     55e:	e6 49       	sbci	r30, 0x96	; 150
     560:	ee 49       	sbci	r30, 0x9E	; 158
     562:	f6 49       	sbci	r31, 0x96	; 150
     564:	fe 49       	sbci	r31, 0x9E	; 158
     566:	06 4a       	sbci	r16, 0xA6	; 166
     568:	0e 4a       	sbci	r16, 0xAE	; 174
     56a:	2d 4c       	sbci	r18, 0xCD	; 205
     56c:	2d 4c       	sbci	r18, 0xCD	; 205
     56e:	2d 4c       	sbci	r18, 0xCD	; 205
     570:	2d 4c       	sbci	r18, 0xCD	; 205
     572:	16 4a       	sbci	r17, 0xA6	; 166
     574:	1e 4a       	sbci	r17, 0xAE	; 174
     576:	26 4a       	sbci	r18, 0xA6	; 166
     578:	2d 4c       	sbci	r18, 0xCD	; 205
     57a:	2d 4c       	sbci	r18, 0xCD	; 205
     57c:	2d 4c       	sbci	r18, 0xCD	; 205
     57e:	2d 4c       	sbci	r18, 0xCD	; 205
     580:	2d 4c       	sbci	r18, 0xCD	; 205
     582:	2d 4c       	sbci	r18, 0xCD	; 205
     584:	2d 4c       	sbci	r18, 0xCD	; 205
     586:	2d 4c       	sbci	r18, 0xCD	; 205
     588:	2d 4c       	sbci	r18, 0xCD	; 205
     58a:	2d 4c       	sbci	r18, 0xCD	; 205
     58c:	2d 4c       	sbci	r18, 0xCD	; 205
     58e:	2d 4c       	sbci	r18, 0xCD	; 205
     590:	2d 4c       	sbci	r18, 0xCD	; 205
     592:	ee 4b       	sbci	r30, 0xBE	; 190
     594:	f6 4b       	sbci	r31, 0xB6	; 182
     596:	2d 4c       	sbci	r18, 0xCD	; 205
     598:	2d 4c       	sbci	r18, 0xCD	; 205
     59a:	06 4c       	sbci	r16, 0xC6	; 198
     59c:	0e 4c       	sbci	r16, 0xCE	; 206
     59e:	2d 4c       	sbci	r18, 0xCD	; 205
     5a0:	2d 4c       	sbci	r18, 0xCD	; 205
     5a2:	1e 4c       	sbci	r17, 0xCE	; 206
     5a4:	26 4c       	sbci	r18, 0xC6	; 198
     5a6:	2d 4c       	sbci	r18, 0xCD	; 205
     5a8:	2d 4c       	sbci	r18, 0xCD	; 205
     5aa:	2d 4c       	sbci	r18, 0xCD	; 205
     5ac:	2d 4c       	sbci	r18, 0xCD	; 205
     5ae:	2d 4c       	sbci	r18, 0xCD	; 205
     5b0:	2d 4c       	sbci	r18, 0xCD	; 205
     5b2:	d6 4a       	sbci	r29, 0xA6	; 166
     5b4:	2d 4c       	sbci	r18, 0xCD	; 205
     5b6:	2d 4c       	sbci	r18, 0xCD	; 205
     5b8:	2d 4c       	sbci	r18, 0xCD	; 205
     5ba:	2d 4c       	sbci	r18, 0xCD	; 205
     5bc:	2d 4c       	sbci	r18, 0xCD	; 205
     5be:	2d 4c       	sbci	r18, 0xCD	; 205
     5c0:	2d 4c       	sbci	r18, 0xCD	; 205
     5c2:	2d 4c       	sbci	r18, 0xCD	; 205
     5c4:	2d 4c       	sbci	r18, 0xCD	; 205
     5c6:	2d 4c       	sbci	r18, 0xCD	; 205
     5c8:	2d 4c       	sbci	r18, 0xCD	; 205
     5ca:	2d 4c       	sbci	r18, 0xCD	; 205
     5cc:	2d 4c       	sbci	r18, 0xCD	; 205
     5ce:	2d 4c       	sbci	r18, 0xCD	; 205
     5d0:	2d 4c       	sbci	r18, 0xCD	; 205
     5d2:	2d 4c       	sbci	r18, 0xCD	; 205
     5d4:	2d 4c       	sbci	r18, 0xCD	; 205
     5d6:	e6 4b       	sbci	r30, 0xB6	; 182
     5d8:	2d 4c       	sbci	r18, 0xCD	; 205
     5da:	fe 4b       	sbci	r31, 0xBE	; 190
     5dc:	2d 4c       	sbci	r18, 0xCD	; 205
     5de:	16 4c       	sbci	r17, 0xC6	; 198
     5e0:	2d 4c       	sbci	r18, 0xCD	; 205
     5e2:	de 4b       	sbci	r29, 0xBE	; 190
     5e4:	2d 4c       	sbci	r18, 0xCD	; 205
     5e6:	2d 4c       	sbci	r18, 0xCD	; 205
     5e8:	2d 4c       	sbci	r18, 0xCD	; 205
     5ea:	2d 4c       	sbci	r18, 0xCD	; 205
     5ec:	2d 4c       	sbci	r18, 0xCD	; 205
     5ee:	2d 4c       	sbci	r18, 0xCD	; 205
     5f0:	2d 4c       	sbci	r18, 0xCD	; 205
     5f2:	2d 4c       	sbci	r18, 0xCD	; 205
     5f4:	a1 4b       	sbci	r26, 0xB1	; 177
     5f6:	2d 4c       	sbci	r18, 0xCD	; 205
     5f8:	2d 4c       	sbci	r18, 0xCD	; 205
     5fa:	2d 4c       	sbci	r18, 0xCD	; 205
     5fc:	2d 4c       	sbci	r18, 0xCD	; 205
     5fe:	2d 4c       	sbci	r18, 0xCD	; 205
     600:	2d 4c       	sbci	r18, 0xCD	; 205
     602:	2d 4c       	sbci	r18, 0xCD	; 205
     604:	2d 4c       	sbci	r18, 0xCD	; 205
     606:	2d 4c       	sbci	r18, 0xCD	; 205
     608:	2d 4c       	sbci	r18, 0xCD	; 205
     60a:	2d 4c       	sbci	r18, 0xCD	; 205
     60c:	2d 4c       	sbci	r18, 0xCD	; 205
     60e:	2d 4c       	sbci	r18, 0xCD	; 205
     610:	2d 4c       	sbci	r18, 0xCD	; 205
     612:	9d 48       	sbci	r25, 0x8D	; 141
     614:	a5 48       	sbci	r26, 0x85	; 133
     616:	bd 48       	sbci	r27, 0x8D	; 141
     618:	b5 48       	sbci	r27, 0x85	; 133
     61a:	cd 48       	sbci	r28, 0x8D	; 141
     61c:	dd 48       	sbci	r29, 0x8D	; 141
     61e:	2d 4c       	sbci	r18, 0xCD	; 205
     620:	2d 4c       	sbci	r18, 0xCD	; 205
     622:	2d 4c       	sbci	r18, 0xCD	; 205
     624:	2d 4c       	sbci	r18, 0xCD	; 205
     626:	2d 4c       	sbci	r18, 0xCD	; 205
     628:	2d 4c       	sbci	r18, 0xCD	; 205
     62a:	2d 4c       	sbci	r18, 0xCD	; 205
     62c:	2d 4c       	sbci	r18, 0xCD	; 205
     62e:	2d 4c       	sbci	r18, 0xCD	; 205
     630:	2d 4c       	sbci	r18, 0xCD	; 205
     632:	2d 4c       	sbci	r18, 0xCD	; 205
     634:	2d 4c       	sbci	r18, 0xCD	; 205
     636:	1e 4b       	sbci	r17, 0xBE	; 190
     638:	62 4b       	sbci	r22, 0xB2	; 178
     63a:	28 4b       	sbci	r18, 0xB8	; 184
     63c:	77 4b       	sbci	r23, 0xB7	; 183
     63e:	32 4b       	sbci	r19, 0xB2	; 178
     640:	8c 4b       	sbci	r24, 0xBC	; 188
     642:	14 4b       	sbci	r17, 0xB4	; 180
     644:	3c 4b       	sbci	r19, 0xBC	; 188
     646:	2d 4c       	sbci	r18, 0xCD	; 205
     648:	2d 4c       	sbci	r18, 0xCD	; 205
     64a:	2d 4c       	sbci	r18, 0xCD	; 205
     64c:	2d 4c       	sbci	r18, 0xCD	; 205
     64e:	2d 4c       	sbci	r18, 0xCD	; 205
     650:	2d 4c       	sbci	r18, 0xCD	; 205
     652:	2d 4c       	sbci	r18, 0xCD	; 205
     654:	c6 4b       	sbci	r28, 0xB6	; 182
     656:	ce 4b       	sbci	r28, 0xBE	; 190
     658:	d6 4b       	sbci	r29, 0xB6	; 182
     65a:	2d 4c       	sbci	r18, 0xCD	; 205
     65c:	2d 4c       	sbci	r18, 0xCD	; 205
     65e:	2d 4c       	sbci	r18, 0xCD	; 205
     660:	2d 4c       	sbci	r18, 0xCD	; 205
     662:	2d 4c       	sbci	r18, 0xCD	; 205
     664:	2d 4c       	sbci	r18, 0xCD	; 205
     666:	be 4b       	sbci	r27, 0xBE	; 190
     668:	2d 4c       	sbci	r18, 0xCD	; 205
     66a:	2d 4c       	sbci	r18, 0xCD	; 205
     66c:	2d 4c       	sbci	r18, 0xCD	; 205
     66e:	2d 4c       	sbci	r18, 0xCD	; 205
     670:	2d 4c       	sbci	r18, 0xCD	; 205
     672:	2d 4c       	sbci	r18, 0xCD	; 205
     674:	2e 4a       	sbci	r18, 0xAE	; 174
     676:	36 4a       	sbci	r19, 0xA6	; 166
     678:	3e 4a       	sbci	r19, 0xAE	; 174
     67a:	46 4a       	sbci	r20, 0xA6	; 166
     67c:	4e 4a       	sbci	r20, 0xAE	; 174
     67e:	7e 4a       	sbci	r23, 0xAE	; 174
     680:	86 4a       	sbci	r24, 0xA6	; 166
     682:	8e 4a       	sbci	r24, 0xAE	; 174
     684:	96 4a       	sbci	r25, 0xA6	; 166
     686:	9e 4a       	sbci	r25, 0xAE	; 174
     688:	a6 4a       	sbci	r26, 0xA6	; 166
     68a:	ae 4a       	sbci	r26, 0xAE	; 174
     68c:	b6 4a       	sbci	r27, 0xA6	; 166
     68e:	be 4a       	sbci	r27, 0xAE	; 174
     690:	c6 4a       	sbci	r28, 0xA6	; 166
     692:	ce 4a       	sbci	r28, 0xAE	; 174
     694:	5e 4a       	sbci	r21, 0xAE	; 174
     696:	6e 4a       	sbci	r22, 0xAE	; 174
     698:	56 4a       	sbci	r21, 0xA6	; 166
     69a:	2d 4c       	sbci	r18, 0xCD	; 205
     69c:	2d 4c       	sbci	r18, 0xCD	; 205
     69e:	2d 4c       	sbci	r18, 0xCD	; 205
     6a0:	2d 4c       	sbci	r18, 0xCD	; 205
     6a2:	2d 4c       	sbci	r18, 0xCD	; 205
     6a4:	2d 4c       	sbci	r18, 0xCD	; 205
     6a6:	2d 4c       	sbci	r18, 0xCD	; 205
     6a8:	2d 4c       	sbci	r18, 0xCD	; 205
     6aa:	2d 4c       	sbci	r18, 0xCD	; 205
     6ac:	2d 4c       	sbci	r18, 0xCD	; 205
     6ae:	2d 4c       	sbci	r18, 0xCD	; 205
     6b0:	2d 4c       	sbci	r18, 0xCD	; 205
     6b2:	2d 4c       	sbci	r18, 0xCD	; 205
     6b4:	f5 4a       	sbci	r31, 0xA5	; 165
     6b6:	47 4c       	sbci	r20, 0xC7	; 199
     6b8:	7c 52       	subi	r23, 0x2C	; 44
     6ba:	19 4f       	sbci	r17, 0xF9	; 249
     6bc:	15 52       	subi	r17, 0x25	; 37
     6be:	c7 51       	subi	r28, 0x17	; 23
     6c0:	7c 52       	subi	r23, 0x2C	; 44
     6c2:	7c 52       	subi	r23, 0x2C	; 44
     6c4:	7c 52       	subi	r23, 0x2C	; 44
     6c6:	7c 52       	subi	r23, 0x2C	; 44
     6c8:	7c 52       	subi	r23, 0x2C	; 44
     6ca:	7c 52       	subi	r23, 0x2C	; 44
     6cc:	7c 52       	subi	r23, 0x2C	; 44
     6ce:	7c 52       	subi	r23, 0x2C	; 44
     6d0:	7c 52       	subi	r23, 0x2C	; 44
     6d2:	7c 52       	subi	r23, 0x2C	; 44
     6d4:	7c 52       	subi	r23, 0x2C	; 44
     6d6:	7c 52       	subi	r23, 0x2C	; 44
     6d8:	4f 4c       	sbci	r20, 0xCF	; 207
     6da:	57 4c       	sbci	r21, 0xC7	; 199
     6dc:	6f 4c       	sbci	r22, 0xCF	; 207
     6de:	7c 52       	subi	r23, 0x2C	; 44
     6e0:	67 4c       	sbci	r22, 0xC7	; 199
     6e2:	77 4c       	sbci	r23, 0xC7	; 199
     6e4:	7f 4c       	sbci	r23, 0xCF	; 207
     6e6:	87 4c       	sbci	r24, 0xC7	; 199
     6e8:	5f 4c       	sbci	r21, 0xCF	; 207
     6ea:	40 4d       	sbci	r20, 0xD0	; 208
     6ec:	7c 52       	subi	r23, 0x2C	; 44
     6ee:	50 4d       	sbci	r21, 0xD0	; 208
     6f0:	7c 52       	subi	r23, 0x2C	; 44
     6f2:	58 4d       	sbci	r21, 0xD8	; 216
     6f4:	7c 52       	subi	r23, 0x2C	; 44
     6f6:	60 4d       	sbci	r22, 0xD0	; 208
     6f8:	8f 4d       	sbci	r24, 0xDF	; 223
     6fa:	be 4d       	sbci	r27, 0xDE	; 222
     6fc:	ed 4d       	sbci	r30, 0xDD	; 221
     6fe:	0d 4e       	sbci	r16, 0xED	; 237
     700:	2d 4e       	sbci	r18, 0xED	; 237
     702:	4d 4e       	sbci	r20, 0xED	; 237
     704:	6d 4e       	sbci	r22, 0xED	; 237
     706:	8d 4e       	sbci	r24, 0xED	; 237
     708:	ad 4e       	sbci	r26, 0xED	; 237
     70a:	d1 4e       	sbci	r29, 0xE1	; 225
     70c:	f5 4e       	sbci	r31, 0xE5	; 229
     70e:	7c 52       	subi	r23, 0x2C	; 44
     710:	7c 52       	subi	r23, 0x2C	; 44
     712:	7c 52       	subi	r23, 0x2C	; 44
     714:	7c 52       	subi	r23, 0x2C	; 44
     716:	7c 52       	subi	r23, 0x2C	; 44
     718:	21 4f       	sbci	r18, 0xF1	; 241
     71a:	29 4f       	sbci	r18, 0xF9	; 249
     71c:	7c 52       	subi	r23, 0x2C	; 44
     71e:	7c 52       	subi	r23, 0x2C	; 44
     720:	7c 52       	subi	r23, 0x2C	; 44
     722:	7c 52       	subi	r23, 0x2C	; 44
     724:	7c 52       	subi	r23, 0x2C	; 44
     726:	7c 52       	subi	r23, 0x2C	; 44
     728:	7c 52       	subi	r23, 0x2C	; 44
     72a:	7c 52       	subi	r23, 0x2C	; 44
     72c:	7c 52       	subi	r23, 0x2C	; 44
     72e:	7c 52       	subi	r23, 0x2C	; 44
     730:	7c 52       	subi	r23, 0x2C	; 44
     732:	7c 52       	subi	r23, 0x2C	; 44
     734:	7c 52       	subi	r23, 0x2C	; 44
     736:	35 52       	subi	r19, 0x25	; 37
     738:	45 52       	subi	r20, 0x25	; 37
     73a:	7c 52       	subi	r23, 0x2C	; 44
     73c:	7c 52       	subi	r23, 0x2C	; 44
     73e:	4d 52       	subi	r20, 0x2D	; 45
     740:	5d 52       	subi	r21, 0x2D	; 45
     742:	7c 52       	subi	r23, 0x2C	; 44
     744:	7c 52       	subi	r23, 0x2C	; 44
     746:	65 52       	subi	r22, 0x25	; 37
     748:	75 52       	subi	r23, 0x25	; 37
     74a:	7c 52       	subi	r23, 0x2C	; 44
     74c:	7c 52       	subi	r23, 0x2C	; 44
     74e:	7c 52       	subi	r23, 0x2C	; 44
     750:	7c 52       	subi	r23, 0x2C	; 44
     752:	7c 52       	subi	r23, 0x2C	; 44
     754:	7c 52       	subi	r23, 0x2C	; 44
     756:	cf 51       	subi	r28, 0x1F	; 31
     758:	7c 52       	subi	r23, 0x2C	; 44
     75a:	7c 52       	subi	r23, 0x2C	; 44
     75c:	7c 52       	subi	r23, 0x2C	; 44
     75e:	7c 52       	subi	r23, 0x2C	; 44
     760:	7c 52       	subi	r23, 0x2C	; 44
     762:	7c 52       	subi	r23, 0x2C	; 44
     764:	7c 52       	subi	r23, 0x2C	; 44
     766:	7c 52       	subi	r23, 0x2C	; 44
     768:	7c 52       	subi	r23, 0x2C	; 44
     76a:	7c 52       	subi	r23, 0x2C	; 44
     76c:	7c 52       	subi	r23, 0x2C	; 44
     76e:	7c 52       	subi	r23, 0x2C	; 44
     770:	7c 52       	subi	r23, 0x2C	; 44
     772:	7c 52       	subi	r23, 0x2C	; 44
     774:	7c 52       	subi	r23, 0x2C	; 44
     776:	7c 52       	subi	r23, 0x2C	; 44
     778:	7c 52       	subi	r23, 0x2C	; 44
     77a:	7c 52       	subi	r23, 0x2C	; 44
     77c:	7c 52       	subi	r23, 0x2C	; 44
     77e:	7c 52       	subi	r23, 0x2C	; 44
     780:	7c 52       	subi	r23, 0x2C	; 44
     782:	7c 52       	subi	r23, 0x2C	; 44
     784:	7c 52       	subi	r23, 0x2C	; 44
     786:	7c 52       	subi	r23, 0x2C	; 44
     788:	7c 52       	subi	r23, 0x2C	; 44
     78a:	7c 52       	subi	r23, 0x2C	; 44
     78c:	7c 52       	subi	r23, 0x2C	; 44
     78e:	7c 52       	subi	r23, 0x2C	; 44
     790:	7c 52       	subi	r23, 0x2C	; 44
     792:	7c 52       	subi	r23, 0x2C	; 44
     794:	7c 52       	subi	r23, 0x2C	; 44
     796:	ca 4f       	sbci	r28, 0xFA	; 250
     798:	d2 4f       	sbci	r29, 0xF2	; 242
     79a:	7c 52       	subi	r23, 0x2C	; 44
     79c:	7c 52       	subi	r23, 0x2C	; 44
     79e:	7c 52       	subi	r23, 0x2C	; 44
     7a0:	7c 52       	subi	r23, 0x2C	; 44
     7a2:	7c 52       	subi	r23, 0x2C	; 44
     7a4:	7c 52       	subi	r23, 0x2C	; 44
     7a6:	7c 52       	subi	r23, 0x2C	; 44
     7a8:	7c 52       	subi	r23, 0x2C	; 44
     7aa:	7c 52       	subi	r23, 0x2C	; 44
     7ac:	7c 52       	subi	r23, 0x2C	; 44
     7ae:	7c 52       	subi	r23, 0x2C	; 44
     7b0:	7c 52       	subi	r23, 0x2C	; 44
     7b2:	7c 52       	subi	r23, 0x2C	; 44
     7b4:	7c 52       	subi	r23, 0x2C	; 44
     7b6:	8f 4c       	sbci	r24, 0xCF	; 207
     7b8:	7c 52       	subi	r23, 0x2C	; 44
     7ba:	7c 52       	subi	r23, 0x2C	; 44
     7bc:	7c 52       	subi	r23, 0x2C	; 44
     7be:	7c 52       	subi	r23, 0x2C	; 44
     7c0:	97 4c       	sbci	r25, 0xC7	; 199
     7c2:	7c 52       	subi	r23, 0x2C	; 44
     7c4:	7c 52       	subi	r23, 0x2C	; 44
     7c6:	7c 52       	subi	r23, 0x2C	; 44
     7c8:	7c 52       	subi	r23, 0x2C	; 44
     7ca:	7c 52       	subi	r23, 0x2C	; 44
     7cc:	7c 52       	subi	r23, 0x2C	; 44
     7ce:	7c 52       	subi	r23, 0x2C	; 44
     7d0:	7c 52       	subi	r23, 0x2C	; 44
     7d2:	7c 52       	subi	r23, 0x2C	; 44
     7d4:	7c 52       	subi	r23, 0x2C	; 44
     7d6:	31 4f       	sbci	r19, 0xF1	; 241
     7d8:	7c 52       	subi	r23, 0x2C	; 44
     7da:	39 4f       	sbci	r19, 0xF9	; 249
     7dc:	73 4f       	sbci	r23, 0xF3	; 243
     7de:	41 4f       	sbci	r20, 0xF1	; 241
     7e0:	90 4f       	sbci	r25, 0xF0	; 240
     7e2:	49 4f       	sbci	r20, 0xF9	; 249
     7e4:	ad 4f       	sbci	r26, 0xFD	; 253
     7e6:	7c 52       	subi	r23, 0x2C	; 44
     7e8:	51 4f       	sbci	r21, 0xF1	; 241
     7ea:	7c 52       	subi	r23, 0x2C	; 44
     7ec:	7c 52       	subi	r23, 0x2C	; 44
     7ee:	7c 52       	subi	r23, 0x2C	; 44
     7f0:	7c 52       	subi	r23, 0x2C	; 44
     7f2:	7c 52       	subi	r23, 0x2C	; 44
     7f4:	7c 52       	subi	r23, 0x2C	; 44
     7f6:	7c 52       	subi	r23, 0x2C	; 44
     7f8:	1d 52       	subi	r17, 0x2D	; 45
     7fa:	25 52       	subi	r18, 0x25	; 37
     7fc:	2d 52       	subi	r18, 0x2D	; 45
     7fe:	7c 52       	subi	r23, 0x2C	; 44
     800:	7c 52       	subi	r23, 0x2C	; 44
     802:	7c 52       	subi	r23, 0x2C	; 44
     804:	7c 52       	subi	r23, 0x2C	; 44
     806:	7c 52       	subi	r23, 0x2C	; 44
     808:	7c 52       	subi	r23, 0x2C	; 44
     80a:	7c 52       	subi	r23, 0x2C	; 44
     80c:	7c 52       	subi	r23, 0x2C	; 44
     80e:	7c 52       	subi	r23, 0x2C	; 44
     810:	7c 52       	subi	r23, 0x2C	; 44
     812:	7c 52       	subi	r23, 0x2C	; 44
     814:	7c 52       	subi	r23, 0x2C	; 44
     816:	57 50       	subi	r21, 0x07	; 7
     818:	7c 52       	subi	r23, 0x2C	; 44
     81a:	5f 50       	subi	r21, 0x0F	; 15
     81c:	67 50       	subi	r22, 0x07	; 7
     81e:	6f 50       	subi	r22, 0x0F	; 15
     820:	77 50       	subi	r23, 0x07	; 7
     822:	7c 52       	subi	r23, 0x2C	; 44
     824:	97 50       	subi	r25, 0x07	; 7
     826:	bd 50       	subi	r27, 0x0D	; 13
     828:	e3 50       	subi	r30, 0x03	; 3
     82a:	09 51       	subi	r16, 0x19	; 25
     82c:	7c 52       	subi	r23, 0x2C	; 44
     82e:	2f 51       	subi	r18, 0x1F	; 31
     830:	55 51       	subi	r21, 0x15	; 21
     832:	7c 52       	subi	r23, 0x2C	; 44
     834:	7b 51       	subi	r23, 0x1B	; 27
     836:	a1 51       	subi	r26, 0x11	; 17
     838:	7c 52       	subi	r23, 0x2C	; 44
     83a:	7c 52       	subi	r23, 0x2C	; 44
     83c:	87 50       	subi	r24, 0x07	; 7
     83e:	7c 52       	subi	r23, 0x2C	; 44
     840:	7c 52       	subi	r23, 0x2C	; 44
     842:	7c 52       	subi	r23, 0x2C	; 44
     844:	7c 52       	subi	r23, 0x2C	; 44
     846:	7c 52       	subi	r23, 0x2C	; 44
     848:	7c 52       	subi	r23, 0x2C	; 44
     84a:	7c 52       	subi	r23, 0x2C	; 44
     84c:	7c 52       	subi	r23, 0x2C	; 44
     84e:	7c 52       	subi	r23, 0x2C	; 44
     850:	7c 52       	subi	r23, 0x2C	; 44
     852:	7c 52       	subi	r23, 0x2C	; 44
     854:	7c 52       	subi	r23, 0x2C	; 44
     856:	ee 51       	subi	r30, 0x1E	; 30
     858:	f6 51       	subi	r31, 0x16	; 22
     85a:	96 52       	subi	r25, 0x26	; 38
     85c:	9e 52       	subi	r25, 0x2E	; 46
     85e:	91 55       	subi	r25, 0x51	; 81
     860:	12 59       	subi	r17, 0x92	; 146
     862:	50 58       	subi	r21, 0x80	; 128
     864:	12 59       	subi	r17, 0x92	; 146
     866:	12 59       	subi	r17, 0x92	; 146
     868:	12 59       	subi	r17, 0x92	; 146
     86a:	12 59       	subi	r17, 0x92	; 146
     86c:	12 59       	subi	r17, 0x92	; 146
     86e:	12 59       	subi	r17, 0x92	; 146
     870:	12 59       	subi	r17, 0x92	; 146
     872:	12 59       	subi	r17, 0x92	; 146
     874:	12 59       	subi	r17, 0x92	; 146
     876:	12 59       	subi	r17, 0x92	; 146
     878:	12 59       	subi	r17, 0x92	; 146
     87a:	a6 52       	subi	r26, 0x26	; 38
     87c:	ae 52       	subi	r26, 0x2E	; 46
     87e:	b6 52       	subi	r27, 0x26	; 38
     880:	ce 52       	subi	r28, 0x2E	; 46
     882:	c6 52       	subi	r28, 0x26	; 38
     884:	12 59       	subi	r17, 0x92	; 146
     886:	d6 52       	subi	r29, 0x26	; 38
     888:	de 52       	subi	r29, 0x2E	; 46
     88a:	e6 52       	subi	r30, 0x26	; 38
     88c:	be 52       	subi	r27, 0x2E	; 46
     88e:	b8 53       	subi	r27, 0x38	; 56
     890:	12 59       	subi	r17, 0x92	; 146
     892:	c0 53       	subi	r28, 0x30	; 48
     894:	12 59       	subi	r17, 0x92	; 146
     896:	12 59       	subi	r17, 0x92	; 146
     898:	12 59       	subi	r17, 0x92	; 146
     89a:	c8 53       	subi	r28, 0x38	; 56
     89c:	f7 53       	subi	r31, 0x37	; 55
     89e:	27 54       	subi	r18, 0x47	; 71
     8a0:	56 54       	subi	r21, 0x46	; 70
     8a2:	76 54       	subi	r23, 0x46	; 70
     8a4:	96 54       	subi	r25, 0x46	; 70
     8a6:	b6 54       	subi	r27, 0x46	; 70
     8a8:	d6 54       	subi	r29, 0x46	; 70
     8aa:	f6 54       	subi	r31, 0x46	; 70
     8ac:	16 55       	subi	r17, 0x56	; 86
     8ae:	3f 55       	subi	r19, 0x5F	; 95
     8b0:	68 55       	subi	r22, 0x58	; 88
     8b2:	12 59       	subi	r17, 0x92	; 146
     8b4:	12 59       	subi	r17, 0x92	; 146
     8b6:	12 59       	subi	r17, 0x92	; 146
     8b8:	12 59       	subi	r17, 0x92	; 146
     8ba:	99 55       	subi	r25, 0x59	; 89
     8bc:	a1 55       	subi	r26, 0x51	; 81
     8be:	12 59       	subi	r17, 0x92	; 146
     8c0:	12 59       	subi	r17, 0x92	; 146
     8c2:	12 59       	subi	r17, 0x92	; 146
     8c4:	12 59       	subi	r17, 0x92	; 146
     8c6:	12 59       	subi	r17, 0x92	; 146
     8c8:	12 59       	subi	r17, 0x92	; 146
     8ca:	12 59       	subi	r17, 0x92	; 146
     8cc:	12 59       	subi	r17, 0x92	; 146
     8ce:	12 59       	subi	r17, 0x92	; 146
     8d0:	12 59       	subi	r17, 0x92	; 146
     8d2:	12 59       	subi	r17, 0x92	; 146
     8d4:	12 59       	subi	r17, 0x92	; 146
     8d6:	12 59       	subi	r17, 0x92	; 146
     8d8:	12 59       	subi	r17, 0x92	; 146
     8da:	eb 58       	subi	r30, 0x8B	; 139
     8dc:	12 59       	subi	r17, 0x92	; 146
     8de:	12 59       	subi	r17, 0x92	; 146
     8e0:	12 59       	subi	r17, 0x92	; 146
     8e2:	fb 58       	subi	r31, 0x8B	; 139
     8e4:	12 59       	subi	r17, 0x92	; 146
     8e6:	12 59       	subi	r17, 0x92	; 146
     8e8:	12 59       	subi	r17, 0x92	; 146
     8ea:	0b 59       	subi	r16, 0x9B	; 155
     8ec:	12 59       	subi	r17, 0x92	; 146
     8ee:	12 59       	subi	r17, 0x92	; 146
     8f0:	12 59       	subi	r17, 0x92	; 146
     8f2:	12 59       	subi	r17, 0x92	; 146
     8f4:	12 59       	subi	r17, 0x92	; 146
     8f6:	12 59       	subi	r17, 0x92	; 146
     8f8:	12 59       	subi	r17, 0x92	; 146
     8fa:	58 58       	subi	r21, 0x88	; 136
     8fc:	12 59       	subi	r17, 0x92	; 146
     8fe:	12 59       	subi	r17, 0x92	; 146
     900:	12 59       	subi	r17, 0x92	; 146
     902:	12 59       	subi	r17, 0x92	; 146
     904:	12 59       	subi	r17, 0x92	; 146
     906:	12 59       	subi	r17, 0x92	; 146
     908:	12 59       	subi	r17, 0x92	; 146
     90a:	12 59       	subi	r17, 0x92	; 146
     90c:	12 59       	subi	r17, 0x92	; 146
     90e:	12 59       	subi	r17, 0x92	; 146
     910:	12 59       	subi	r17, 0x92	; 146
     912:	12 59       	subi	r17, 0x92	; 146
     914:	12 59       	subi	r17, 0x92	; 146
     916:	12 59       	subi	r17, 0x92	; 146
     918:	12 59       	subi	r17, 0x92	; 146
     91a:	12 59       	subi	r17, 0x92	; 146
     91c:	12 59       	subi	r17, 0x92	; 146
     91e:	e3 58       	subi	r30, 0x83	; 131
     920:	12 59       	subi	r17, 0x92	; 146
     922:	f3 58       	subi	r31, 0x83	; 131
     924:	12 59       	subi	r17, 0x92	; 146
     926:	03 59       	subi	r16, 0x93	; 147
     928:	12 59       	subi	r17, 0x92	; 146
     92a:	12 59       	subi	r17, 0x92	; 146
     92c:	12 59       	subi	r17, 0x92	; 146
     92e:	12 59       	subi	r17, 0x92	; 146
     930:	12 59       	subi	r17, 0x92	; 146
     932:	12 59       	subi	r17, 0x92	; 146
     934:	12 59       	subi	r17, 0x92	; 146
     936:	12 59       	subi	r17, 0x92	; 146
     938:	12 59       	subi	r17, 0x92	; 146
     93a:	42 56       	subi	r20, 0x62	; 98
     93c:	4a 56       	subi	r20, 0x6A	; 106
     93e:	12 59       	subi	r17, 0x92	; 146
     940:	12 59       	subi	r17, 0x92	; 146
     942:	12 59       	subi	r17, 0x92	; 146
     944:	12 59       	subi	r17, 0x92	; 146
     946:	12 59       	subi	r17, 0x92	; 146
     948:	12 59       	subi	r17, 0x92	; 146
     94a:	12 59       	subi	r17, 0x92	; 146
     94c:	12 59       	subi	r17, 0x92	; 146
     94e:	12 59       	subi	r17, 0x92	; 146
     950:	12 59       	subi	r17, 0x92	; 146
     952:	12 59       	subi	r17, 0x92	; 146
     954:	12 59       	subi	r17, 0x92	; 146
     956:	12 59       	subi	r17, 0x92	; 146
     958:	12 59       	subi	r17, 0x92	; 146
     95a:	f6 52       	subi	r31, 0x26	; 38
     95c:	fe 52       	subi	r31, 0x2E	; 46
     95e:	12 59       	subi	r17, 0x92	; 146
     960:	12 59       	subi	r17, 0x92	; 146
     962:	12 59       	subi	r17, 0x92	; 146
     964:	0e 53       	subi	r16, 0x3E	; 62
     966:	12 59       	subi	r17, 0x92	; 146
     968:	12 59       	subi	r17, 0x92	; 146
     96a:	12 59       	subi	r17, 0x92	; 146
     96c:	12 59       	subi	r17, 0x92	; 146
     96e:	12 59       	subi	r17, 0x92	; 146
     970:	12 59       	subi	r17, 0x92	; 146
     972:	12 59       	subi	r17, 0x92	; 146
     974:	12 59       	subi	r17, 0x92	; 146
     976:	12 59       	subi	r17, 0x92	; 146
     978:	12 59       	subi	r17, 0x92	; 146
     97a:	a9 55       	subi	r26, 0x59	; 89
     97c:	12 59       	subi	r17, 0x92	; 146
     97e:	b9 55       	subi	r27, 0x59	; 89
     980:	eb 55       	subi	r30, 0x5B	; 91
     982:	c1 55       	subi	r28, 0x51	; 81
     984:	08 56       	subi	r16, 0x68	; 104
     986:	12 59       	subi	r17, 0x92	; 146
     988:	25 56       	subi	r18, 0x65	; 101
     98a:	b1 55       	subi	r27, 0x51	; 81
     98c:	c9 55       	subi	r28, 0x59	; 89
     98e:	12 59       	subi	r17, 0x92	; 146
     990:	12 59       	subi	r17, 0x92	; 146
     992:	12 59       	subi	r17, 0x92	; 146
     994:	12 59       	subi	r17, 0x92	; 146
     996:	12 59       	subi	r17, 0x92	; 146
     998:	12 59       	subi	r17, 0x92	; 146
     99a:	12 59       	subi	r17, 0x92	; 146
     99c:	d3 58       	subi	r29, 0x83	; 131
     99e:	db 58       	subi	r29, 0x8B	; 139
     9a0:	12 59       	subi	r17, 0x92	; 146
     9a2:	12 59       	subi	r17, 0x92	; 146
     9a4:	12 59       	subi	r17, 0x92	; 146
     9a6:	12 59       	subi	r17, 0x92	; 146
     9a8:	12 59       	subi	r17, 0x92	; 146
     9aa:	12 59       	subi	r17, 0x92	; 146
     9ac:	12 59       	subi	r17, 0x92	; 146
     9ae:	cb 58       	subi	r28, 0x8B	; 139
     9b0:	12 59       	subi	r17, 0x92	; 146
     9b2:	12 59       	subi	r17, 0x92	; 146
     9b4:	12 59       	subi	r17, 0x92	; 146
     9b6:	12 59       	subi	r17, 0x92	; 146
     9b8:	12 59       	subi	r17, 0x92	; 146
     9ba:	c2 56       	subi	r28, 0x62	; 98
     9bc:	ca 56       	subi	r28, 0x6A	; 106
     9be:	d2 56       	subi	r29, 0x62	; 98
     9c0:	da 56       	subi	r29, 0x6A	; 106
     9c2:	ea 56       	subi	r30, 0x6A	; 106
     9c4:	fa 56       	subi	r31, 0x6A	; 106
     9c6:	20 57       	subi	r18, 0x70	; 112
     9c8:	46 57       	subi	r20, 0x76	; 118
     9ca:	6c 57       	subi	r22, 0x7C	; 124
     9cc:	92 57       	subi	r25, 0x72	; 114
     9ce:	12 59       	subi	r17, 0x92	; 146
     9d0:	b8 57       	subi	r27, 0x78	; 120
     9d2:	de 57       	subi	r29, 0x7E	; 126
     9d4:	12 59       	subi	r17, 0x92	; 146
     9d6:	04 58       	subi	r16, 0x84	; 132
     9d8:	2a 58       	subi	r18, 0x8A	; 138
     9da:	12 59       	subi	r17, 0x92	; 146
     9dc:	12 59       	subi	r17, 0x92	; 146
     9de:	12 59       	subi	r17, 0x92	; 146
     9e0:	12 59       	subi	r17, 0x92	; 146
     9e2:	12 59       	subi	r17, 0x92	; 146
     9e4:	12 59       	subi	r17, 0x92	; 146
     9e6:	12 59       	subi	r17, 0x92	; 146
     9e8:	12 59       	subi	r17, 0x92	; 146
     9ea:	12 59       	subi	r17, 0x92	; 146
     9ec:	12 59       	subi	r17, 0x92	; 146
     9ee:	12 59       	subi	r17, 0x92	; 146
     9f0:	12 59       	subi	r17, 0x92	; 146
     9f2:	12 59       	subi	r17, 0x92	; 146
     9f4:	12 59       	subi	r17, 0x92	; 146
     9f6:	12 59       	subi	r17, 0x92	; 146
     9f8:	12 59       	subi	r17, 0x92	; 146
     9fa:	7c 58       	subi	r23, 0x8C	; 140
     9fc:	84 58       	subi	r24, 0x84	; 132
     9fe:	4e 5a       	subi	r20, 0xAE	; 174
     a00:	58 5a       	subi	r21, 0xA8	; 168
     a02:	5a 5a       	subi	r21, 0xAA	; 170
     a04:	5e 5a       	subi	r21, 0xAE	; 174
     a06:	5e 5a       	subi	r21, 0xAE	; 174
     a08:	44 5a       	subi	r20, 0xA4	; 164
     a0a:	58 5a       	subi	r21, 0xA8	; 168
     a0c:	49 5a       	subi	r20, 0xA9	; 169
     a0e:	5e 5a       	subi	r21, 0xAE	; 174
     a10:	5e 5a       	subi	r21, 0xAE	; 174
     a12:	5e 5a       	subi	r21, 0xAE	; 174
     a14:	53 5a       	subi	r21, 0xA3	; 163
     a16:	5e 5a       	subi	r21, 0xAE	; 174
     a18:	5e 5a       	subi	r21, 0xAE	; 174
     a1a:	d0 60       	ori	r29, 0x00	; 0
     a1c:	d8 60       	ori	r29, 0x08	; 8
     a1e:	a0 62       	ori	r26, 0x20	; 32
     a20:	59 62       	ori	r21, 0x29	; 41
     a22:	a0 62       	ori	r26, 0x20	; 32
     a24:	a0 62       	ori	r26, 0x20	; 32
     a26:	a0 62       	ori	r26, 0x20	; 32
     a28:	a0 62       	ori	r26, 0x20	; 32
     a2a:	a0 62       	ori	r26, 0x20	; 32
     a2c:	a0 62       	ori	r26, 0x20	; 32
     a2e:	a0 62       	ori	r26, 0x20	; 32
     a30:	a0 62       	ori	r26, 0x20	; 32
     a32:	a0 62       	ori	r26, 0x20	; 32
     a34:	a0 62       	ori	r26, 0x20	; 32
     a36:	a0 62       	ori	r26, 0x20	; 32
     a38:	a0 62       	ori	r26, 0x20	; 32
     a3a:	a0 62       	ori	r26, 0x20	; 32
     a3c:	a0 62       	ori	r26, 0x20	; 32
     a3e:	a0 62       	ori	r26, 0x20	; 32
     a40:	5e 61       	ori	r21, 0x1E	; 30
     a42:	e8 60       	ori	r30, 0x08	; 8
     a44:	06 61       	ori	r16, 0x16	; 22
     a46:	a0 62       	ori	r26, 0x20	; 32
     a48:	a0 62       	ori	r26, 0x20	; 32
     a4a:	a0 62       	ori	r26, 0x20	; 32
     a4c:	e0 60       	ori	r30, 0x00	; 0
     a4e:	a0 62       	ori	r26, 0x20	; 32
     a50:	a0 62       	ori	r26, 0x20	; 32
     a52:	a0 62       	ori	r26, 0x20	; 32
     a54:	a0 62       	ori	r26, 0x20	; 32
     a56:	a0 62       	ori	r26, 0x20	; 32
     a58:	a0 62       	ori	r26, 0x20	; 32
     a5a:	a0 62       	ori	r26, 0x20	; 32
     a5c:	a0 62       	ori	r26, 0x20	; 32
     a5e:	a0 62       	ori	r26, 0x20	; 32
     a60:	7c 61       	ori	r23, 0x1C	; 28
     a62:	24 61       	ori	r18, 0x14	; 20
     a64:	41 61       	ori	r20, 0x11	; 17
     a66:	a0 62       	ori	r26, 0x20	; 32
     a68:	a0 62       	ori	r26, 0x20	; 32
     a6a:	a0 62       	ori	r26, 0x20	; 32
     a6c:	a0 62       	ori	r26, 0x20	; 32
     a6e:	a0 62       	ori	r26, 0x20	; 32
     a70:	a0 62       	ori	r26, 0x20	; 32
     a72:	a0 62       	ori	r26, 0x20	; 32
     a74:	a0 62       	ori	r26, 0x20	; 32
     a76:	a0 62       	ori	r26, 0x20	; 32
     a78:	a0 62       	ori	r26, 0x20	; 32
     a7a:	a0 62       	ori	r26, 0x20	; 32
     a7c:	a0 62       	ori	r26, 0x20	; 32
     a7e:	a0 62       	ori	r26, 0x20	; 32
     a80:	a0 62       	ori	r26, 0x20	; 32
     a82:	a0 62       	ori	r26, 0x20	; 32
     a84:	a0 62       	ori	r26, 0x20	; 32
     a86:	a0 62       	ori	r26, 0x20	; 32
     a88:	a0 62       	ori	r26, 0x20	; 32
     a8a:	a0 62       	ori	r26, 0x20	; 32
     a8c:	a0 62       	ori	r26, 0x20	; 32
     a8e:	a0 62       	ori	r26, 0x20	; 32
     a90:	a0 62       	ori	r26, 0x20	; 32
     a92:	a0 62       	ori	r26, 0x20	; 32
     a94:	a0 62       	ori	r26, 0x20	; 32
     a96:	a0 62       	ori	r26, 0x20	; 32
     a98:	a0 62       	ori	r26, 0x20	; 32
     a9a:	a0 62       	ori	r26, 0x20	; 32
     a9c:	a0 62       	ori	r26, 0x20	; 32
     a9e:	a0 62       	ori	r26, 0x20	; 32
     aa0:	a0 62       	ori	r26, 0x20	; 32
     aa2:	a0 62       	ori	r26, 0x20	; 32
     aa4:	a0 62       	ori	r26, 0x20	; 32
     aa6:	a0 62       	ori	r26, 0x20	; 32
     aa8:	a0 62       	ori	r26, 0x20	; 32
     aaa:	a0 62       	ori	r26, 0x20	; 32
     aac:	a0 62       	ori	r26, 0x20	; 32
     aae:	a0 62       	ori	r26, 0x20	; 32
     ab0:	a0 62       	ori	r26, 0x20	; 32
     ab2:	a0 62       	ori	r26, 0x20	; 32
     ab4:	a0 62       	ori	r26, 0x20	; 32
     ab6:	a0 62       	ori	r26, 0x20	; 32
     ab8:	a0 62       	ori	r26, 0x20	; 32
     aba:	a0 62       	ori	r26, 0x20	; 32
     abc:	a0 62       	ori	r26, 0x20	; 32
     abe:	a0 62       	ori	r26, 0x20	; 32
     ac0:	a0 62       	ori	r26, 0x20	; 32
     ac2:	a0 62       	ori	r26, 0x20	; 32
     ac4:	a0 62       	ori	r26, 0x20	; 32
     ac6:	a0 62       	ori	r26, 0x20	; 32
     ac8:	a0 62       	ori	r26, 0x20	; 32
     aca:	a0 62       	ori	r26, 0x20	; 32
     acc:	a0 62       	ori	r26, 0x20	; 32
     ace:	a0 62       	ori	r26, 0x20	; 32
     ad0:	a0 62       	ori	r26, 0x20	; 32
     ad2:	a0 62       	ori	r26, 0x20	; 32
     ad4:	a0 62       	ori	r26, 0x20	; 32
     ad6:	a0 62       	ori	r26, 0x20	; 32
     ad8:	a0 62       	ori	r26, 0x20	; 32
     ada:	a0 62       	ori	r26, 0x20	; 32
     adc:	a0 62       	ori	r26, 0x20	; 32
     ade:	a0 62       	ori	r26, 0x20	; 32
     ae0:	a0 62       	ori	r26, 0x20	; 32
     ae2:	a0 62       	ori	r26, 0x20	; 32
     ae4:	a0 62       	ori	r26, 0x20	; 32
     ae6:	a0 62       	ori	r26, 0x20	; 32
     ae8:	a0 62       	ori	r26, 0x20	; 32
     aea:	a0 62       	ori	r26, 0x20	; 32
     aec:	a0 62       	ori	r26, 0x20	; 32
     aee:	a0 62       	ori	r26, 0x20	; 32
     af0:	a0 62       	ori	r26, 0x20	; 32
     af2:	a0 62       	ori	r26, 0x20	; 32
     af4:	a0 62       	ori	r26, 0x20	; 32
     af6:	a0 62       	ori	r26, 0x20	; 32
     af8:	a0 62       	ori	r26, 0x20	; 32
     afa:	a0 62       	ori	r26, 0x20	; 32
     afc:	a0 62       	ori	r26, 0x20	; 32
     afe:	a0 62       	ori	r26, 0x20	; 32
     b00:	a0 62       	ori	r26, 0x20	; 32
     b02:	a0 62       	ori	r26, 0x20	; 32
     b04:	a0 62       	ori	r26, 0x20	; 32
     b06:	a0 62       	ori	r26, 0x20	; 32
     b08:	a0 62       	ori	r26, 0x20	; 32
     b0a:	a0 62       	ori	r26, 0x20	; 32
     b0c:	a0 62       	ori	r26, 0x20	; 32
     b0e:	a0 62       	ori	r26, 0x20	; 32
     b10:	a0 62       	ori	r26, 0x20	; 32
     b12:	a0 62       	ori	r26, 0x20	; 32
     b14:	a0 62       	ori	r26, 0x20	; 32
     b16:	a0 62       	ori	r26, 0x20	; 32
     b18:	a0 62       	ori	r26, 0x20	; 32
     b1a:	99 61       	ori	r25, 0x19	; 25
     b1c:	a9 61       	ori	r26, 0x19	; 25
     b1e:	b1 61       	ori	r27, 0x11	; 17
     b20:	a0 62       	ori	r26, 0x20	; 32
     b22:	3e 62       	ori	r19, 0x2E	; 46
     b24:	a0 62       	ori	r26, 0x20	; 32
     b26:	53 62       	ori	r21, 0x23	; 35
     b28:	a0 62       	ori	r26, 0x20	; 32
     b2a:	a0 62       	ori	r26, 0x20	; 32
     b2c:	a0 62       	ori	r26, 0x20	; 32
     b2e:	a0 62       	ori	r26, 0x20	; 32
     b30:	a0 62       	ori	r26, 0x20	; 32
     b32:	a0 62       	ori	r26, 0x20	; 32
     b34:	a0 62       	ori	r26, 0x20	; 32
     b36:	a0 62       	ori	r26, 0x20	; 32
     b38:	a0 62       	ori	r26, 0x20	; 32
     b3a:	a0 62       	ori	r26, 0x20	; 32
     b3c:	a0 62       	ori	r26, 0x20	; 32
     b3e:	a0 62       	ori	r26, 0x20	; 32
     b40:	a0 62       	ori	r26, 0x20	; 32
     b42:	a0 62       	ori	r26, 0x20	; 32
     b44:	a0 62       	ori	r26, 0x20	; 32
     b46:	a0 62       	ori	r26, 0x20	; 32
     b48:	a0 62       	ori	r26, 0x20	; 32
     b4a:	a0 62       	ori	r26, 0x20	; 32
     b4c:	a0 62       	ori	r26, 0x20	; 32
     b4e:	a0 62       	ori	r26, 0x20	; 32
     b50:	a0 62       	ori	r26, 0x20	; 32
     b52:	a0 62       	ori	r26, 0x20	; 32
     b54:	a0 62       	ori	r26, 0x20	; 32
     b56:	a0 62       	ori	r26, 0x20	; 32
     b58:	a0 62       	ori	r26, 0x20	; 32
     b5a:	a0 62       	ori	r26, 0x20	; 32
     b5c:	71 62       	ori	r23, 0x21	; 33
     b5e:	81 62       	ori	r24, 0x21	; 33
     b60:	91 62       	ori	r25, 0x21	; 33
     b62:	a0 62       	ori	r26, 0x20	; 32
     b64:	a0 62       	ori	r26, 0x20	; 32
     b66:	a0 62       	ori	r26, 0x20	; 32
     b68:	a0 62       	ori	r26, 0x20	; 32
     b6a:	a0 62       	ori	r26, 0x20	; 32
     b6c:	a0 62       	ori	r26, 0x20	; 32
     b6e:	61 62       	ori	r22, 0x21	; 33
     b70:	ba 62       	ori	r27, 0x2A	; 42
     b72:	6a 64       	ori	r22, 0x4A	; 74
     b74:	6a 64       	ori	r22, 0x4A	; 74
     b76:	6a 64       	ori	r22, 0x4A	; 74
     b78:	6a 64       	ori	r22, 0x4A	; 74
     b7a:	6a 64       	ori	r22, 0x4A	; 74
     b7c:	6a 64       	ori	r22, 0x4A	; 74
     b7e:	6a 64       	ori	r22, 0x4A	; 74
     b80:	6a 64       	ori	r22, 0x4A	; 74
     b82:	6a 64       	ori	r22, 0x4A	; 74
     b84:	6a 64       	ori	r22, 0x4A	; 74
     b86:	6a 64       	ori	r22, 0x4A	; 74
     b88:	6a 64       	ori	r22, 0x4A	; 74
     b8a:	6a 64       	ori	r22, 0x4A	; 74
     b8c:	6a 64       	ori	r22, 0x4A	; 74
     b8e:	6a 64       	ori	r22, 0x4A	; 74
     b90:	6a 64       	ori	r22, 0x4A	; 74
     b92:	6a 64       	ori	r22, 0x4A	; 74
     b94:	6a 64       	ori	r22, 0x4A	; 74
     b96:	ea 62       	ori	r30, 0x2A	; 42
     b98:	ca 62       	ori	r28, 0x2A	; 42
     b9a:	d2 62       	ori	r29, 0x22	; 34
     b9c:	6a 64       	ori	r22, 0x4A	; 74
     b9e:	6a 64       	ori	r22, 0x4A	; 74
     ba0:	6a 64       	ori	r22, 0x4A	; 74
     ba2:	c2 62       	ori	r28, 0x22	; 34
     ba4:	6a 64       	ori	r22, 0x4A	; 74
     ba6:	6a 64       	ori	r22, 0x4A	; 74
     ba8:	6a 64       	ori	r22, 0x4A	; 74
     baa:	6a 64       	ori	r22, 0x4A	; 74
     bac:	6a 64       	ori	r22, 0x4A	; 74
     bae:	6a 64       	ori	r22, 0x4A	; 74
     bb0:	6a 64       	ori	r22, 0x4A	; 74
     bb2:	6a 64       	ori	r22, 0x4A	; 74
     bb4:	6a 64       	ori	r22, 0x4A	; 74
     bb6:	f2 62       	ori	r31, 0x22	; 34
     bb8:	da 62       	ori	r29, 0x2A	; 42
     bba:	e2 62       	ori	r30, 0x22	; 34
     bbc:	6a 64       	ori	r22, 0x4A	; 74
     bbe:	6a 64       	ori	r22, 0x4A	; 74
     bc0:	6a 64       	ori	r22, 0x4A	; 74
     bc2:	6a 64       	ori	r22, 0x4A	; 74
     bc4:	6a 64       	ori	r22, 0x4A	; 74
     bc6:	6a 64       	ori	r22, 0x4A	; 74
     bc8:	6a 64       	ori	r22, 0x4A	; 74
     bca:	6a 64       	ori	r22, 0x4A	; 74
     bcc:	6a 64       	ori	r22, 0x4A	; 74
     bce:	6a 64       	ori	r22, 0x4A	; 74
     bd0:	6a 64       	ori	r22, 0x4A	; 74
     bd2:	6a 64       	ori	r22, 0x4A	; 74
     bd4:	6a 64       	ori	r22, 0x4A	; 74
     bd6:	6a 64       	ori	r22, 0x4A	; 74
     bd8:	6a 64       	ori	r22, 0x4A	; 74
     bda:	6a 64       	ori	r22, 0x4A	; 74
     bdc:	6a 64       	ori	r22, 0x4A	; 74
     bde:	6a 64       	ori	r22, 0x4A	; 74
     be0:	6a 64       	ori	r22, 0x4A	; 74
     be2:	6a 64       	ori	r22, 0x4A	; 74
     be4:	6a 64       	ori	r22, 0x4A	; 74
     be6:	6a 64       	ori	r22, 0x4A	; 74
     be8:	6a 64       	ori	r22, 0x4A	; 74
     bea:	6a 64       	ori	r22, 0x4A	; 74
     bec:	6a 64       	ori	r22, 0x4A	; 74
     bee:	6a 64       	ori	r22, 0x4A	; 74
     bf0:	2b 64       	ori	r18, 0x4B	; 75
     bf2:	33 64       	ori	r19, 0x43	; 67
     bf4:	6a 64       	ori	r22, 0x4A	; 74
     bf6:	6a 64       	ori	r22, 0x4A	; 74
     bf8:	43 64       	ori	r20, 0x43	; 67
     bfa:	4b 64       	ori	r20, 0x4B	; 75
     bfc:	6a 64       	ori	r22, 0x4A	; 74
     bfe:	6a 64       	ori	r22, 0x4A	; 74
     c00:	5b 64       	ori	r21, 0x4B	; 75
     c02:	63 64       	ori	r22, 0x43	; 67
     c04:	6a 64       	ori	r22, 0x4A	; 74
     c06:	6a 64       	ori	r22, 0x4A	; 74
     c08:	6a 64       	ori	r22, 0x4A	; 74
     c0a:	6a 64       	ori	r22, 0x4A	; 74
     c0c:	6a 64       	ori	r22, 0x4A	; 74
     c0e:	6a 64       	ori	r22, 0x4A	; 74
     c10:	6a 64       	ori	r22, 0x4A	; 74
     c12:	6a 64       	ori	r22, 0x4A	; 74
     c14:	6a 64       	ori	r22, 0x4A	; 74
     c16:	6a 64       	ori	r22, 0x4A	; 74
     c18:	6a 64       	ori	r22, 0x4A	; 74
     c1a:	6a 64       	ori	r22, 0x4A	; 74
     c1c:	6a 64       	ori	r22, 0x4A	; 74
     c1e:	6a 64       	ori	r22, 0x4A	; 74
     c20:	6a 64       	ori	r22, 0x4A	; 74
     c22:	6a 64       	ori	r22, 0x4A	; 74
     c24:	6a 64       	ori	r22, 0x4A	; 74
     c26:	6a 64       	ori	r22, 0x4A	; 74
     c28:	6a 64       	ori	r22, 0x4A	; 74
     c2a:	6a 64       	ori	r22, 0x4A	; 74
     c2c:	6a 64       	ori	r22, 0x4A	; 74
     c2e:	6a 64       	ori	r22, 0x4A	; 74
     c30:	6a 64       	ori	r22, 0x4A	; 74
     c32:	6a 64       	ori	r22, 0x4A	; 74
     c34:	23 64       	ori	r18, 0x43	; 67
     c36:	6a 64       	ori	r22, 0x4A	; 74
     c38:	3b 64       	ori	r19, 0x4B	; 75
     c3a:	6a 64       	ori	r22, 0x4A	; 74
     c3c:	53 64       	ori	r21, 0x43	; 67
     c3e:	6a 64       	ori	r22, 0x4A	; 74
     c40:	1b 64       	ori	r17, 0x4B	; 75
     c42:	6a 64       	ori	r22, 0x4A	; 74
     c44:	6a 64       	ori	r22, 0x4A	; 74
     c46:	6a 64       	ori	r22, 0x4A	; 74
     c48:	6a 64       	ori	r22, 0x4A	; 74
     c4a:	6a 64       	ori	r22, 0x4A	; 74
     c4c:	6a 64       	ori	r22, 0x4A	; 74
     c4e:	6a 64       	ori	r22, 0x4A	; 74
     c50:	6a 64       	ori	r22, 0x4A	; 74
     c52:	6a 64       	ori	r22, 0x4A	; 74
     c54:	6a 64       	ori	r22, 0x4A	; 74
     c56:	6a 64       	ori	r22, 0x4A	; 74
     c58:	6a 64       	ori	r22, 0x4A	; 74
     c5a:	6a 64       	ori	r22, 0x4A	; 74
     c5c:	6a 64       	ori	r22, 0x4A	; 74
     c5e:	6a 64       	ori	r22, 0x4A	; 74
     c60:	6a 64       	ori	r22, 0x4A	; 74
     c62:	6a 64       	ori	r22, 0x4A	; 74
     c64:	6a 64       	ori	r22, 0x4A	; 74
     c66:	6a 64       	ori	r22, 0x4A	; 74
     c68:	6a 64       	ori	r22, 0x4A	; 74
     c6a:	6a 64       	ori	r22, 0x4A	; 74
     c6c:	6a 64       	ori	r22, 0x4A	; 74
     c6e:	6a 64       	ori	r22, 0x4A	; 74
     c70:	fa 62       	ori	r31, 0x2A	; 42
     c72:	02 63       	ori	r16, 0x32	; 50
     c74:	1a 63       	ori	r17, 0x3A	; 58
     c76:	12 63       	ori	r17, 0x32	; 50
     c78:	2a 63       	ori	r18, 0x3A	; 58
     c7a:	52 63       	ori	r21, 0x32	; 50
     c7c:	3a 63       	ori	r19, 0x3A	; 58
     c7e:	42 63       	ori	r20, 0x32	; 50
     c80:	6a 64       	ori	r22, 0x4A	; 74
     c82:	6a 64       	ori	r22, 0x4A	; 74
     c84:	6a 64       	ori	r22, 0x4A	; 74
     c86:	6a 64       	ori	r22, 0x4A	; 74
     c88:	6a 64       	ori	r22, 0x4A	; 74
     c8a:	6a 64       	ori	r22, 0x4A	; 74
     c8c:	6a 64       	ori	r22, 0x4A	; 74
     c8e:	6a 64       	ori	r22, 0x4A	; 74
     c90:	6a 64       	ori	r22, 0x4A	; 74
     c92:	6a 64       	ori	r22, 0x4A	; 74
     c94:	6a 64       	ori	r22, 0x4A	; 74
     c96:	6a 64       	ori	r22, 0x4A	; 74
     c98:	6a 64       	ori	r22, 0x4A	; 74
     c9a:	6a 64       	ori	r22, 0x4A	; 74
     c9c:	6a 64       	ori	r22, 0x4A	; 74
     c9e:	6a 64       	ori	r22, 0x4A	; 74
     ca0:	6a 64       	ori	r22, 0x4A	; 74
     ca2:	6a 64       	ori	r22, 0x4A	; 74
     ca4:	6a 64       	ori	r22, 0x4A	; 74
     ca6:	6a 64       	ori	r22, 0x4A	; 74
     ca8:	6a 64       	ori	r22, 0x4A	; 74
     caa:	6a 64       	ori	r22, 0x4A	; 74
     cac:	6a 64       	ori	r22, 0x4A	; 74
     cae:	6a 64       	ori	r22, 0x4A	; 74
     cb0:	6a 64       	ori	r22, 0x4A	; 74
     cb2:	03 64       	ori	r16, 0x43	; 67
     cb4:	0b 64       	ori	r16, 0x4B	; 75
     cb6:	13 64       	ori	r17, 0x43	; 67
     cb8:	6a 64       	ori	r22, 0x4A	; 74
     cba:	6a 64       	ori	r22, 0x4A	; 74
     cbc:	6a 64       	ori	r22, 0x4A	; 74
     cbe:	6a 64       	ori	r22, 0x4A	; 74
     cc0:	6a 64       	ori	r22, 0x4A	; 74
     cc2:	6a 64       	ori	r22, 0x4A	; 74
     cc4:	fb 63       	ori	r31, 0x3B	; 59
     cc6:	84 64       	ori	r24, 0x44	; 68
     cc8:	24 66       	ori	r18, 0x64	; 100
     cca:	24 66       	ori	r18, 0x64	; 100
     ccc:	bd 65       	ori	r27, 0x5D	; 93
     cce:	24 66       	ori	r18, 0x64	; 100
     cd0:	24 66       	ori	r18, 0x64	; 100
     cd2:	24 66       	ori	r18, 0x64	; 100
     cd4:	24 66       	ori	r18, 0x64	; 100
     cd6:	24 66       	ori	r18, 0x64	; 100
     cd8:	24 66       	ori	r18, 0x64	; 100
     cda:	24 66       	ori	r18, 0x64	; 100
     cdc:	24 66       	ori	r18, 0x64	; 100
     cde:	24 66       	ori	r18, 0x64	; 100
     ce0:	24 66       	ori	r18, 0x64	; 100
     ce2:	24 66       	ori	r18, 0x64	; 100
     ce4:	24 66       	ori	r18, 0x64	; 100
     ce6:	24 66       	ori	r18, 0x64	; 100
     ce8:	24 66       	ori	r18, 0x64	; 100
     cea:	24 66       	ori	r18, 0x64	; 100
     cec:	8c 64       	ori	r24, 0x4C	; 76
     cee:	24 66       	ori	r18, 0x64	; 100
     cf0:	94 64       	ori	r25, 0x44	; 68
     cf2:	24 66       	ori	r18, 0x64	; 100
     cf4:	24 66       	ori	r18, 0x64	; 100
     cf6:	24 66       	ori	r18, 0x64	; 100
     cf8:	24 66       	ori	r18, 0x64	; 100
     cfa:	24 66       	ori	r18, 0x64	; 100
     cfc:	24 66       	ori	r18, 0x64	; 100
     cfe:	24 66       	ori	r18, 0x64	; 100
     d00:	24 66       	ori	r18, 0x64	; 100
     d02:	24 66       	ori	r18, 0x64	; 100
     d04:	24 66       	ori	r18, 0x64	; 100
     d06:	24 66       	ori	r18, 0x64	; 100
     d08:	24 66       	ori	r18, 0x64	; 100
     d0a:	24 66       	ori	r18, 0x64	; 100
     d0c:	dc 64       	ori	r29, 0x4C	; 76
     d0e:	9c 64       	ori	r25, 0x4C	; 76
     d10:	bc 64       	ori	r27, 0x4C	; 76
     d12:	24 66       	ori	r18, 0x64	; 100
     d14:	24 66       	ori	r18, 0x64	; 100
     d16:	24 66       	ori	r18, 0x64	; 100
     d18:	24 66       	ori	r18, 0x64	; 100
     d1a:	24 66       	ori	r18, 0x64	; 100
     d1c:	24 66       	ori	r18, 0x64	; 100
     d1e:	24 66       	ori	r18, 0x64	; 100
     d20:	24 66       	ori	r18, 0x64	; 100
     d22:	24 66       	ori	r18, 0x64	; 100
     d24:	24 66       	ori	r18, 0x64	; 100
     d26:	24 66       	ori	r18, 0x64	; 100
     d28:	24 66       	ori	r18, 0x64	; 100
     d2a:	24 66       	ori	r18, 0x64	; 100
     d2c:	24 66       	ori	r18, 0x64	; 100
     d2e:	24 66       	ori	r18, 0x64	; 100
     d30:	24 66       	ori	r18, 0x64	; 100
     d32:	24 66       	ori	r18, 0x64	; 100
     d34:	24 66       	ori	r18, 0x64	; 100
     d36:	24 66       	ori	r18, 0x64	; 100
     d38:	24 66       	ori	r18, 0x64	; 100
     d3a:	24 66       	ori	r18, 0x64	; 100
     d3c:	24 66       	ori	r18, 0x64	; 100
     d3e:	24 66       	ori	r18, 0x64	; 100
     d40:	24 66       	ori	r18, 0x64	; 100
     d42:	24 66       	ori	r18, 0x64	; 100
     d44:	24 66       	ori	r18, 0x64	; 100
     d46:	dd 65       	ori	r29, 0x5D	; 93
     d48:	ed 65       	ori	r30, 0x5D	; 93
     d4a:	24 66       	ori	r18, 0x64	; 100
     d4c:	24 66       	ori	r18, 0x64	; 100
     d4e:	f5 65       	ori	r31, 0x55	; 85
     d50:	05 66       	ori	r16, 0x65	; 101
     d52:	24 66       	ori	r18, 0x64	; 100
     d54:	24 66       	ori	r18, 0x64	; 100
     d56:	0d 66       	ori	r16, 0x6D	; 109
     d58:	1d 66       	ori	r17, 0x6D	; 109
     d5a:	24 66       	ori	r18, 0x64	; 100
     d5c:	24 66       	ori	r18, 0x64	; 100
     d5e:	24 66       	ori	r18, 0x64	; 100
     d60:	24 66       	ori	r18, 0x64	; 100
     d62:	24 66       	ori	r18, 0x64	; 100
     d64:	24 66       	ori	r18, 0x64	; 100
     d66:	24 66       	ori	r18, 0x64	; 100
     d68:	24 66       	ori	r18, 0x64	; 100
     d6a:	24 66       	ori	r18, 0x64	; 100
     d6c:	24 66       	ori	r18, 0x64	; 100
     d6e:	24 66       	ori	r18, 0x64	; 100
     d70:	24 66       	ori	r18, 0x64	; 100
     d72:	24 66       	ori	r18, 0x64	; 100
     d74:	24 66       	ori	r18, 0x64	; 100
     d76:	24 66       	ori	r18, 0x64	; 100
     d78:	24 66       	ori	r18, 0x64	; 100
     d7a:	24 66       	ori	r18, 0x64	; 100
     d7c:	24 66       	ori	r18, 0x64	; 100
     d7e:	24 66       	ori	r18, 0x64	; 100
     d80:	24 66       	ori	r18, 0x64	; 100
     d82:	24 66       	ori	r18, 0x64	; 100
     d84:	24 66       	ori	r18, 0x64	; 100
     d86:	24 66       	ori	r18, 0x64	; 100
     d88:	24 66       	ori	r18, 0x64	; 100
     d8a:	24 66       	ori	r18, 0x64	; 100
     d8c:	24 66       	ori	r18, 0x64	; 100
     d8e:	24 66       	ori	r18, 0x64	; 100
     d90:	24 66       	ori	r18, 0x64	; 100
     d92:	24 66       	ori	r18, 0x64	; 100
     d94:	24 66       	ori	r18, 0x64	; 100
     d96:	24 66       	ori	r18, 0x64	; 100
     d98:	24 66       	ori	r18, 0x64	; 100
     d9a:	24 66       	ori	r18, 0x64	; 100
     d9c:	24 66       	ori	r18, 0x64	; 100
     d9e:	24 66       	ori	r18, 0x64	; 100
     da0:	24 66       	ori	r18, 0x64	; 100
     da2:	24 66       	ori	r18, 0x64	; 100
     da4:	24 66       	ori	r18, 0x64	; 100
     da6:	24 66       	ori	r18, 0x64	; 100
     da8:	24 66       	ori	r18, 0x64	; 100
     daa:	24 66       	ori	r18, 0x64	; 100
     dac:	24 66       	ori	r18, 0x64	; 100
     dae:	24 66       	ori	r18, 0x64	; 100
     db0:	24 66       	ori	r18, 0x64	; 100
     db2:	24 66       	ori	r18, 0x64	; 100
     db4:	24 66       	ori	r18, 0x64	; 100
     db6:	24 66       	ori	r18, 0x64	; 100
     db8:	24 66       	ori	r18, 0x64	; 100
     dba:	24 66       	ori	r18, 0x64	; 100
     dbc:	24 66       	ori	r18, 0x64	; 100
     dbe:	24 66       	ori	r18, 0x64	; 100
     dc0:	24 66       	ori	r18, 0x64	; 100
     dc2:	24 66       	ori	r18, 0x64	; 100
     dc4:	24 66       	ori	r18, 0x64	; 100
     dc6:	fc 64       	ori	r31, 0x4C	; 76
     dc8:	24 66       	ori	r18, 0x64	; 100
     dca:	24 66       	ori	r18, 0x64	; 100
     dcc:	24 66       	ori	r18, 0x64	; 100
     dce:	24 66       	ori	r18, 0x64	; 100
     dd0:	14 65       	ori	r17, 0x54	; 84
     dd2:	04 65       	ori	r16, 0x54	; 84
     dd4:	24 66       	ori	r18, 0x64	; 100
     dd6:	24 66       	ori	r18, 0x64	; 100
     dd8:	24 66       	ori	r18, 0x64	; 100
     dda:	24 66       	ori	r18, 0x64	; 100
     ddc:	24 66       	ori	r18, 0x64	; 100
     dde:	24 66       	ori	r18, 0x64	; 100
     de0:	24 66       	ori	r18, 0x64	; 100
     de2:	24 66       	ori	r18, 0x64	; 100
     de4:	24 66       	ori	r18, 0x64	; 100
     de6:	24 66       	ori	r18, 0x64	; 100
     de8:	24 66       	ori	r18, 0x64	; 100
     dea:	24 66       	ori	r18, 0x64	; 100
     dec:	24 66       	ori	r18, 0x64	; 100
     dee:	24 66       	ori	r18, 0x64	; 100
     df0:	24 66       	ori	r18, 0x64	; 100
     df2:	24 66       	ori	r18, 0x64	; 100
     df4:	24 66       	ori	r18, 0x64	; 100
     df6:	24 66       	ori	r18, 0x64	; 100
     df8:	24 66       	ori	r18, 0x64	; 100
     dfa:	24 66       	ori	r18, 0x64	; 100
     dfc:	24 66       	ori	r18, 0x64	; 100
     dfe:	24 66       	ori	r18, 0x64	; 100
     e00:	24 66       	ori	r18, 0x64	; 100
     e02:	24 66       	ori	r18, 0x64	; 100
     e04:	24 66       	ori	r18, 0x64	; 100
     e06:	24 66       	ori	r18, 0x64	; 100
     e08:	c5 65       	ori	r28, 0x55	; 85
     e0a:	cd 65       	ori	r28, 0x5D	; 93
     e0c:	d5 65       	ori	r29, 0x55	; 85
     e0e:	3e 66       	ori	r19, 0x6E	; 110
     e10:	46 66       	ori	r20, 0x66	; 102
     e12:	de 67       	ori	r29, 0x7E	; 126
     e14:	de 67       	ori	r29, 0x7E	; 126
     e16:	de 67       	ori	r29, 0x7E	; 126
     e18:	de 67       	ori	r29, 0x7E	; 126
     e1a:	de 67       	ori	r29, 0x7E	; 126
     e1c:	de 67       	ori	r29, 0x7E	; 126
     e1e:	de 67       	ori	r29, 0x7E	; 126
     e20:	de 67       	ori	r29, 0x7E	; 126
     e22:	de 67       	ori	r29, 0x7E	; 126
     e24:	de 67       	ori	r29, 0x7E	; 126
     e26:	de 67       	ori	r29, 0x7E	; 126
     e28:	de 67       	ori	r29, 0x7E	; 126
     e2a:	de 67       	ori	r29, 0x7E	; 126
     e2c:	de 67       	ori	r29, 0x7E	; 126
     e2e:	de 67       	ori	r29, 0x7E	; 126
     e30:	de 67       	ori	r29, 0x7E	; 126
     e32:	de 67       	ori	r29, 0x7E	; 126
     e34:	56 66       	ori	r21, 0x66	; 102
     e36:	76 66       	ori	r23, 0x66	; 102
     e38:	de 67       	ori	r29, 0x7E	; 126
     e3a:	de 67       	ori	r29, 0x7E	; 126
     e3c:	de 67       	ori	r29, 0x7E	; 126
     e3e:	de 67       	ori	r29, 0x7E	; 126
     e40:	4e 66       	ori	r20, 0x6E	; 110
     e42:	de 67       	ori	r29, 0x7E	; 126
     e44:	de 67       	ori	r29, 0x7E	; 126
     e46:	de 67       	ori	r29, 0x7E	; 126
     e48:	de 67       	ori	r29, 0x7E	; 126
     e4a:	de 67       	ori	r29, 0x7E	; 126
     e4c:	de 67       	ori	r29, 0x7E	; 126
     e4e:	de 67       	ori	r29, 0x7E	; 126
     e50:	de 67       	ori	r29, 0x7E	; 126
     e52:	de 67       	ori	r29, 0x7E	; 126
     e54:	be 66       	ori	r27, 0x6E	; 110
     e56:	7e 66       	ori	r23, 0x6E	; 110
     e58:	9e 66       	ori	r25, 0x6E	; 110
     e5a:	de 67       	ori	r29, 0x7E	; 126
     e5c:	de 67       	ori	r29, 0x7E	; 126
     e5e:	de 67       	ori	r29, 0x7E	; 126
     e60:	de 67       	ori	r29, 0x7E	; 126
     e62:	de 67       	ori	r29, 0x7E	; 126
     e64:	de 67       	ori	r29, 0x7E	; 126
     e66:	de 67       	ori	r29, 0x7E	; 126
     e68:	de 67       	ori	r29, 0x7E	; 126
     e6a:	de 67       	ori	r29, 0x7E	; 126
     e6c:	de 67       	ori	r29, 0x7E	; 126
     e6e:	de 67       	ori	r29, 0x7E	; 126
     e70:	de 67       	ori	r29, 0x7E	; 126
     e72:	de 67       	ori	r29, 0x7E	; 126
     e74:	de 67       	ori	r29, 0x7E	; 126
     e76:	de 67       	ori	r29, 0x7E	; 126
     e78:	de 67       	ori	r29, 0x7E	; 126
     e7a:	de 67       	ori	r29, 0x7E	; 126
     e7c:	de 67       	ori	r29, 0x7E	; 126
     e7e:	de 67       	ori	r29, 0x7E	; 126
     e80:	de 67       	ori	r29, 0x7E	; 126
     e82:	de 67       	ori	r29, 0x7E	; 126
     e84:	de 67       	ori	r29, 0x7E	; 126
     e86:	de 67       	ori	r29, 0x7E	; 126
     e88:	de 67       	ori	r29, 0x7E	; 126
     e8a:	de 67       	ori	r29, 0x7E	; 126
     e8c:	de 67       	ori	r29, 0x7E	; 126
     e8e:	b7 67       	ori	r27, 0x77	; 119
     e90:	de 67       	ori	r29, 0x7E	; 126
     e92:	de 67       	ori	r29, 0x7E	; 126
     e94:	de 67       	ori	r29, 0x7E	; 126
     e96:	c7 67       	ori	r28, 0x77	; 119
     e98:	de 67       	ori	r29, 0x7E	; 126
     e9a:	de 67       	ori	r29, 0x7E	; 126
     e9c:	de 67       	ori	r29, 0x7E	; 126
     e9e:	d7 67       	ori	r29, 0x77	; 119
     ea0:	de 67       	ori	r29, 0x7E	; 126
     ea2:	de 67       	ori	r29, 0x7E	; 126
     ea4:	de 67       	ori	r29, 0x7E	; 126
     ea6:	de 67       	ori	r29, 0x7E	; 126
     ea8:	de 67       	ori	r29, 0x7E	; 126
     eaa:	de 67       	ori	r29, 0x7E	; 126
     eac:	de 67       	ori	r29, 0x7E	; 126
     eae:	de 67       	ori	r29, 0x7E	; 126
     eb0:	de 67       	ori	r29, 0x7E	; 126
     eb2:	de 67       	ori	r29, 0x7E	; 126
     eb4:	de 67       	ori	r29, 0x7E	; 126
     eb6:	de 67       	ori	r29, 0x7E	; 126
     eb8:	de 67       	ori	r29, 0x7E	; 126
     eba:	de 67       	ori	r29, 0x7E	; 126
     ebc:	de 67       	ori	r29, 0x7E	; 126
     ebe:	de 67       	ori	r29, 0x7E	; 126
     ec0:	de 67       	ori	r29, 0x7E	; 126
     ec2:	de 67       	ori	r29, 0x7E	; 126
     ec4:	de 67       	ori	r29, 0x7E	; 126
     ec6:	de 67       	ori	r29, 0x7E	; 126
     ec8:	de 67       	ori	r29, 0x7E	; 126
     eca:	de 67       	ori	r29, 0x7E	; 126
     ecc:	de 67       	ori	r29, 0x7E	; 126
     ece:	de 67       	ori	r29, 0x7E	; 126
     ed0:	de 67       	ori	r29, 0x7E	; 126
     ed2:	af 67       	ori	r26, 0x7F	; 127
     ed4:	de 67       	ori	r29, 0x7E	; 126
     ed6:	bf 67       	ori	r27, 0x7F	; 127
     ed8:	de 67       	ori	r29, 0x7E	; 126
     eda:	cf 67       	ori	r28, 0x7F	; 127
     edc:	de 67       	ori	r29, 0x7E	; 126
     ede:	de 67       	ori	r29, 0x7E	; 126
     ee0:	de 67       	ori	r29, 0x7E	; 126
     ee2:	de 67       	ori	r29, 0x7E	; 126
     ee4:	de 67       	ori	r29, 0x7E	; 126
     ee6:	de 67       	ori	r29, 0x7E	; 126
     ee8:	de 67       	ori	r29, 0x7E	; 126
     eea:	de 67       	ori	r29, 0x7E	; 126
     eec:	de 67       	ori	r29, 0x7E	; 126
     eee:	de 67       	ori	r29, 0x7E	; 126
     ef0:	de 67       	ori	r29, 0x7E	; 126
     ef2:	de 67       	ori	r29, 0x7E	; 126
     ef4:	de 67       	ori	r29, 0x7E	; 126
     ef6:	de 67       	ori	r29, 0x7E	; 126
     ef8:	de 67       	ori	r29, 0x7E	; 126
     efa:	de 67       	ori	r29, 0x7E	; 126
     efc:	de 67       	ori	r29, 0x7E	; 126
     efe:	de 67       	ori	r29, 0x7E	; 126
     f00:	de 67       	ori	r29, 0x7E	; 126
     f02:	de 67       	ori	r29, 0x7E	; 126
     f04:	de 67       	ori	r29, 0x7E	; 126
     f06:	de 67       	ori	r29, 0x7E	; 126
     f08:	de 67       	ori	r29, 0x7E	; 126
     f0a:	de 67       	ori	r29, 0x7E	; 126
     f0c:	de 67       	ori	r29, 0x7E	; 126
     f0e:	66 66       	ori	r22, 0x66	; 102
     f10:	de 66       	ori	r29, 0x6E	; 110
     f12:	de 67       	ori	r29, 0x7E	; 126
     f14:	de 67       	ori	r29, 0x7E	; 126
     f16:	de 67       	ori	r29, 0x7E	; 126
     f18:	ee 66       	ori	r30, 0x6E	; 110
     f1a:	de 67       	ori	r29, 0x7E	; 126
     f1c:	de 67       	ori	r29, 0x7E	; 126
     f1e:	de 67       	ori	r29, 0x7E	; 126
     f20:	de 67       	ori	r29, 0x7E	; 126
     f22:	de 67       	ori	r29, 0x7E	; 126
     f24:	de 67       	ori	r29, 0x7E	; 126
     f26:	de 67       	ori	r29, 0x7E	; 126
     f28:	de 67       	ori	r29, 0x7E	; 126
     f2a:	de 67       	ori	r29, 0x7E	; 126
     f2c:	de 67       	ori	r29, 0x7E	; 126
     f2e:	de 67       	ori	r29, 0x7E	; 126
     f30:	de 67       	ori	r29, 0x7E	; 126
     f32:	de 67       	ori	r29, 0x7E	; 126
     f34:	de 67       	ori	r29, 0x7E	; 126
     f36:	de 67       	ori	r29, 0x7E	; 126
     f38:	de 67       	ori	r29, 0x7E	; 126
     f3a:	de 67       	ori	r29, 0x7E	; 126
     f3c:	de 67       	ori	r29, 0x7E	; 126
     f3e:	de 67       	ori	r29, 0x7E	; 126
     f40:	de 67       	ori	r29, 0x7E	; 126
     f42:	de 67       	ori	r29, 0x7E	; 126
     f44:	de 67       	ori	r29, 0x7E	; 126
     f46:	de 67       	ori	r29, 0x7E	; 126
     f48:	de 67       	ori	r29, 0x7E	; 126
     f4a:	de 67       	ori	r29, 0x7E	; 126
     f4c:	de 67       	ori	r29, 0x7E	; 126
     f4e:	de 67       	ori	r29, 0x7E	; 126
     f50:	9f 67       	ori	r25, 0x7F	; 127
     f52:	a7 67       	ori	r26, 0x77	; 119
     f54:	de 67       	ori	r29, 0x7E	; 126
     f56:	de 67       	ori	r29, 0x7E	; 126
     f58:	de 67       	ori	r29, 0x7E	; 126
     f5a:	de 67       	ori	r29, 0x7E	; 126
     f5c:	de 67       	ori	r29, 0x7E	; 126
     f5e:	de 67       	ori	r29, 0x7E	; 126
     f60:	de 67       	ori	r29, 0x7E	; 126
     f62:	97 67       	ori	r25, 0x77	; 119

00000f64 <__trampolines_end>:
     f64:	54 55       	subi	r21, 0x54	; 84
     f66:	52 4e       	sbci	r21, 0xE2	; 226
     f68:	20 4f       	sbci	r18, 0xF0	; 240
     f6a:	46 46       	sbci	r20, 0x66	; 102
     f6c:	20 4b       	sbci	r18, 0xB0	; 176
     f6e:	45 59       	subi	r20, 0x95	; 149
	...

00000f71 <__c.5302>:
     f71:	45 31 33 20 2d 20 4f 56 45 52 56 4f 4c 54 41 47     E13 - OVERVOLTAG
     f81:	45 00                                               E.

00000f83 <__c.5313>:
     f83:	4f 56 45 52 46 4c 4f 57 00                          OVERFLOW.

00000f8c <__c.5311>:
     f8c:	43 41 4e 20 42 55 46 46 45 52 00                    CAN BUFFER.

00000f97 <__c.5384>:
     f97:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

00000fa3 <__c.5382>:
     fa3:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00000fb1 <__c.5380>:
     fb1:	43 41 4c 49 42 52 41 54 49 4f 4e 20 43 4f 4d 50     CALIBRATION COMP
     fc1:	4c 45 54 45 00                                      LETE.

00000fc6 <__c.5378>:
     fc6:	50 45 44 41 4c 20 54 4f 20 46 4c 4f 4f 52 00        PEDAL TO FLOOR.

00000fd5 <__c.5376>:
     fd5:	4e 4f 57 20 46 55 4c 4c 59 20 50 52 45 53 53 00     NOW FULLY PRESS.

00000fe5 <__c.5367>:
     fe5:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

00000ff2 <__c.5365>:
     ff2:	45 31 31 20 2d 20 41 33 20 54 4f 50 20 45 52 52     E11 - A3 TOP ERR
    1002:	4f 52 00                                            OR.

00001005 <__c.5363>:
    1005:	45 30 33 20 2d 20 41 32 20 54 4f 50 20 45 52 52     E03 - A2 TOP ERR
    1015:	4f 52 00                                            OR.

00001018 <__c.5358>:
    1018:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

00001025 <__c.5356>:
    1025:	45 32 32 20 2d 20 42 4d 20 4f 56 45 52 4c 4f 41     E22 - BM OVERLOA
    1035:	44 00                                               D.

00001037 <__c.5354>:
    1037:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

00001044 <__c.5352>:
    1044:	45 32 31 20 2d 20 38 37 30 31 20 46 41 55 4c 54     E21 - 8701 FAULT
	...

00001055 <__c.5350>:
    1055:	53 57 49 54 43 48 20 4f 50 45 4e 00                 SWITCH OPEN.

00001061 <__c.5348>:
    1061:	45 31 34 20 2d 20 53 45 41 54 2f 42 52 41 4b 45     E14 - SEAT/BRAKE
	...

00001072 <__c.5346>:
    1072:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

0000107f <__c.5344>:
    107f:	45 30 31 20 2d 20 46 55 53 45 20 42 4c 4f 57 4e     E01 - FUSE BLOWN
	...

00001090 <__c.5342>:
    1090:	46 41 49 4c 00                                      FAIL.

00001095 <__c.5340>:
    1095:	45 32 30 20 2d 20 53 44 20 43 41 52 44 00           E20 - SD CARD.

000010a3 <__c.5338>:
    10a3:	55 4e 41 56 41 49 4c 41 42 4c 45 00                 UNAVAILABLE.

000010af <__c.5336>:
    10af:	45 31 39 20 2d 20 53 44 20 43 41 52 44 00           E19 - SD CARD.

000010bd <__c.5334>:
    10bd:	4f 56 45 52 46 4c 4f 57 00                          OVERFLOW.

000010c6 <__c.5332>:
    10c6:	53 44 20 42 55 46 46 45 52 00                       SD BUFFER.

000010d0 <__c.5330>:
    10d0:	4f 56 45 52 46 4c 4f 57 00                          OVERFLOW.

000010d9 <__c.5328>:
    10d9:	43 41 4e 20 42 55 46 46 45 52 00                    CAN BUFFER.

000010e4 <__c.5326>:
    10e4:	46 41 49 4c 2d 44 45 46 41 55 4c 54 53 20 4c 4f     FAIL-DEFAULTS LO
    10f4:	41 44 45 44 00                                      ADED.

000010f9 <__c.5324>:
    10f9:	45 31 38 20 2d 20 4d 4f 54 4f 52 20 53 45 54 54     E18 - MOTOR SETT
    1109:	49 4e 47 53 00                                      INGS.

0000110e <__c.5321>:
    110e:	4f 56 45 52 4c 4f 41 44 00                          OVERLOAD.

00001117 <__c.5319>:
    1117:	45 31 32 20 2d 20 44 52 49 56 45 20 4d 4f 54 4f     E12 - DRIVE MOTO
    1127:	52 00                                               R.

00001129 <__c.5317>:
    1129:	41 43 43 45 4c 45 52 41 54 4f 52 20 50 45 44 41     ACCELERATOR PEDA
    1139:	4c 00                                               L.

0000113b <__c.5315>:
    113b:	45 31 30 20 2d 20 52 45 4c 45 41 53 45 00           E10 - RELEASE.

00001149 <__c.5313>:
    1149:	53 57 2d 4f 55 54 20 4f 46 20 4e 45 55 54 52 41     SW-OUT OF NEUTRA
    1159:	4c 00                                               L.

0000115b <__c.5311>:
    115b:	45 31 35 2d 45 4d 45 52 47 45 4e 43 59 20 44 52     E15-EMERGENCY DR
    116b:	49 56 45 00                                         IVE.

0000116f <__c.5309>:
    116f:	41 43 43 45 4c 45 52 41 54 4f 52 20 50 45 44 41     ACCELERATOR PEDA
    117f:	4c 00                                               L.

00001181 <__c.5307>:
    1181:	45 31 30 20 2d 20 52 45 4c 45 41 53 45 00           E10 - RELEASE.

0000118f <__c.5305>:
    118f:	46 55 4e 43 54 49 4f 4e 49 4e 47 00                 FUNCTIONING.

0000119b <__c.5303>:
    119b:	45 30 39 20 2d 20 50 4f 54 20 4e 4f 54 00           E09 - POT NOT.

000011a9 <__c.5300>:
    11a9:	49 4e 20 41 33 2d 43 48 45 43 4b 20 57 49 52 49     IN A3-CHECK WIRI
    11b9:	4e 47 00                                            NG.

000011bc <__c.5298>:
    11bc:	45 31 37 20 2d 20 4b 45 59 20 49 4e 50 55 54 20     E17 - KEY INPUT 
    11cc:	4f 50 45 4e 00                                      OPEN.

000011d1 <__c.5612>:
    11d1:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000011de <__c.5610>:
    11de:	45 43 4f 20 4f 46 46 20 20 20 20 20 00              ECO OFF     .

000011eb <__c.5607>:
    11eb:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000011f8 <__c.5605>:
    11f8:	45 43 4f 20 4f 4e 20 20 20 20 20 20 00              ECO ON      .

00001205 <__c.5597>:
    1205:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001212 <__c.5595>:
    1212:	42 52 55 53 48 20 4f 4e 20 20 20 20 00              BRUSH ON    .

0000121f <__c.5593>:
    121f:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

0000122c <__c.5591>:
    122c:	42 52 55 53 48 20 4f 46 46 20 20 20 00              BRUSH OFF   .

00001239 <__c.5586>:
    1239:	50 52 45 53 53 55 52 45 20 4f 4e 20 00              PRESSURE ON .

00001246 <__c.5584>:
    1246:	45 58 54 52 41 20 20 20 20 20 20 20 00              EXTRA       .

00001253 <__c.5582>:
    1253:	50 52 45 53 53 55 52 45 20 4f 46 46 00              PRESSURE OFF.

00001260 <__c.5580>:
    1260:	45 58 54 52 41 20 20 20 20 20 20 20 00              EXTRA       .

0000126d <__c.5565>:
    126d:	48 4c 49 47 48 54 20 20 4f 4e 20 20 00              HLIGHT  ON  .

0000127a <__c.5563>:
    127a:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001287 <__c.5561>:
    1287:	48 4c 49 47 48 54 20 20 4f 4e 20 20 00              HLIGHT  ON  .

00001294 <__c.5559>:
    1294:	48 4c 49 47 48 54 20 20 4f 46 46 20 00              HLIGHT  OFF .

000012a1 <__c.5557>:
    12a1:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000012ae <__c.5555>:
    12ae:	48 4c 49 47 48 54 20 20 4f 46 46 20 00              HLIGHT  OFF .

000012bb <__c.5550>:
    12bb:	48 4f 52 4e 20 4f 4e 20 20 20 20 20 00              HORN ON     .

000012c8 <__c.5548>:
    12c8:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000012d5 <__c.5546>:
    12d5:	48 4f 52 4e 20 4f 4e 20 20 20 20 20 00              HORN ON     .

000012e2 <__c.5544>:
    12e2:	48 4f 52 4e 20 4f 46 46 20 20 20 20 00              HORN OFF    .

000012ef <__c.5542>:
    12ef:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000012fc <__c.5540>:
    12fc:	48 4f 52 4e 20 4f 46 46 20 20 20 20 00              HORN OFF    .

00001309 <__c.5535>:
    1309:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001316 <__c.5533>:
    1316:	56 41 43 55 55 4d 20 4f 4e 20 20 20 00              VACUUM ON   .

00001323 <__c.5531>:
    1323:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001330 <__c.5529>:
    1330:	56 41 43 55 55 4d 20 4f 46 46 20 20 00              VACUUM OFF  .

0000133d <__c.5523>:
    133d:	4d 45 44 2d 48 49 47 48 20 20 20 20 20 00           MED-HIGH     .

0000134b <__c.5521>:
    134b:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

00001358 <__c.5518>:
    1358:	4d 45 44 20 20 20 20 20 20 20 20 20 00              MED         .

00001365 <__c.5516>:
    1365:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

00001372 <__c.5513>:
    1372:	4c 4f 57 2d 4d 45 44 20 20 20 20 20 00              LOW-MED     .

0000137f <__c.5511>:
    137f:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

0000138c <__c.5508>:
    138c:	4c 4f 57 20 20 20 20 20 20 20 20 20 00              LOW         .

00001399 <__c.5506>:
    1399:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

000013a6 <__c.5502>:
    13a6:	4f 46 46 20 20 20 20 20 20 20 20 20 00              OFF         .

000013b3 <__c.5500>:
    13b3:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

000013c0 <__c.5492>:
    13c0:	48 49 47 48 20 20 20 20 20 20 20 20 20 00           HIGH         .

000013ce <__c.5490>:
    13ce:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

000013db <__c.5487>:
    13db:	4d 45 44 2d 48 49 47 48 20 20 20 20 20 00           MED-HIGH     .

000013e9 <__c.5485>:
    13e9:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

000013f6 <__c.5482>:
    13f6:	4d 45 44 20 20 20 20 20 20 20 20 20 00              MED         .

00001403 <__c.5480>:
    1403:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

00001410 <__c.5476>:
    1410:	4c 4f 57 2d 4d 45 44 20 20 20 20 20 00              LOW-MED     .

0000141d <__c.5474>:
    141d:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

0000142a <__c.5471>:
    142a:	4c 4f 57 20 20 20 20 20 20 20 20 20 00              LOW         .

00001437 <__c.5469>:
    1437:	44 45 54 20 50 55 4d 50 20 20 20 20 00              DET PUMP    .

00001444 <__c.5463>:
    1444:	4d 45 44 2d 48 49 47 48 20 20 20 20 20 00           MED-HIGH     .

00001452 <__c.5461>:
    1452:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

0000145f <__c.5458>:
    145f:	4d 45 44 20 20 20 20 20 20 20 20 20 00              MED         .

0000146c <__c.5456>:
    146c:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

00001479 <__c.5453>:
    1479:	4c 4f 57 2d 4d 45 44 20 20 20 20 20 00              LOW-MED     .

00001486 <__c.5451>:
    1486:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

00001493 <__c.5448>:
    1493:	4c 4f 57 20 20 20 20 20 20 20 20 20 00              LOW         .

000014a0 <__c.5446>:
    14a0:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

000014ad <__c.5442>:
    14ad:	4f 46 46 20 20 20 20 20 20 20 20 20 00              OFF         .

000014ba <__c.5440>:
    14ba:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

000014c7 <__c.5432>:
    14c7:	48 49 47 48 20 20 20 20 20 20 20 20 20 00           HIGH         .

000014d5 <__c.5430>:
    14d5:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

000014e2 <__c.5427>:
    14e2:	4d 45 44 2d 48 49 47 48 20 20 20 20 20 00           MED-HIGH     .

000014f0 <__c.5425>:
    14f0:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

000014fd <__c.5422>:
    14fd:	4d 45 44 20 20 20 20 20 20 20 20 20 00              MED         .

0000150a <__c.5420>:
    150a:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

00001517 <__c.5416>:
    1517:	4c 4f 57 2d 4d 45 44 20 20 20 20 20 00              LOW-MED     .

00001524 <__c.5414>:
    1524:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

00001531 <__c.5411>:
    1531:	4c 4f 57 20 20 20 20 20 20 20 20 20 00              LOW         .

0000153e <__c.5409>:
    153e:	57 41 54 45 52 20 50 55 4d 50 20 20 00              WATER PUMP  .

0000154b <__c.5378>:
    154b:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001558 <__c.5376>:
    1558:	52 45 56 45 52 53 45 20 20 20 20 20 00              REVERSE     .

00001565 <__c.5374>:
    1565:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001572 <__c.5372>:
    1572:	46 4f 52 57 41 52 44 20 20 20 20 20 00              FORWARD     .

0000157f <__c.5370>:
    157f:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

0000158c <__c.5368>:
    158c:	52 45 56 45 52 53 45 20 20 20 20 20 00              REVERSE     .

00001599 <__c.5343>:
    1599:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000015a6 <__c.5341>:
    15a6:	54 52 41 4e 53 50 4f 52 54 20 20 20 00              TRANSPORT   .

000015b3 <__c.5339>:
    15b3:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000015c0 <__c.5337>:
    15c0:	46 4f 52 57 41 52 44 20 20 20 20 20 20 00           FORWARD      .

000015ce <__c.5335>:
    15ce:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000015db <__c.5333>:
    15db:	54 52 41 4e 53 50 4f 52 54 20 20 20 00              TRANSPORT   .

000015e8 <__c.5328>:
    15e8:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000015f5 <__c.5326>:
    15f5:	54 52 41 4e 53 50 4f 52 54 20 4d 4f 44 45 00        TRANSPORT MODE.

00001604 <__c.5324>:
    1604:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001611 <__c.5322>:
    1611:	52 45 56 45 52 53 45 20 4d 4f 44 45 00              REVERSE MODE.

0000161e <__c.5303>:
    161e:	41 55 54 4f 20 4d 4f 44 45 20 20 20 00              AUTO MODE   .

0000162b <__c.5393>:
    162b:	46 55 4c 4c 00                                      FULL.

00001630 <__c.5391>:
    1630:	54 41 4e 4b 00                                      TANK.

00001635 <__c.5376>:
    1635:	46 55 4c 4c 00                                      FULL.

0000163a <__c.5374>:
    163a:	54 41 4e 4b 00                                      TANK.

0000163f <__c.5372>:
    163f:	46 41 53 54 00                                      FAST.

00001644 <__c.5370>:
    1644:	53 4c 4f 57 00                                      SLOW.

00001649 <__c.5368>:
    1649:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001656 <__c.5366>:
    1656:	48 4f 52 4e 20 4f 4e 20 20 20 20 20 00              HORN ON     .

00001663 <__c.5364>:
    1663:	50 52 45 53 53 55 52 45 20 4f 4e 20 00              PRESSURE ON .

00001670 <__c.5362>:
    1670:	45 58 54 52 41 20 20 20 20 20 20 20 00              EXTRA       .

0000167d <__c.5400>:
    167d:	42 41 54 54 45 52 59 20 54 59 50 45 3a 20 47 45     BATTERY TYPE: GE
    168d:	4c 00                                               L.

0000168f <__c.5398>:
    168f:	42 41 54 54 45 52 59 20 54 59 50 45 3a 20 41 47     BATTERY TYPE: AG
    169f:	4d 00                                               M.

000016a1 <__c.5396>:
    16a1:	42 41 54 54 45 52 59 20 54 59 50 45 3a 20 4c 45     BATTERY TYPE: LE
    16b1:	41 44 00                                            AD.

000016b4 <__c.5387>:
    16b4:	54 48 45 20 42 41 54 54 45 52 59 21 00              THE BATTERY!.

000016c1 <__c.5385>:
    16c1:	45 31 36 20 2d 20 43 48 41 52 47 45 00              E16 - CHARGE.

000016ce <__c.5381>:
    16ce:	42 41 54 54 45 52 59 20 4c 4f 57 21 00              BATTERY LOW!.

000016db <__c.5379>:
    16db:	53 57 49 54 43 48 20 4f 50 45 4e 00                 SWITCH OPEN.

000016e7 <__c.5377>:
    16e7:	45 31 34 20 2d 20 42 52 41 4b 45 2f 53 45 41 54     E14 - BRAKE/SEAT
	...

000016f8 <__c.5375>:
    16f8:	53 57 2d 4f 55 54 20 4f 46 20 4e 45 55 54 52 41     SW-OUT OF NEUTRA
    1708:	4c 00                                               L.

0000170a <__c.5373>:
    170a:	45 31 35 20 2d 45 4d 45 52 47 45 4e 43 59 20 44     E15 -EMERGENCY D
    171a:	52 49 56 45 00                                      RIVE.

0000171f <__c.5371>:
    171f:	41 43 43 45 4c 45 52 41 54 4f 52 20 50 45 44 41     ACCELERATOR PEDA
    172f:	4c 00                                               L.

00001731 <__c.5369>:
    1731:	45 31 30 20 2d 20 52 45 4c 45 41 53 45 00           E10 - RELEASE.

0000173f <__c.5367>:
    173f:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

0000174c <__c.5365>:
    174c:	45 31 33 20 2d 20 4f 56 45 52 56 4f 4c 54 41 47     E13 - OVERVOLTAG
    175c:	45 00                                               E.

0000175e <__c.5363>:
    175e:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

0000176b <__c.5361>:
    176b:	45 30 31 20 2d 20 46 55 53 45 20 42 4c 4f 57 4e     E01 - FUSE BLOWN
	...

0000177c <__c.5359>:
    177c:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

00001789 <__c.5357>:
    1789:	45 32 31 20 2d 20 38 37 30 31 20 46 41 55 4c 54     E21 - 8701 FAULT
	...

0000179a <__c.5355>:
    179a:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

000017a7 <__c.5353>:
    17a7:	45 32 32 20 2d 20 42 4d 20 4f 56 45 52 4c 4f 41     E22 - BM OVERLOA
    17b7:	44 00                                               D.

000017b9 <__c.5351>:
    17b9:	54 55 52 4e 20 4f 46 46 20 4b 45 59 00              TURN OFF KEY.

000017c6 <__c.5349>:
    17c6:	45 31 31 20 2d 20 41 33 20 54 4f 50 20 45 52 52     E11 - A3 TOP ERR
    17d6:	4f 52 00                                            OR.

000017d9 <__c.5347>:
    17d9:	45 30 33 20 2d 20 41 32 20 54 4f 50 20 45 52 52     E03 - A2 TOP ERR
    17e9:	4f 52 00                                            OR.

000017ec <__c.5342>:
    17ec:	43 48 41 4e 47 45 44 20 20 20 20 20 00              CHANGED     .

000017f9 <__c.5340>:
    17f9:	41 55 54 4f 20 4d 4f 44 45 20 20 20 00              AUTO MODE   .

00001806 <__c.5316>:
    1806:	46 41 49 4c 00                                      FAIL.

0000180b <__c.5314>:
    180b:	45 32 30 20 2d 20 53 44 20 43 41 52 44 00           E20 - SD CARD.

00001819 <__c.5311>:
    1819:	55 4e 41 56 41 49 4c 41 42 4c 45 00                 UNAVAILABLE.

00001825 <__c.5309>:
    1825:	45 31 39 20 2d 20 53 44 20 43 41 52 44 00           E19 - SD CARD.

00001833 <__c.5307>:
    1833:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00001840 <__c.5305>:
    1840:	45 30 34 20 2d 20 4e 4f 20 43 41 4e 20 43 4f 4d     E04 - NO CAN COM
    1850:	4d 00                                               M.

00001852 <__c.5303>:
    1852:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

0000185f <__c.5301>:
    185f:	45 30 34 20 2d 20 4e 4f 20 41 33 20 43 41 4e 20     E04 - NO A3 CAN 
    186f:	43 4f 4d 4d 00                                      COMM.

00001874 <__c.5299>:
    1874:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00001881 <__c.5297>:
    1881:	45 30 34 20 2d 20 4e 4f 20 41 32 20 43 41 4e 20     E04 - NO A2 CAN 
    1891:	43 4f 4d 4d 00                                      COMM.

00001896 <__c.5295>:
    1896:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

000018a3 <__c.5293>:
    18a3:	45 30 34 20 2d 20 4e 4f 20 43 41 4e 20 43 4f 4d     E04 - NO CAN COM
    18b3:	4d 00                                               M.

000018b5 <__c.6340>:
    18b5:	42 52 20 2d 20 64 6f 77 6e 7c 48 4c 20 2d 20 62     BR - down|HL - b
    18c5:	61 63 6b 00                                         ack.

000018c9 <__c.6338>:
    18c9:	45 50 20 2d 20 75 70 20 20 7c 52 56 20 2d 20 6e     EP - up  |RV - n
    18d9:	65 78 74 00                                         ext.

000018dd <__c.6332>:
    18dd:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

000018ea <__c.6330>:
    18ea:	4e 4f 20 41 33 20 43 41 4e 20 43 4f 4d 4d 00        NO A3 CAN COMM.

000018f9 <__c.6328>:
    18f9:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00001906 <__c.6326>:
    1906:	4e 4f 20 41 32 20 43 41 4e 20 43 4f 4d 4d 00        NO A2 CAN COMM.

00001915 <__c.6324>:
    1915:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00001922 <__c.6322>:
    1922:	4e 4f 20 43 41 4e 20 43 4f 4d 4d 00                 NO CAN COMM.

0000192e <__c.6320>:
    192e:	43 48 45 43 4b 49 4e 47 20 43 41 4e 20 42 55 53     CHECKING CAN BUS
    193e:	2e 2e 2e 00                                         ....

00001942 <__c.6292>:
    1942:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

0000194b <__c.6289>:
    194b:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00001954 <__c.6286>:
    1954:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

0000195d <__c.6281>:
    195d:	52 45 53 54 41 52 54 20 52 45 51 55 49 52 45 44     RESTART REQUIRED
	...

0000196e <__c.6279>:
    196e:	53 44 20 43 41 52 44 20 43 4c 45 41 52 45 44 00     SD CARD CLEARED.

0000197e <__c.6277>:
    197e:	2e 00                                               ..

00001980 <__c.6275>:
    1980:	2e 00                                               ..

00001982 <__c.6273>:
    1982:	2e 00                                               ..

00001984 <__c.6271>:
    1984:	45 52 41 53 49 4e 47 20 53 44 20 43 41 52 44 00     ERASING SD CARD.

00001994 <__c.6268>:
    1994:	41 42 4f 55 54 00                                   ABOUT.

0000199a <__c.6265>:
    199a:	52 45 53 45 54 20 54 4f 20 44 45 46 41 55 4c 54     RESET TO DEFAULT
	...

000019ab <__c.6263>:
    19ab:	54 4f 20 44 45 46 41 55 4c 54 20 56 41 4c 55 45     TO DEFAULT VALUE
    19bb:	53 00                                               S.

000019bd <__c.6261>:
    19bd:	41 4c 4c 20 53 45 54 54 49 4e 47 53 20 52 45 53     ALL SETTINGS RES
    19cd:	45 54 00                                            ET.

000019d0 <__c.6258>:
    19d0:	43 4c 45 41 52 20 53 44 20 43 41 52 44 00           CLEAR SD CARD.

000019de <__c.6254>:
    19de:	50 52 45 53 57 45 45 50 20 4d 41 58 20 43 55 52     PRESWEEP MAX CUR
    19ee:	52 45 4e 54 00                                      RENT.

000019f3 <__c.6251>:
    19f3:	50 52 45 53 57 45 45 50 20 41 56 47 20 43 55 52     PRESWEEP AVG CUR
    1a03:	52 45 4e 54 00                                      RENT.

00001a08 <__c.6247>:
    1a08:	56 41 43 55 55 4d 20 4d 41 58 20 43 55 52 52 45     VACUUM MAX CURRE
    1a18:	4e 54 00                                            NT.

00001a1b <__c.6244>:
    1a1b:	56 41 43 55 55 4d 20 41 56 47 20 43 55 52 52 45     VACUUM AVG CURRE
    1a2b:	4e 54 00                                            NT.

00001a2e <__c.6240>:
    1a2e:	42 52 55 53 48 20 32 20 4d 41 58 20 43 55 52 52     BRUSH 2 MAX CURR
    1a3e:	45 4e 54 00                                         ENT.

00001a42 <__c.6237>:
    1a42:	42 52 55 53 48 20 32 20 41 56 47 20 43 55 52 52     BRUSH 2 AVG CURR
    1a52:	45 4e 54 00                                         ENT.

00001a56 <__c.6234>:
    1a56:	42 52 55 53 48 20 31 20 4d 41 58 20 43 55 52 52     BRUSH 1 MAX CURR
    1a66:	45 4e 54 00                                         ENT.

00001a6a <__c.6231>:
    1a6a:	42 52 55 53 48 20 31 20 41 56 47 20 43 55 52 52     BRUSH 1 AVG CURR
    1a7a:	45 4e 54 00                                         ENT.

00001a7e <__c.6227>:
    1a7e:	45 43 4f 20 4d 4f 44 45 20 48 4f 55 52 53 00        ECO MODE HOURS.

00001a8d <__c.6224>:
    1a8d:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00001a98 <__c.6222>:
    1a98:	44 45 54 45 52 47 45 4e 54 20 50 55 4d 50 00        DETERGENT PUMP.

00001aa7 <__c.6219>:
    1aa7:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00001ab2 <__c.6217>:
    1ab2:	57 41 54 45 52 20 50 55 4d 50 00                    WATER PUMP.

00001abd <__c.6214>:
    1abd:	50 52 45 53 57 45 45 50 20 53 54 41 54 49 53 54     PRESWEEP STATIST
    1acd:	49 43 53 00                                         ICS.

00001ad1 <__c.6211>:
    1ad1:	56 41 43 55 55 4d 20 53 54 41 54 49 53 54 49 43     VACUUM STATISTIC
    1ae1:	53 00                                               S.

00001ae3 <__c.6208>:
    1ae3:	52 45 53 45 54 20 54 4f 20 44 45 46 41 55 4c 54     RESET TO DEFAULT
	...

00001af4 <__c.6205>:
    1af4:	48 4f 55 52 53 3a 4d 49 4e 55 54 45 53 00           HOURS:MINUTES.

00001b02 <__c.6203>:
    1b02:	48 4f 55 52 53 3a 4d 49 4e 55 54 45 53 00           HOURS:MINUTES.

00001b10 <__c.6200>:
    1b10:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00001b1b <__c.6192>:
    1b1b:	53 45 54 20 41 33 20 53 45 52 49 41 4c 20 4e 55     SET A3 SERIAL NU
    1b2b:	4d 00                                               M.

00001b2d <__c.6189>:
    1b2d:	53 45 54 20 41 32 20 53 45 52 49 41 4c 20 4e 55     SET A2 SERIAL NU
    1b3d:	4d 00                                               M.

00001b3f <__c.6186>:
    1b3f:	53 45 54 20 41 31 20 53 45 52 49 41 4c 20 4e 55     SET A1 SERIAL NU
    1b4f:	4d 00                                               M.

00001b51 <__c.6183>:
    1b51:	52 55 4e 20 54 49 4d 45 00                          RUN TIME.

00001b5a <__c.6179>:
    1b5a:	42 41 54 54 45 52 59 3a 20 47 45 4c 00              BATTERY: GEL.

00001b67 <__c.6176>:
    1b67:	42 41 54 54 45 52 59 3a 20 41 47 4d 00              BATTERY: AGM.

00001b74 <__c.6173>:
    1b74:	53 45 54 20 53 45 52 49 41 4c 20 4e 55 4d 00        SET SERIAL NUM.

00001b83 <__c.6170>:
    1b83:	4f 46 46 00                                         OFF.

00001b87 <__c.6167>:
    1b87:	4f 46 46 00                                         OFF.

00001b8b <__c.6164>:
    1b8b:	4f 46 46 00                                         OFF.

00001b8f <__c.6149>:
    1b8f:	50 52 45 2d 53 57 45 45 50 20 53 45 54 54 49 4e     PRE-SWEEP SETTIN
    1b9f:	47 53 00                                            GS.

00001ba2 <__c.6145>:
    1ba2:	42 52 55 53 48 20 53 45 54 54 49 4e 47 53 00        BRUSH SETTINGS.

00001bb1 <__c.6142>:
    1bb1:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    1bc1:	41 54 45 00                                         ATE.

00001bc5 <__c.6140>:
    1bc5:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00001bcf <__c.6138>:
    1bcf:	52 45 43 41 4c 49 42 52 41 54 49 4f 4e 00           RECALIBRATION.

00001bdd <__c.6132>:
    1bdd:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

00001be9 <__c.6130>:
    1be9:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00001bf7 <__c.6127>:
    1bf7:	56 41 43 55 55 4d 20 53 45 54 54 49 4e 47 53 00     VACUUM SETTINGS.

00001c07 <__c.6124>:
    1c07:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00001c10 <__c.6122>:
    1c10:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00001c1e <__c.6119>:
    1c1e:	4f 56 45 52 4c 4f 41 44 20 54 49 4d 45 00           OVERLOAD TIME.

00001c2c <__c.6116>:
    1c2c:	4d 41 58 20 43 55 52 52 45 4e 54 00                 MAX CURRENT.

00001c38 <__c.6113>:
    1c38:	43 55 52 52 45 4e 54 20 52 41 54 49 4e 47 00        CURRENT RATING.

00001c47 <__c.6109>:
    1c47:	46 41 53 54 20 53 50 45 45 44 00                    FAST SPEED.

00001c52 <__c.6106>:
    1c52:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00001c60 <__c.6103>:
    1c60:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00001c6e <__c.6100>:
    1c6e:	42 52 41 4b 45 20 44 45 4c 41 59 00                 BRAKE DELAY.

00001c7a <__c.6097>:
    1c7a:	44 45 43 45 4c 45 52 41 54 49 4f 4e 00              DECELERATION.

00001c87 <__c.6094>:
    1c87:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00001c94 <__c.6090>:
    1c94:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00001ca3 <__c.6082>:
    1ca3:	41 33 20 53 45 52 49 41 4c 20 4e 55 4d 00           A3 SERIAL NUM.

00001cb1 <__c.6077>:
    1cb1:	41 32 20 53 45 52 49 41 4c 20 4e 55 4d 00           A2 SERIAL NUM.

00001cbf <__c.6072>:
    1cbf:	41 31 20 53 45 52 49 41 4c 20 4e 55 4d 00           A1 SERIAL NUM.

00001ccd <__c.6067>:
    1ccd:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00001cd6 <__c.6064>:
    1cd6:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00001cdf <__c.6061>:
    1cdf:	41 42 4f 55 54 20 52 42 38 30 30 00                 ABOUT RB800.

00001ceb <__c.6057>:
    1ceb:	43 4c 45 41 52 20 53 44 20 43 41 52 44 00           CLEAR SD CARD.

00001cf9 <__c.6054>:
    1cf9:	43 4c 45 41 52 20 53 44 20 43 41 52 44 00           CLEAR SD CARD.

00001d07 <__c.6052>:
    1d07:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00001d11 <__c.6050>:
    1d11:	43 4c 45 41 52 20 4f 50 45 52 41 54 49 4f 4e 00     CLEAR OPERATION.

00001d21 <__c.6047>:
    1d21:	52 45 53 45 54 20 54 4f 20 44 45 46 41 55 4c 54     RESET TO DEFAULT
	...

00001d32 <__c.6044>:
    1d32:	52 45 53 45 54 20 54 4f 20 44 45 46 41 55 4c 54     RESET TO DEFAULT
	...

00001d43 <__c.6042>:
    1d43:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00001d4d <__c.6040>:
    1d4d:	52 45 53 45 54 20 4f 50 45 52 41 54 49 4f 4e 00     RESET OPERATION.

00001d5d <__c.6037>:
    1d5d:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00001d68 <__c.6034>:
    1d68:	50 52 45 53 57 45 45 50 20 41 56 47 20 43 55 52     PRESWEEP AVG CUR
    1d78:	52 45 4e 54 00                                      RENT.

00001d7d <__c.6031>:
    1d7d:	50 52 45 53 57 45 45 50 20 48 4f 55 52 53 00        PRESWEEP HOURS.

00001d8c <__c.6027>:
    1d8c:	56 41 43 55 55 4d 20 41 56 47 20 43 55 52 52 45     VACUUM AVG CURRE
    1d9c:	4e 54 00                                            NT.

00001d9f <__c.6024>:
    1d9f:	56 41 43 55 55 4d 20 48 4f 55 52 53 00              VACUUM HOURS.

00001dac <__c.6020>:
    1dac:	42 52 55 53 48 20 32 20 41 56 47 20 43 55 52 52     BRUSH 2 AVG CURR
    1dbc:	45 4e 54 00                                         ENT.

00001dc0 <__c.6017>:
    1dc0:	42 52 55 53 48 20 31 20 4d 41 58 20 43 55 52 52     BRUSH 1 MAX CURR
    1dd0:	45 4e 54 00                                         ENT.

00001dd4 <__c.6014>:
    1dd4:	42 52 55 53 48 20 31 20 41 56 47 20 43 55 52 52     BRUSH 1 AVG CURR
    1de4:	45 4e 54 00                                         ENT.

00001de8 <__c.6011>:
    1de8:	42 52 55 53 48 20 48 4f 55 52 53 00                 BRUSH HOURS.

00001df4 <__c.6007>:
    1df4:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00001dff <__c.6005>:
    1dff:	44 45 54 45 52 47 45 4e 54 20 50 55 4d 50 00        DETERGENT PUMP.

00001e0e <__c.6002>:
    1e0e:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00001e19 <__c.6000>:
    1e19:	57 41 54 45 52 20 50 55 4d 50 00                    WATER PUMP.

00001e24 <__c.5997>:
    1e24:	50 52 45 53 57 45 45 50 20 53 54 41 54 49 53 54     PRESWEEP STATIST
    1e34:	49 43 53 00                                         ICS.

00001e38 <__c.5994>:
    1e38:	56 41 43 55 55 4d 20 53 54 41 54 49 53 54 49 43     VACUUM STATISTIC
    1e48:	53 00                                               S.

00001e4a <__c.5991>:
    1e4a:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

00001e5b <__c.5987>:
    1e5b:	52 55 4e 20 54 49 4d 45 00                          RUN TIME.

00001e64 <__c.5984>:
    1e64:	48 4f 55 52 53 3a 4d 49 4e 55 54 45 53 00           HOURS:MINUTES.

00001e72 <__c.5982>:
    1e72:	48 4f 55 52 53 3a 4d 49 4e 55 54 45 53 00           HOURS:MINUTES.

00001e80 <__c.5979>:
    1e80:	53 45 54 20 53 45 52 49 41 4c 20 4e 55 4d 00        SET SERIAL NUM.

00001e8f <__c.5972>:
    1e8f:	53 45 54 20 41 32 20 53 45 52 49 41 4c 20 4e 55     SET A2 SERIAL NU
    1e9f:	4d 00                                               M.

00001ea1 <__c.5969>:
    1ea1:	53 45 54 20 41 31 20 53 45 52 49 41 4c 20 4e 55     SET A1 SERIAL NU
    1eb1:	4d 00                                               M.

00001eb3 <__c.5966>:
    1eb3:	53 45 54 20 52 42 38 30 30 20 53 45 52 49 41 4c     SET RB800 SERIAL
    1ec3:	20 4e 55 4d 00                                       NUM.

00001ec8 <__c.5962>:
    1ec8:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00001ed5 <__c.5959>:
    1ed5:	42 41 54 54 45 52 59 3a 20 41 47 4d 00              BATTERY: AGM.

00001ee2 <__c.5956>:
    1ee2:	42 41 54 54 45 52 59 3a 20 4c 45 41 44 00           BATTERY: LEAD.

00001ef0 <__c.5952>:
    1ef0:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00001eff <__c.5936>:
    1eff:	42 52 55 53 48 20 53 45 54 54 49 4e 47 53 00        BRUSH SETTINGS.

00001f0e <__c.5932>:
    1f0e:	56 41 43 55 55 4d 20 53 45 54 54 49 4e 47 53 00     VACUUM SETTINGS.

00001f1e <__c.5928>:
    1f1e:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00001f27 <__c.5926>:
    1f27:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00001f35 <__c.5923>:
    1f35:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    1f45:	41 54 45 00                                         ATE.

00001f49 <__c.5921>:
    1f49:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00001f53 <__c.5919>:
    1f53:	52 45 43 41 4c 49 42 52 41 54 49 4f 4e 00           RECALIBRATION.

00001f61 <__c.5912>:
    1f61:	4f 56 45 52 4c 4f 41 44 20 54 49 4d 45 00           OVERLOAD TIME.

00001f6f <__c.5909>:
    1f6f:	4d 41 58 20 43 55 52 52 45 4e 54 00                 MAX CURRENT.

00001f7b <__c.5906>:
    1f7b:	43 55 52 52 45 4e 54 20 52 41 54 49 4e 47 00        CURRENT RATING.

00001f8a <__c.5903>:
    1f8a:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00001f98 <__c.5900>:
    1f98:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00001fa6 <__c.5897>:
    1fa6:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

00001fb1 <__c.5893>:
    1fb1:	42 52 41 4b 45 20 44 45 4c 41 59 00                 BRAKE DELAY.

00001fbd <__c.5890>:
    1fbd:	44 45 43 45 4c 45 52 41 54 49 4f 4e 00              DECELERATION.

00001fca <__c.5887>:
    1fca:	41 43 43 45 4c 45 52 41 54 49 4f 4e 00              ACCELERATION.

00001fd7 <__c.5881>:
    1fd7:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00001fe6 <__c.5874>:
    1fe6:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00001fef <__c.5871>:
    1fef:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00001ff8 <__c.5868>:
    1ff8:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00002001 <__c.5865>:
    2001:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

0000200a <__c.5862>:
    200a:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00002013 <__c.5859>:
    2013:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

0000201c <__c.5856>:
    201c:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002025 <__c.5853>:
    2025:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

0000202e <__c.5850>:
    202e:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002037 <__c.5847>:
    2037:	41 42 4f 55 54 20 52 42 38 30 30 00                 ABOUT RB800.

00002043 <__c.5844>:
    2043:	41 42 4f 55 54 00                                   ABOUT.

00002049 <__c.5841>:
    2049:	41 42 4f 55 54 00                                   ABOUT.

0000204f <__c.5838>:
    204f:	41 42 4f 55 54 00                                   ABOUT.

00002055 <__c.5835>:
    2055:	41 42 4f 55 54 00                                   ABOUT.

0000205b <__c.5831>:
    205b:	52 55 4e 20 54 49 4d 45 00                          RUN TIME.

00002064 <__c.5827>:
    2064:	53 45 54 20 41 33 20 53 45 52 49 41 4c 20 4e 55     SET A3 SERIAL NU
    2074:	4d 00                                               M.

00002076 <__c.5824>:
    2076:	53 45 54 20 41 32 20 53 45 52 49 41 4c 20 4e 55     SET A2 SERIAL NU
    2086:	4d 00                                               M.

00002088 <__c.5821>:
    2088:	53 45 54 20 41 31 20 53 45 52 49 41 4c 20 4e 55     SET A1 SERIAL NU
    2098:	4d 00                                               M.

0000209a <__c.5812>:
    209a:	53 45 54 20 52 42 38 30 30 20 53 45 52 49 41 4c     SET RB800 SERIAL
    20aa:	20 4e 55 4d 00                                       NUM.

000020af <__c.5809>:
    20af:	53 45 54 20 53 45 52 49 41 4c 20 4e 55 4d 00        SET SERIAL NUM.

000020be <__c.5806>:
    20be:	53 45 54 20 53 45 52 49 41 4c 20 4e 55 4d 00        SET SERIAL NUM.

000020cd <__c.5803>:
    20cd:	53 45 54 20 53 45 52 49 41 4c 20 4e 55 4d 00        SET SERIAL NUM.

000020dc <__c.5800>:
    20dc:	53 45 54 20 53 45 52 49 41 4c 20 4e 55 4d 00        SET SERIAL NUM.

000020eb <__c.5796>:
    20eb:	43 4c 45 41 52 20 53 44 20 43 41 52 44 00           CLEAR SD CARD.

000020f9 <__c.5794>:
    20f9:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00002103 <__c.5792>:
    2103:	43 4c 45 41 52 20 4f 50 45 52 41 54 49 4f 4e 00     CLEAR OPERATION.

00002113 <__c.5788>:
    2113:	52 45 53 45 54 20 54 4f 20 44 45 46 41 55 4c 54     RESET TO DEFAULT
	...

00002124 <__c.5786>:
    2124:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

0000212e <__c.5784>:
    212e:	52 45 53 45 54 20 4f 50 45 52 41 54 49 4f 4e 00     RESET OPERATION.

0000213e <__c.5780>:
    213e:	50 52 45 53 57 45 45 50 20 53 54 41 54 49 53 54     PRESWEEP STATIST
    214e:	49 43 53 00                                         ICS.

00002152 <__c.5777>:
    2152:	50 52 45 53 57 45 45 50 20 53 54 41 54 49 53 54     PRESWEEP STATIST
    2162:	49 43 53 00                                         ICS.

00002166 <__c.5774>:
    2166:	50 52 45 53 57 45 45 50 20 53 54 41 54 49 53 54     PRESWEEP STATIST
    2176:	49 43 53 00                                         ICS.

0000217a <__c.5771>:
    217a:	56 41 43 55 55 4d 20 53 54 41 54 49 53 54 49 43     VACUUM STATISTIC
    218a:	53 00                                               S.

0000218c <__c.5768>:
    218c:	56 41 43 55 55 4d 20 53 54 41 54 49 53 54 49 43     VACUUM STATISTIC
    219c:	53 00                                               S.

0000219e <__c.5765>:
    219e:	56 41 43 55 55 4d 20 53 54 41 54 49 53 54 49 43     VACUUM STATISTIC
    21ae:	53 00                                               S.

000021b0 <__c.5762>:
    21b0:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

000021c1 <__c.5759>:
    21c1:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

000021d2 <__c.5756>:
    21d2:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

000021e3 <__c.5753>:
    21e3:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

000021f4 <__c.5750>:
    21f4:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

00002205 <__c.5747>:
    2205:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00002210 <__c.5745>:
    2210:	44 45 54 45 52 47 45 4e 54 20 50 55 4d 50 00        DETERGENT PUMP.

0000221f <__c.5742>:
    221f:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

0000222a <__c.5740>:
    222a:	57 41 54 45 52 20 50 55 4d 50 00                    WATER PUMP.

00002235 <__c.5737>:
    2235:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00002240 <__c.5734>:
    2240:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

0000224b <__c.5731>:
    224b:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00002256 <__c.5728>:
    2256:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00002261 <__c.5725>:
    2261:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

0000226c <__c.5722>:
    226c:	53 54 41 54 49 53 54 49 43 53 00                    STATISTICS.

00002277 <__c.5718>:
    2277:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00002284 <__c.5715>:
    2284:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00002291 <__c.5712>:
    2291:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

0000229e <__c.5708>:
    229e:	50 52 45 2d 53 57 45 45 50 20 53 4c 4f 57 20 53     PRE-SWEEP SLOW S
    22ae:	54 41 52 54 00                                      TART.

000022b3 <__c.5705>:
    22b3:	42 52 55 53 48 20 53 4c 4f 57 20 53 54 41 52 54     BRUSH SLOW START
	...

000022c4 <__c.5702>:
    22c4:	56 41 43 55 55 4d 20 53 4c 4f 57 20 53 54 41 52     VACUUM SLOW STAR
    22d4:	54 00                                               T.

000022d6 <__c.5699>:
    22d6:	4f 56 45 52 4c 4f 41 44 20 54 49 4d 45 00           OVERLOAD TIME.

000022e4 <__c.5696>:
    22e4:	4d 41 58 20 43 55 52 52 45 4e 54 00                 MAX CURRENT.

000022f0 <__c.5693>:
    22f0:	43 55 52 52 45 4e 54 20 52 41 54 49 4e 47 00        CURRENT RATING.

000022ff <__c.5690>:
    22ff:	46 41 53 54 20 53 50 45 45 44 00                    FAST SPEED.

0000230a <__c.5687>:
    230a:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

00002315 <__c.5684>:
    2315:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00002323 <__c.5681>:
    2323:	42 52 41 4b 45 20 44 45 4c 41 59 00                 BRAKE DELAY.

0000232f <__c.5678>:
    232f:	44 45 43 45 4c 45 52 41 54 49 4f 4e 00              DECELERATION.

0000233c <__c.5675>:
    233c:	41 43 43 45 4c 45 52 41 54 49 4f 4e 00              ACCELERATION.

00002349 <__c.5672>:
    2349:	50 52 45 2d 53 57 45 45 50 20 53 45 54 54 49 4e     PRE-SWEEP SETTIN
    2359:	47 53 00                                            GS.

0000235c <__c.5669>:
    235c:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

0000236b <__c.5666>:
    236b:	42 52 55 53 48 20 53 45 54 54 49 4e 47 53 00        BRUSH SETTINGS.

0000237a <__c.5663>:
    237a:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002389 <__c.5660>:
    2389:	56 41 43 55 55 4d 20 53 45 54 54 49 4e 47 53 00     VACUUM SETTINGS.

00002399 <__c.5657>:
    2399:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000023a8 <__c.5654>:
    23a8:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    23b8:	41 54 45 00                                         ATE.

000023bc <__c.5652>:
    23bc:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

000023c6 <__c.5650>:
    23c6:	52 45 43 41 4c 49 42 52 41 54 49 4f 4e 00           RECALIBRATION.

000023d4 <__c.5647>:
    23d4:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

000023e0 <__c.5645>:
    23e0:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

000023ee <__c.5642>:
    23ee:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000023f7 <__c.5640>:
    23f7:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002405 <__c.5637>:
    2405:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 20 54 59     POTENTIOMETER TY
    2415:	50 45 00                                            PE.

00002418 <__c.5634>:
    2418:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00002421 <__c.5632>:
    2421:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

0000242f <__c.5629>:
    242f:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

0000243e <__c.5626>:
    243e:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

0000244d <__c.5623>:
    244d:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

0000245c <__c.5620>:
    245c:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

0000246b <__c.5617>:
    246b:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

0000247a <__c.5614>:
    247a:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00002488 <__c.5611>:
    2488:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00002496 <__c.5608>:
    2496:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000024a5 <__c.5605>:
    24a5:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000024b4 <__c.5602>:
    24b4:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000024c3 <__c.5599>:
    24c3:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000024d2 <__c.5594>:
    24d2:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000024e1 <__c.5577>:
    24e1:	41 33 20 53 45 52 49 41 4c 20 4e 55 4d 00           A3 SERIAL NUM.

000024ef <__c.5574>:
    24ef:	41 32 20 53 45 52 49 41 4c 20 4e 55 4d 00           A2 SERIAL NUM.

000024fd <__c.5571>:
    24fd:	41 31 20 53 45 52 49 41 4c 20 4e 55 4d 00           A1 SERIAL NUM.

0000250b <__c.5568>:
    250b:	52 42 38 30 30 20 53 45 52 49 41 4c 20 4e 55 4d     RB800 SERIAL NUM
	...

0000251c <__c.5565>:
    251c:	41 42 4f 55 54 20 52 42 38 30 30 00                 ABOUT RB800.

00002528 <__c.5562>:
    2528:	43 4c 45 41 52 20 53 44 20 43 41 52 44 00           CLEAR SD CARD.

00002536 <__c.5560>:
    2536:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00002540 <__c.5558>:
    2540:	43 4c 45 41 52 20 4f 50 45 52 41 54 49 4f 4e 00     CLEAR OPERATION.

00002550 <__c.5555>:
    2550:	44 4f 57 4e 20 54 4f 20 43 4f 4e 46 49 52 4d 00     DOWN TO CONFIRM.

00002560 <__c.5553>:
    2560:	43 4f 4e 46 49 52 4d 20 43 4c 45 41 52 00           CONFIRM CLEAR.

0000256e <__c.5550>:
    256e:	52 45 53 45 54 20 54 4f 20 44 45 46 41 55 4c 54     RESET TO DEFAULT
	...

0000257f <__c.5548>:
    257f:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00002589 <__c.5546>:
    2589:	52 45 53 45 54 20 4f 50 45 52 41 54 49 4f 4e 00     RESET OPERATION.

00002599 <__c.5543>:
    2599:	44 4f 57 4e 20 54 4f 20 43 4f 4e 46 49 52 4d 00     DOWN TO CONFIRM.

000025a9 <__c.5541>:
    25a9:	43 4f 4e 46 49 52 4d 20 52 45 53 45 54 00           CONFIRM RESET.

000025b7 <__c.5538>:
    25b7:	44 45 54 45 52 47 45 4e 54 20 50 55 4d 50 20 48     DETERGENT PUMP H
    25c7:	4f 55 52 53 00                                      OURS.

000025cc <__c.5535>:
    25cc:	57 41 54 45 52 20 50 55 4d 50 20 48 4f 55 52 53     WATER PUMP HOURS
	...

000025dd <__c.5532>:
    25dd:	50 52 45 53 57 45 45 50 20 48 4f 55 52 53 00        PRESWEEP HOURS.

000025ec <__c.5529>:
    25ec:	56 41 43 55 55 4d 20 48 4f 55 52 53 00              VACUUM HOURS.

000025f9 <__c.5526>:
    25f9:	42 52 55 53 48 20 48 4f 55 52 53 00                 BRUSH HOURS.

00002605 <__c.5523>:
    2605:	42 52 55 53 48 20 53 54 41 54 49 53 54 49 43 53     BRUSH STATISTICS
	...

00002616 <__c.5520>:
    2616:	48 4f 55 52 53 3a 4d 49 4e 55 54 45 53 00           HOURS:MINUTES.

00002624 <__c.5510>:
    2624:	52 55 4e 20 54 49 4d 45 20 43 48 41 4e 47 45 44     RUN TIME CHANGED
	...

00002635 <__c.5507>:
    2635:	48 4f 55 52 53 3a 4d 49 4e 55 54 45 53 00           HOURS:MINUTES.

00002643 <__c.5493>:
    2643:	43 48 41 4e 47 45 44 00                             CHANGED.

0000264b <__c.5491>:
    264b:	53 45 52 49 41 4c 20 4e 55 4d 42 45 52 00           SERIAL NUMBER.

00002659 <__c.5485>:
    2659:	43 48 41 4e 47 45 44 00                             CHANGED.

00002661 <__c.5483>:
    2661:	53 45 52 49 41 4c 20 4e 55 4d 42 45 52 00           SERIAL NUMBER.

0000266f <__c.5480>:
    266f:	43 48 41 4e 47 45 44 00                             CHANGED.

00002677 <__c.5478>:
    2677:	53 45 52 49 41 4c 20 4e 55 4d 42 45 52 00           SERIAL NUMBER.

00002685 <__c.5465>:
    2685:	43 48 41 4e 47 45 44 00                             CHANGED.

0000268d <__c.5463>:
    268d:	53 45 52 49 41 4c 20 4e 55 4d 42 45 52 00           SERIAL NUMBER.

0000269b <__c.5456>:
    269b:	53 45 54 20 41 33 20 53 45 52 49 41 4c 20 4e 55     SET A3 SERIAL NU
    26ab:	4d 00                                               M.

000026ad <__c.5453>:
    26ad:	53 45 54 20 41 32 20 53 45 52 49 41 4c 20 4e 55     SET A2 SERIAL NU
    26bd:	4d 00                                               M.

000026bf <__c.5450>:
    26bf:	53 45 54 20 41 31 20 53 45 52 49 41 4c 20 4e 55     SET A1 SERIAL NU
    26cf:	4d 00                                               M.

000026d1 <__c.5447>:
    26d1:	53 45 54 20 52 42 38 30 30 20 53 45 52 49 41 4c     SET RB800 SERIAL
    26e1:	20 4e 55 4d 00                                       NUM.

000026e6 <__c.5444>:
    26e6:	53 45 54 20 52 42 38 30 30 20 53 45 52 49 41 4c     SET RB800 SERIAL
    26f6:	20 4e 55 4d 00                                       NUM.

000026fb <__c.5441>:
    26fb:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00002708 <__c.5439>:
    2708:	42 41 54 54 45 52 59 20 54 59 50 45 20 53 45 54     BATTERY TYPE SET
	...

00002719 <__c.5436>:
    2719:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00002726 <__c.5434>:
    2726:	42 41 54 54 45 52 59 20 54 59 50 45 20 53 45 54     BATTERY TYPE SET
	...

00002737 <__c.5431>:
    2737:	42 41 54 54 45 52 59 20 54 59 50 45 00              BATTERY TYPE.

00002744 <__c.5429>:
    2744:	42 41 54 54 45 52 59 20 54 59 50 45 20 53 45 54     BATTERY TYPE SET
	...

00002755 <__c.5426>:
    2755:	42 41 54 54 45 52 59 3a 20 47 45 4c 00              BATTERY: GEL.

00002762 <__c.5424>:
    2762:	42 41 54 54 45 52 59 3a 20 41 47 4d 00              BATTERY: AGM.

0000276f <__c.5422>:
    276f:	42 41 54 54 45 52 59 3a 20 4c 45 41 44 00           BATTERY: LEAD.

0000277d <__c.5419>:
    277d:	50 52 45 2d 53 57 45 45 50 20 53 4c 4f 57 20 53     PRE-SWEEP SLOW S
    278d:	54 41 52 54 00                                      TART.

00002792 <__c.5417>:
    2792:	53 45 54 00                                         SET.

00002796 <__c.5415>:
    2796:	50 52 45 2d 53 57 45 45 50 20 53 4c 4f 57 20 53     PRE-SWEEP SLOW S
    27a6:	54 41 52 54 00                                      TART.

000027ab <__c.5412>:
    27ab:	42 52 55 53 48 20 53 4c 4f 57 20 53 54 41 52 54     BRUSH SLOW START
	...

000027bc <__c.5410>:
    27bc:	53 45 54 00                                         SET.

000027c0 <__c.5408>:
    27c0:	42 52 55 53 48 20 53 4c 4f 57 20 53 54 41 52 54     BRUSH SLOW START
	...

000027d1 <__c.5405>:
    27d1:	56 41 43 55 55 4d 20 53 4c 4f 57 20 53 54 41 52     VACUUM SLOW STAR
    27e1:	54 00                                               T.

000027e3 <__c.5403>:
    27e3:	53 45 54 00                                         SET.

000027e7 <__c.5401>:
    27e7:	56 41 43 55 55 4d 20 53 4c 4f 57 20 53 54 41 52     VACUUM SLOW STAR
    27f7:	54 00                                               T.

000027f9 <__c.5398>:
    27f9:	4f 56 45 52 4c 4f 41 44 20 54 49 4d 45 00           OVERLOAD TIME.

00002807 <__c.5396>:
    2807:	4f 56 45 52 4c 4f 41 44 20 54 49 4d 45 20 53 45     OVERLOAD TIME SE
    2817:	54 00                                               T.

00002819 <__c.5393>:
    2819:	4d 41 58 20 43 55 52 52 45 4e 54 00                 MAX CURRENT.

00002825 <__c.5391>:
    2825:	4d 41 58 20 43 55 52 52 45 4e 54 20 53 45 54 00     MAX CURRENT SET.

00002835 <__c.5388>:
    2835:	43 55 52 52 45 4e 54 20 52 41 54 49 4e 47 00        CURRENT RATING.

00002844 <__c.5386>:
    2844:	43 55 52 52 45 4e 54 20 52 41 54 49 4e 47 20 53     CURRENT RATING S
    2854:	45 54 00                                            ET.

00002857 <__c.5383>:
    2857:	46 41 53 54 20 53 50 45 45 44 00                    FAST SPEED.

00002862 <__c.5381>:
    2862:	46 41 53 54 20 53 50 45 45 44 20 53 45 54 00        FAST SPEED SET.

00002871 <__c.5378>:
    2871:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

0000287c <__c.5376>:
    287c:	53 4c 4f 57 20 53 50 45 45 44 20 53 45 54 00        SLOW SPEED SET.

0000288b <__c.5373>:
    288b:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00002899 <__c.5371>:
    2899:	52 45 56 45 52 53 45 20 53 50 45 45 44 20 53 45     REVERSE SPEED SE
    28a9:	54 00                                               T.

000028ab <__c.5368>:
    28ab:	42 52 41 4b 45 20 44 45 4c 41 59 00                 BRAKE DELAY.

000028b7 <__c.5366>:
    28b7:	42 52 41 4b 45 20 44 45 4c 41 59 20 53 45 54 00     BRAKE DELAY SET.

000028c7 <__c.5363>:
    28c7:	44 45 43 45 4c 45 52 41 54 49 4f 4e 00              DECELERATION.

000028d4 <__c.5361>:
    28d4:	44 45 43 45 4c 45 52 41 54 49 4f 4e 20 53 45 54     DECELERATION SET
	...

000028e5 <__c.5358>:
    28e5:	41 43 43 45 4c 45 52 41 54 49 4f 4e 00              ACCELERATION.

000028f2 <__c.5356>:
    28f2:	41 43 43 45 4c 45 52 41 54 49 4f 4e 20 53 45 54     ACCELERATION SET
	...

00002903 <__c.5353>:
    2903:	4f 46 46 00                                         OFF.

00002907 <__c.5350>:
    2907:	50 52 45 2d 53 57 45 45 50 20 53 4c 4f 57 20 53     PRE-SWEEP SLOW S
    2917:	54 41 52 54 00                                      TART.

0000291c <__c.5347>:
    291c:	4f 46 46 00                                         OFF.

00002920 <__c.5344>:
    2920:	42 52 55 53 48 20 53 4c 4f 57 20 53 54 41 52 54     BRUSH SLOW START
	...

00002931 <__c.5341>:
    2931:	4f 46 46 00                                         OFF.

00002935 <__c.5338>:
    2935:	56 41 43 55 55 4d 20 53 4c 4f 57 20 53 54 41 52     VACUUM SLOW STAR
    2945:	54 00                                               T.

00002947 <__c.5334>:
    2947:	50 45 44 41 4c 20 53 57 49 54 43 48 20 43 4c 4f     PEDAL SWITCH CLO
    2957:	53 45 53 00                                         SES.

0000295b <__c.5332>:
    295b:	50 52 45 53 53 20 50 45 44 41 4c 20 55 4e 54 49     PRESS PEDAL UNTI
    296b:	4c 00                                               L.

0000296d <__c.5329>:
    296d:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    297d:	41 54 45 00                                         ATE.

00002981 <__c.5325>:
    2981:	4e 4f 54 20 59 45 54 20 49 4d 50 4c 45 4d 45 4e     NOT YET IMPLEMEN
    2991:	54 45 44 00                                         TED.

00002995 <__c.5322>:
    2995:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

000029a1 <__c.5320>:
    29a1:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

000029af <__c.5311>:
    29af:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

000029ba <__c.5305>:
    29ba:	41 43 43 45 4c 45 52 41 54 49 4f 4e 00              ACCELERATION.

000029c7 <__c.5301>:
    29c7:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

000029d6 <__c.5636>:
    29d6:	42 52 20 2d 20 64 6f 77 6e 7c 48 4c 20 2d 20 62     BR - down|HL - b
    29e6:	61 63 6b 00                                         ack.

000029ea <__c.5634>:
    29ea:	45 50 20 2d 20 75 70 20 20 7c 52 56 20 2d 20 6e     EP - up  |RV - n
    29fa:	65 78 74 00                                         ext.

000029fe <__c.5628>:
    29fe:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00002a0b <__c.5626>:
    2a0b:	4e 4f 20 41 33 20 43 41 4e 20 43 4f 4d 4d 00        NO A3 CAN COMM.

00002a1a <__c.5624>:
    2a1a:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00002a27 <__c.5622>:
    2a27:	4e 4f 20 41 32 20 43 41 4e 20 43 4f 4d 4d 00        NO A2 CAN COMM.

00002a36 <__c.5620>:
    2a36:	43 48 45 43 4b 20 57 49 52 49 4e 47 00              CHECK WIRING.

00002a43 <__c.5618>:
    2a43:	4e 4f 20 43 41 4e 20 43 4f 4d 4d 00                 NO CAN COMM.

00002a4f <__c.5616>:
    2a4f:	43 48 45 43 4b 49 4e 47 20 43 41 4e 20 42 55 53     CHECKING CAN BUS
    2a5f:	2e 2e 2e 00                                         ....

00002a63 <__c.5599>:
    2a63:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00002a6c <__c.5596>:
    2a6c:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00002a75 <__c.5593>:
    2a75:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002a7e <__c.5589>:
    2a7e:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    2a8e:	41 54 45 00                                         ATE.

00002a92 <__c.5587>:
    2a92:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00002a9c <__c.5585>:
    2a9c:	52 45 43 41 4c 49 42 52 41 54 49 4f 4e 00           RECALIBRATION.

00002aaa <__c.5579>:
    2aaa:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

00002ab6 <__c.5577>:
    2ab6:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002ac4 <__c.5570>:
    2ac4:	46 41 53 54 20 53 50 45 45 44 00                    FAST SPEED.

00002acf <__c.5567>:
    2acf:	56 41 4c 55 45 00                                   VALUE.

00002ad5 <__c.5565>:
    2ad5:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002ae3 <__c.5562>:
    2ae3:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00002aec <__c.5560>:
    2aec:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002afa <__c.5557>:
    2afa:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00002b08 <__c.5554>:
    2b08:	41 42 4f 55 54 00                                   ABOUT.

00002b0e <__c.5550>:
    2b0e:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002b1d <__c.5542>:
    2b1d:	41 33 20 53 45 52 49 41 4c 20 4e 55 4d 00           A3 SERIAL NUM.

00002b2b <__c.5537>:
    2b2b:	41 32 20 53 45 52 49 41 4c 20 4e 55 4d 00           A2 SERIAL NUM.

00002b39 <__c.5532>:
    2b39:	41 31 20 53 45 52 49 41 4c 20 4e 55 4d 00           A1 SERIAL NUM.

00002b47 <__c.5527>:
    2b47:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00002b50 <__c.5524>:
    2b50:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002b59 <__c.5521>:
    2b59:	41 42 4f 55 54 20 52 42 38 30 30 00                 ABOUT RB800.

00002b65 <__c.5517>:
    2b65:	4d 4f 54 4f 52 20 53 45 54 49 4e 47 53 00           MOTOR SETINGS.

00002b73 <__c.5514>:
    2b73:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    2b83:	41 54 45 00                                         ATE.

00002b87 <__c.5512>:
    2b87:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00002b91 <__c.5510>:
    2b91:	52 45 43 41 4c 49 42 52 41 54 49 4f 4e 00           RECALIBRATION.

00002b9f <__c.5503>:
    2b9f:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00002ba8 <__c.5501>:
    2ba8:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002bb6 <__c.5498>:
    2bb6:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00002bc4 <__c.5492>:
    2bc4:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

00002bcf <__c.5488>:
    2bcf:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00002bdd <__c.5482>:
    2bdd:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002bec <__c.5475>:
    2bec:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00002bf5 <__c.5472>:
    2bf5:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00002bfe <__c.5469>:
    2bfe:	41 42 4f 55 54 20 41 33 00                          ABOUT A3.

00002c07 <__c.5466>:
    2c07:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00002c10 <__c.5463>:
    2c10:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00002c19 <__c.5460>:
    2c19:	41 42 4f 55 54 20 41 32 00                          ABOUT A2.

00002c22 <__c.5457>:
    2c22:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002c2b <__c.5454>:
    2c2b:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002c34 <__c.5451>:
    2c34:	41 42 4f 55 54 20 41 31 00                          ABOUT A1.

00002c3d <__c.5448>:
    2c3d:	41 42 4f 55 54 20 52 42 38 30 30 00                 ABOUT RB800.

00002c49 <__c.5445>:
    2c49:	41 42 4f 55 54 00                                   ABOUT.

00002c4f <__c.5442>:
    2c4f:	41 42 4f 55 54 00                                   ABOUT.

00002c55 <__c.5439>:
    2c55:	41 42 4f 55 54 00                                   ABOUT.

00002c5b <__c.5436>:
    2c5b:	41 42 4f 55 54 00                                   ABOUT.

00002c61 <__c.5432>:
    2c61:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    2c71:	41 54 45 00                                         ATE.

00002c75 <__c.5430>:
    2c75:	43 41 4e 43 45 4c 4c 45 44 00                       CANCELLED.

00002c7f <__c.5428>:
    2c7f:	52 45 43 41 4c 49 42 52 41 54 49 4f 4e 00           RECALIBRATION.

00002c8d <__c.5425>:
    2c8d:	56 41 4c 55 45 00                                   VALUE.

00002c93 <__c.5423>:
    2c93:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002ca1 <__c.5420>:
    2ca1:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002cb0 <__c.5417>:
    2cb0:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

00002cbc <__c.5415>:
    2cbc:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002cca <__c.5412>:
    2cca:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00002cd3 <__c.5410>:
    2cd3:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002ce1 <__c.5407>:
    2ce1:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 20 54 59     POTENTIOMETER TY
    2cf1:	50 45 00                                            PE.

00002cf4 <__c.5404>:
    2cf4:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

00002cfd <__c.5402>:
    2cfd:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002d0b <__c.5399>:
    2d0b:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002d1a <__c.5396>:
    2d1a:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00002d28 <__c.5393>:
    2d28:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002d37 <__c.5390>:
    2d37:	46 41 53 54 20 53 50 45 45 44 00                    FAST SPEED.

00002d42 <__c.5387>:
    2d42:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

00002d4d <__c.5384>:
    2d4d:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00002d5b <__c.5381>:
    2d5b:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00002d69 <__c.5378>:
    2d69:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002d78 <__c.5373>:
    2d78:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002d87 <__c.5356>:
    2d87:	41 33 20 53 45 52 49 41 4c 20 4e 55 4d 00           A3 SERIAL NUM.

00002d95 <__c.5353>:
    2d95:	41 32 20 53 45 52 49 41 4c 20 4e 55 4d 00           A2 SERIAL NUM.

00002da3 <__c.5350>:
    2da3:	41 31 20 53 45 52 49 41 4c 20 4e 55 4d 00           A1 SERIAL NUM.

00002db1 <__c.5347>:
    2db1:	52 42 38 30 30 20 53 45 52 49 41 4c 20 4e 55 4d     RB800 SERIAL NUM
	...

00002dc2 <__c.5344>:
    2dc2:	41 42 4f 55 54 20 52 42 38 30 30 00                 ABOUT RB800.

00002dce <__c.5338>:
    2dce:	50 45 44 41 4c 20 53 57 49 54 43 48 20 43 4c 4f     PEDAL SWITCH CLO
    2dde:	53 45 53 00                                         SES.

00002de2 <__c.5336>:
    2de2:	50 52 45 53 53 20 50 45 44 41 4c 20 55 4e 54 49     PRESS PEDAL UNTI
    2df2:	4c 00                                               L.

00002df4 <__c.5333>:
    2df4:	4e 45 58 54 20 54 4f 20 52 45 43 41 4c 49 42 52     NEXT TO RECALIBR
    2e04:	41 54 45 00                                         ATE.

00002e08 <__c.5329>:
    2e08:	4e 4f 54 20 59 45 54 20 49 4d 50 4c 45 4d 45 4e     NOT YET IMPLEMEN
    2e18:	54 45 44 00                                         TED.

00002e1c <__c.5326>:
    2e1c:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

00002e28 <__c.5324>:
    2e28:	50 4f 54 45 4e 54 49 4f 4d 45 54 45 52 00           POTENTIOMETER.

00002e36 <__c.5321>:
    2e36:	52 45 56 45 52 53 45 20 53 50 45 45 44 00           REVERSE SPEED.

00002e44 <__c.5319>:
    2e44:	52 45 56 45 52 53 45 20 53 50 45 45 44 20 53 45     REVERSE SPEED SE
    2e54:	54 00                                               T.

00002e56 <__c.5315>:
    2e56:	46 41 53 54 20 53 50 45 45 44 00                    FAST SPEED.

00002e61 <__c.5313>:
    2e61:	46 41 53 54 20 53 50 45 45 44 20 53 45 54 00        FAST SPEED SET.

00002e70 <__c.5310>:
    2e70:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

00002e7b <__c.5308>:
    2e7b:	53 4c 4f 57 20 53 50 45 45 44 20 53 45 54 00        SLOW SPEED SET.

00002e8a <__c.5303>:
    2e8a:	53 4c 4f 57 20 53 50 45 45 44 00                    SLOW SPEED.

00002e95 <__c.5300>:
    2e95:	46 4f 52 57 41 52 44 20 53 50 45 45 44 00           FORWARD SPEED.

00002ea3 <__c.5296>:
    2ea3:	4d 4f 54 4f 52 20 53 45 54 54 49 4e 47 53 00        MOTOR SETTINGS.

00002eb2 <__ctors_end>:
    2eb2:	11 24       	eor	r1, r1
    2eb4:	1f be       	out	0x3f, r1	; 63
    2eb6:	cf ef       	ldi	r28, 0xFF	; 255
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	df e2       	ldi	r29, 0x2F	; 47
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	18 be       	out	0x38, r1	; 56
    2ec0:	19 be       	out	0x39, r1	; 57
    2ec2:	1a be       	out	0x3a, r1	; 58
    2ec4:	1b be       	out	0x3b, r1	; 59

00002ec6 <__do_copy_data>:
    2ec6:	11 e2       	ldi	r17, 0x21	; 33
    2ec8:	a0 e0       	ldi	r26, 0x00	; 0
    2eca:	b0 e2       	ldi	r27, 0x20	; 32
    2ecc:	e8 e4       	ldi	r30, 0x48	; 72
    2ece:	fe ed       	ldi	r31, 0xDE	; 222
    2ed0:	00 e0       	ldi	r16, 0x00	; 0
    2ed2:	0b bf       	out	0x3b, r16	; 59
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <__do_copy_data+0x14>
    2ed6:	07 90       	elpm	r0, Z+
    2ed8:	0d 92       	st	X+, r0
    2eda:	a4 34       	cpi	r26, 0x44	; 68
    2edc:	b1 07       	cpc	r27, r17
    2ede:	d9 f7       	brne	.-10     	; 0x2ed6 <__do_copy_data+0x10>
    2ee0:	1b be       	out	0x3b, r1	; 59

00002ee2 <__do_clear_bss>:
    2ee2:	27 e2       	ldi	r18, 0x27	; 39
    2ee4:	a4 e4       	ldi	r26, 0x44	; 68
    2ee6:	b1 e2       	ldi	r27, 0x21	; 33
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <.do_clear_bss_start>

00002eea <.do_clear_bss_loop>:
    2eea:	1d 92       	st	X+, r1

00002eec <.do_clear_bss_start>:
    2eec:	af 3e       	cpi	r26, 0xEF	; 239
    2eee:	b2 07       	cpc	r27, r18
    2ef0:	e1 f7       	brne	.-8      	; 0x2eea <.do_clear_bss_loop>
    2ef2:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <main>
    2ef6:	0c 94 22 6f 	jmp	0xde44	; 0xde44 <_exit>

00002efa <__bad_interrupt>:
    2efa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002efe <initialize_ADC>:
#include "battery.h"

void initialize_ADC(void)
{
	//Setup battery variables
	overvoltage_error = FALSE;
    2efe:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <overvoltage_error>
	overvoltage_count = 0;
    2f02:	10 92 01 23 	sts	0x2301, r1	; 0x802301 <overvoltage_count>
	battery_status = BATTERY_UNKNOWN;
    2f06:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <battery_status>

	//Read lowest recorded battery level for this charge cycle
	cli();
    2f0a:	f8 94       	cli
	eeprom_busy_wait();
    2f0c:	ef ec       	ldi	r30, 0xCF	; 207
    2f0e:	f1 e0       	ldi	r31, 0x01	; 1
    2f10:	80 81       	ld	r24, Z
    2f12:	88 23       	and	r24, r24
    2f14:	ec f3       	brlt	.-6      	; 0x2f10 <initialize_ADC+0x12>
	min_battery_level = eeprom_read_byte((const uint8_t *)EEP8_BATTERY_LEVEL_ADDR);
    2f16:	82 e2       	ldi	r24, 0x22	; 34
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
	if (min_battery_level > 99)
    2f1e:	84 36       	cpi	r24, 0x64	; 100
    2f20:	18 f4       	brcc	.+6      	; 0x2f28 <initialize_ADC+0x2a>
	battery_status = BATTERY_UNKNOWN;

	//Read lowest recorded battery level for this charge cycle
	cli();
	eeprom_busy_wait();
	min_battery_level = eeprom_read_byte((const uint8_t *)EEP8_BATTERY_LEVEL_ADDR);
    2f22:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <min_battery_level>
    2f26:	0d c0       	rjmp	.+26     	; 0x2f42 <initialize_ADC+0x44>
	if (min_battery_level > 99)
	{
		min_battery_level = 99;
    2f28:	83 e6       	ldi	r24, 0x63	; 99
    2f2a:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <min_battery_level>
		eeprom_busy_wait();
    2f2e:	ef ec       	ldi	r30, 0xCF	; 207
    2f30:	f1 e0       	ldi	r31, 0x01	; 1
    2f32:	80 81       	ld	r24, Z
    2f34:	88 23       	and	r24, r24
    2f36:	ec f3       	brlt	.-6      	; 0x2f32 <initialize_ADC+0x34>
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_LEVEL_ADDR, 99);
    2f38:	63 e6       	ldi	r22, 0x63	; 99
    2f3a:	82 e2       	ldi	r24, 0x22	; 34
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	}
	sei();
    2f42:	78 94       	sei
    2f44:	08 95       	ret

00002f46 <check_battery_voltage>:
}

void check_battery_voltage(uint16_t total)
{
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
	//Convert total provided to voltage value
	float voltage = (total - 195.0) / 100.0;
    2f4e:	bc 01       	movw	r22, r24
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 64 6a 	call	0xd4c8	; 0xd4c8 <__floatunsisf>
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	43 e4       	ldi	r20, 0x43	; 67
    2f5e:	53 e4       	ldi	r21, 0x43	; 67
    2f60:	0e 94 51 69 	call	0xd2a2	; 0xd2a2 <__subsf3>
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	48 ec       	ldi	r20, 0xC8	; 200
    2f6a:	52 e4       	ldi	r21, 0x42	; 66
    2f6c:	0e 94 c3 69 	call	0xd386	; 0xd386 <__divsf3>
    2f70:	6b 01       	movw	r12, r22
    2f72:	7c 01       	movw	r14, r24
	uint8_t temp_battery_level = 0;

	//If voltage is 30 3 times in a row, overvoltage error occurs
	if (voltage >= 30)
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 ef       	ldi	r20, 0xF0	; 240
    2f7a:	51 e4       	ldi	r21, 0x41	; 65
    2f7c:	0e 94 16 6b 	call	0xd62c	; 0xd62c <__gesf2>
    2f80:	88 23       	and	r24, r24
    2f82:	dc f0       	brlt	.+54     	; 0x2fba <check_battery_voltage+0x74>
	{
		if (overvoltage_count++ > 3)
    2f84:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <overvoltage_count>
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	98 0f       	add	r25, r24
    2f8c:	90 93 01 23 	sts	0x2301, r25	; 0x802301 <overvoltage_count>
    2f90:	84 30       	cpi	r24, 0x04	; 4
    2f92:	a8 f0       	brcs	.+42     	; 0x2fbe <check_battery_voltage+0x78>
		{
			overvoltage_error = TRUE;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <overvoltage_error>

			send_alarm(OVERVOLTAGE);
    2f9a:	84 e0       	ldi	r24, 0x04	; 4
    2f9c:	0e 94 05 24 	call	0x480a	; 0x480a <send_alarm>

			lcd_write_new_P(PSTR("E13 - OVERVOLTAGE"));
    2fa0:	81 e7       	ldi	r24, 0x71	; 113
    2fa2:	9f e0       	ldi	r25, 0x0F	; 15
    2fa4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("TURN OFF KEY"));
    2fb0:	84 e6       	ldi	r24, 0x64	; 100
    2fb2:	9f e0       	ldi	r25, 0x0F	; 15
    2fb4:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <check_battery_voltage+0x78>
		}
	}
	else
	{
		overvoltage_count = 0;
    2fba:	10 92 01 23 	sts	0x2301, r1	; 0x802301 <overvoltage_count>
	}

	//Get battery voltage percentage relative to battery type
	//Equations were created using excel and the max/min voltage of the battery types below
	switch (battery_type)
    2fbe:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <battery_type>
    2fc2:	83 32       	cpi	r24, 0x23	; 35
    2fc4:	69 f1       	breq	.+90     	; 0x3020 <__stack+0x21>
    2fc6:	84 33       	cpi	r24, 0x34	; 52
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <check_battery_voltage+0x86>
    2fca:	51 c0       	rjmp	.+162    	; 0x306e <__stack+0x6f>
    2fcc:	82 31       	cpi	r24, 0x12	; 18
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <check_battery_voltage+0x8c>
    2fd0:	74 c0       	rjmp	.+232    	; 0x30ba <__stack+0xbb>
	{
	case LEAD:
		if (voltage >= 25)
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	48 ec       	ldi	r20, 0xC8	; 200
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	c7 01       	movw	r24, r14
    2fdc:	b6 01       	movw	r22, r12
    2fde:	0e 94 16 6b 	call	0xd62c	; 0xd62c <__gesf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	0c f0       	brlt	.+2      	; 0x2fe8 <check_battery_voltage+0xa2>
    2fe6:	ff c0       	rjmp	.+510    	; 0x31e6 <__stack+0x1e7>
			temp_battery_level = 99;
		else if (voltage <= 20.2)
    2fe8:	2a e9       	ldi	r18, 0x9A	; 154
    2fea:	39 e9       	ldi	r19, 0x99	; 153
    2fec:	41 ea       	ldi	r20, 0xA1	; 161
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	c7 01       	movw	r24, r14
    2ff2:	b6 01       	movw	r22, r12
    2ff4:	0e 94 be 69 	call	0xd37c	; 0xd37c <__cmpsf2>
    2ff8:	18 16       	cp	r1, r24
    2ffa:	0c f0       	brlt	.+2      	; 0x2ffe <check_battery_voltage+0xb8>
    2ffc:	83 c0       	rjmp	.+262    	; 0x3104 <__stack+0x105>
			temp_battery_level = 0;
		else
			temp_battery_level = (uint8_t)(20.833*voltage - 420.83);
    2ffe:	2c ef       	ldi	r18, 0xFC	; 252
    3000:	39 ea       	ldi	r19, 0xA9	; 169
    3002:	46 ea       	ldi	r20, 0xA6	; 166
    3004:	51 e4       	ldi	r21, 0x41	; 65
    3006:	c7 01       	movw	r24, r14
    3008:	b6 01       	movw	r22, r12
    300a:	0e 94 1b 6b 	call	0xd636	; 0xd636 <__mulsf3>
    300e:	2d e3       	ldi	r18, 0x3D	; 61
    3010:	3a e6       	ldi	r19, 0x6A	; 106
    3012:	42 ed       	ldi	r20, 0xD2	; 210
    3014:	53 e4       	ldi	r21, 0x43	; 67
    3016:	0e 94 51 69 	call	0xd2a2	; 0xd2a2 <__subsf3>
    301a:	0e 94 35 6a 	call	0xd46a	; 0xd46a <__fixunssfsi>
    301e:	4e c0       	rjmp	.+156    	; 0x30bc <__stack+0xbd>
		break;

	case AGM:
		if (voltage >= 25.2)
    3020:	2a e9       	ldi	r18, 0x9A	; 154
    3022:	39 e9       	ldi	r19, 0x99	; 153
    3024:	49 ec       	ldi	r20, 0xC9	; 201
    3026:	51 e4       	ldi	r21, 0x41	; 65
    3028:	c7 01       	movw	r24, r14
    302a:	b6 01       	movw	r22, r12
    302c:	0e 94 16 6b 	call	0xd62c	; 0xd62c <__gesf2>
    3030:	88 23       	and	r24, r24
    3032:	0c f0       	brlt	.+2      	; 0x3036 <__stack+0x37>
    3034:	d8 c0       	rjmp	.+432    	; 0x31e6 <__stack+0x1e7>
			temp_battery_level = 99;
		else if (voltage <= 22.8)
    3036:	26 e6       	ldi	r18, 0x66	; 102
    3038:	36 e6       	ldi	r19, 0x66	; 102
    303a:	46 eb       	ldi	r20, 0xB6	; 182
    303c:	51 e4       	ldi	r21, 0x41	; 65
    303e:	c7 01       	movw	r24, r14
    3040:	b6 01       	movw	r22, r12
    3042:	0e 94 be 69 	call	0xd37c	; 0xd37c <__cmpsf2>
    3046:	18 16       	cp	r1, r24
    3048:	0c f0       	brlt	.+2      	; 0x304c <__stack+0x4d>
    304a:	5e c0       	rjmp	.+188    	; 0x3108 <__stack+0x109>
			temp_battery_level = 0;
		else
			temp_battery_level = (uint8_t)(41.667*voltage - 950.00);
    304c:	22 e0       	ldi	r18, 0x02	; 2
    304e:	3b ea       	ldi	r19, 0xAB	; 171
    3050:	46 e2       	ldi	r20, 0x26	; 38
    3052:	52 e4       	ldi	r21, 0x42	; 66
    3054:	c7 01       	movw	r24, r14
    3056:	b6 01       	movw	r22, r12
    3058:	0e 94 1b 6b 	call	0xd636	; 0xd636 <__mulsf3>
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e8       	ldi	r19, 0x80	; 128
    3060:	4d e6       	ldi	r20, 0x6D	; 109
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 51 69 	call	0xd2a2	; 0xd2a2 <__subsf3>
    3068:	0e 94 35 6a 	call	0xd46a	; 0xd46a <__fixunssfsi>
    306c:	27 c0       	rjmp	.+78     	; 0x30bc <__stack+0xbd>
		break;

	case GEL:
		if (voltage >= 24.5)
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	44 ec       	ldi	r20, 0xC4	; 196
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	c7 01       	movw	r24, r14
    3078:	b6 01       	movw	r22, r12
    307a:	0e 94 16 6b 	call	0xd62c	; 0xd62c <__gesf2>
    307e:	88 23       	and	r24, r24
    3080:	0c f0       	brlt	.+2      	; 0x3084 <__stack+0x85>
    3082:	b1 c0       	rjmp	.+354    	; 0x31e6 <__stack+0x1e7>
			temp_battery_level = 99;
		else if (voltage <= 21.8)
    3084:	26 e6       	ldi	r18, 0x66	; 102
    3086:	36 e6       	ldi	r19, 0x66	; 102
    3088:	4e ea       	ldi	r20, 0xAE	; 174
    308a:	51 e4       	ldi	r21, 0x41	; 65
    308c:	c7 01       	movw	r24, r14
    308e:	b6 01       	movw	r22, r12
    3090:	0e 94 be 69 	call	0xd37c	; 0xd37c <__cmpsf2>
    3094:	18 16       	cp	r1, r24
    3096:	d4 f5       	brge	.+116    	; 0x310c <__stack+0x10d>
			temp_battery_level = 0;
		else
			temp_battery_level = (uint8_t)(36.733*voltage - 799.27);
    3098:	28 e9       	ldi	r18, 0x98	; 152
    309a:	3e ee       	ldi	r19, 0xEE	; 238
    309c:	42 e1       	ldi	r20, 0x12	; 18
    309e:	52 e4       	ldi	r21, 0x42	; 66
    30a0:	c7 01       	movw	r24, r14
    30a2:	b6 01       	movw	r22, r12
    30a4:	0e 94 1b 6b 	call	0xd636	; 0xd636 <__mulsf3>
    30a8:	28 e4       	ldi	r18, 0x48	; 72
    30aa:	31 ed       	ldi	r19, 0xD1	; 209
    30ac:	47 e4       	ldi	r20, 0x47	; 71
    30ae:	54 e4       	ldi	r21, 0x44	; 68
    30b0:	0e 94 51 69 	call	0xd2a2	; 0xd2a2 <__subsf3>
    30b4:	0e 94 35 6a 	call	0xd46a	; 0xd46a <__fixunssfsi>
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <__stack+0xbd>
		break;

	default:
		temp_battery_level = 0;
    30ba:	60 e0       	ldi	r22, 0x00	; 0
	}

	//If the motors have been shut off due to low battery and the battery has reached maximum charge
	//Turn motors back on
	if (motors_status == MOTORS_OFF && temp_battery_level == 99)
    30bc:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    30c0:	8a 3a       	cpi	r24, 0xAA	; 170
    30c2:	29 f5       	brne	.+74     	; 0x310e <__stack+0x10f>
    30c4:	63 36       	cpi	r22, 0x63	; 99
    30c6:	19 f5       	brne	.+70     	; 0x310e <__stack+0x10f>
	{
		cli();
    30c8:	f8 94       	cli
		eeprom_busy_wait();
    30ca:	ef ec       	ldi	r30, 0xCF	; 207
    30cc:	f1 e0       	ldi	r31, 0x01	; 1
    30ce:	80 81       	ld	r24, Z
    30d0:	88 23       	and	r24, r24
    30d2:	ec f3       	brlt	.-6      	; 0x30ce <__stack+0xcf>
		eeprom_update_byte((uint8_t *)EEP8_MOTORS_STATUS_ADDR, (uint8_t)MOTORS_ON);
    30d4:	6b eb       	ldi	r22, 0xBB	; 187
    30d6:	83 e2       	ldi	r24, 0x23	; 35
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		min_battery_level = 99;
    30de:	83 e6       	ldi	r24, 0x63	; 99
    30e0:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <min_battery_level>
		eeprom_busy_wait();
    30e4:	ef ec       	ldi	r30, 0xCF	; 207
    30e6:	f1 e0       	ldi	r31, 0x01	; 1
    30e8:	80 81       	ld	r24, Z
    30ea:	88 23       	and	r24, r24
    30ec:	ec f3       	brlt	.-6      	; 0x30e8 <__stack+0xe9>
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_LEVEL_ADDR, 99);
    30ee:	63 e6       	ldi	r22, 0x63	; 99
    30f0:	82 e2       	ldi	r24, 0x22	; 34
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		motors_status = MOTORS_ON;
    30f8:	8b eb       	ldi	r24, 0xBB	; 187
    30fa:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <motors_status>
		sei();
    30fe:	78 94       	sei
    3100:	63 e6       	ldi	r22, 0x63	; 99
    3102:	05 c0       	rjmp	.+10     	; 0x310e <__stack+0x10f>
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	03 c0       	rjmp	.+6      	; 0x310e <__stack+0x10f>
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	01 c0       	rjmp	.+2      	; 0x310e <__stack+0x10f>
    310c:	60 e0       	ldi	r22, 0x00	; 0
	}

	battery_level = temp_battery_level;
    310e:	60 93 b3 21 	sts	0x21B3, r22	; 0x8021b3 <battery_level>

	//Compare battery level to minimum recorded battery level
	if (battery_level < min_battery_level)
    3112:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <min_battery_level>
    3116:	68 17       	cp	r22, r24
    3118:	50 f4       	brcc	.+20     	; 0x312e <__stack+0x12f>
	{
		min_battery_level = battery_level;
    311a:	60 93 ae 21 	sts	0x21AE, r22	; 0x8021ae <min_battery_level>
		cli();
    311e:	f8 94       	cli
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_LEVEL_ADDR, min_battery_level);
    3120:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <min_battery_level>
    3124:	82 e2       	ldi	r24, 0x22	; 34
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		sei();
    312c:	78 94       	sei
	}
	//If large loads are running and battery level has significantly increased we can say that the minimum battery level has increased
	if (brush_state == BRUSH_RUNNING && vacuum_state == VACUUM_RUNNING && battery_level > (min_battery_level + BATTERY_LEVEL_HYSTERESIS))
    312e:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    3132:	8a 3a       	cpi	r24, 0xAA	; 170
    3134:	c9 f4       	brne	.+50     	; 0x3168 <__stack+0x169>
    3136:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <vacuum_state>
    313a:	8a 3a       	cpi	r24, 0xAA	; 170
    313c:	a9 f4       	brne	.+42     	; 0x3168 <__stack+0x169>
    313e:	20 91 b3 21 	lds	r18, 0x21B3	; 0x8021b3 <battery_level>
    3142:	42 2f       	mov	r20, r18
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <min_battery_level>
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0a 96       	adiw	r24, 0x0a	; 10
    314e:	84 17       	cp	r24, r20
    3150:	95 07       	cpc	r25, r21
    3152:	54 f4       	brge	.+20     	; 0x3168 <__stack+0x169>
	{
		min_battery_level = battery_level;
    3154:	20 93 ae 21 	sts	0x21AE, r18	; 0x8021ae <min_battery_level>
		cli();
    3158:	f8 94       	cli
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_LEVEL_ADDR, min_battery_level);
    315a:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <min_battery_level>
    315e:	82 e2       	ldi	r24, 0x22	; 34
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		sei();
    3166:	78 94       	sei
	}
	if (min_battery_level < (99 - BATTERY_LEVEL_HYSTERESIS) && battery_level == 99)
    3168:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <min_battery_level>
    316c:	89 35       	cpi	r24, 0x59	; 89
    316e:	70 f4       	brcc	.+28     	; 0x318c <__stack+0x18d>
    3170:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <battery_level>
    3174:	83 36       	cpi	r24, 0x63	; 99
    3176:	51 f4       	brne	.+20     	; 0x318c <__stack+0x18d>
	{
		min_battery_level = battery_level;
    3178:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <min_battery_level>
		cli();
    317c:	f8 94       	cli
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_LEVEL_ADDR, min_battery_level);
    317e:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <min_battery_level>
    3182:	82 e2       	ldi	r24, 0x22	; 34
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		sei();
    318a:	78 94       	sei
	}

	//Check if battery status has changed and update accordingly 
	if (min_battery_level > 10 && battery_status != BATTERY_GOOD)
    318c:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <min_battery_level>
    3190:	8b 30       	cpi	r24, 0x0B	; 11
    3192:	78 f0       	brcs	.+30     	; 0x31b2 <__stack+0x1b3>
    3194:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <battery_status>
    3198:	9a 3a       	cpi	r25, 0xAA	; 170
    319a:	61 f1       	breq	.+88     	; 0x31f4 <__stack+0x1f5>
	{
		if (battery_status != BATTERY_LOW_CHECK && battery_status != BATTERY_OFF_CHECK)
    319c:	9d 3d       	cpi	r25, 0xDD	; 221
    319e:	29 f0       	breq	.+10     	; 0x31aa <__stack+0x1ab>
    31a0:	9e 3e       	cpi	r25, 0xEE	; 238
    31a2:	19 f0       	breq	.+6      	; 0x31aa <__stack+0x1ab>
		{
			LCD_LED_ON;
    31a4:	80 e1       	ldi	r24, 0x10	; 16
    31a6:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
		}
		battery_status = BATTERY_GOOD;
    31aa:	8a ea       	ldi	r24, 0xAA	; 170
    31ac:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <battery_status>
    31b0:	30 c0       	rjmp	.+96     	; 0x3212 <__stack+0x213>
	}
	else if (min_battery_level <= 10 && min_battery_level != 0 && battery_status != BATTERY_LOW && battery_status != BATTERY_LOW_CHECK)
    31b2:	9f ef       	ldi	r25, 0xFF	; 255
    31b4:	98 0f       	add	r25, r24
    31b6:	9a 30       	cpi	r25, 0x0A	; 10
    31b8:	50 f4       	brcc	.+20     	; 0x31ce <__stack+0x1cf>
    31ba:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <battery_status>
    31be:	9b 3b       	cpi	r25, 0xBB	; 187
    31c0:	31 f0       	breq	.+12     	; 0x31ce <__stack+0x1cf>
    31c2:	9d 3d       	cpi	r25, 0xDD	; 221
    31c4:	e1 f0       	breq	.+56     	; 0x31fe <__stack+0x1ff>
	{
		battery_status = BATTERY_LOW_CHECK;
    31c6:	8d ed       	ldi	r24, 0xDD	; 221
    31c8:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <battery_status>
    31cc:	22 c0       	rjmp	.+68     	; 0x3212 <__stack+0x213>
	}
	else if (min_battery_level <= 10 && min_battery_level != 0 && battery_status != BATTERY_LOW && battery_status == BATTERY_LOW_CHECK)
	{
		battery_status = BATTERY_LOW;
	}
	else if (min_battery_level == 0 && battery_status != BATTERY_OFF && battery_status != BATTERY_OFF_CHECK)
    31ce:	81 11       	cpse	r24, r1
    31d0:	20 c0       	rjmp	.+64     	; 0x3212 <__stack+0x213>
    31d2:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    31d6:	8c 3c       	cpi	r24, 0xCC	; 204
    31d8:	e1 f0       	breq	.+56     	; 0x3212 <__stack+0x213>
    31da:	8e 3e       	cpi	r24, 0xEE	; 238
    31dc:	b9 f0       	breq	.+46     	; 0x320c <__stack+0x20d>
	{
		battery_status = BATTERY_OFF_CHECK;
    31de:	8e ee       	ldi	r24, 0xEE	; 238
    31e0:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <battery_status>
	}
	else if (min_battery_level == 0 && battery_status != BATTERY_OFF && battery_status == BATTERY_OFF_CHECK)
	{
		battery_status = BATTERY_OFF;
	}
}
    31e4:	16 c0       	rjmp	.+44     	; 0x3212 <__stack+0x213>
		temp_battery_level = 0;
	}

	//If the motors have been shut off due to low battery and the battery has reached maximum charge
	//Turn motors back on
	if (motors_status == MOTORS_OFF && temp_battery_level == 99)
    31e6:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    31ea:	8a 3a       	cpi	r24, 0xAA	; 170
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <__stack+0x1f1>
    31ee:	6c cf       	rjmp	.-296    	; 0x30c8 <__stack+0xc9>
    31f0:	63 e6       	ldi	r22, 0x63	; 99
    31f2:	8d cf       	rjmp	.-230    	; 0x310e <__stack+0x10f>
		{
			LCD_LED_ON;
		}
		battery_status = BATTERY_GOOD;
	}
	else if (min_battery_level <= 10 && min_battery_level != 0 && battery_status != BATTERY_LOW && battery_status != BATTERY_LOW_CHECK)
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
    31f6:	98 0f       	add	r25, r24
    31f8:	9a 30       	cpi	r25, 0x0A	; 10
    31fa:	28 f3       	brcs	.-54     	; 0x31c6 <__stack+0x1c7>
    31fc:	04 c0       	rjmp	.+8      	; 0x3206 <__stack+0x207>
	{
		battery_status = BATTERY_LOW_CHECK;
	}
	else if (min_battery_level <= 10 && min_battery_level != 0 && battery_status != BATTERY_LOW && battery_status == BATTERY_LOW_CHECK)
	{
		battery_status = BATTERY_LOW;
    31fe:	8b eb       	ldi	r24, 0xBB	; 187
    3200:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <battery_status>
    3204:	06 c0       	rjmp	.+12     	; 0x3212 <__stack+0x213>
	}
	else if (min_battery_level == 0 && battery_status != BATTERY_OFF && battery_status != BATTERY_OFF_CHECK)
    3206:	88 23       	and	r24, r24
    3208:	51 f3       	breq	.-44     	; 0x31de <__stack+0x1df>
    320a:	03 c0       	rjmp	.+6      	; 0x3212 <__stack+0x213>
	{
		battery_status = BATTERY_OFF_CHECK;
	}
	else if (min_battery_level == 0 && battery_status != BATTERY_OFF && battery_status == BATTERY_OFF_CHECK)
	{
		battery_status = BATTERY_OFF;
    320c:	8c ec       	ldi	r24, 0xCC	; 204
    320e:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <battery_status>
	}
}
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	08 95       	ret

0000321c <request_battery_can>:

//Request for battery voltage from A2
void request_battery_can(void)
{
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	1f 92       	push	r1
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	transmit_CAN(BATTERY_CAN, 0, 0, message);
    3226:	9e 01       	movw	r18, r28
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	8a eb       	ldi	r24, 0xBA	; 186
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3238:	2f ef       	ldi	r18, 0xFF	; 255
    323a:	89 ef       	ldi	r24, 0xF9	; 249
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	21 50       	subi	r18, 0x01	; 1
    3240:	80 40       	sbci	r24, 0x00	; 0
    3242:	90 40       	sbci	r25, 0x00	; 0
    3244:	e1 f7       	brne	.-8      	; 0x323e <request_battery_can+0x22>
    3246:	00 c0       	rjmp	.+0      	; 0x3248 <request_battery_can+0x2c>
    3248:	00 00       	nop
	_delay_ms(10);
	//_delay_ms(20);
    324a:	0f 90       	pop	r0
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	08 95       	ret

00003252 <write_bytes_CAN>:
	CQ_initialize();
}

//Writes the specified number of bytes to the specified address to the CAN controller
void write_bytes_CAN(uint8_t address, uint8_t bytes[], uint8_t num_bytes)
{
    3252:	df 92       	push	r13
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	d8 2e       	mov	r13, r24
    3262:	7b 01       	movw	r14, r22
    3264:	d4 2f       	mov	r29, r20
	CAN_CHIP_SELECT_LOW;
    3266:	01 e4       	ldi	r16, 0x41	; 65
    3268:	16 e0       	ldi	r17, 0x06	; 6
    326a:	c0 e1       	ldi	r28, 0x10	; 16
    326c:	f8 01       	movw	r30, r16
    326e:	c0 83       	st	Z, r28
    3270:	c0 93 46 06 	sts	0x0646, r28	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(WRITE_CAN);
    3274:	82 e0       	ldi	r24, 0x02	; 2
    3276:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	write_byte_SPI(address);
    327a:	8d 2d       	mov	r24, r13
    327c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	write_bytes_SPI(bytes, num_bytes);
    3280:	6d 2f       	mov	r22, r29
    3282:	c7 01       	movw	r24, r14
    3284:	0e 94 87 5a 	call	0xb50e	; 0xb50e <write_bytes_SPI>
	CAN_CHIP_SELECT_HIGH;
    3288:	f8 01       	movw	r30, r16
    328a:	c0 83       	st	Z, r28
    328c:	c0 93 45 06 	sts	0x0645, r28	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	df 90       	pop	r13
    329e:	08 95       	ret

000032a0 <initialize_CAN>:
#endif // __SIM__

int errorCount = 0;
//Initializes the CAN controller
void initialize_CAN(void)
{
    32a0:	ef 92       	push	r14
    32a2:	ff 92       	push	r15
    32a4:	1f 93       	push	r17
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <initialize_CAN+0xc>
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <initialize_CAN+0xe>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
	DBG("Init CAN");
	//IVA002: Standardized code
	CQ_initialize();
    32b2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <CQ_initialize>
	//stop_CAN();
	//Reset CAN controller
	CAN_CHIP_SELECT_LOW;
    32b6:	0f 2e       	mov	r0, r31
    32b8:	f1 e4       	ldi	r31, 0x41	; 65
    32ba:	ef 2e       	mov	r14, r31
    32bc:	f6 e0       	ldi	r31, 0x06	; 6
    32be:	ff 2e       	mov	r15, r31
    32c0:	f0 2d       	mov	r31, r0
    32c2:	10 e1       	ldi	r17, 0x10	; 16
    32c4:	f7 01       	movw	r30, r14
    32c6:	10 83       	st	Z, r17
    32c8:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(RESET_CAN);
    32cc:	80 ec       	ldi	r24, 0xC0	; 192
    32ce:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	CAN_CHIP_SELECT_HIGH;
    32d2:	f7 01       	movw	r30, r14
    32d4:	10 83       	st	Z, r17
    32d6:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	uint8_t config_bytes[4] = { 0 };
    32da:	19 82       	std	Y+1, r1	; 0x01
    32dc:	1a 82       	std	Y+2, r1	; 0x02
    32de:	1b 82       	std	Y+3, r1	; 0x03
    32e0:	1c 82       	std	Y+4, r1	; 0x04

	//TXRTSCTRL - Sets pin states of RTS pins
	//RTS pins are not used in this application
	config_bytes[0] = 0b00000000;
	write_bytes_CAN(TXRTSCTRL, config_bytes, 1);	//TXRTSCTRL
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	be 01       	movw	r22, r28
    32e6:	6f 5f       	subi	r22, 0xFF	; 255
    32e8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ea:	8d e0       	ldi	r24, 0x0D	; 13
    32ec:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>
	//If this buffer is full messages will rollover to RXB1
	//RXB1CTRL - Control for receive buffer 0
	//This buffer only receives only standard identifier messages
	//BFPCTRL - Sets pin states of RXBF pins
	//RXBF pins not used
	config_bytes[0] = 0b00100100;	//RXB0CTRL
    32f0:	84 e2       	ldi	r24, 0x24	; 36
    32f2:	89 83       	std	Y+1, r24	; 0x01
	config_bytes[1] = 0b00100000;	//RXB1CTRL
    32f4:	80 e2       	ldi	r24, 0x20	; 32
    32f6:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[2] = 0b00000000;	//BFPCTRL
    32f8:	1b 82       	std	Y+3, r1	; 0x03
	write_bytes_CAN(RXB0CTRL, config_bytes, 3);
    32fa:	43 e0       	ldi	r20, 0x03	; 3
    32fc:	be 01       	movw	r22, r28
    32fe:	6f 5f       	subi	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	80 e6       	ldi	r24, 0x60	; 96
    3304:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>
	//Propagation Segment Length - 7
	/*config_bytes[0] = 0b11000000;	//CNF1
	config_bytes[1] = 0b11110011;	//CNF2
	config_bytes[2] = 0b00000011;	//CNF3*/ /// 153KBPS

	config_bytes[2] = 0b10000011;	//CNF1 /// BRP=3;SJW=3TQ
    3308:	13 e8       	ldi	r17, 0x83	; 131
    330a:	1b 83       	std	Y+3, r17	; 0x03
	config_bytes[1] = 0b01110000;	//CNF2 // BTLMODE=0;SAM=1;;PHSEG1=6;PRSEG=0; //125Kbps  //Received_125Kbps
    330c:	80 e7       	ldi	r24, 0x70	; 112
    330e:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[0] = 0b00000110;	//CNF3 // PHSEG2=6;*/
    3310:	86 e0       	ldi	r24, 0x06	; 6
    3312:	89 83       	std	Y+1, r24	; 0x01
	write_bytes_CAN(CNF3, config_bytes, 3);
    3314:	43 e0       	ldi	r20, 0x03	; 3
    3316:	be 01       	movw	r22, r28
    3318:	6f 5f       	subi	r22, 0xFF	; 255
    331a:	7f 4f       	sbci	r23, 0xFF	; 255
    331c:	88 e2       	ldi	r24, 0x28	; 40
    331e:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>
	//Message Error Interrupt
	//Transmit Buffer 0 Empty Interrupt
	//Receive Buffer 0 Full Interrupt
	//Receive Buffer 1 Full Interrupt
	////config_bytes[0] = 0b10000111;	//CANINTE
	config_bytes[0] = 0b10000011;	//CANINTE
    3322:	19 83       	std	Y+1, r17	; 0x01
	write_bytes_CAN(CANINTE, config_bytes, 1);
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	be 01       	movw	r22, r28
    3328:	6f 5f       	subi	r22, 0xFF	; 255
    332a:	7f 4f       	sbci	r23, 0xFF	; 255
    332c:	8b e2       	ldi	r24, 0x2B	; 43
    332e:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>

	config_bytes[0] = 0b00000000;
    3332:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(TXB0CTRL, config_bytes, 1);
    3334:	41 e0       	ldi	r20, 0x01	; 1
    3336:	be 01       	movw	r22, r28
    3338:	6f 5f       	subi	r22, 0xFF	; 255
    333a:	7f 4f       	sbci	r23, 0xFF	; 255
    333c:	80 e3       	ldi	r24, 0x30	; 48
    333e:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>
	write_bytes_CAN(TXB1CTRL, config_bytes, 1);
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	be 01       	movw	r22, r28
    3346:	6f 5f       	subi	r22, 0xFF	; 255
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	80 e4       	ldi	r24, 0x40	; 64
    334c:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>

	//CANCTRL - Sets operation modes
	//Normal operation mode
	config_bytes[0] = 0b00000000;	//CANCTRL
    3350:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANCTRL, config_bytes, 1);
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	be 01       	movw	r22, r28
    3356:	6f 5f       	subi	r22, 0xFF	; 255
    3358:	7f 4f       	sbci	r23, 0xFF	; 255
    335a:	8f e0       	ldi	r24, 0x0F	; 15
    335c:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>

	//Setup interrupt line for MCP25625
	PORTC_DIRCLR = (1 << CAN_INT);
    3360:	88 e0       	ldi	r24, 0x08	; 8
    3362:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	PORTC_INT0MASK = (1 << CAN_INT);	//Turn on interrupt
    3366:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
	PORTC_INTCTRL = 0x05;				//Low level interrupts
    336a:	85 e0       	ldi	r24, 0x05	; 5
    336c:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__TEXT_REGION_LENGTH__+0x700649>
	PORTC_PIN3CTRL = 0x02;				//Falling Edge
    3370:	82 e0       	ldi	r24, 0x02	; 2
    3372:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <__TEXT_REGION_LENGTH__+0x700653>

	can_functioning = FALSE;
    3376:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <can_functioning>
	can_failure = FALSE;
    337a:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <can_failure>
	A2_ack_received = FALSE;
    337e:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <A2_ack_received>
	A3_ack_received = FALSE;
    3382:	10 92 5f 23 	sts	0x235F, r1	; 0x80235f <A3_ack_received>
	can_functioning_timer = 0;
    3386:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <can_functioning_timer>
}
    338a:	24 96       	adiw	r28, 0x04	; 4
    338c:	cd bf       	out	0x3d, r28	; 61
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	ff 90       	pop	r15
    3398:	ef 90       	pop	r14
    339a:	08 95       	ret

0000339c <read_bytes_CAN>:
}

#ifndef  __SIM__
//Reads the specified number of bytes to the specified address to the CAN controller
void read_bytes_CAN(uint8_t address, uint8_t bytes[], uint8_t num_bytes)
{
    339c:	df 92       	push	r13
    339e:	ef 92       	push	r14
    33a0:	ff 92       	push	r15
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	d8 2e       	mov	r13, r24
    33ac:	7b 01       	movw	r14, r22
    33ae:	d4 2f       	mov	r29, r20
	CAN_CHIP_SELECT_LOW;
    33b0:	01 e4       	ldi	r16, 0x41	; 65
    33b2:	16 e0       	ldi	r17, 0x06	; 6
    33b4:	c0 e1       	ldi	r28, 0x10	; 16
    33b6:	f8 01       	movw	r30, r16
    33b8:	c0 83       	st	Z, r28
    33ba:	c0 93 46 06 	sts	0x0646, r28	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(READ_CAN);
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	write_byte_SPI(address);
    33c4:	8d 2d       	mov	r24, r13
    33c6:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	read_bytes_SPI(bytes, num_bytes);
    33ca:	6d 2f       	mov	r22, r29
    33cc:	c7 01       	movw	r24, r14
    33ce:	0e 94 9c 5a 	call	0xb538	; 0xb538 <read_bytes_SPI>
	CAN_CHIP_SELECT_HIGH;
    33d2:	f8 01       	movw	r30, r16
    33d4:	c0 83       	st	Z, r28
    33d6:	c0 93 45 06 	sts	0x0645, r28	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	08 95       	ret

000033ea <read_byte_CAN>:

//Reads the specified register from the CAN controller
uint8_t read_byte_CAN(uint8_t address)
{
    33ea:	ef 92       	push	r14
    33ec:	ff 92       	push	r15
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	1f 92       	push	r1
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	08 2f       	mov	r16, r24
	CAN_CHIP_SELECT_LOW;
    33fe:	0f 2e       	mov	r0, r31
    3400:	f1 e4       	ldi	r31, 0x41	; 65
    3402:	ef 2e       	mov	r14, r31
    3404:	f6 e0       	ldi	r31, 0x06	; 6
    3406:	ff 2e       	mov	r15, r31
    3408:	f0 2d       	mov	r31, r0
    340a:	10 e1       	ldi	r17, 0x10	; 16
    340c:	f7 01       	movw	r30, r14
    340e:	10 83       	st	Z, r17
    3410:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(READ_CAN);
    3414:	83 e0       	ldi	r24, 0x03	; 3
    3416:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	write_byte_SPI(address);
    341a:	80 2f       	mov	r24, r16
    341c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	uint8_t bytes[1];
	read_bytes_SPI(bytes, 1);
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	ce 01       	movw	r24, r28
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	0e 94 9c 5a 	call	0xb538	; 0xb538 <read_bytes_SPI>
	CAN_CHIP_SELECT_HIGH;
    342a:	f7 01       	movw	r30, r14
    342c:	10 83       	st	Z, r17
    342e:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	return bytes[0];
}
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	0f 90       	pop	r0
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	08 95       	ret

00003444 <transmit_CAN>:

//IVA002: Added CAN Transmit Queue
//Adds a CAN message on the Tx queue
void transmit_CAN(uint16_t dataID, uint8_t remote_transmission_request,
	uint8_t data_length, uint8_t data[])
{
    3444:	cf 93       	push	r28
    3446:	df 93       	push	r29
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	2b 97       	sbiw	r28, 0x0b	; 11
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	de bf       	out	0x3e, r29	; 62
	uint8_t buff[TX_BLOCK_SIZE];
	buff[0] = dataID;
    3452:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = remote_transmission_request;
    3454:	6a 83       	std	Y+2, r22	; 0x02
	buff[2] = data_length;
    3456:	4b 83       	std	Y+3, r20	; 0x03
	for (uint8_t i = 0; i < data_length; i++)
    3458:	44 23       	and	r20, r20
    345a:	79 f0       	breq	.+30     	; 0x347a <transmit_CAN+0x36>
    345c:	a2 2f       	mov	r26, r18
    345e:	b3 2f       	mov	r27, r19
    3460:	fe 01       	movw	r30, r28
    3462:	34 96       	adiw	r30, 0x04	; 4
    3464:	41 50       	subi	r20, 0x01	; 1
    3466:	9e 01       	movw	r18, r28
    3468:	24 0f       	add	r18, r20
    346a:	31 1d       	adc	r19, r1
    346c:	2b 5f       	subi	r18, 0xFB	; 251
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
		buff[i + 3] = data[i];
    3470:	8d 91       	ld	r24, X+
    3472:	81 93       	st	Z+, r24
{
	uint8_t buff[TX_BLOCK_SIZE];
	buff[0] = dataID;
	buff[1] = remote_transmission_request;
	buff[2] = data_length;
	for (uint8_t i = 0; i < data_length; i++)
    3474:	e2 17       	cp	r30, r18
    3476:	f3 07       	cpc	r31, r19
    3478:	d9 f7       	brne	.-10     	; 0x3470 <transmit_CAN+0x2c>
		buff[i + 3] = data[i];
	CQTx_enqueue(buff);
    347a:	ce 01       	movw	r24, r28
    347c:	01 96       	adiw	r24, 0x01	; 1
    347e:	0e 94 5f 1c 	call	0x38be	; 0x38be <CQTx_enqueue>
}
    3482:	2b 96       	adiw	r28, 0x0b	; 11
    3484:	cd bf       	out	0x3d, r28	; 61
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	08 95       	ret

0000348e <transmit_CAN_>:

//IVA002: Added CAN Transmit Queue
//Transmits a CAN message on the CAN bus
void transmit_CAN_(uint8_t dataID, uint8_t remote_transmission_request,
	uint8_t data_length, uint8_t data[])
{
    348e:	2f 92       	push	r2
    3490:	3f 92       	push	r3
    3492:	4f 92       	push	r4
    3494:	5f 92       	push	r5
    3496:	6f 92       	push	r6
    3498:	7f 92       	push	r7
    349a:	8f 92       	push	r8
    349c:	9f 92       	push	r9
    349e:	af 92       	push	r10
    34a0:	bf 92       	push	r11
    34a2:	cf 92       	push	r12
    34a4:	df 92       	push	r13
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <transmit_CAN_+0x26>
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <transmit_CAN_+0x28>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	28 2e       	mov	r2, r24
    34bc:	46 2e       	mov	r4, r22
    34be:	54 2e       	mov	r5, r20
    34c0:	59 01       	movw	r10, r18
	uint8_t retry = 1;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	89 83       	std	Y+1, r24	; 0x01

jump_retry:
	Check_flag = 1;
    34c6:	33 24       	eor	r3, r3
    34c8:	33 94       	inc	r3
	CAN_CHIP_SELECT_LOW;
    34ca:	01 e4       	ldi	r16, 0x41	; 65
    34cc:	16 e0       	ldi	r17, 0x06	; 6
    34ce:	68 94       	set
    34d0:	77 24       	eor	r7, r7
    34d2:	74 f8       	bld	r7, 4
    34d4:	67 2c       	mov	r6, r7
    34d6:	0f 2e       	mov	r0, r31
    34d8:	f6 e4       	ldi	r31, 0x46	; 70
    34da:	ef 2e       	mov	r14, r31
    34dc:	f6 e0       	ldi	r31, 0x06	; 6
    34de:	ff 2e       	mov	r15, r31
    34e0:	f0 2d       	mov	r31, r0
    34e2:	9f ef       	ldi	r25, 0xFF	; 255
    34e4:	94 0f       	add	r25, r20
    34e6:	e9 2f       	mov	r30, r25
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	31 96       	adiw	r30, 0x01	; 1
    34ec:	e2 0f       	add	r30, r18
    34ee:	f3 1f       	adc	r31, r19
    34f0:	eb 83       	std	Y+3, r30	; 0x03
    34f2:	fc 83       	std	Y+4, r31	; 0x04
		for (uint8_t i = 0; i < data_length; i++)
		{
			write_byte_SPI(data[i]);
		}
	}
	CAN_CHIP_SELECT_HIGH;
    34f4:	0f 2e       	mov	r0, r31
    34f6:	f5 e4       	ldi	r31, 0x45	; 69
    34f8:	cf 2e       	mov	r12, r31
    34fa:	f6 e0       	ldi	r31, 0x06	; 6
    34fc:	df 2e       	mov	r13, r31
    34fe:	f0 2d       	mov	r31, r0
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <transmit_CAN_+0x76>
	}
	else
	{
		if (retry == 1)
		{
			retry--;
    3502:	19 82       	std	Y+1, r1	; 0x01
	uint8_t data_length, uint8_t data[])
{
	uint8_t retry = 1;

jump_retry:
	Check_flag = 1;
    3504:	30 92 9d 22 	sts	0x229D, r3	; 0x80229d <Check_flag>
	CAN_CHIP_SELECT_LOW;
    3508:	f8 01       	movw	r30, r16
    350a:	60 82       	st	Z, r6
    350c:	f7 01       	movw	r30, r14
    350e:	60 82       	st	Z, r6
	write_byte_SPI(LOAD_TX_BUFFER_CAN | LOAD_BUFFER_0);
    3510:	80 e4       	ldi	r24, 0x40	; 64
    3512:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	//   10 ..................03.......00  .... .......................
	//   28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	//    1  0  0  0  0  1  1  1  1  1  1  1  1  x  x  x  x  x  x  x  x  1  0  1  0  0  0  0  1
	
	//Bits 10-3 of standard identifier
	write_byte_SPI(0b10000111);
    3516:	87 e8       	ldi	r24, 0x87	; 135
    3518:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>

	//Bits 2-0 of standard identifier 
	//& extended identifier enable bit & bits 17-16 of extended identifier
	//Extended identifier is used
	write_byte_SPI(0b11101011);
    351c:	8b ee       	ldi	r24, 0xEB	; 235
    351e:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>

	//Bits 15-8 of extended identifier
	write_byte_SPI(dataID);
    3522:	82 2d       	mov	r24, r2
    3524:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>

	//Bits 7-0 of extended identifier
	write_byte_SPI(0xA1);
    3528:	81 ea       	ldi	r24, 0xA1	; 161
    352a:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>

	//If remote transmission request is required
	//set RTR bit as 1, and set data length to 0
	if (remote_transmission_request)
    352e:	44 20       	and	r4, r4
    3530:	21 f0       	breq	.+8      	; 0x353a <transmit_CAN_+0xac>
	{
		uint8_t rtr_dlc = 0x40;
		write_byte_SPI(rtr_dlc);
    3532:	80 e4       	ldi	r24, 0x40	; 64
    3534:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
    3538:	10 c0       	rjmp	.+32     	; 0x355a <transmit_CAN_+0xcc>
	}
	//Else set data length and write the data bytes
	else
	{
		uint8_t rtr_dlc = data_length;
		write_byte_SPI(rtr_dlc);
    353a:	85 2d       	mov	r24, r5
    353c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
		for (uint8_t i = 0; i < data_length; i++)
    3540:	55 20       	and	r5, r5
    3542:	59 f0       	breq	.+22     	; 0x355a <transmit_CAN_+0xcc>
    3544:	45 01       	movw	r8, r10
		{
			write_byte_SPI(data[i]);
    3546:	f4 01       	movw	r30, r8
    3548:	81 91       	ld	r24, Z+
    354a:	4f 01       	movw	r8, r30
    354c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	//Else set data length and write the data bytes
	else
	{
		uint8_t rtr_dlc = data_length;
		write_byte_SPI(rtr_dlc);
		for (uint8_t i = 0; i < data_length; i++)
    3550:	8b 81       	ldd	r24, Y+3	; 0x03
    3552:	9c 81       	ldd	r25, Y+4	; 0x04
    3554:	88 16       	cp	r8, r24
    3556:	99 06       	cpc	r9, r25
    3558:	b1 f7       	brne	.-20     	; 0x3546 <transmit_CAN_+0xb8>
		{
			write_byte_SPI(data[i]);
		}
	}
	CAN_CHIP_SELECT_HIGH;
    355a:	f8 01       	movw	r30, r16
    355c:	70 82       	st	Z, r7
    355e:	f6 01       	movw	r30, r12
    3560:	70 82       	st	Z, r7

	//Send out data through CAN
	CAN_CHIP_SELECT_LOW;
    3562:	f8 01       	movw	r30, r16
    3564:	70 82       	st	Z, r7
    3566:	f7 01       	movw	r30, r14
    3568:	70 82       	st	Z, r7
	write_byte_SPI(WRITE_CAN);
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	write_byte_SPI(TXB0CTRL);
    3570:	80 e3       	ldi	r24, 0x30	; 48
    3572:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	if (Check_flag)
    3576:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <Check_flag>
    357a:	88 23       	and	r24, r24
    357c:	21 f0       	breq	.+8      	; 0x3586 <transmit_CAN_+0xf8>
	{
		write_byte_SPI(0x08);
    357e:	88 e0       	ldi	r24, 0x08	; 8
    3580:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
    3584:	04 c0       	rjmp	.+8      	; 0x358e <transmit_CAN_+0x100>
	}
	else
	{
		if (retry == 1)
    3586:	f9 81       	ldd	r31, Y+1	; 0x01
    3588:	f1 30       	cpi	r31, 0x01	; 1
    358a:	09 f4       	brne	.+2      	; 0x358e <transmit_CAN_+0x100>
    358c:	ba cf       	rjmp	.-140    	; 0x3502 <transmit_CAN_+0x74>
		{
			retry--;
			goto jump_retry;
		}
	}
	CAN_CHIP_SELECT_HIGH;
    358e:	80 e1       	ldi	r24, 0x10	; 16
    3590:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    3594:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	Check_flag = 0;
    3598:	10 92 9d 22 	sts	0x229D, r1	; 0x80229d <Check_flag>
}
    359c:	24 96       	adiw	r28, 0x04	; 4
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	df 90       	pop	r13
    35b0:	cf 90       	pop	r12
    35b2:	bf 90       	pop	r11
    35b4:	af 90       	pop	r10
    35b6:	9f 90       	pop	r9
    35b8:	8f 90       	pop	r8
    35ba:	7f 90       	pop	r7
    35bc:	6f 90       	pop	r6
    35be:	5f 90       	pop	r5
    35c0:	4f 90       	pop	r4
    35c2:	3f 90       	pop	r3
    35c4:	2f 90       	pop	r2
    35c6:	08 95       	ret

000035c8 <reset_CAN_error>:
//	Check_flag = 0;
//}

//If CAN error has set reset the CAN controller
void reset_CAN_error(void)
{
    35c8:	cf 93       	push	r28
	//IVA002: Fix for CAN SPI Corruption
	CAN_MX_LOCK();
    35ca:	f8 94       	cli
	uint8_t t_error = read_byte_CAN(TEC);
    35cc:	8c e1       	ldi	r24, 0x1C	; 28
    35ce:	0e 94 f5 19 	call	0x33ea	; 0x33ea <read_byte_CAN>
    35d2:	c8 2f       	mov	r28, r24
	uint8_t r_error = read_byte_CAN(REC);
    35d4:	8d e1       	ldi	r24, 0x1D	; 29
    35d6:	0e 94 f5 19 	call	0x33ea	; 0x33ea <read_byte_CAN>

	if (t_error > 120 || r_error > 120)
    35da:	c9 37       	cpi	r28, 0x79	; 121
    35dc:	10 f4       	brcc	.+4      	; 0x35e2 <reset_CAN_error+0x1a>
    35de:	89 37       	cpi	r24, 0x79	; 121
    35e0:	10 f0       	brcs	.+4      	; 0x35e6 <reset_CAN_error+0x1e>
	{
		initialize_CAN();
    35e2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <initialize_CAN>
	}
	CAN_MX_UNLOCK();
    35e6:	78 94       	sei
}
    35e8:	cf 91       	pop	r28
    35ea:	08 95       	ret

000035ec <__vector_2>:


ISR(CAN_INTERRUPT)
{
    35ec:	1f 92       	push	r1
    35ee:	0f 92       	push	r0
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	0f 92       	push	r0
    35f4:	11 24       	eor	r1, r1
    35f6:	08 b6       	in	r0, 0x38	; 56
    35f8:	0f 92       	push	r0
    35fa:	18 be       	out	0x38, r1	; 56
    35fc:	09 b6       	in	r0, 0x39	; 57
    35fe:	0f 92       	push	r0
    3600:	19 be       	out	0x39, r1	; 57
    3602:	0a b6       	in	r0, 0x3a	; 58
    3604:	0f 92       	push	r0
    3606:	1a be       	out	0x3a, r1	; 58
    3608:	0b b6       	in	r0, 0x3b	; 59
    360a:	0f 92       	push	r0
    360c:	1b be       	out	0x3b, r1	; 59
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	2f 93       	push	r18
    3614:	3f 93       	push	r19
    3616:	4f 93       	push	r20
    3618:	5f 93       	push	r21
    361a:	6f 93       	push	r22
    361c:	7f 93       	push	r23
    361e:	8f 93       	push	r24
    3620:	9f 93       	push	r25
    3622:	af 93       	push	r26
    3624:	bf 93       	push	r27
    3626:	ef 93       	push	r30
    3628:	ff 93       	push	r31
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	2d 97       	sbiw	r28, 0x0d	; 13
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	de bf       	out	0x3e, r29	; 62
	if (Check_flag)
    3638:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <Check_flag>
    363c:	81 11       	cpse	r24, r1
	{
		Check_flag = 0;
    363e:	10 92 9d 22 	sts	0x229D, r1	; 0x80229d <Check_flag>
	}

	uint8_t int_flags;
	int_flags = read_byte_CAN(CANINTF);
    3642:	8c e2       	ldi	r24, 0x2C	; 44
    3644:	0e 94 f5 19 	call	0x33ea	; 0x33ea <read_byte_CAN>
    3648:	18 2f       	mov	r17, r24

	//If either error interrupt flag is raised, notify the user
	if (int_flags & ERRIF)
    364a:	85 ff       	sbrs	r24, 5
    364c:	09 c0       	rjmp	.+18     	; 0x3660 <__vector_2+0x74>
	{
		errorCount++;
    364e:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <__data_end>
    3652:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <__data_end+0x1>
    3656:	01 96       	adiw	r24, 0x01	; 1
    3658:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <__data_end>
    365c:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <__data_end+0x1>
	}
	if (int_flags & MERRF)
    3660:	11 23       	and	r17, r17
    3662:	4c f4       	brge	.+18     	; 0x3676 <__vector_2+0x8a>
	{
		errorCount++;
    3664:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <__data_end>
    3668:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <__data_end+0x1>
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <__data_end>
    3672:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <__data_end+0x1>
	}

	//If either receive buffer has data, log data to queue of CAN communication
	if (int_flags & RXB0_FULL)
    3676:	10 ff       	sbrs	r17, 0
    3678:	2a c0       	rjmp	.+84     	; 0x36ce <__vector_2+0xe2>
	{
		uint8_t data[8] = { 0 };
    367a:	fe 01       	movw	r30, r28
    367c:	32 96       	adiw	r30, 0x02	; 2
    367e:	88 e0       	ldi	r24, 0x08	; 8
    3680:	df 01       	movw	r26, r30
    3682:	1d 92       	st	X+, r1
    3684:	8a 95       	dec	r24
    3686:	e9 f7       	brne	.-6      	; 0x3682 <__vector_2+0x96>
		//Read only bits 3-0 of RXB0DLC to get the data length code
		uint8_t data_length = read_byte_CAN(RXB0DLC) & 0x0F;
    3688:	85 e6       	ldi	r24, 0x65	; 101
    368a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <read_byte_CAN>
    368e:	08 2f       	mov	r16, r24
    3690:	0f 70       	andi	r16, 0x0F	; 15
		if (data_length > 8) //IVA001: Incase of corruption do not process the data
    3692:	09 30       	cpi	r16, 0x09	; 9
    3694:	e0 f4       	brcc	.+56     	; 0x36ce <__vector_2+0xe2>
		{
			DBG1("A1 CAN Corruption CH0 %d", data_length);
		}
		else
		{
			read_bytes_CAN(RXB0D0, data, data_length);
    3696:	40 2f       	mov	r20, r16
    3698:	be 01       	movw	r22, r28
    369a:	6e 5f       	subi	r22, 0xFE	; 254
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	86 e6       	ldi	r24, 0x66	; 102
    36a0:	0e 94 ce 19 	call	0x339c	; 0x339c <read_bytes_CAN>

			//IVA002: J1939 Implementation
			uint8_t ids[4] = { 0 };
    36a4:	1a 86       	std	Y+10, r1	; 0x0a
    36a6:	1b 86       	std	Y+11, r1	; 0x0b
    36a8:	1c 86       	std	Y+12, r1	; 0x0c
    36aa:	1d 86       	std	Y+13, r1	; 0x0d
			read_bytes_CAN(RXB0SIDH, ids, 4);
    36ac:	44 e0       	ldi	r20, 0x04	; 4
    36ae:	be 01       	movw	r22, r28
    36b0:	66 5f       	subi	r22, 0xF6	; 246
    36b2:	7f 4f       	sbci	r23, 0xFF	; 255
    36b4:	81 e6       	ldi	r24, 0x61	; 97
    36b6:	0e 94 ce 19 	call	0x339c	; 0x339c <read_bytes_CAN>

			if ((ids[1] && 0b00001000) != 0) // ignore std ids
    36ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    36bc:	88 23       	and	r24, r24
    36be:	39 f0       	breq	.+14     	; 0x36ce <__vector_2+0xe2>
			{
				uint16_t can_id = ids[2];
				CQRx_enqueue(data, can_id, data_length);
    36c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	40 2f       	mov	r20, r16
    36c6:	ce 01       	movw	r24, r28
    36c8:	02 96       	adiw	r24, 0x02	; 2
    36ca:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <CQRx_enqueue>
			}
		}
	}

	if (int_flags & RXB1_FULL)
    36ce:	11 ff       	sbrs	r17, 1
    36d0:	2a c0       	rjmp	.+84     	; 0x3726 <__vector_2+0x13a>
	{
		uint8_t data[8] = { 0 };
    36d2:	fe 01       	movw	r30, r28
    36d4:	32 96       	adiw	r30, 0x02	; 2
    36d6:	88 e0       	ldi	r24, 0x08	; 8
    36d8:	df 01       	movw	r26, r30
    36da:	1d 92       	st	X+, r1
    36dc:	8a 95       	dec	r24
    36de:	e9 f7       	brne	.-6      	; 0x36da <__vector_2+0xee>
		uint8_t data_length = read_byte_CAN(RXB1DLC) & 0x0F;
    36e0:	85 e7       	ldi	r24, 0x75	; 117
    36e2:	0e 94 f5 19 	call	0x33ea	; 0x33ea <read_byte_CAN>
    36e6:	18 2f       	mov	r17, r24
    36e8:	1f 70       	andi	r17, 0x0F	; 15
		if (data_length > 8) //IVA001: Incase of corruption do not process the data
    36ea:	19 30       	cpi	r17, 0x09	; 9
    36ec:	e0 f4       	brcc	.+56     	; 0x3726 <__vector_2+0x13a>
		{
			DBG1("A1 CAN Corruption CH1 %d", data_length);
		}
		else
		{
			read_bytes_CAN(RXB1D0, data, data_length);
    36ee:	41 2f       	mov	r20, r17
    36f0:	be 01       	movw	r22, r28
    36f2:	6e 5f       	subi	r22, 0xFE	; 254
    36f4:	7f 4f       	sbci	r23, 0xFF	; 255
    36f6:	86 e7       	ldi	r24, 0x76	; 118
    36f8:	0e 94 ce 19 	call	0x339c	; 0x339c <read_bytes_CAN>

			//IVA002: J1939 Implementation
			uint8_t ids[4] = { 0 };
    36fc:	1a 86       	std	Y+10, r1	; 0x0a
    36fe:	1b 86       	std	Y+11, r1	; 0x0b
    3700:	1c 86       	std	Y+12, r1	; 0x0c
    3702:	1d 86       	std	Y+13, r1	; 0x0d
			read_bytes_CAN(RXB1SIDH, ids, 4);
    3704:	44 e0       	ldi	r20, 0x04	; 4
    3706:	be 01       	movw	r22, r28
    3708:	66 5f       	subi	r22, 0xF6	; 246
    370a:	7f 4f       	sbci	r23, 0xFF	; 255
    370c:	81 e7       	ldi	r24, 0x71	; 113
    370e:	0e 94 ce 19 	call	0x339c	; 0x339c <read_bytes_CAN>
			if ((ids[1] && 0b00001000) != 0) // ignore std ids
    3712:	8b 85       	ldd	r24, Y+11	; 0x0b
    3714:	88 23       	and	r24, r24
    3716:	39 f0       	breq	.+14     	; 0x3726 <__vector_2+0x13a>
			{
				uint16_t can_id = ids[2];
				CQRx_enqueue(data, can_id, data_length);
    3718:	6c 85       	ldd	r22, Y+12	; 0x0c
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	41 2f       	mov	r20, r17
    371e:	ce 01       	movw	r24, r28
    3720:	02 96       	adiw	r24, 0x02	; 2
    3722:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <CQRx_enqueue>
			}
		}
	}

	//Clear the flags
	uint8_t clear[1] = { 0x00 };
    3726:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANINTF, clear, 1);
    3728:	41 e0       	ldi	r20, 0x01	; 1
    372a:	be 01       	movw	r22, r28
    372c:	6f 5f       	subi	r22, 0xFF	; 255
    372e:	7f 4f       	sbci	r23, 0xFF	; 255
    3730:	8c e2       	ldi	r24, 0x2C	; 44
    3732:	0e 94 29 19 	call	0x3252	; 0x3252 <write_bytes_CAN>
}
    3736:	2d 96       	adiw	r28, 0x0d	; 13
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	ff 91       	pop	r31
    3742:	ef 91       	pop	r30
    3744:	bf 91       	pop	r27
    3746:	af 91       	pop	r26
    3748:	9f 91       	pop	r25
    374a:	8f 91       	pop	r24
    374c:	7f 91       	pop	r23
    374e:	6f 91       	pop	r22
    3750:	5f 91       	pop	r21
    3752:	4f 91       	pop	r20
    3754:	3f 91       	pop	r19
    3756:	2f 91       	pop	r18
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	0f 90       	pop	r0
    375e:	0b be       	out	0x3b, r0	; 59
    3760:	0f 90       	pop	r0
    3762:	0a be       	out	0x3a, r0	; 58
    3764:	0f 90       	pop	r0
    3766:	09 be       	out	0x39, r0	; 57
    3768:	0f 90       	pop	r0
    376a:	08 be       	out	0x38, r0	; 56
    376c:	0f 90       	pop	r0
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	0f 90       	pop	r0
    3772:	1f 90       	pop	r1
    3774:	18 95       	reti

00003776 <CQ_initialize>:
	CQ_MX_UNLOCK();

	if (tmp == 0)
		return TRUE;
	return FALSE;
}
    3776:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <CQRx_size>
    377a:	10 92 61 23 	sts	0x2361, r1	; 0x802361 <CQRx_front>
    377e:	8f ef       	ldi	r24, 0xFF	; 255
    3780:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <CQRx_rear>
    3784:	10 92 64 23 	sts	0x2364, r1	; 0x802364 <CQTx_size>
    3788:	10 92 60 23 	sts	0x2360, r1	; 0x802360 <CQTx_front>
    378c:	80 93 63 23 	sts	0x2363, r24	; 0x802363 <CQTx_rear>
    3790:	08 95       	ret

00003792 <CQRx_queueIsEmpty>:
    3792:	f8 94       	cli
    3794:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <CQRx_size>
    3798:	78 94       	sei
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	91 11       	cpse	r25, r1
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	08 95       	ret

000037a2 <CQRx_enqueue>:
    37a2:	ff 92       	push	r15
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	f8 2e       	mov	r15, r24
    37ae:	09 2f       	mov	r16, r25
    37b0:	eb 01       	movw	r28, r22
    37b2:	14 2f       	mov	r17, r20
    37b4:	f8 94       	cli
    37b6:	80 91 62 23 	lds	r24, 0x2362	; 0x802362 <CQRx_rear>
    37ba:	08 2e       	mov	r0, r24
    37bc:	00 0c       	add	r0, r0
    37be:	99 0b       	sbc	r25, r25
    37c0:	01 96       	adiw	r24, 0x01	; 1
    37c2:	64 e6       	ldi	r22, 0x64	; 100
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	0e 94 88 6b 	call	0xd710	; 0xd710 <__divmodhi4>
    37ca:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <CQRx_rear>
    37ce:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <CQRx_size>
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <CQRx_size>
    37d8:	78 94       	sei
    37da:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <CQRx_size>
    37de:	84 36       	cpi	r24, 0x64	; 100
    37e0:	c0 f1       	brcs	.+112    	; 0x3852 <CQRx_enqueue+0xb0>
    37e2:	8c e8       	ldi	r24, 0x8C	; 140
    37e4:	9f e0       	ldi	r25, 0x0F	; 15
    37e6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    37f2:	83 e8       	ldi	r24, 0x83	; 131
    37f4:	9f e0       	ldi	r25, 0x0F	; 15
    37f6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    37fa:	8f e0       	ldi	r24, 0x0F	; 15
    37fc:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    3800:	28 c0       	rjmp	.+80     	; 0x3852 <CQRx_enqueue+0xb0>
    3802:	81 17       	cp	r24, r17
    3804:	68 f4       	brcc	.+26     	; 0x3820 <CQRx_enqueue+0x7e>
    3806:	30 91 62 23 	lds	r19, 0x2362	; 0x802362 <CQRx_rear>
    380a:	20 81       	ld	r18, Z
    380c:	dc 01       	movw	r26, r24
    380e:	48 e0       	ldi	r20, 0x08	; 8
    3810:	34 02       	muls	r19, r20
    3812:	a0 0d       	add	r26, r0
    3814:	b1 1d       	adc	r27, r1
    3816:	11 24       	eor	r1, r1
    3818:	a4 56       	subi	r26, 0x64	; 100
    381a:	bb 4d       	sbci	r27, 0xDB	; 219
    381c:	2c 93       	st	X, r18
    381e:	0b c0       	rjmp	.+22     	; 0x3836 <CQRx_enqueue+0x94>
    3820:	20 91 62 23 	lds	r18, 0x2362	; 0x802362 <CQRx_rear>
    3824:	dc 01       	movw	r26, r24
    3826:	38 e0       	ldi	r19, 0x08	; 8
    3828:	23 02       	muls	r18, r19
    382a:	a0 0d       	add	r26, r0
    382c:	b1 1d       	adc	r27, r1
    382e:	11 24       	eor	r1, r1
    3830:	a4 56       	subi	r26, 0x64	; 100
    3832:	bb 4d       	sbci	r27, 0xDB	; 219
    3834:	1c 92       	st	X, r1
    3836:	01 96       	adiw	r24, 0x01	; 1
    3838:	31 96       	adiw	r30, 0x01	; 1
    383a:	88 30       	cpi	r24, 0x08	; 8
    383c:	91 05       	cpc	r25, r1
    383e:	09 f7       	brne	.-62     	; 0x3802 <CQRx_enqueue+0x60>
    3840:	e0 91 62 23 	lds	r30, 0x2362	; 0x802362 <CQRx_rear>
    3844:	ee 0f       	add	r30, r30
    3846:	ff 0b       	sbc	r31, r31
    3848:	ec 52       	subi	r30, 0x2C	; 44
    384a:	fc 4d       	sbci	r31, 0xDC	; 220
    384c:	c0 83       	st	Z, r28
    384e:	d1 83       	std	Z+1, r29	; 0x01
    3850:	05 c0       	rjmp	.+10     	; 0x385c <CQRx_enqueue+0xba>
    3852:	ef 2d       	mov	r30, r15
    3854:	f0 2f       	mov	r31, r16
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	d3 cf       	rjmp	.-90     	; 0x3802 <CQRx_enqueue+0x60>
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	ff 90       	pop	r15
    3866:	08 95       	ret

00003868 <CQRx_dequeue>:
    3868:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <CQRx_size>
    386c:	88 23       	and	r24, r24
    386e:	31 f1       	breq	.+76     	; 0x38bc <CQRx_dequeue+0x54>
    3870:	f8 94       	cli
    3872:	e0 91 61 23 	lds	r30, 0x2361	; 0x802361 <CQRx_front>
    3876:	ee 0f       	add	r30, r30
    3878:	ff 0b       	sbc	r31, r31
    387a:	ec 52       	subi	r30, 0x2C	; 44
    387c:	fc 4d       	sbci	r31, 0xDC	; 220
    387e:	30 81       	ld	r19, Z
    3880:	20 91 61 23 	lds	r18, 0x2361	; 0x802361 <CQRx_front>
    3884:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <CQRx_size>
    3888:	81 50       	subi	r24, 0x01	; 1
    388a:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <CQRx_size>
    388e:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <CQRx_front>
    3892:	08 2e       	mov	r0, r24
    3894:	00 0c       	add	r0, r0
    3896:	99 0b       	sbc	r25, r25
    3898:	01 96       	adiw	r24, 0x01	; 1
    389a:	64 e6       	ldi	r22, 0x64	; 100
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	0e 94 88 6b 	call	0xd710	; 0xd710 <__divmodhi4>
    38a2:	80 93 61 23 	sts	0x2361, r24	; 0x802361 <CQRx_front>
    38a6:	78 94       	sei
    38a8:	88 e0       	ldi	r24, 0x08	; 8
    38aa:	28 02       	muls	r18, r24
    38ac:	b0 01       	movw	r22, r0
    38ae:	11 24       	eor	r1, r1
    38b0:	64 56       	subi	r22, 0x64	; 100
    38b2:	7b 4d       	sbci	r23, 0xDB	; 219
    38b4:	83 2f       	mov	r24, r19
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <processCAN>
    38bc:	08 95       	ret

000038be <CQTx_enqueue>:

//Add unprocessed communication to queue
void CQTx_enqueue(uint8_t* data)
{
    38be:	fc 01       	movw	r30, r24
	DBG1("A1:CQTx: %d", CQTx_size);

	CQ_MX_LOCK();
    38c0:	f8 94       	cli
	//Get position of new data
	CQTx_rear = (CQTx_rear + 1) % TX_QUEUE_SIZE;
    38c2:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <CQTx_rear>
    38c6:	08 2e       	mov	r0, r24
    38c8:	00 0c       	add	r0, r0
    38ca:	99 0b       	sbc	r25, r25
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	6a e0       	ldi	r22, 0x0A	; 10
    38d0:	70 e0       	ldi	r23, 0x00	; 0
    38d2:	0e 94 88 6b 	call	0xd710	; 0xd710 <__divmodhi4>
    38d6:	80 93 63 23 	sts	0x2363, r24	; 0x802363 <CQTx_rear>
	CQTx_size++;
    38da:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <CQTx_size>
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	80 93 64 23 	sts	0x2364, r24	; 0x802364 <CQTx_size>
	CQ_MX_UNLOCK();
    38e4:	78 94       	sei

	//DBG2("EnQ %d, 0x%X", CQ_Size, &CQ_Size);
	//Print error message to screen if CAn buffer overflow
	//Buffer overflow should not occur in the field, increase size if buffer ever overflows
	if (CQTx_size >= TX_QUEUE_SIZE)
    38e6:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <CQTx_size>
	{
	}

	uint8_t *p = CQTx_data_queue[CQTx_rear];
    38ea:	a0 91 63 23 	lds	r26, 0x2363	; 0x802363 <CQTx_rear>
	//Copy over data
	memcpy(&p[0], &data[0], TX_BLOCK_SIZE);
    38ee:	8b e0       	ldi	r24, 0x0B	; 11
    38f0:	a8 02       	muls	r26, r24
    38f2:	d0 01       	movw	r26, r0
    38f4:	11 24       	eor	r1, r1
    38f6:	ab 59       	subi	r26, 0x9B	; 155
    38f8:	bc 4d       	sbci	r27, 0xDC	; 220
    38fa:	8b e0       	ldi	r24, 0x0B	; 11
    38fc:	01 90       	ld	r0, Z+
    38fe:	0d 92       	st	X+, r0
    3900:	8a 95       	dec	r24
    3902:	e1 f7       	brne	.-8      	; 0x38fc <CQTx_enqueue+0x3e>
    3904:	08 95       	ret

00003906 <CQTx_dequeue>:
}

//Get the communication data at the front of the queue
void CQTx_dequeue(void)
{
	if (CQTx_size == 0)
    3906:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <CQTx_size>
    390a:	88 23       	and	r24, r24
    390c:	09 f1       	breq	.+66     	; 0x3950 <CQTx_dequeue+0x4a>
		return;

	uint8_t*  data;

	data = CQTx_data_queue[CQTx_front];
    390e:	e0 91 60 23 	lds	r30, 0x2360	; 0x802360 <CQTx_front>
    3912:	8b e0       	ldi	r24, 0x0B	; 11
    3914:	e8 02       	muls	r30, r24
    3916:	f0 01       	movw	r30, r0
    3918:	11 24       	eor	r1, r1
    391a:	eb 59       	subi	r30, 0x9B	; 155
    391c:	fc 4d       	sbci	r31, 0xDC	; 220
	//Update new front
	CQTx_size--;
    391e:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <CQTx_size>
    3922:	81 50       	subi	r24, 0x01	; 1
    3924:	80 93 64 23 	sts	0x2364, r24	; 0x802364 <CQTx_size>
	CQTx_front = (CQTx_front + 1) % TX_QUEUE_SIZE;
    3928:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <CQTx_front>
    392c:	08 2e       	mov	r0, r24
    392e:	00 0c       	add	r0, r0
    3930:	99 0b       	sbc	r25, r25
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	6a e0       	ldi	r22, 0x0A	; 10
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	0e 94 88 6b 	call	0xd710	; 0xd710 <__divmodhi4>
    393c:	80 93 60 23 	sts	0x2360, r24	; 0x802360 <CQTx_front>
	transmit_CAN_((uint16_t)data[0], data[1], data[2], &data[3]);
    3940:	9f 01       	movw	r18, r30
    3942:	2d 5f       	subi	r18, 0xFD	; 253
    3944:	3f 4f       	sbci	r19, 0xFF	; 255
    3946:	42 81       	ldd	r20, Z+2	; 0x02
    3948:	61 81       	ldd	r22, Z+1	; 0x01
    394a:	80 81       	ld	r24, Z
    394c:	0e 94 47 1a 	call	0x348e	; 0x348e <transmit_CAN_>
    3950:	08 95       	ret

00003952 <log_event>:

#include "event_logging.h"

 //Send event that needs to be logged to A2 over CAN
void log_event(uint8_t event_code)
{
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	1f 92       	push	r1
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = event_code;
    395c:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(EVENT_LOG_CAN, 0, 1, message);
    395e:	9e 01       	movw	r18, r28
    3960:	2f 5f       	subi	r18, 0xFF	; 255
    3962:	3f 4f       	sbci	r19, 0xFF	; 255
    3964:	41 e0       	ldi	r20, 0x01	; 1
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	8e ee       	ldi	r24, 0xEE	; 238
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3970:	2f ef       	ldi	r18, 0xFF	; 255
    3972:	89 ef       	ldi	r24, 0xF9	; 249
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	21 50       	subi	r18, 0x01	; 1
    3978:	80 40       	sbci	r24, 0x00	; 0
    397a:	90 40       	sbci	r25, 0x00	; 0
    397c:	e1 f7       	brne	.-8      	; 0x3976 <log_event+0x24>
    397e:	00 c0       	rjmp	.+0      	; 0x3980 <log_event+0x2e>
    3980:	00 00       	nop
	_delay_ms(10);
}
    3982:	0f 90       	pop	r0
    3984:	df 91       	pop	r29
    3986:	cf 91       	pop	r28
    3988:	08 95       	ret

0000398a <update_A2_settings>:
void read_A2_status(void)
{
	uint8_t message[1];
	transmit_CAN(BATTERY_CAN, 1, 0, message);
	_delay_ms(10);
}
    398a:	cf 93       	push	r28
    398c:	df 93       	push	r29
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	2f 97       	sbiw	r28, 0x0f	; 15
    3994:	cd bf       	out	0x3d, r28	; 61
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    399c:	89 83       	std	Y+1, r24	; 0x01
    399e:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <vacuum>
    39a2:	8a 83       	std	Y+2, r24	; 0x02
    39a4:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <detergent_pump>
    39a8:	20 e8       	ldi	r18, 0x80	; 128
    39aa:	82 9f       	mul	r24, r18
    39ac:	c0 01       	movw	r24, r0
    39ae:	11 24       	eor	r1, r1
    39b0:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <detergent_pump_dc>
    39b4:	89 2b       	or	r24, r25
    39b6:	8b 83       	std	Y+3, r24	; 0x03
    39b8:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    39bc:	20 e8       	ldi	r18, 0x80	; 128
    39be:	82 9f       	mul	r24, r18
    39c0:	c0 01       	movw	r24, r0
    39c2:	11 24       	eor	r1, r1
    39c4:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <water_pump_dc>
    39c8:	89 2b       	or	r24, r25
    39ca:	8c 83       	std	Y+4, r24	; 0x04
    39cc:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <headlights>
    39d0:	20 e1       	ldi	r18, 0x10	; 16
    39d2:	82 9f       	mul	r24, r18
    39d4:	c0 01       	movw	r24, r0
    39d6:	11 24       	eor	r1, r1
    39d8:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <solenoid_valve>
    39dc:	99 0f       	add	r25, r25
    39de:	99 0f       	add	r25, r25
    39e0:	89 2b       	or	r24, r25
    39e2:	90 91 c5 22 	lds	r25, 0x22C5	; 0x8022c5 <horn>
    39e6:	89 2b       	or	r24, r25
    39e8:	8d 83       	std	Y+5, r24	; 0x05
    39ea:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <extra_pressure>
    39ee:	20 e1       	ldi	r18, 0x10	; 16
    39f0:	82 9f       	mul	r24, r18
    39f2:	c0 01       	movw	r24, r0
    39f4:	11 24       	eor	r1, r1
    39f6:	90 91 82 21 	lds	r25, 0x2182	; 0x802182 <reverse>
    39fa:	89 2b       	or	r24, r25
    39fc:	8e 83       	std	Y+6, r24	; 0x06
    39fe:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    3a02:	20 e1       	ldi	r18, 0x10	; 16
    3a04:	82 9f       	mul	r24, r18
    3a06:	c0 01       	movw	r24, r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	90 91 a9 22 	lds	r25, 0x22A9	; 0x8022a9 <fr_speed>
    3a0e:	89 2b       	or	r24, r25
    3a10:	8f 83       	std	Y+7, r24	; 0x07
    3a12:	9e 01       	movw	r18, r28
    3a14:	2f 5f       	subi	r18, 0xFF	; 255
    3a16:	3f 4f       	sbci	r19, 0xFF	; 255
    3a18:	47 e0       	ldi	r20, 0x07	; 7
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	8c ec       	ldi	r24, 0xCC	; 204
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3a24:	8f ef       	ldi	r24, 0xFF	; 255
    3a26:	99 ef       	ldi	r25, 0xF9	; 249
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	81 50       	subi	r24, 0x01	; 1
    3a2c:	90 40       	sbci	r25, 0x00	; 0
    3a2e:	20 40       	sbci	r18, 0x00	; 0
    3a30:	e1 f7       	brne	.-8      	; 0x3a2a <update_A2_settings+0xa0>
    3a32:	00 c0       	rjmp	.+0      	; 0x3a34 <update_A2_settings+0xaa>
    3a34:	00 00       	nop
    3a36:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <runtimer_on>
    3a3a:	89 83       	std	Y+1, r24	; 0x01
    3a3c:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    3a40:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    3a44:	9a 83       	std	Y+2, r25	; 0x02
    3a46:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    3a4a:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
    3a50:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <minutes>
    3a54:	8c 83       	std	Y+4, r24	; 0x04
    3a56:	9e 01       	movw	r18, r28
    3a58:	2f 5f       	subi	r18, 0xFF	; 255
    3a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5c:	44 e0       	ldi	r20, 0x04	; 4
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	8d ec       	ldi	r24, 0xCD	; 205
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3a68:	8f ef       	ldi	r24, 0xFF	; 255
    3a6a:	99 ef       	ldi	r25, 0xF9	; 249
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	81 50       	subi	r24, 0x01	; 1
    3a70:	90 40       	sbci	r25, 0x00	; 0
    3a72:	20 40       	sbci	r18, 0x00	; 0
    3a74:	e1 f7       	brne	.-8      	; 0x3a6e <update_A2_settings+0xe4>
    3a76:	00 c0       	rjmp	.+0      	; 0x3a78 <update_A2_settings+0xee>
    3a78:	00 00       	nop
    3a7a:	2f 96       	adiw	r28, 0x0f	; 15
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	08 95       	ret

00003a86 <send_motor_info>:

//Send the slow start info to A2
void send_motor_info(void)
{
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	00 d0       	rcall	.+0      	; 0x3a8c <send_motor_info+0x6>
    3a8c:	1f 92       	push	r1
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[3];
	message[0] = vacuum_slow_start;
    3a92:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <vacuum_slow_start>
    3a96:	89 83       	std	Y+1, r24	; 0x01
	message[1] = brush_slow_start;
    3a98:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <brush_slow_start>
    3a9c:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = pre_swp_slow_start;
    3a9e:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <pre_swp_slow_start>
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(MOTOR_INFO_CAN, 0, 3, message);
    3aa4:	9e 01       	movw	r18, r28
    3aa6:	2f 5f       	subi	r18, 0xFF	; 255
    3aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aaa:	43 e0       	ldi	r20, 0x03	; 3
    3aac:	60 e0       	ldi	r22, 0x00	; 0
    3aae:	81 ea       	ldi	r24, 0xA1	; 161
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3ab6:	2f ef       	ldi	r18, 0xFF	; 255
    3ab8:	89 ef       	ldi	r24, 0xF9	; 249
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	21 50       	subi	r18, 0x01	; 1
    3abe:	80 40       	sbci	r24, 0x00	; 0
    3ac0:	90 40       	sbci	r25, 0x00	; 0
    3ac2:	e1 f7       	brne	.-8      	; 0x3abc <send_motor_info+0x36>
    3ac4:	00 c0       	rjmp	.+0      	; 0x3ac6 <send_motor_info+0x40>
    3ac6:	00 00       	nop
	_delay_ms(10);
}
    3ac8:	23 96       	adiw	r28, 0x03	; 3
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	08 95       	ret

00003ad4 <request_statistics>:

//Request drive motor info from A3
void request_statistics(void)
{
    3ad4:	cf 93       	push	r28
    3ad6:	df 93       	push	r29
    3ad8:	1f 92       	push	r1
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = REQUEST_STATISTICS;
    3ade:	87 e4       	ldi	r24, 0x47	; 71
    3ae0:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(REQUEST_STATISTICS, 0, 1, message);
    3ae2:	9e 01       	movw	r18, r28
    3ae4:	2f 5f       	subi	r18, 0xFF	; 255
    3ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	87 e4       	ldi	r24, 0x47	; 71
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3af4:	2f ef       	ldi	r18, 0xFF	; 255
    3af6:	89 ef       	ldi	r24, 0xF9	; 249
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	21 50       	subi	r18, 0x01	; 1
    3afc:	80 40       	sbci	r24, 0x00	; 0
    3afe:	90 40       	sbci	r25, 0x00	; 0
    3b00:	e1 f7       	brne	.-8      	; 0x3afa <request_statistics+0x26>
    3b02:	00 c0       	rjmp	.+0      	; 0x3b04 <request_statistics+0x30>
    3b04:	00 00       	nop
	_delay_ms(10);
}
    3b06:	0f 90       	pop	r0
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	08 95       	ret

00003b0e <update_DM_settings>:



//Send updated drive motor settings to A3
void update_DM_settings(void)
{
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	28 97       	sbiw	r28, 0x08	; 8
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	de bf       	out	0x3e, r29	; 62
	//Send all motor settings
	uint8_t message[8];
	message[0] = UPDATE_DM_SETTINGS;
    3b1c:	84 e3       	ldi	r24, 0x34	; 52
    3b1e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t i = 1;
	message[i++] = DM_SETTINGS_1;
    3b20:	81 e1       	ldi	r24, 0x11	; 17
    3b22:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = acceleration;
    3b24:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <acceleration>
    3b28:	8b 83       	std	Y+3, r24	; 0x03
	message[i++] = deceleration;
    3b2a:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <deceleration>
    3b2e:	8c 83       	std	Y+4, r24	; 0x04
	message[i++] = brake_delay;
    3b30:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <brake_delay>
    3b34:	8d 83       	std	Y+5, r24	; 0x05
	message[i++] = reverse_speed;
    3b36:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <reverse_speed>
    3b3a:	8e 83       	std	Y+6, r24	; 0x06
	transmit_CAN(DM_SETTINGS_CAN, 0, 6, message);
    3b3c:	9e 01       	movw	r18, r28
    3b3e:	2f 5f       	subi	r18, 0xFF	; 255
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	46 e0       	ldi	r20, 0x06	; 6
    3b44:	60 e0       	ldi	r22, 0x00	; 0
    3b46:	82 ea       	ldi	r24, 0xA2	; 162
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3b4e:	2f ef       	ldi	r18, 0xFF	; 255
    3b50:	89 ef       	ldi	r24, 0xF9	; 249
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	21 50       	subi	r18, 0x01	; 1
    3b56:	80 40       	sbci	r24, 0x00	; 0
    3b58:	90 40       	sbci	r25, 0x00	; 0
    3b5a:	e1 f7       	brne	.-8      	; 0x3b54 <update_DM_settings+0x46>
    3b5c:	00 c0       	rjmp	.+0      	; 0x3b5e <update_DM_settings+0x50>
    3b5e:	00 00       	nop
	_delay_ms(10);
	i = 1;
	message[i++] = DM_SETTINGS_2;
    3b60:	82 e2       	ldi	r24, 0x22	; 34
    3b62:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = slow_speed;
    3b64:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <slow_speed>
    3b68:	8b 83       	std	Y+3, r24	; 0x03
	message[i++] = fast_speed;
    3b6a:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <fast_speed>
    3b6e:	8c 83       	std	Y+4, r24	; 0x04
	message[i++] = current_rating;
    3b70:	80 91 eb 21 	lds	r24, 0x21EB	; 0x8021eb <current_rating>
    3b74:	8d 83       	std	Y+5, r24	; 0x05
	message[i++] = max_current;
    3b76:	80 91 95 22 	lds	r24, 0x2295	; 0x802295 <max_current>
    3b7a:	8e 83       	std	Y+6, r24	; 0x06
	message[i++] = overload_time;
    3b7c:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <overload_time>
    3b80:	8f 83       	std	Y+7, r24	; 0x07
	transmit_CAN(DM_SETTINGS_CAN, 0, 7, message);
    3b82:	9e 01       	movw	r18, r28
    3b84:	2f 5f       	subi	r18, 0xFF	; 255
    3b86:	3f 4f       	sbci	r19, 0xFF	; 255
    3b88:	47 e0       	ldi	r20, 0x07	; 7
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	82 ea       	ldi	r24, 0xA2	; 162
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3b94:	2f ef       	ldi	r18, 0xFF	; 255
    3b96:	89 ef       	ldi	r24, 0xF9	; 249
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	21 50       	subi	r18, 0x01	; 1
    3b9c:	80 40       	sbci	r24, 0x00	; 0
    3b9e:	90 40       	sbci	r25, 0x00	; 0
    3ba0:	e1 f7       	brne	.-8      	; 0x3b9a <update_DM_settings+0x8c>
    3ba2:	00 c0       	rjmp	.+0      	; 0x3ba4 <update_DM_settings+0x96>
    3ba4:	00 00       	nop
	_delay_ms(10);
}
    3ba6:	28 96       	adiw	r28, 0x08	; 8
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	df 91       	pop	r29
    3bae:	cf 91       	pop	r28
    3bb0:	08 95       	ret

00003bb2 <update_DM_accel>:

void update_DM_accel(void)
{
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	28 97       	sbiw	r28, 0x08	; 8
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = acceleration;
    3bc0:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <acceleration>
    3bc4:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ACCELERATION_CAN, 0, 1, message);
    3bc6:	9e 01       	movw	r18, r28
    3bc8:	2f 5f       	subi	r18, 0xFF	; 255
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	60 e0       	ldi	r22, 0x00	; 0
    3bd0:	80 e7       	ldi	r24, 0x70	; 112
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3bd8:	2f ef       	ldi	r18, 0xFF	; 255
    3bda:	89 ef       	ldi	r24, 0xF9	; 249
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	21 50       	subi	r18, 0x01	; 1
    3be0:	80 40       	sbci	r24, 0x00	; 0
    3be2:	90 40       	sbci	r25, 0x00	; 0
    3be4:	e1 f7       	brne	.-8      	; 0x3bde <update_DM_accel+0x2c>
    3be6:	00 c0       	rjmp	.+0      	; 0x3be8 <update_DM_accel+0x36>
    3be8:	00 00       	nop
	_delay_ms(10);
}
    3bea:	28 96       	adiw	r28, 0x08	; 8
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	de bf       	out	0x3e, r29	; 62
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <update_DM_deaccel>:
void update_DM_deaccel(void)
{
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    3bfe:	28 97       	sbiw	r28, 0x08	; 8
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = deceleration;
    3c04:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <deceleration>
    3c08:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(DECELERATION_CAN, 0, 1, message);
    3c0a:	9e 01       	movw	r18, r28
    3c0c:	2f 5f       	subi	r18, 0xFF	; 255
    3c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c10:	41 e0       	ldi	r20, 0x01	; 1
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	81 e7       	ldi	r24, 0x71	; 113
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3c1c:	2f ef       	ldi	r18, 0xFF	; 255
    3c1e:	89 ef       	ldi	r24, 0xF9	; 249
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	21 50       	subi	r18, 0x01	; 1
    3c24:	80 40       	sbci	r24, 0x00	; 0
    3c26:	90 40       	sbci	r25, 0x00	; 0
    3c28:	e1 f7       	brne	.-8      	; 0x3c22 <update_DM_deaccel+0x2c>
    3c2a:	00 c0       	rjmp	.+0      	; 0x3c2c <update_DM_deaccel+0x36>
    3c2c:	00 00       	nop
	_delay_ms(10);
}
    3c2e:	28 96       	adiw	r28, 0x08	; 8
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	08 95       	ret

00003c3a <update_DM_braekdelay>:
void update_DM_braekdelay(void)
{
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	28 97       	sbiw	r28, 0x08	; 8
    3c44:	cd bf       	out	0x3d, r28	; 61
    3c46:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = brake_delay;
    3c48:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <brake_delay>
    3c4c:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(BREAK_DELAY_CAN, 0, 1, message);
    3c4e:	9e 01       	movw	r18, r28
    3c50:	2f 5f       	subi	r18, 0xFF	; 255
    3c52:	3f 4f       	sbci	r19, 0xFF	; 255
    3c54:	41 e0       	ldi	r20, 0x01	; 1
    3c56:	60 e0       	ldi	r22, 0x00	; 0
    3c58:	82 e7       	ldi	r24, 0x72	; 114
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3c60:	2f ef       	ldi	r18, 0xFF	; 255
    3c62:	89 ef       	ldi	r24, 0xF9	; 249
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	21 50       	subi	r18, 0x01	; 1
    3c68:	80 40       	sbci	r24, 0x00	; 0
    3c6a:	90 40       	sbci	r25, 0x00	; 0
    3c6c:	e1 f7       	brne	.-8      	; 0x3c66 <update_DM_braekdelay+0x2c>
    3c6e:	00 c0       	rjmp	.+0      	; 0x3c70 <update_DM_braekdelay+0x36>
    3c70:	00 00       	nop
	_delay_ms(10);
}
    3c72:	28 96       	adiw	r28, 0x08	; 8
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	08 95       	ret

00003c7e <update_DM_slow_speed>:
void update_DM_slow_speed(void)
{
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
    3c86:	28 97       	sbiw	r28, 0x08	; 8
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = slow_speed;
    3c8c:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <slow_speed>
    3c90:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(SLOW_SPEED_CAN, 0, 1, message);
    3c92:	9e 01       	movw	r18, r28
    3c94:	2f 5f       	subi	r18, 0xFF	; 255
    3c96:	3f 4f       	sbci	r19, 0xFF	; 255
    3c98:	41 e0       	ldi	r20, 0x01	; 1
    3c9a:	60 e0       	ldi	r22, 0x00	; 0
    3c9c:	83 e7       	ldi	r24, 0x73	; 115
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3ca4:	2f ef       	ldi	r18, 0xFF	; 255
    3ca6:	89 ef       	ldi	r24, 0xF9	; 249
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	21 50       	subi	r18, 0x01	; 1
    3cac:	80 40       	sbci	r24, 0x00	; 0
    3cae:	90 40       	sbci	r25, 0x00	; 0
    3cb0:	e1 f7       	brne	.-8      	; 0x3caa <update_DM_slow_speed+0x2c>
    3cb2:	00 c0       	rjmp	.+0      	; 0x3cb4 <update_DM_slow_speed+0x36>
    3cb4:	00 00       	nop
	_delay_ms(10);
}
    3cb6:	28 96       	adiw	r28, 0x08	; 8
    3cb8:	cd bf       	out	0x3d, r28	; 61
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	08 95       	ret

00003cc2 <update_DM_fast_speed>:
void update_DM_fast_speed(void)
{
    3cc2:	cf 93       	push	r28
    3cc4:	df 93       	push	r29
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	28 97       	sbiw	r28, 0x08	; 8
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = fast_speed;
    3cd0:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <fast_speed>
    3cd4:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(FAST_SPEED_CAN, 0, 1, message);
    3cd6:	9e 01       	movw	r18, r28
    3cd8:	2f 5f       	subi	r18, 0xFF	; 255
    3cda:	3f 4f       	sbci	r19, 0xFF	; 255
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	84 e7       	ldi	r24, 0x74	; 116
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3ce8:	2f ef       	ldi	r18, 0xFF	; 255
    3cea:	89 ef       	ldi	r24, 0xF9	; 249
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	21 50       	subi	r18, 0x01	; 1
    3cf0:	80 40       	sbci	r24, 0x00	; 0
    3cf2:	90 40       	sbci	r25, 0x00	; 0
    3cf4:	e1 f7       	brne	.-8      	; 0x3cee <update_DM_fast_speed+0x2c>
    3cf6:	00 c0       	rjmp	.+0      	; 0x3cf8 <update_DM_fast_speed+0x36>
    3cf8:	00 00       	nop
	_delay_ms(10);
}
    3cfa:	28 96       	adiw	r28, 0x08	; 8
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	de bf       	out	0x3e, r29	; 62
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	08 95       	ret

00003d06 <update_DM_reverse_speed>:
void update_DM_reverse_speed(void)
{
    3d06:	cf 93       	push	r28
    3d08:	df 93       	push	r29
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	28 97       	sbiw	r28, 0x08	; 8
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = reverse_speed;
    3d14:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <reverse_speed>
    3d18:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(REVERSE_SPEED_CAN, 0, 1, message);
    3d1a:	9e 01       	movw	r18, r28
    3d1c:	2f 5f       	subi	r18, 0xFF	; 255
    3d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d20:	41 e0       	ldi	r20, 0x01	; 1
    3d22:	60 e0       	ldi	r22, 0x00	; 0
    3d24:	85 e7       	ldi	r24, 0x75	; 117
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3d2c:	2f ef       	ldi	r18, 0xFF	; 255
    3d2e:	89 ef       	ldi	r24, 0xF9	; 249
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	21 50       	subi	r18, 0x01	; 1
    3d34:	80 40       	sbci	r24, 0x00	; 0
    3d36:	90 40       	sbci	r25, 0x00	; 0
    3d38:	e1 f7       	brne	.-8      	; 0x3d32 <update_DM_reverse_speed+0x2c>
    3d3a:	00 c0       	rjmp	.+0      	; 0x3d3c <update_DM_reverse_speed+0x36>
    3d3c:	00 00       	nop
	_delay_ms(10);
}
    3d3e:	28 96       	adiw	r28, 0x08	; 8
    3d40:	cd bf       	out	0x3d, r28	; 61
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	08 95       	ret

00003d4a <update_DM_CURRENT_RATING>:
void update_DM_CURRENT_RATING(void)
{
    3d4a:	cf 93       	push	r28
    3d4c:	df 93       	push	r29
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	28 97       	sbiw	r28, 0x08	; 8
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = current_rating;
    3d58:	80 91 eb 21 	lds	r24, 0x21EB	; 0x8021eb <current_rating>
    3d5c:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(CURRENT_RATING_CAN, 0, 1, message);
    3d5e:	9e 01       	movw	r18, r28
    3d60:	2f 5f       	subi	r18, 0xFF	; 255
    3d62:	3f 4f       	sbci	r19, 0xFF	; 255
    3d64:	41 e0       	ldi	r20, 0x01	; 1
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	86 e7       	ldi	r24, 0x76	; 118
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3d70:	2f ef       	ldi	r18, 0xFF	; 255
    3d72:	89 ef       	ldi	r24, 0xF9	; 249
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	21 50       	subi	r18, 0x01	; 1
    3d78:	80 40       	sbci	r24, 0x00	; 0
    3d7a:	90 40       	sbci	r25, 0x00	; 0
    3d7c:	e1 f7       	brne	.-8      	; 0x3d76 <update_DM_CURRENT_RATING+0x2c>
    3d7e:	00 c0       	rjmp	.+0      	; 0x3d80 <update_DM_CURRENT_RATING+0x36>
    3d80:	00 00       	nop
	_delay_ms(10);
}
    3d82:	28 96       	adiw	r28, 0x08	; 8
    3d84:	cd bf       	out	0x3d, r28	; 61
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	08 95       	ret

00003d8e <update_DM_MAX_CURRENT>:
void update_DM_MAX_CURRENT(void)
{
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	28 97       	sbiw	r28, 0x08	; 8
    3d98:	cd bf       	out	0x3d, r28	; 61
    3d9a:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = max_current;
    3d9c:	80 91 95 22 	lds	r24, 0x2295	; 0x802295 <max_current>
    3da0:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(MAX_CURRENT_CAN, 0, 1, message);
    3da2:	9e 01       	movw	r18, r28
    3da4:	2f 5f       	subi	r18, 0xFF	; 255
    3da6:	3f 4f       	sbci	r19, 0xFF	; 255
    3da8:	41 e0       	ldi	r20, 0x01	; 1
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	87 e7       	ldi	r24, 0x77	; 119
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3db4:	2f ef       	ldi	r18, 0xFF	; 255
    3db6:	89 ef       	ldi	r24, 0xF9	; 249
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	21 50       	subi	r18, 0x01	; 1
    3dbc:	80 40       	sbci	r24, 0x00	; 0
    3dbe:	90 40       	sbci	r25, 0x00	; 0
    3dc0:	e1 f7       	brne	.-8      	; 0x3dba <update_DM_MAX_CURRENT+0x2c>
    3dc2:	00 c0       	rjmp	.+0      	; 0x3dc4 <update_DM_MAX_CURRENT+0x36>
    3dc4:	00 00       	nop
	_delay_ms(10);
}
    3dc6:	28 96       	adiw	r28, 0x08	; 8
    3dc8:	cd bf       	out	0x3d, r28	; 61
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	08 95       	ret

00003dd2 <update_DM_OVER_LOAD_TIME>:
void update_DM_OVER_LOAD_TIME(void)
{
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	28 97       	sbiw	r28, 0x08	; 8
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];
	//uint8_t i = 0;
	message[0] = overload_time;
    3de0:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <overload_time>
    3de4:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(OVER_LOAD_TIME_CAN, 0, 1, message);
    3de6:	9e 01       	movw	r18, r28
    3de8:	2f 5f       	subi	r18, 0xFF	; 255
    3dea:	3f 4f       	sbci	r19, 0xFF	; 255
    3dec:	41 e0       	ldi	r20, 0x01	; 1
    3dee:	60 e0       	ldi	r22, 0x00	; 0
    3df0:	88 e7       	ldi	r24, 0x78	; 120
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3df8:	2f ef       	ldi	r18, 0xFF	; 255
    3dfa:	89 ef       	ldi	r24, 0xF9	; 249
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	21 50       	subi	r18, 0x01	; 1
    3e00:	80 40       	sbci	r24, 0x00	; 0
    3e02:	90 40       	sbci	r25, 0x00	; 0
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <update_DM_OVER_LOAD_TIME+0x2c>
    3e06:	00 c0       	rjmp	.+0      	; 0x3e08 <update_DM_OVER_LOAD_TIME+0x36>
    3e08:	00 00       	nop
	_delay_ms(10);
}
    3e0a:	28 96       	adiw	r28, 0x08	; 8
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	08 95       	ret

00003e16 <acknowledge_top>:


//Send confirmation of TOP error received
void acknowledge_top(void)
{
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	1f 92       	push	r1
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0;
    3e20:	19 82       	std	Y+1, r1	; 0x01
	transmit_CAN(TOP_CAN, 1, 0, message);
    3e22:	9e 01       	movw	r18, r28
    3e24:	2f 5f       	subi	r18, 0xFF	; 255
    3e26:	3f 4f       	sbci	r19, 0xFF	; 255
    3e28:	40 e0       	ldi	r20, 0x00	; 0
    3e2a:	61 e0       	ldi	r22, 0x01	; 1
    3e2c:	8a ea       	ldi	r24, 0xAA	; 170
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3e34:	2f ef       	ldi	r18, 0xFF	; 255
    3e36:	89 ef       	ldi	r24, 0xF9	; 249
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	21 50       	subi	r18, 0x01	; 1
    3e3c:	80 40       	sbci	r24, 0x00	; 0
    3e3e:	90 40       	sbci	r25, 0x00	; 0
    3e40:	e1 f7       	brne	.-8      	; 0x3e3a <acknowledge_top+0x24>
    3e42:	00 c0       	rjmp	.+0      	; 0x3e44 <acknowledge_top+0x2e>
    3e44:	00 00       	nop
	_delay_ms(10);
}
    3e46:	0f 90       	pop	r0
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	08 95       	ret

00003e4e <send_pot_calibrating>:

//Ask for pot calibration info
void send_pot_calibrating(void)
{
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	1f 92       	push	r1
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = pot_calibrating;
    3e58:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <pot_calibrating>
    3e5c:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(POT_CALIBRATION_CAN, 0, 1, message);
    3e5e:	9e 01       	movw	r18, r28
    3e60:	2f 5f       	subi	r18, 0xFF	; 255
    3e62:	3f 4f       	sbci	r19, 0xFF	; 255
    3e64:	41 e0       	ldi	r20, 0x01	; 1
    3e66:	60 e0       	ldi	r22, 0x00	; 0
    3e68:	84 ea       	ldi	r24, 0xA4	; 164
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    3e70:	2f ef       	ldi	r18, 0xFF	; 255
    3e72:	89 ef       	ldi	r24, 0xF9	; 249
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	21 50       	subi	r18, 0x01	; 1
    3e78:	80 40       	sbci	r24, 0x00	; 0
    3e7a:	90 40       	sbci	r25, 0x00	; 0
    3e7c:	e1 f7       	brne	.-8      	; 0x3e76 <send_pot_calibrating+0x28>
    3e7e:	00 c0       	rjmp	.+0      	; 0x3e80 <send_pot_calibrating+0x32>
    3e80:	00 00       	nop
	_delay_ms(10);
}
    3e82:	0f 90       	pop	r0
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	08 95       	ret

00003e8a <processCAN>:
*/

#include "intercommunication.h"

void processCAN(uint16_t identifier, uint8_t* data)
{
    3e8a:	cf 92       	push	r12
    3e8c:	df 92       	push	r13
    3e8e:	ef 92       	push	r14
    3e90:	ff 92       	push	r15
    3e92:	0f 93       	push	r16
    3e94:	1f 93       	push	r17
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	65 97       	sbiw	r28, 0x15	; 21
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	de bf       	out	0x3e, r29	; 62
	char message[21];
	uint16_t total;
	uint8_t i;
	can_functioning_timer = 0;
    3ea4:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <can_functioning_timer>
	DBG2("processCAN: %02X %02X", identifier, data[0]);
	//Process the communication depending on the type of communication
	switch (identifier)
    3ea8:	82 55       	subi	r24, 0x52	; 82
    3eaa:	91 09       	sbc	r25, r1
    3eac:	8d 38       	cpi	r24, 0x8D	; 141
    3eae:	91 05       	cpc	r25, r1
    3eb0:	08 f0       	brcs	.+2      	; 0x3eb4 <processCAN+0x2a>
    3eb2:	83 c4       	rjmp	.+2310   	; 0x47ba <processCAN+0x930>
    3eb4:	8b 01       	movw	r16, r22
    3eb6:	82 50       	subi	r24, 0x02	; 2
    3eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eba:	fc 01       	movw	r30, r24
    3ebc:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
		//Inform user of error
	case ALARM_CAN:

		if (data[0] == KEY_SWITCH_OPEN)
    3ec0:	db 01       	movw	r26, r22
    3ec2:	8c 91       	ld	r24, X
    3ec4:	81 31       	cpi	r24, 0x11	; 17
    3ec6:	91 f4       	brne	.+36     	; 0x3eec <processCAN+0x62>
		{
			printing_info = FALSE;
    3ec8:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			lcd_write_new_P(PSTR("E17 - KEY INPUT OPEN"));
    3ecc:	8c eb       	ldi	r24, 0xBC	; 188
    3ece:	91 e1       	ldi	r25, 0x11	; 17
    3ed0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    3ed4:	60 e0       	ldi	r22, 0x00	; 0
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("IN A3-CHECK WIRING"));
    3edc:	89 ea       	ldi	r24, 0xA9	; 169
    3ede:	91 e1       	ldi	r25, 0x11	; 17
    3ee0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>

			cli();
    3ee4:	f8 94       	cli
			WHILE_TRUE()
				lcd_led_blink();
    3ee6:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <lcd_led_blink>
    3eea:	fd cf       	rjmp	.-6      	; 0x3ee6 <processCAN+0x5c>
		}
		else if (data[0] == POT_FAIL)
    3eec:	81 30       	cpi	r24, 0x01	; 1
    3eee:	a1 f4       	brne	.+40     	; 0x3f18 <processCAN+0x8e>
		{
			printing_info = FALSE;
    3ef0:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			lcd_write_new_P(PSTR("E09 - POT NOT"));
    3ef4:	8b e9       	ldi	r24, 0x9B	; 155
    3ef6:	91 e1       	ldi	r25, 0x11	; 17
    3ef8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("FUNCTIONING"));
    3f04:	8f e8       	ldi	r24, 0x8F	; 143
    3f06:	91 e1       	ldi	r25, 0x11	; 17
    3f08:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_led_blink();
    3f0c:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <lcd_led_blink>
			print_menu = TRUE;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    3f16:	51 c4       	rjmp	.+2210   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == PEDAL_SWITCH_CLOSED && !pedal_switch_error)
    3f18:	82 30       	cpi	r24, 0x02	; 2
    3f1a:	d1 f4       	brne	.+52     	; 0x3f50 <processCAN+0xc6>
    3f1c:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <pedal_switch_error>
    3f20:	81 11       	cpse	r24, r1
    3f22:	4b c4       	rjmp	.+2198   	; 0x47ba <processCAN+0x930>
		{
			printing_info = FALSE;
    3f24:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			pedal_switch_error = TRUE;
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <pedal_switch_error>
			if (!manual_switch_error)
    3f2e:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <manual_switch_error>
    3f32:	81 11       	cpse	r24, r1
    3f34:	42 c4       	rjmp	.+2180   	; 0x47ba <processCAN+0x930>
			{
				lcd_write_new_P(PSTR("E10 - RELEASE"));
    3f36:	81 e8       	ldi	r24, 0x81	; 129
    3f38:	91 e1       	ldi	r25, 0x11	; 17
    3f3a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("ACCELERATOR PEDAL"));
    3f46:	8f e6       	ldi	r24, 0x6F	; 111
    3f48:	91 e1       	ldi	r25, 0x11	; 17
    3f4a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    3f4e:	35 c4       	rjmp	.+2154   	; 0x47ba <processCAN+0x930>
			}
		}
		else if (data[0] == MANUAL_SWITCH_CLOSED && !manual_switch_error)
    3f50:	85 30       	cpi	r24, 0x05	; 5
    3f52:	b1 f4       	brne	.+44     	; 0x3f80 <processCAN+0xf6>
    3f54:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <manual_switch_error>
    3f58:	81 11       	cpse	r24, r1
    3f5a:	2f c4       	rjmp	.+2142   	; 0x47ba <processCAN+0x930>
		{
			printing_info = FALSE;
    3f5c:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			manual_switch_error = TRUE;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 93 5e 23 	sts	0x235E, r24	; 0x80235e <manual_switch_error>
			lcd_write_new_P(PSTR("E15-EMERGENCY DRIVE"));
    3f66:	8b e5       	ldi	r24, 0x5B	; 91
    3f68:	91 e1       	ldi	r25, 0x11	; 17
    3f6a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("SW-OUT OF NEUTRAL"));
    3f76:	89 e4       	ldi	r24, 0x49	; 73
    3f78:	91 e1       	ldi	r25, 0x11	; 17
    3f7a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    3f7e:	1d c4       	rjmp	.+2106   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == MANUAL_SWITCH_OPEN && manual_switch_error)
    3f80:	86 30       	cpi	r24, 0x06	; 6
    3f82:	01 f5       	brne	.+64     	; 0x3fc4 <processCAN+0x13a>
    3f84:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <manual_switch_error>
    3f88:	88 23       	and	r24, r24
    3f8a:	09 f4       	brne	.+2      	; 0x3f8e <processCAN+0x104>
    3f8c:	16 c4       	rjmp	.+2092   	; 0x47ba <processCAN+0x930>
		{
			printing_info = FALSE;
    3f8e:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			manual_switch_error = FALSE;
    3f92:	10 92 5e 23 	sts	0x235E, r1	; 0x80235e <manual_switch_error>
			if (pedal_switch_error)
    3f96:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <pedal_switch_error>
    3f9a:	88 23       	and	r24, r24
    3f9c:	69 f0       	breq	.+26     	; 0x3fb8 <processCAN+0x12e>
			{
				lcd_write_new_P(PSTR("E10 - RELEASE"));
    3f9e:	8b e3       	ldi	r24, 0x3B	; 59
    3fa0:	91 e1       	ldi	r25, 0x11	; 17
    3fa2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    3fa6:	60 e0       	ldi	r22, 0x00	; 0
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("ACCELERATOR PEDAL"));
    3fae:	89 e2       	ldi	r24, 0x29	; 41
    3fb0:	91 e1       	ldi	r25, 0x11	; 17
    3fb2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    3fb6:	01 c4       	rjmp	.+2050   	; 0x47ba <processCAN+0x930>
			}
			else
			{
				clear_switch_pressed();
    3fb8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
				print_menu = TRUE;
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    3fc2:	fb c3       	rjmp	.+2038   	; 0x47ba <processCAN+0x930>
			}
		}
		else if (data[0] == PEDAL_SWITCH_OPEN && pedal_switch_error == TRUE)
    3fc4:	83 30       	cpi	r24, 0x03	; 3
    3fc6:	79 f4       	brne	.+30     	; 0x3fe6 <processCAN+0x15c>
    3fc8:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <pedal_switch_error>
    3fcc:	81 30       	cpi	r24, 0x01	; 1
    3fce:	09 f0       	breq	.+2      	; 0x3fd2 <processCAN+0x148>
    3fd0:	f4 c3       	rjmp	.+2024   	; 0x47ba <processCAN+0x930>
		{
			printing_info = FALSE;
    3fd2:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			pedal_switch_error = FALSE;
    3fd6:	10 92 fd 22 	sts	0x22FD, r1	; 0x8022fd <pedal_switch_error>
			clear_switch_pressed();
    3fda:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			print_menu = TRUE;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    3fe4:	ea c3       	rjmp	.+2004   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == A3_OVERCURRENT)
    3fe6:	87 30       	cpi	r24, 0x07	; 7
    3fe8:	81 f4       	brne	.+32     	; 0x400a <processCAN+0x180>
		{
			lcd_write_new_P(PSTR("E12 - DRIVE MOTOR"));
    3fea:	87 e1       	ldi	r24, 0x17	; 23
    3fec:	91 e1       	ldi	r25, 0x11	; 17
    3fee:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    3ff2:	60 e0       	ldi	r22, 0x00	; 0
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("OVERLOAD"));
    3ffa:	8e e0       	ldi	r24, 0x0E	; 14
    3ffc:	91 e1       	ldi	r25, 0x11	; 17
    3ffe:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>

			cli();
    4002:	f8 94       	cli
			WHILE_TRUE()
				lcd_led_blink();
    4004:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <lcd_led_blink>
    4008:	fd cf       	rjmp	.-6      	; 0x4004 <processCAN+0x17a>

		}
		else if (data[0] == MOTOR_PARAMETER)
    400a:	88 30       	cpi	r24, 0x08	; 8
    400c:	81 f4       	brne	.+32     	; 0x402e <processCAN+0x1a4>
		{
			lcd_write_new_P(PSTR("E18 - MOTOR SETTINGS"));
    400e:	89 ef       	ldi	r24, 0xF9	; 249
    4010:	90 e1       	ldi	r25, 0x10	; 16
    4012:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("FAIL-DEFAULTS LOADED"));
    401e:	84 ee       	ldi	r24, 0xE4	; 228
    4020:	90 e1       	ldi	r25, 0x10	; 16
    4022:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_update_pause = 10;
    4026:	8a e0       	ldi	r24, 0x0A	; 10
    4028:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    402c:	c6 c3       	rjmp	.+1932   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == CAN_BUFFER_OVERFLOW)
    402e:	89 30       	cpi	r24, 0x09	; 9
    4030:	81 f4       	brne	.+32     	; 0x4052 <processCAN+0x1c8>
		{
			lcd_write_new_P(PSTR("CAN BUFFER"));
    4032:	89 ed       	ldi	r24, 0xD9	; 217
    4034:	90 e1       	ldi	r25, 0x10	; 16
    4036:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("OVERFLOW"));
    4042:	80 ed       	ldi	r24, 0xD0	; 208
    4044:	90 e1       	ldi	r25, 0x10	; 16
    4046:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_update_pause = 15;
    404a:	8f e0       	ldi	r24, 0x0F	; 15
    404c:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    4050:	b4 c3       	rjmp	.+1896   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == SD_BUFFER_OVERFLOW)
    4052:	8a 30       	cpi	r24, 0x0A	; 10
    4054:	81 f4       	brne	.+32     	; 0x4076 <processCAN+0x1ec>
		{
			lcd_write_new_P(PSTR("SD BUFFER"));
    4056:	86 ec       	ldi	r24, 0xC6	; 198
    4058:	90 e1       	ldi	r25, 0x10	; 16
    405a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("OVERFLOW"));
    4066:	8d eb       	ldi	r24, 0xBD	; 189
    4068:	90 e1       	ldi	r25, 0x10	; 16
    406a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_update_pause = 15;
    406e:	8f e0       	ldi	r24, 0x0F	; 15
    4070:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    4074:	a2 c3       	rjmp	.+1860   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == SD_CARD_FAIL)
    4076:	8b 30       	cpi	r24, 0x0B	; 11
    4078:	39 f5       	brne	.+78     	; 0x40c8 <processCAN+0x23e>
		{
			sd_card_unavailable = TRUE;
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <sd_card_unavailable>
			if (reset_timer < 5)
    4080:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <reset_timer>
    4084:	85 30       	cpi	r24, 0x05	; 5
    4086:	80 f4       	brcc	.+32     	; 0x40a8 <processCAN+0x21e>
			{
				lcd_write_new_P(PSTR("E19 - SD CARD"));
    4088:	8f ea       	ldi	r24, 0xAF	; 175
    408a:	90 e1       	ldi	r25, 0x10	; 16
    408c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("UNAVAILABLE"));
    4098:	83 ea       	ldi	r24, 0xA3	; 163
    409a:	90 e1       	ldi	r25, 0x10	; 16
    409c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
				lcd_update_pause = 5;
    40a0:	85 e0       	ldi	r24, 0x05	; 5
    40a2:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    40a6:	89 c3       	rjmp	.+1810   	; 0x47ba <processCAN+0x930>
			}
			else
			{
				lcd_write_new_P(PSTR("E20 - SD CARD"));
    40a8:	85 e9       	ldi	r24, 0x95	; 149
    40aa:	90 e1       	ldi	r25, 0x10	; 16
    40ac:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("FAIL"));
    40b8:	80 e9       	ldi	r24, 0x90	; 144
    40ba:	90 e1       	ldi	r25, 0x10	; 16
    40bc:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
				lcd_update_pause = 15;
    40c0:	8f e0       	ldi	r24, 0x0F	; 15
    40c2:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    40c6:	79 c3       	rjmp	.+1778   	; 0x47ba <processCAN+0x930>
			}
		}
		else if (data[0] == FUSE_FAIL)
    40c8:	8c 30       	cpi	r24, 0x0C	; 12
    40ca:	91 f4       	brne	.+36     	; 0x40f0 <processCAN+0x266>
		{
			printing_info = FALSE;
    40cc:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			fuse_error = TRUE;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <fuse_error>
			lcd_write_new_P(PSTR("E01 - FUSE BLOWN"));
    40d6:	8f e7       	ldi	r24, 0x7F	; 127
    40d8:	90 e1       	ldi	r25, 0x10	; 16
    40da:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    40de:	60 e0       	ldi	r22, 0x00	; 0
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("TURN OFF KEY"));
    40e6:	82 e7       	ldi	r24, 0x72	; 114
    40e8:	90 e1       	ldi	r25, 0x10	; 16
    40ea:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    40ee:	65 c3       	rjmp	.+1738   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == BRAKE_SEAT_SWITCH_OPEN)
    40f0:	8d 30       	cpi	r24, 0x0D	; 13
    40f2:	91 f4       	brne	.+36     	; 0x4118 <processCAN+0x28e>
		{
			printing_info = FALSE;
    40f4:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			brake_seat_switch_error = TRUE;
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	80 93 c9 22 	sts	0x22C9, r24	; 0x8022c9 <brake_seat_switch_error>
			lcd_write_new_P(PSTR("E14 - SEAT/BRAKE"));
    40fe:	81 e6       	ldi	r24, 0x61	; 97
    4100:	90 e1       	ldi	r25, 0x10	; 16
    4102:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("SWITCH OPEN"));
    410e:	85 e5       	ldi	r24, 0x55	; 85
    4110:	90 e1       	ldi	r25, 0x10	; 16
    4112:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    4116:	51 c3       	rjmp	.+1698   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == BRAKE_SEAT_SWITCH_CLOSED)
    4118:	8e 30       	cpi	r24, 0x0E	; 14
    411a:	51 f4       	brne	.+20     	; 0x4130 <processCAN+0x2a6>
		{
			printing_info = FALSE;
    411c:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			brake_seat_switch_error = FALSE;
    4120:	10 92 c9 22 	sts	0x22C9, r1	; 0x8022c9 <brake_seat_switch_error>
			clear_switch_pressed();
    4124:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			print_menu = TRUE;
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    412e:	45 c3       	rjmp	.+1674   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == FAULT_FAIL)
    4130:	8f 30       	cpi	r24, 0x0F	; 15
    4132:	91 f4       	brne	.+36     	; 0x4158 <processCAN+0x2ce>
		{
			printing_info = FALSE;
    4134:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			fault_error = TRUE;
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	80 93 bd 22 	sts	0x22BD, r24	; 0x8022bd <fault_error>
			lcd_write_new_P(PSTR("E21 - 8701 FAULT"));
    413e:	84 e4       	ldi	r24, 0x44	; 68
    4140:	90 e1       	ldi	r25, 0x10	; 16
    4142:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("TURN OFF KEY"));
    414e:	87 e3       	ldi	r24, 0x37	; 55
    4150:	90 e1       	ldi	r25, 0x10	; 16
    4152:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    4156:	31 c3       	rjmp	.+1634   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == BM_OVERCURRENT)
    4158:	80 31       	cpi	r24, 0x10	; 16
    415a:	09 f0       	breq	.+2      	; 0x415e <processCAN+0x2d4>
    415c:	2e c3       	rjmp	.+1628   	; 0x47ba <processCAN+0x930>
		{
			printing_info = FALSE;
    415e:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
			bm_overcurrent_error = TRUE;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	80 93 b3 22 	sts	0x22B3, r24	; 0x8022b3 <bm_overcurrent_error>
			lcd_write_new_P(PSTR("E22 - BM OVERLOAD"));
    4168:	85 e2       	ldi	r24, 0x25	; 37
    416a:	90 e1       	ldi	r25, 0x10	; 16
    416c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("TURN OFF KEY"));
    4178:	88 e1       	ldi	r24, 0x18	; 24
    417a:	90 e1       	ldi	r25, 0x10	; 16
    417c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    4180:	1c c3       	rjmp	.+1592   	; 0x47ba <processCAN+0x930>
		break;

		//Receive battery voltage from A2
	case BATTERY_CAN:
		total = data[0] + (data[1] << 8);
		check_battery_voltage(total);
    4182:	fb 01       	movw	r30, r22
    4184:	81 81       	ldd	r24, Z+1	; 0x01
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	98 2f       	mov	r25, r24
    418a:	88 27       	eor	r24, r24
    418c:	20 81       	ld	r18, Z
    418e:	82 0f       	add	r24, r18
    4190:	91 1d       	adc	r25, r1
    4192:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <check_battery_voltage>
		break;
    4196:	11 c3       	rjmp	.+1570   	; 0x47ba <processCAN+0x930>

		//Inform user of TOP error from A2 or A3
	case TOP_CAN:
		acknowledge_top();
    4198:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <acknowledge_top>
		if (top_error == OFF)
    419c:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    41a0:	81 11       	cpse	r24, r1
    41a2:	0b c3       	rjmp	.+1558   	; 0x47ba <processCAN+0x930>
		{
			top_error = data[0];
    41a4:	d8 01       	movw	r26, r16
    41a6:	8c 91       	ld	r24, X
    41a8:	80 93 d8 21 	sts	0x21D8, r24	; 0x8021d8 <top_error>
			if (top_error == 0xA2)
    41ac:	82 3a       	cpi	r24, 0xA2	; 162
    41ae:	29 f4       	brne	.+10     	; 0x41ba <processCAN+0x330>
			{
				lcd_write_new_P(PSTR("E03 - A2 TOP ERROR"));
    41b0:	85 e0       	ldi	r24, 0x05	; 5
    41b2:	90 e1       	ldi	r25, 0x10	; 16
    41b4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    41b8:	06 c0       	rjmp	.+12     	; 0x41c6 <processCAN+0x33c>
			}
			else if (top_error == 0xA3)
    41ba:	83 3a       	cpi	r24, 0xA3	; 163
    41bc:	21 f4       	brne	.+8      	; 0x41c6 <processCAN+0x33c>
			{
				lcd_write_new_P(PSTR("E11 - A3 TOP ERROR"));
    41be:	82 ef       	ldi	r24, 0xF2	; 242
    41c0:	9f e0       	ldi	r25, 0x0F	; 15
    41c2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			}
			lcd_set_cursor(1, 0);
    41c6:	60 e0       	ldi	r22, 0x00	; 0
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("TURN OFF KEY"));
    41ce:	85 ee       	ldi	r24, 0xE5	; 229
    41d0:	9f e0       	ldi	r25, 0x0F	; 15
    41d2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    41d6:	f1 c2       	rjmp	.+1506   	; 0x47ba <processCAN+0x930>
		}
		break;

		//Turn off vacuum if tank is full
	case FLOAT_CAN:
		tank_full = TRUE;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	80 93 91 22 	sts	0x2291, r24	; 0x802291 <tank_full>
		change_vacuum_state();
    41de:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <change_vacuum_state>
		break;
    41e2:	eb c2       	rjmp	.+1494   	; 0x47ba <processCAN+0x930>

		//A2 or A3 can inform A1 that runtimer should be on/off
	case RUNTIMER_CAN:
		runtimer_on = data[0];
    41e4:	fb 01       	movw	r30, r22
    41e6:	80 81       	ld	r24, Z
    41e8:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <runtimer_on>
		break;
    41ec:	e6 c2       	rjmp	.+1484   	; 0x47ba <processCAN+0x930>

		//Updates the LED depending on the brush state on the A2 board
	case BRUSH_STATE:
		brush_state = data[0];
    41ee:	db 01       	movw	r26, r22
    41f0:	8c 91       	ld	r24, X
    41f2:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <brush_state>
		if (data[0] == BRUSH_RUNNING)
    41f6:	8c 91       	ld	r24, X
    41f8:	8a 3a       	cpi	r24, 0xAA	; 170
    41fa:	29 f4       	brne	.+10     	; 0x4206 <processCAN+0x37c>
		{
			L_BR_ON;
    41fc:	88 e0       	ldi	r24, 0x08	; 8
    41fe:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
			{
			L_SLD_ON;
			//  blink_sld_led = FALSE;
			}
			else L_SLD_OFF;*/
			blink_brush_led = FALSE;
    4202:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
		}
		if (data[0] == BRUSH_OFF)
    4206:	f8 01       	movw	r30, r16
    4208:	80 81       	ld	r24, Z
    420a:	8b 3b       	cpi	r24, 0xBB	; 187
    420c:	09 f0       	breq	.+2      	; 0x4210 <processCAN+0x386>
    420e:	d5 c2       	rjmp	.+1450   	; 0x47ba <processCAN+0x930>
		{
			if (brush)
    4210:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    4214:	88 23       	and	r24, r24
    4216:	21 f0       	breq	.+8      	; 0x4220 <processCAN+0x396>
			{
				blink_brush_led = TRUE;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <blink_brush_led>
    421e:	05 c0       	rjmp	.+10     	; 0x422a <processCAN+0x3a0>
			}
			else
			{
				L_BR_OFF;
    4220:	88 e0       	ldi	r24, 0x08	; 8
    4222:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
				blink_brush_led = FALSE;
    4226:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
			}
			if (solenoid_led)
    422a:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <solenoid_led>
    422e:	88 23       	and	r24, r24
    4230:	21 f0       	breq	.+8      	; 0x423a <processCAN+0x3b0>
			{
				L_SLD_ON;//blink_sld_led = TRUE;
    4232:	80 e8       	ldi	r24, 0x80	; 128
    4234:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    4238:	c0 c2       	rjmp	.+1408   	; 0x47ba <processCAN+0x930>
			}
			else
			{
				L_SLD_OFF;
    423a:	80 e8       	ldi	r24, 0x80	; 128
    423c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    4240:	bc c2       	rjmp	.+1400   	; 0x47ba <processCAN+0x930>
		}
		break;

		//Updates the LED depending on the vacuum state on the A2 board
	case VACUUM_STATE:
		vacuum_state = data[0];
    4242:	db 01       	movw	r26, r22
    4244:	8c 91       	ld	r24, X
    4246:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <vacuum_state>
		if (data[0] == VACUUM_RUNNING)
    424a:	8c 91       	ld	r24, X
    424c:	8a 3a       	cpi	r24, 0xAA	; 170
    424e:	29 f4       	brne	.+10     	; 0x425a <processCAN+0x3d0>
		{
			L_VAC_ON;
    4250:	80 e4       	ldi	r24, 0x40	; 64
    4252:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
			blink_vac_led = FALSE;
    4256:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <blink_vac_led>
		}
		if (data[0] == VACUUM_RUNNING_OFF)
    425a:	f8 01       	movw	r30, r16
    425c:	80 81       	ld	r24, Z
    425e:	8b 3b       	cpi	r24, 0xBB	; 187
    4260:	19 f4       	brne	.+6      	; 0x4268 <processCAN+0x3de>
		{
			blink_vac_led = TRUE;
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <blink_vac_led>
		}
		if (data[0] == VACUUM_OFF)
    4268:	d8 01       	movw	r26, r16
    426a:	8c 91       	ld	r24, X
    426c:	8c 3c       	cpi	r24, 0xCC	; 204
    426e:	09 f0       	breq	.+2      	; 0x4272 <processCAN+0x3e8>
    4270:	a4 c2       	rjmp	.+1352   	; 0x47ba <processCAN+0x930>
		{
			L_VAC_OFF;
    4272:	80 e4       	ldi	r24, 0x40	; 64
    4274:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
			blink_vac_led = FALSE;
    4278:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <blink_vac_led>
    427c:	9e c2       	rjmp	.+1340   	; 0x47ba <processCAN+0x930>
		break;
		
		//Receive drive motor settings from A3
	case DM_SETTINGS_CAN:
		i = 1;
		if (data[0] == DM_SETTINGS_1)
    427e:	fb 01       	movw	r30, r22
    4280:	80 81       	ld	r24, Z
    4282:	81 31       	cpi	r24, 0x11	; 17
    4284:	69 f4       	brne	.+26     	; 0x42a0 <processCAN+0x416>
		{
			acceleration = data[i++];
    4286:	81 81       	ldd	r24, Z+1	; 0x01
    4288:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <acceleration>
			deceleration = data[i++];
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <deceleration>
			brake_delay = data[i++];
    4292:	83 81       	ldd	r24, Z+3	; 0x03
    4294:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <brake_delay>
			reverse_speed = data[i++];
    4298:	84 81       	ldd	r24, Z+4	; 0x04
    429a:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <reverse_speed>
    429e:	8d c2       	rjmp	.+1306   	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == DM_SETTINGS_2)
    42a0:	82 32       	cpi	r24, 0x22	; 34
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <processCAN+0x41c>
    42a4:	8a c2       	rjmp	.+1300   	; 0x47ba <processCAN+0x930>
		{
			slow_speed = data[i++];
    42a6:	81 81       	ldd	r24, Z+1	; 0x01
    42a8:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <slow_speed>
			fast_speed = data[i++];
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <fast_speed>
			current_rating = data[i++];
    42b2:	83 81       	ldd	r24, Z+3	; 0x03
    42b4:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <current_rating>
			max_current = data[i++];
    42b8:	84 81       	ldd	r24, Z+4	; 0x04
    42ba:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <max_current>
			overload_time = data[i++];
    42be:	85 81       	ldd	r24, Z+5	; 0x05
    42c0:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <overload_time>
    42c4:	7a c2       	rjmp	.+1268   	; 0x47ba <processCAN+0x930>
		}
		break;
		*/
		//When in settings menu, A3 will send pot calibration info to A1
	case POT_CALIBRATION_CAN:
		if (pot_calibrating == FALSE || pot_calibrating == POT_CALIBRATING_CANCELLED)
    42c6:	80 91 af 22 	lds	r24, 0x22AF	; 0x8022af <pot_calibrating>
    42ca:	88 23       	and	r24, r24
    42cc:	11 f0       	breq	.+4      	; 0x42d2 <processCAN+0x448>
    42ce:	8d 3d       	cpi	r24, 0xDD	; 221
    42d0:	c1 f4       	brne	.+48     	; 0x4302 <processCAN+0x478>
		{
			pot_low_deadband = (data[0] << 8) + data[1];
    42d2:	f8 01       	movw	r30, r16
    42d4:	80 81       	ld	r24, Z
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	98 2f       	mov	r25, r24
    42da:	88 27       	eor	r24, r24
    42dc:	21 81       	ldd	r18, Z+1	; 0x01
    42de:	82 0f       	add	r24, r18
    42e0:	91 1d       	adc	r25, r1
    42e2:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <pot_low_deadband>
    42e6:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <pot_low_deadband+0x1>
			pot_high_deadband = (data[2] << 8) + data[3];
    42ea:	82 81       	ldd	r24, Z+2	; 0x02
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	98 2f       	mov	r25, r24
    42f0:	88 27       	eor	r24, r24
    42f2:	23 81       	ldd	r18, Z+3	; 0x03
    42f4:	82 0f       	add	r24, r18
    42f6:	91 1d       	adc	r25, r1
    42f8:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <pot_high_deadband>
    42fc:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <pot_high_deadband+0x1>
    4300:	5c c2       	rjmp	.+1208   	; 0x47ba <processCAN+0x930>
		}
		else if (pot_calibrating == POT_CALIBRATING_LOW)
    4302:	8a 3a       	cpi	r24, 0xAA	; 170
    4304:	29 f5       	brne	.+74     	; 0x4350 <processCAN+0x4c6>
		{
			pot_low_deadband = (data[0] << 8) + data[1];
    4306:	db 01       	movw	r26, r22
    4308:	8c 91       	ld	r24, X
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	98 2f       	mov	r25, r24
    430e:	88 27       	eor	r24, r24
    4310:	11 96       	adiw	r26, 0x01	; 1
    4312:	2c 91       	ld	r18, X
    4314:	82 0f       	add	r24, r18
    4316:	91 1d       	adc	r25, r1
    4318:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <pot_low_deadband>
    431c:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <pot_low_deadband+0x1>

			lcd_write_new_P(PSTR("NOW FULLY PRESS"));
    4320:	85 ed       	ldi	r24, 0xD5	; 213
    4322:	9f e0       	ldi	r25, 0x0F	; 15
    4324:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("PEDAL TO FLOOR"));
    4330:	86 ec       	ldi	r24, 0xC6	; 198
    4332:	9f e0       	ldi	r25, 0x0F	; 15
    4334:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_led_blink();
    4338:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <lcd_led_blink>
			lcd_led_blink();
    433c:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <lcd_led_blink>
			clear_switch_pressed();
    4340:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			pot_calibrating = POT_CALIBRATING_HIGH;
    4344:	8b eb       	ldi	r24, 0xBB	; 187
    4346:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
			send_pot_calibrating();
    434a:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    434e:	35 c2       	rjmp	.+1130   	; 0x47ba <processCAN+0x930>
		}
		else if (pot_calibrating == POT_CALIBRATING_HIGH)
    4350:	8b 3b       	cpi	r24, 0xBB	; 187
    4352:	09 f0       	breq	.+2      	; 0x4356 <processCAN+0x4cc>
    4354:	32 c2       	rjmp	.+1124   	; 0x47ba <processCAN+0x930>
		{
			pot_high_deadband = (data[0] << 8) + data[1];
    4356:	fb 01       	movw	r30, r22
    4358:	80 81       	ld	r24, Z
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	98 2f       	mov	r25, r24
    435e:	88 27       	eor	r24, r24
    4360:	21 81       	ldd	r18, Z+1	; 0x01
    4362:	82 0f       	add	r24, r18
    4364:	91 1d       	adc	r25, r1
    4366:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <pot_high_deadband>
    436a:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <pot_high_deadband+0x1>

			lcd_write_new_P(PSTR("CALIBRATION COMPLETE"));
    436e:	81 eb       	ldi	r24, 0xB1	; 177
    4370:	9f e0       	ldi	r25, 0x0F	; 15
    4372:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			sprintf(message, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    437e:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    4382:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    4386:	e0 90 4d 23 	lds	r14, 0x234D	; 0x80234d <pot_high_deadband>
    438a:	f0 90 4e 23 	lds	r15, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    438e:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    4392:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    4396:	00 91 f2 21 	lds	r16, 0x21F2	; 0x8021f2 <pot_low_deadband>
    439a:	10 91 f3 21 	lds	r17, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    439e:	9f 01       	movw	r18, r30
    43a0:	36 95       	lsr	r19
    43a2:	27 95       	ror	r18
    43a4:	36 95       	lsr	r19
    43a6:	27 95       	ror	r18
    43a8:	36 95       	lsr	r19
    43aa:	27 95       	ror	r18
    43ac:	a5 ec       	ldi	r26, 0xC5	; 197
    43ae:	b0 e2       	ldi	r27, 0x20	; 32
    43b0:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    43b4:	92 95       	swap	r25
    43b6:	82 95       	swap	r24
    43b8:	8f 70       	andi	r24, 0x0F	; 15
    43ba:	89 27       	eor	r24, r25
    43bc:	9f 70       	andi	r25, 0x0F	; 15
    43be:	89 27       	eor	r24, r25
    43c0:	0f 2e       	mov	r0, r31
    43c2:	f8 ee       	ldi	r31, 0xE8	; 232
    43c4:	cf 2e       	mov	r12, r31
    43c6:	f3 e0       	ldi	r31, 0x03	; 3
    43c8:	df 2e       	mov	r13, r31
    43ca:	f0 2d       	mov	r31, r0
    43cc:	8c 9d       	mul	r24, r12
    43ce:	90 01       	movw	r18, r0
    43d0:	8d 9d       	mul	r24, r13
    43d2:	30 0d       	add	r19, r0
    43d4:	9c 9d       	mul	r25, r12
    43d6:	30 0d       	add	r19, r0
    43d8:	11 24       	eor	r1, r1
    43da:	e2 1b       	sub	r30, r18
    43dc:	f3 0b       	sbc	r31, r19
    43de:	ff 93       	push	r31
    43e0:	ef 93       	push	r30
    43e2:	97 01       	movw	r18, r14
    43e4:	36 95       	lsr	r19
    43e6:	27 95       	ror	r18
    43e8:	36 95       	lsr	r19
    43ea:	27 95       	ror	r18
    43ec:	36 95       	lsr	r19
    43ee:	27 95       	ror	r18
    43f0:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    43f4:	92 95       	swap	r25
    43f6:	82 95       	swap	r24
    43f8:	8f 70       	andi	r24, 0x0F	; 15
    43fa:	89 27       	eor	r24, r25
    43fc:	9f 70       	andi	r25, 0x0F	; 15
    43fe:	89 27       	eor	r24, r25
    4400:	9f 93       	push	r25
    4402:	8f 93       	push	r24
    4404:	9a 01       	movw	r18, r20
    4406:	36 95       	lsr	r19
    4408:	27 95       	ror	r18
    440a:	36 95       	lsr	r19
    440c:	27 95       	ror	r18
    440e:	36 95       	lsr	r19
    4410:	27 95       	ror	r18
    4412:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    4416:	92 95       	swap	r25
    4418:	82 95       	swap	r24
    441a:	8f 70       	andi	r24, 0x0F	; 15
    441c:	89 27       	eor	r24, r25
    441e:	9f 70       	andi	r25, 0x0F	; 15
    4420:	89 27       	eor	r24, r25
    4422:	8c 9d       	mul	r24, r12
    4424:	90 01       	movw	r18, r0
    4426:	8d 9d       	mul	r24, r13
    4428:	30 0d       	add	r19, r0
    442a:	9c 9d       	mul	r25, r12
    442c:	30 0d       	add	r19, r0
    442e:	11 24       	eor	r1, r1
    4430:	42 1b       	sub	r20, r18
    4432:	53 0b       	sbc	r21, r19
    4434:	5f 93       	push	r21
    4436:	4f 93       	push	r20
    4438:	98 01       	movw	r18, r16
    443a:	36 95       	lsr	r19
    443c:	27 95       	ror	r18
    443e:	36 95       	lsr	r19
    4440:	27 95       	ror	r18
    4442:	36 95       	lsr	r19
    4444:	27 95       	ror	r18
    4446:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    444a:	92 95       	swap	r25
    444c:	82 95       	swap	r24
    444e:	8f 70       	andi	r24, 0x0F	; 15
    4450:	89 27       	eor	r24, r25
    4452:	9f 70       	andi	r25, 0x0F	; 15
    4454:	89 27       	eor	r24, r25
    4456:	9f 93       	push	r25
    4458:	8f 93       	push	r24
    445a:	86 e0       	ldi	r24, 0x06	; 6
    445c:	90 e2       	ldi	r25, 0x20	; 32
    445e:	9f 93       	push	r25
    4460:	8f 93       	push	r24
    4462:	8e 01       	movw	r16, r28
    4464:	0f 5f       	subi	r16, 0xFF	; 255
    4466:	1f 4f       	sbci	r17, 0xFF	; 255
    4468:	1f 93       	push	r17
    446a:	0f 93       	push	r16
    446c:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write(message);
    4470:	c8 01       	movw	r24, r16
    4472:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>

			pot_calibrating = POT_CALIBRATING_COMPLETE;
    4476:	8c ec       	ldi	r24, 0xCC	; 204
    4478:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
			send_pot_calibrating();
    447c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>

			lcd_led_blink();
    4480:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <lcd_led_blink>
    4484:	ff ef       	ldi	r31, 0xFF	; 255
    4486:	2f e4       	ldi	r18, 0x4F	; 79
    4488:	83 ec       	ldi	r24, 0xC3	; 195
    448a:	f1 50       	subi	r31, 0x01	; 1
    448c:	20 40       	sbci	r18, 0x00	; 0
    448e:	80 40       	sbci	r24, 0x00	; 0
    4490:	e1 f7       	brne	.-8      	; 0x448a <processCAN+0x600>
    4492:	00 c0       	rjmp	.+0      	; 0x4494 <processCAN+0x60a>
    4494:	00 00       	nop
			_delay_ms(2000);
			clear_switch_pressed();
    4496:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>

			current_menu = POT_CALIBRATION_MENU;
    449a:	82 e8       	ldi	r24, 0x82	; 130
    449c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("POTENTIOMETER"));
    44a0:	83 ea       	ldi	r24, 0xA3	; 163
    44a2:	9f e0       	ldi	r25, 0x0F	; 15
    44a4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    44a8:	60 e0       	ldi	r22, 0x00	; 0
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("CALIBRATION"));
    44b0:	87 e9       	ldi	r24, 0x97	; 151
    44b2:	9f e0       	ldi	r25, 0x0F	; 15
    44b4:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	de bf       	out	0x3e, r29	; 62
    44bc:	7e c1       	rjmp	.+764    	; 0x47ba <processCAN+0x930>
		}
		break;

		//Get Pot value from the A3
	case POT_VALUE_CAN:
		pot_value = (data[0] << 8) + data[1];
    44be:	fb 01       	movw	r30, r22
    44c0:	80 81       	ld	r24, Z
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	98 2f       	mov	r25, r24
    44c6:	88 27       	eor	r24, r24
    44c8:	21 81       	ldd	r18, Z+1	; 0x01
    44ca:	82 0f       	add	r24, r18
    44cc:	91 1d       	adc	r25, r1
    44ce:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <pot_value>
    44d2:	90 93 cc 21 	sts	0x21CC, r25	; 0x8021cc <pot_value+0x1>
		break;
    44d6:	71 c1       	rjmp	.+738    	; 0x47ba <processCAN+0x930>

		//Get pedal level from the A3
	case ACCEL_PDL_CAN:
		if (data[0] == PEDAL_LEVEL)
    44d8:	db 01       	movw	r26, r22
    44da:	8c 91       	ld	r24, X
    44dc:	8b 3b       	cpi	r24, 0xBB	; 187
    44de:	09 f0       	breq	.+2      	; 0x44e2 <processCAN+0x658>
    44e0:	6c c1       	rjmp	.+728    	; 0x47ba <processCAN+0x930>
		{
			pedal_level = data[1] << 8;
			pedal_level += data[2];
    44e2:	11 96       	adiw	r26, 0x01	; 1
    44e4:	8c 91       	ld	r24, X
    44e6:	11 97       	sbiw	r26, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	98 2f       	mov	r25, r24
    44ec:	88 27       	eor	r24, r24
    44ee:	12 96       	adiw	r26, 0x02	; 2
    44f0:	2c 91       	ld	r18, X
    44f2:	82 0f       	add	r24, r18
    44f4:	91 1d       	adc	r25, r1
    44f6:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <pedal_level>
    44fa:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <pedal_level+0x1>
			A3_can_functioning_timer = 0;
    44fe:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <A3_can_functioning_timer>
    4502:	5b c1       	rjmp	.+694    	; 0x47ba <processCAN+0x930>
		}
		break;

		//Receive ACK from A2 and A3 when board starts up to make sure communication is working
	case ACK_CAN:
		if (data[0] == A2_CAN)
    4504:	fb 01       	movw	r30, r22
    4506:	80 81       	ld	r24, Z
    4508:	82 3a       	cpi	r24, 0xA2	; 162
    450a:	31 f4       	brne	.+12     	; 0x4518 <processCAN+0x68e>
		{
			A2_ack_received = TRUE;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	80 93 93 22 	sts	0x2293, r24	; 0x802293 <A2_ack_received>
			send_motor_info();
    4512:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <send_motor_info>
    4516:	0a c0       	rjmp	.+20     	; 0x452c <processCAN+0x6a2>
		}
		else if (data[0] == A3_CAN)
    4518:	83 3a       	cpi	r24, 0xA3	; 163
    451a:	41 f4       	brne	.+16     	; 0x452c <processCAN+0x6a2>
		{
			A3_ack_received = TRUE;
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	80 93 5f 23 	sts	0x235F, r24	; 0x80235f <A3_ack_received>
		}

		if (A2_ack_received && A3_ack_received)
    4522:	80 91 93 22 	lds	r24, 0x2293	; 0x802293 <A2_ack_received>
    4526:	81 11       	cpse	r24, r1
    4528:	0b c0       	rjmp	.+22     	; 0x4540 <processCAN+0x6b6>
    452a:	47 c1       	rjmp	.+654    	; 0x47ba <processCAN+0x930>
    452c:	80 91 93 22 	lds	r24, 0x2293	; 0x802293 <A2_ack_received>
    4530:	88 23       	and	r24, r24
    4532:	09 f4       	brne	.+2      	; 0x4536 <processCAN+0x6ac>
    4534:	42 c1       	rjmp	.+644    	; 0x47ba <processCAN+0x930>
    4536:	80 91 5f 23 	lds	r24, 0x235F	; 0x80235f <A3_ack_received>
    453a:	88 23       	and	r24, r24
    453c:	09 f4       	brne	.+2      	; 0x4540 <processCAN+0x6b6>
    453e:	3d c1       	rjmp	.+634    	; 0x47ba <processCAN+0x930>
		{
			can_functioning = TRUE;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <can_functioning>
    4546:	39 c1       	rjmp	.+626    	; 0x47ba <processCAN+0x930>
		}
		break;

		//Confirmation that motor info has been received from another board
	case MOTOR_INFO_CAN:
		motor_info_sent = TRUE;
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	80 93 a5 22 	sts	0x22A5, r24	; 0x8022a5 <motor_info_sent>
		break;
    454e:	35 c1       	rjmp	.+618    	; 0x47ba <processCAN+0x930>

		//Save serial number received from A2
	case A2_SERIAL_NUM_CAN:
		if (data[0] == 1)
    4550:	db 01       	movw	r26, r22
    4552:	8c 91       	ld	r24, X
    4554:	81 30       	cpi	r24, 0x01	; 1
    4556:	d1 f4       	brne	.+52     	; 0x458c <processCAN+0x702>
		{
			A2_serial_num[0] = data[1];
    4558:	e6 e4       	ldi	r30, 0x46	; 70
    455a:	f1 e2       	ldi	r31, 0x21	; 33
    455c:	11 96       	adiw	r26, 0x01	; 1
    455e:	8c 91       	ld	r24, X
    4560:	11 97       	sbiw	r26, 0x01	; 1
    4562:	80 83       	st	Z, r24
			A2_serial_num[1] = data[2];
    4564:	12 96       	adiw	r26, 0x02	; 2
    4566:	8c 91       	ld	r24, X
    4568:	12 97       	sbiw	r26, 0x02	; 2
    456a:	81 83       	std	Z+1, r24	; 0x01
			A2_serial_num[2] = data[3];
    456c:	13 96       	adiw	r26, 0x03	; 3
    456e:	8c 91       	ld	r24, X
    4570:	13 97       	sbiw	r26, 0x03	; 3
    4572:	82 83       	std	Z+2, r24	; 0x02
			A2_serial_num[3] = data[4];
    4574:	14 96       	adiw	r26, 0x04	; 4
    4576:	8c 91       	ld	r24, X
    4578:	14 97       	sbiw	r26, 0x04	; 4
    457a:	83 83       	std	Z+3, r24	; 0x03
			A2_serial_num[4] = data[5];
    457c:	15 96       	adiw	r26, 0x05	; 5
    457e:	8c 91       	ld	r24, X
    4580:	15 97       	sbiw	r26, 0x05	; 5
    4582:	84 83       	std	Z+4, r24	; 0x04
			A2_serial_num[5] = data[6];
    4584:	16 96       	adiw	r26, 0x06	; 6
    4586:	8c 91       	ld	r24, X
    4588:	85 83       	std	Z+5, r24	; 0x05
    458a:	17 c1       	rjmp	.+558    	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == 2)
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	d1 f4       	brne	.+52     	; 0x45c4 <processCAN+0x73a>
		{
			A2_serial_num[6] = data[1];
    4590:	fb 01       	movw	r30, r22
    4592:	81 81       	ldd	r24, Z+1	; 0x01
    4594:	e6 e4       	ldi	r30, 0x46	; 70
    4596:	f1 e2       	ldi	r31, 0x21	; 33
    4598:	86 83       	std	Z+6, r24	; 0x06
			A2_serial_num[7] = data[2];
    459a:	db 01       	movw	r26, r22
    459c:	12 96       	adiw	r26, 0x02	; 2
    459e:	8c 91       	ld	r24, X
    45a0:	12 97       	sbiw	r26, 0x02	; 2
    45a2:	87 83       	std	Z+7, r24	; 0x07
			A2_serial_num[8] = data[3];
    45a4:	13 96       	adiw	r26, 0x03	; 3
    45a6:	8c 91       	ld	r24, X
    45a8:	13 97       	sbiw	r26, 0x03	; 3
    45aa:	80 87       	std	Z+8, r24	; 0x08
			A2_serial_num[9] = data[4];
    45ac:	14 96       	adiw	r26, 0x04	; 4
    45ae:	8c 91       	ld	r24, X
    45b0:	14 97       	sbiw	r26, 0x04	; 4
    45b2:	81 87       	std	Z+9, r24	; 0x09
			A2_serial_num[10] = data[5];
    45b4:	15 96       	adiw	r26, 0x05	; 5
    45b6:	8c 91       	ld	r24, X
    45b8:	15 97       	sbiw	r26, 0x05	; 5
    45ba:	82 87       	std	Z+10, r24	; 0x0a
			A2_serial_num[11] = data[6];
    45bc:	16 96       	adiw	r26, 0x06	; 6
    45be:	8c 91       	ld	r24, X
    45c0:	83 87       	std	Z+11, r24	; 0x0b
    45c2:	fb c0       	rjmp	.+502    	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == 3)
    45c4:	83 30       	cpi	r24, 0x03	; 3
    45c6:	09 f0       	breq	.+2      	; 0x45ca <processCAN+0x740>
    45c8:	f8 c0       	rjmp	.+496    	; 0x47ba <processCAN+0x930>
		{
			A2_serial_num[12] = data[1];
    45ca:	fb 01       	movw	r30, r22
    45cc:	81 81       	ldd	r24, Z+1	; 0x01
    45ce:	e6 e4       	ldi	r30, 0x46	; 70
    45d0:	f1 e2       	ldi	r31, 0x21	; 33
    45d2:	84 87       	std	Z+12, r24	; 0x0c
			A2_serial_num[13] = data[2];
    45d4:	db 01       	movw	r26, r22
    45d6:	12 96       	adiw	r26, 0x02	; 2
    45d8:	8c 91       	ld	r24, X
    45da:	85 87       	std	Z+13, r24	; 0x0d
    45dc:	ee c0       	rjmp	.+476    	; 0x47ba <processCAN+0x930>
		}
		break;

		//Save serial number received by A3
	case A3_SERIAL_NUM_CAN:
		if (data[0] == 1)
    45de:	fb 01       	movw	r30, r22
    45e0:	80 81       	ld	r24, Z
    45e2:	81 30       	cpi	r24, 0x01	; 1
    45e4:	d9 f4       	brne	.+54     	; 0x461c <processCAN+0x792>
		{
			A3_serial_num[0] = data[1];
    45e6:	ea eb       	ldi	r30, 0xBA	; 186
    45e8:	f1 e2       	ldi	r31, 0x21	; 33
    45ea:	db 01       	movw	r26, r22
    45ec:	11 96       	adiw	r26, 0x01	; 1
    45ee:	8c 91       	ld	r24, X
    45f0:	11 97       	sbiw	r26, 0x01	; 1
    45f2:	80 83       	st	Z, r24
			A3_serial_num[1] = data[2];
    45f4:	12 96       	adiw	r26, 0x02	; 2
    45f6:	8c 91       	ld	r24, X
    45f8:	12 97       	sbiw	r26, 0x02	; 2
    45fa:	81 83       	std	Z+1, r24	; 0x01
			A3_serial_num[2] = data[3];
    45fc:	13 96       	adiw	r26, 0x03	; 3
    45fe:	8c 91       	ld	r24, X
    4600:	13 97       	sbiw	r26, 0x03	; 3
    4602:	82 83       	std	Z+2, r24	; 0x02
			A3_serial_num[3] = data[4];
    4604:	14 96       	adiw	r26, 0x04	; 4
    4606:	8c 91       	ld	r24, X
    4608:	14 97       	sbiw	r26, 0x04	; 4
    460a:	83 83       	std	Z+3, r24	; 0x03
			A3_serial_num[4] = data[5];
    460c:	15 96       	adiw	r26, 0x05	; 5
    460e:	8c 91       	ld	r24, X
    4610:	15 97       	sbiw	r26, 0x05	; 5
    4612:	84 83       	std	Z+4, r24	; 0x04
			A3_serial_num[5] = data[6];
    4614:	16 96       	adiw	r26, 0x06	; 6
    4616:	8c 91       	ld	r24, X
    4618:	85 83       	std	Z+5, r24	; 0x05
    461a:	cf c0       	rjmp	.+414    	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == 2)
    461c:	82 30       	cpi	r24, 0x02	; 2
    461e:	d1 f4       	brne	.+52     	; 0x4654 <processCAN+0x7ca>
		{
			A3_serial_num[6] = data[1];
    4620:	fb 01       	movw	r30, r22
    4622:	81 81       	ldd	r24, Z+1	; 0x01
    4624:	ea eb       	ldi	r30, 0xBA	; 186
    4626:	f1 e2       	ldi	r31, 0x21	; 33
    4628:	86 83       	std	Z+6, r24	; 0x06
			A3_serial_num[7] = data[2];
    462a:	db 01       	movw	r26, r22
    462c:	12 96       	adiw	r26, 0x02	; 2
    462e:	8c 91       	ld	r24, X
    4630:	12 97       	sbiw	r26, 0x02	; 2
    4632:	87 83       	std	Z+7, r24	; 0x07
			A3_serial_num[8] = data[3];
    4634:	13 96       	adiw	r26, 0x03	; 3
    4636:	8c 91       	ld	r24, X
    4638:	13 97       	sbiw	r26, 0x03	; 3
    463a:	80 87       	std	Z+8, r24	; 0x08
			A3_serial_num[9] = data[4];
    463c:	14 96       	adiw	r26, 0x04	; 4
    463e:	8c 91       	ld	r24, X
    4640:	14 97       	sbiw	r26, 0x04	; 4
    4642:	81 87       	std	Z+9, r24	; 0x09
			A3_serial_num[10] = data[5];
    4644:	15 96       	adiw	r26, 0x05	; 5
    4646:	8c 91       	ld	r24, X
    4648:	15 97       	sbiw	r26, 0x05	; 5
    464a:	82 87       	std	Z+10, r24	; 0x0a
			A3_serial_num[11] = data[6];
    464c:	16 96       	adiw	r26, 0x06	; 6
    464e:	8c 91       	ld	r24, X
    4650:	83 87       	std	Z+11, r24	; 0x0b
    4652:	b3 c0       	rjmp	.+358    	; 0x47ba <processCAN+0x930>
		}
		else if (data[0] == 3)
    4654:	83 30       	cpi	r24, 0x03	; 3
    4656:	09 f0       	breq	.+2      	; 0x465a <processCAN+0x7d0>
    4658:	b0 c0       	rjmp	.+352    	; 0x47ba <processCAN+0x930>
		{
			A3_serial_num[12] = data[1];
    465a:	fb 01       	movw	r30, r22
    465c:	81 81       	ldd	r24, Z+1	; 0x01
    465e:	ea eb       	ldi	r30, 0xBA	; 186
    4660:	f1 e2       	ldi	r31, 0x21	; 33
    4662:	84 87       	std	Z+12, r24	; 0x0c
			A3_serial_num[13] = data[2];
    4664:	db 01       	movw	r26, r22
    4666:	12 96       	adiw	r26, 0x02	; 2
    4668:	8c 91       	ld	r24, X
    466a:	85 87       	std	Z+13, r24	; 0x0d
    466c:	a6 c0       	rjmp	.+332    	; 0x47ba <processCAN+0x930>
		}
		break;

		//Save statistics info provided by A2
	case STATISTICS_CAN:
		switch (data[0])
    466e:	fb 01       	movw	r30, r22
    4670:	80 81       	ld	r24, Z
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	fc 01       	movw	r30, r24
    4676:	31 97       	sbiw	r30, 0x01	; 1
    4678:	ee 30       	cpi	r30, 0x0E	; 14
    467a:	f1 05       	cpc	r31, r1
    467c:	08 f0       	brcs	.+2      	; 0x4680 <processCAN+0x7f6>
    467e:	9d c0       	rjmp	.+314    	; 0x47ba <processCAN+0x930>
    4680:	e5 57       	subi	r30, 0x75	; 117
    4682:	fe 4f       	sbci	r31, 0xFE	; 254
    4684:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
		{
		case BRUSH_HOURS:
			brush_hours = ((uint16_t)data[1] >> 8) + data[2]; break;
    4688:	db 01       	movw	r26, r22
    468a:	12 96       	adiw	r26, 0x02	; 2
    468c:	8c 91       	ld	r24, X
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <brush_hours>
    4694:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <brush_hours+0x1>
    4698:	90 c0       	rjmp	.+288    	; 0x47ba <processCAN+0x930>
		case VACUUM_HOURS:
			vacuum_hours = ((uint16_t)data[1] >> 8) + data[2]; break;
    469a:	fb 01       	movw	r30, r22
    469c:	82 81       	ldd	r24, Z+2	; 0x02
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <vacuum_hours>
    46a4:	90 93 fa 22 	sts	0x22FA, r25	; 0x8022fa <vacuum_hours+0x1>
    46a8:	88 c0       	rjmp	.+272    	; 0x47ba <processCAN+0x930>
		case PRESWEEP_HOURS:
			presweep_hours = ((uint16_t)data[1] >> 8) + data[2]; break;
    46aa:	db 01       	movw	r26, r22
    46ac:	12 96       	adiw	r26, 0x02	; 2
    46ae:	8c 91       	ld	r24, X
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	80 93 c6 22 	sts	0x22C6, r24	; 0x8022c6 <presweep_hours>
    46b6:	90 93 c7 22 	sts	0x22C7, r25	; 0x8022c7 <presweep_hours+0x1>
    46ba:	7f c0       	rjmp	.+254    	; 0x47ba <processCAN+0x930>
		case ECO_HOURS:
			eco_hours = ((uint16_t)data[1] >> 8) + data[2]; break;
    46bc:	fb 01       	movw	r30, r22
    46be:	82 81       	ldd	r24, Z+2	; 0x02
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <eco_hours>
    46c6:	90 93 e9 21 	sts	0x21E9, r25	; 0x8021e9 <eco_hours+0x1>
    46ca:	77 c0       	rjmp	.+238    	; 0x47ba <processCAN+0x930>
		case WATER_PUMP_HOURS:
			water_pump_hours = ((uint16_t)data[1] >> 8) + data[2]; break;
    46cc:	db 01       	movw	r26, r22
    46ce:	12 96       	adiw	r26, 0x02	; 2
    46d0:	8c 91       	ld	r24, X
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <water_pump_hours>
    46d8:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <water_pump_hours+0x1>
    46dc:	6e c0       	rjmp	.+220    	; 0x47ba <processCAN+0x930>
		case DETERGENT_PUMP_HOURS:
			detergent_pump_hours = ((uint16_t)data[1] >> 8) + data[2]; break;
    46de:	fb 01       	movw	r30, r22
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	80 93 03 23 	sts	0x2303, r24	; 0x802303 <detergent_pump_hours>
    46e8:	90 93 04 23 	sts	0x2304, r25	; 0x802304 <detergent_pump_hours+0x1>
    46ec:	66 c0       	rjmp	.+204    	; 0x47ba <processCAN+0x930>
		case BRUSH1_AVERAGE_CURRENT:
			brush1_average_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    46ee:	db 01       	movw	r26, r22
    46f0:	12 96       	adiw	r26, 0x02	; 2
    46f2:	8c 91       	ld	r24, X
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	80 93 9e 22 	sts	0x229E, r24	; 0x80229e <brush1_average_current>
    46fa:	90 93 9f 22 	sts	0x229F, r25	; 0x80229f <brush1_average_current+0x1>
    46fe:	5d c0       	rjmp	.+186    	; 0x47ba <processCAN+0x930>
		case BRUSH2_AVERAGE_CURRENT:
			brush2_average_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4700:	fb 01       	movw	r30, r22
    4702:	82 81       	ldd	r24, Z+2	; 0x02
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <brush2_average_current>
    470a:	90 93 d0 21 	sts	0x21D0, r25	; 0x8021d0 <brush2_average_current+0x1>
    470e:	55 c0       	rjmp	.+170    	; 0x47ba <processCAN+0x930>
		case VACUUM_AVERAGE_CURRENT:
			vacuum_average_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4710:	db 01       	movw	r26, r22
    4712:	12 96       	adiw	r26, 0x02	; 2
    4714:	8c 91       	ld	r24, X
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	80 93 45 23 	sts	0x2345, r24	; 0x802345 <vacuum_average_current>
    471c:	90 93 46 23 	sts	0x2346, r25	; 0x802346 <vacuum_average_current+0x1>
    4720:	4c c0       	rjmp	.+152    	; 0x47ba <processCAN+0x930>
		case PRESWEEP_AVERAGE_CURRENT:
			presweep_average_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4722:	fb 01       	movw	r30, r22
    4724:	82 81       	ldd	r24, Z+2	; 0x02
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	80 93 f6 22 	sts	0x22F6, r24	; 0x8022f6 <presweep_average_current>
    472c:	90 93 f7 22 	sts	0x22F7, r25	; 0x8022f7 <presweep_average_current+0x1>
    4730:	44 c0       	rjmp	.+136    	; 0x47ba <processCAN+0x930>
		case BRUSH1_MAX_CURRENT:
			brush1_max_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4732:	db 01       	movw	r26, r22
    4734:	12 96       	adiw	r26, 0x02	; 2
    4736:	8c 91       	ld	r24, X
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <brush1_max_current>
    473e:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <brush1_max_current+0x1>
    4742:	3b c0       	rjmp	.+118    	; 0x47ba <processCAN+0x930>
		case BRUSH2_MAX_CURRENT:
			brush2_max_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4744:	fb 01       	movw	r30, r22
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	80 93 b8 21 	sts	0x21B8, r24	; 0x8021b8 <brush2_max_current>
    474e:	90 93 b9 21 	sts	0x21B9, r25	; 0x8021b9 <brush2_max_current+0x1>
    4752:	33 c0       	rjmp	.+102    	; 0x47ba <processCAN+0x930>
		case VACUUM_MAX_CURRENT:
			vacuum_max_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4754:	db 01       	movw	r26, r22
    4756:	12 96       	adiw	r26, 0x02	; 2
    4758:	8c 91       	ld	r24, X
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	80 93 f3 22 	sts	0x22F3, r24	; 0x8022f3 <vacuum_max_current>
    4760:	90 93 f4 22 	sts	0x22F4, r25	; 0x8022f4 <vacuum_max_current+0x1>
    4764:	2a c0       	rjmp	.+84     	; 0x47ba <processCAN+0x930>
		case PRESWEEP_MAX_CURRENT:
			presweep_max_current = ((uint16_t)data[1] >> 8) + data[2]; break;
    4766:	fb 01       	movw	r30, r22
    4768:	82 81       	ldd	r24, Z+2	; 0x02
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	80 93 b8 22 	sts	0x22B8, r24	; 0x8022b8 <presweep_max_current>
    4770:	90 93 b9 22 	sts	0x22B9, r25	; 0x8022b9 <presweep_max_current+0x1>
    4774:	22 c0       	rjmp	.+68     	; 0x47ba <processCAN+0x930>
		}
		break;

		//Reset board if another board resets
	case RESET_DEVICE_CAN_A2:
		if (reset_timer >= 10)
    4776:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <reset_timer>
    477a:	8a 30       	cpi	r24, 0x0A	; 10
    477c:	f0 f0       	brcs	.+60     	; 0x47ba <processCAN+0x930>
		{
			wdt_enable(WDTO_15MS);
    477e:	93 e0       	ldi	r25, 0x03	; 3
    4780:	88 ed       	ldi	r24, 0xD8	; 216
    4782:	08 b6       	in	r0, 0x38	; 56
    4784:	18 be       	out	0x38, r1	; 56
    4786:	84 bf       	out	0x34, r24	; 52
    4788:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    478c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    4790:	81 fd       	sbrc	r24, 1
    4792:	fc cf       	rjmp	.-8      	; 0x478c <processCAN+0x902>
    4794:	08 be       	out	0x38, r0	; 56
    4796:	ff cf       	rjmp	.-2      	; 0x4796 <processCAN+0x90c>
			WHILE_TRUE();
		}
		break;
		//Reset board if another board resets
	case RESET_DEVICE_CAN_A3:
		if (reset_timer >= 10)
    4798:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <reset_timer>
    479c:	8a 30       	cpi	r24, 0x0A	; 10
    479e:	68 f0       	brcs	.+26     	; 0x47ba <processCAN+0x930>
		{
			wdt_enable(WDTO_15MS);
    47a0:	93 e0       	ldi	r25, 0x03	; 3
    47a2:	88 ed       	ldi	r24, 0xD8	; 216
    47a4:	08 b6       	in	r0, 0x38	; 56
    47a6:	18 be       	out	0x38, r1	; 56
    47a8:	84 bf       	out	0x34, r24	; 52
    47aa:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    47ae:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    47b2:	81 fd       	sbrc	r24, 1
    47b4:	fc cf       	rjmp	.-8      	; 0x47ae <processCAN+0x924>
    47b6:	08 be       	out	0x38, r0	; 56
    47b8:	ff cf       	rjmp	.-2      	; 0x47b8 <processCAN+0x92e>
		break;

	default:
		break;
	}
}
    47ba:	65 96       	adiw	r28, 0x15	; 21
    47bc:	cd bf       	out	0x3d, r28	; 61
    47be:	de bf       	out	0x3e, r29	; 62
    47c0:	df 91       	pop	r29
    47c2:	cf 91       	pop	r28
    47c4:	1f 91       	pop	r17
    47c6:	0f 91       	pop	r16
    47c8:	ff 90       	pop	r15
    47ca:	ef 90       	pop	r14
    47cc:	df 90       	pop	r13
    47ce:	cf 90       	pop	r12
    47d0:	08 95       	ret

000047d2 <Request_pot_value>:
	transmit_CAN(POT_CALIBRATION_CAN, 0, 1, message);
	_delay_ms(10);
}
//Ask for pot value FROM A3 board
void Request_pot_value(void)
{
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	1f 92       	push	r1
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0; //IVA001: Send a valid value 
    47dc:	19 82       	std	Y+1, r1	; 0x01
	//message[0] = pot_calibrating;
	transmit_CAN(REQUEST_POT_VALUE_CAN, 0, 1, message);
    47de:	9e 01       	movw	r18, r28
    47e0:	2f 5f       	subi	r18, 0xFF	; 255
    47e2:	3f 4f       	sbci	r19, 0xFF	; 255
    47e4:	41 e0       	ldi	r20, 0x01	; 1
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	86 e9       	ldi	r24, 0x96	; 150
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    47f0:	2f ef       	ldi	r18, 0xFF	; 255
    47f2:	89 ef       	ldi	r24, 0xF9	; 249
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	21 50       	subi	r18, 0x01	; 1
    47f8:	80 40       	sbci	r24, 0x00	; 0
    47fa:	90 40       	sbci	r25, 0x00	; 0
    47fc:	e1 f7       	brne	.-8      	; 0x47f6 <Request_pot_value+0x24>
    47fe:	00 c0       	rjmp	.+0      	; 0x4800 <Request_pot_value+0x2e>
    4800:	00 00       	nop
	_delay_ms(10);
}
    4802:	0f 90       	pop	r0
    4804:	df 91       	pop	r29
    4806:	cf 91       	pop	r28
    4808:	08 95       	ret

0000480a <send_alarm>:

//Send an alarm to inform other boards
void send_alarm(uint8_t error)
{
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	1f 92       	push	r1
    4810:	cd b7       	in	r28, 0x3d	; 61
    4812:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = error;
    4814:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    4816:	9e 01       	movw	r18, r28
    4818:	2f 5f       	subi	r18, 0xFF	; 255
    481a:	3f 4f       	sbci	r19, 0xFF	; 255
    481c:	41 e0       	ldi	r20, 0x01	; 1
    481e:	60 e0       	ldi	r22, 0x00	; 0
    4820:	8c ea       	ldi	r24, 0xAC	; 172
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4828:	2f ef       	ldi	r18, 0xFF	; 255
    482a:	89 ef       	ldi	r24, 0xF9	; 249
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	21 50       	subi	r18, 0x01	; 1
    4830:	80 40       	sbci	r24, 0x00	; 0
    4832:	90 40       	sbci	r25, 0x00	; 0
    4834:	e1 f7       	brne	.-8      	; 0x482e <send_alarm+0x24>
    4836:	00 c0       	rjmp	.+0      	; 0x4838 <send_alarm+0x2e>
    4838:	00 00       	nop
	_delay_ms(10);
}
    483a:	0f 90       	pop	r0
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	08 95       	ret

00004842 <send_emergency_off>:
//Send an alarm to inform A3 CAN communication error to A2 board to disable all functions
void send_emergency_off(void)
{
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	1f 92       	push	r1
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0; //A1_CAN;//IVA001: Send a valid value
    484c:	19 82       	std	Y+1, r1	; 0x01
	transmit_CAN(EMERGENCY_OFF_CAN, 0, 1, message);
    484e:	9e 01       	movw	r18, r28
    4850:	2f 5f       	subi	r18, 0xFF	; 255
    4852:	3f 4f       	sbci	r19, 0xFF	; 255
    4854:	41 e0       	ldi	r20, 0x01	; 1
    4856:	60 e0       	ldi	r22, 0x00	; 0
    4858:	83 e9       	ldi	r24, 0x93	; 147
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4860:	2f ef       	ldi	r18, 0xFF	; 255
    4862:	89 ef       	ldi	r24, 0xF9	; 249
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	21 50       	subi	r18, 0x01	; 1
    4868:	80 40       	sbci	r24, 0x00	; 0
    486a:	90 40       	sbci	r25, 0x00	; 0
    486c:	e1 f7       	brne	.-8      	; 0x4866 <send_emergency_off+0x24>
    486e:	00 c0       	rjmp	.+0      	; 0x4870 <send_emergency_off+0x2e>
    4870:	00 00       	nop
	_delay_ms(10);
}
    4872:	0f 90       	pop	r0
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	08 95       	ret

0000487a <send_CAN_ACK>:

//Send preliminary ACK to other
void send_CAN_ACK(void)
{
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	1f 92       	push	r1
    4880:	cd b7       	in	r28, 0x3d	; 61
    4882:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = A1_CAN;
    4884:	81 ea       	ldi	r24, 0xA1	; 161
    4886:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ACK_CAN, 0, 1, message);
    4888:	9e 01       	movw	r18, r28
    488a:	2f 5f       	subi	r18, 0xFF	; 255
    488c:	3f 4f       	sbci	r19, 0xFF	; 255
    488e:	41 e0       	ldi	r20, 0x01	; 1
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	8e ed       	ldi	r24, 0xDE	; 222
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    489a:	2f ef       	ldi	r18, 0xFF	; 255
    489c:	89 ef       	ldi	r24, 0xF9	; 249
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	21 50       	subi	r18, 0x01	; 1
    48a2:	80 40       	sbci	r24, 0x00	; 0
    48a4:	90 40       	sbci	r25, 0x00	; 0
    48a6:	e1 f7       	brne	.-8      	; 0x48a0 <send_CAN_ACK+0x26>
    48a8:	00 c0       	rjmp	.+0      	; 0x48aa <send_CAN_ACK+0x30>
    48aa:	00 00       	nop
	_delay_ms(10);
}
    48ac:	0f 90       	pop	r0
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	08 95       	ret

000048b4 <send_serial_num>:

//Send serial numbers to other boards to update them
void send_serial_num(uint8_t board, char *number)
{
    48b4:	ef 92       	push	r14
    48b6:	ff 92       	push	r15
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	28 97       	sbiw	r28, 0x08	; 8
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	de bf       	out	0x3e, r29	; 62
	uint8_t can_data_type;
	switch (board)
    48ca:	82 3a       	cpi	r24, 0xA2	; 162
    48cc:	31 f0       	breq	.+12     	; 0x48da <send_serial_num+0x26>
    48ce:	83 3a       	cpi	r24, 0xA3	; 163
    48d0:	31 f0       	breq	.+12     	; 0x48de <send_serial_num+0x2a>
    48d2:	81 3a       	cpi	r24, 0xA1	; 161
    48d4:	09 f0       	breq	.+2      	; 0x48d8 <send_serial_num+0x24>
    48d6:	61 c0       	rjmp	.+194    	; 0x499a <send_serial_num+0xe6>
    48d8:	04 c0       	rjmp	.+8      	; 0x48e2 <send_serial_num+0x2e>
	{
	case A1_CAN: can_data_type = A1_SERIAL_NUM_CAN; break;
	case A2_CAN: can_data_type = A2_SERIAL_NUM_CAN; break;
    48da:	82 e5       	ldi	r24, 0x52	; 82
    48dc:	03 c0       	rjmp	.+6      	; 0x48e4 <send_serial_num+0x30>
	case A3_CAN: can_data_type = A3_SERIAL_NUM_CAN; break;
    48de:	83 e5       	ldi	r24, 0x53	; 83
    48e0:	01 c0       	rjmp	.+2      	; 0x48e4 <send_serial_num+0x30>
void send_serial_num(uint8_t board, char *number)
{
	uint8_t can_data_type;
	switch (board)
	{
	case A1_CAN: can_data_type = A1_SERIAL_NUM_CAN; break;
    48e2:	81 e5       	ldi	r24, 0x51	; 81
    48e4:	8b 01       	movw	r16, r22
	}

	uint8_t i = 0;
	uint8_t message[8];

	message[i++] = 1;
    48e6:	91 e0       	ldi	r25, 0x01	; 1
    48e8:	99 83       	std	Y+1, r25	; 0x01
	message[i++] = number[0];
    48ea:	fb 01       	movw	r30, r22
    48ec:	90 81       	ld	r25, Z
    48ee:	9a 83       	std	Y+2, r25	; 0x02
	message[i++] = number[1];
    48f0:	91 81       	ldd	r25, Z+1	; 0x01
    48f2:	9b 83       	std	Y+3, r25	; 0x03
	message[i++] = number[2];
    48f4:	92 81       	ldd	r25, Z+2	; 0x02
    48f6:	9c 83       	std	Y+4, r25	; 0x04
	message[i++] = number[3];
    48f8:	93 81       	ldd	r25, Z+3	; 0x03
    48fa:	9d 83       	std	Y+5, r25	; 0x05
	message[i++] = number[4];
    48fc:	94 81       	ldd	r25, Z+4	; 0x04
    48fe:	9e 83       	std	Y+6, r25	; 0x06
	message[i++] = number[5];
    4900:	95 81       	ldd	r25, Z+5	; 0x05
    4902:	9f 83       	std	Y+7, r25	; 0x07

	transmit_CAN(can_data_type, 0, 7, message);
    4904:	e8 2e       	mov	r14, r24
    4906:	f1 2c       	mov	r15, r1
    4908:	9e 01       	movw	r18, r28
    490a:	2f 5f       	subi	r18, 0xFF	; 255
    490c:	3f 4f       	sbci	r19, 0xFF	; 255
    490e:	47 e0       	ldi	r20, 0x07	; 7
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	c7 01       	movw	r24, r14
    4914:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4918:	ff ef       	ldi	r31, 0xFF	; 255
    491a:	29 ef       	ldi	r18, 0xF9	; 249
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	f1 50       	subi	r31, 0x01	; 1
    4920:	20 40       	sbci	r18, 0x00	; 0
    4922:	80 40       	sbci	r24, 0x00	; 0
    4924:	e1 f7       	brne	.-8      	; 0x491e <send_serial_num+0x6a>
    4926:	00 c0       	rjmp	.+0      	; 0x4928 <send_serial_num+0x74>
    4928:	00 00       	nop
	_delay_ms(10);

	i = 0;
	message[i++] = 2;
    492a:	82 e0       	ldi	r24, 0x02	; 2
    492c:	89 83       	std	Y+1, r24	; 0x01
	message[i++] = number[6];
    492e:	f8 01       	movw	r30, r16
    4930:	86 81       	ldd	r24, Z+6	; 0x06
    4932:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = number[7];
    4934:	87 81       	ldd	r24, Z+7	; 0x07
    4936:	8b 83       	std	Y+3, r24	; 0x03
	message[i++] = number[8];
    4938:	80 85       	ldd	r24, Z+8	; 0x08
    493a:	8c 83       	std	Y+4, r24	; 0x04
	message[i++] = number[9];
    493c:	81 85       	ldd	r24, Z+9	; 0x09
    493e:	8d 83       	std	Y+5, r24	; 0x05
	message[i++] = number[10];
    4940:	82 85       	ldd	r24, Z+10	; 0x0a
    4942:	8e 83       	std	Y+6, r24	; 0x06
	message[i++] = number[11];
    4944:	83 85       	ldd	r24, Z+11	; 0x0b
    4946:	8f 83       	std	Y+7, r24	; 0x07

	transmit_CAN(can_data_type, 0, 7, message);
    4948:	9e 01       	movw	r18, r28
    494a:	2f 5f       	subi	r18, 0xFF	; 255
    494c:	3f 4f       	sbci	r19, 0xFF	; 255
    494e:	47 e0       	ldi	r20, 0x07	; 7
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	c7 01       	movw	r24, r14
    4954:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4958:	ff ef       	ldi	r31, 0xFF	; 255
    495a:	29 ef       	ldi	r18, 0xF9	; 249
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	f1 50       	subi	r31, 0x01	; 1
    4960:	20 40       	sbci	r18, 0x00	; 0
    4962:	80 40       	sbci	r24, 0x00	; 0
    4964:	e1 f7       	brne	.-8      	; 0x495e <send_serial_num+0xaa>
    4966:	00 c0       	rjmp	.+0      	; 0x4968 <send_serial_num+0xb4>
    4968:	00 00       	nop
	_delay_ms(10);

	i = 0;
	message[i++] = 3;
    496a:	83 e0       	ldi	r24, 0x03	; 3
    496c:	89 83       	std	Y+1, r24	; 0x01
	message[i++] = number[12];
    496e:	f8 01       	movw	r30, r16
    4970:	84 85       	ldd	r24, Z+12	; 0x0c
    4972:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = number[13];
    4974:	85 85       	ldd	r24, Z+13	; 0x0d
    4976:	8b 83       	std	Y+3, r24	; 0x03

	transmit_CAN(can_data_type, 0, 3, message);
    4978:	9e 01       	movw	r18, r28
    497a:	2f 5f       	subi	r18, 0xFF	; 255
    497c:	3f 4f       	sbci	r19, 0xFF	; 255
    497e:	43 e0       	ldi	r20, 0x03	; 3
    4980:	60 e0       	ldi	r22, 0x00	; 0
    4982:	c7 01       	movw	r24, r14
    4984:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4988:	ff ef       	ldi	r31, 0xFF	; 255
    498a:	29 ef       	ldi	r18, 0xF9	; 249
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	f1 50       	subi	r31, 0x01	; 1
    4990:	20 40       	sbci	r18, 0x00	; 0
    4992:	80 40       	sbci	r24, 0x00	; 0
    4994:	e1 f7       	brne	.-8      	; 0x498e <send_serial_num+0xda>
    4996:	00 c0       	rjmp	.+0      	; 0x4998 <send_serial_num+0xe4>
    4998:	00 00       	nop
	_delay_ms(10);
}
    499a:	28 96       	adiw	r28, 0x08	; 8
    499c:	cd bf       	out	0x3d, r28	; 61
    499e:	de bf       	out	0x3e, r29	; 62
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	0f 91       	pop	r16
    49a8:	ff 90       	pop	r15
    49aa:	ef 90       	pop	r14
    49ac:	08 95       	ret

000049ae <request_A2_serial_num>:

//Ask for serial numbers from A2
void request_A2_serial_num(void)
{
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	1f 92       	push	r1
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0;
    49b8:	19 82       	std	Y+1, r1	; 0x01
	transmit_CAN(A2_SERIAL_NUM_CAN, 0, 1, message);
    49ba:	9e 01       	movw	r18, r28
    49bc:	2f 5f       	subi	r18, 0xFF	; 255
    49be:	3f 4f       	sbci	r19, 0xFF	; 255
    49c0:	41 e0       	ldi	r20, 0x01	; 1
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	82 e5       	ldi	r24, 0x52	; 82
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    49cc:	2f ef       	ldi	r18, 0xFF	; 255
    49ce:	83 ec       	ldi	r24, 0xC3	; 195
    49d0:	99 e0       	ldi	r25, 0x09	; 9
    49d2:	21 50       	subi	r18, 0x01	; 1
    49d4:	80 40       	sbci	r24, 0x00	; 0
    49d6:	90 40       	sbci	r25, 0x00	; 0
    49d8:	e1 f7       	brne	.-8      	; 0x49d2 <request_A2_serial_num+0x24>
    49da:	00 c0       	rjmp	.+0      	; 0x49dc <request_A2_serial_num+0x2e>
    49dc:	00 00       	nop
	_delay_ms(100);
}
    49de:	0f 90       	pop	r0
    49e0:	df 91       	pop	r29
    49e2:	cf 91       	pop	r28
    49e4:	08 95       	ret

000049e6 <request_A3_serial_num>:
//Ask for serial numbers from A3
void request_A3_serial_num(void)
{
    49e6:	cf 93       	push	r28
    49e8:	df 93       	push	r29
    49ea:	1f 92       	push	r1
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0;
    49f0:	19 82       	std	Y+1, r1	; 0x01
	transmit_CAN(A3_SERIAL_NUM_CAN, 0, 1, message);
    49f2:	9e 01       	movw	r18, r28
    49f4:	2f 5f       	subi	r18, 0xFF	; 255
    49f6:	3f 4f       	sbci	r19, 0xFF	; 255
    49f8:	41 e0       	ldi	r20, 0x01	; 1
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	83 e5       	ldi	r24, 0x53	; 83
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4a04:	2f ef       	ldi	r18, 0xFF	; 255
    4a06:	83 ec       	ldi	r24, 0xC3	; 195
    4a08:	99 e0       	ldi	r25, 0x09	; 9
    4a0a:	21 50       	subi	r18, 0x01	; 1
    4a0c:	80 40       	sbci	r24, 0x00	; 0
    4a0e:	90 40       	sbci	r25, 0x00	; 0
    4a10:	e1 f7       	brne	.-8      	; 0x4a0a <request_A3_serial_num+0x24>
    4a12:	00 c0       	rjmp	.+0      	; 0x4a14 <request_A3_serial_num+0x2e>
    4a14:	00 00       	nop
	_delay_ms(100);
}
    4a16:	0f 90       	pop	r0
    4a18:	df 91       	pop	r29
    4a1a:	cf 91       	pop	r28
    4a1c:	08 95       	ret

00004a1e <send_reset_CAN>:

//Instruct other boards to reset
void send_reset_CAN(void)
{
    4a1e:	cf 93       	push	r28
    4a20:	df 93       	push	r29
    4a22:	1f 92       	push	r1
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0; //IVA001: Send a valid value
    4a28:	19 82       	std	Y+1, r1	; 0x01
	transmit_CAN(RESET_DEVICE_CAN_A1, 0, 1, message);
    4a2a:	9e 01       	movw	r18, r28
    4a2c:	2f 5f       	subi	r18, 0xFF	; 255
    4a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a30:	41 e0       	ldi	r20, 0x01	; 1
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	89 e9       	ldi	r24, 0x99	; 153
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4a3c:	2f ef       	ldi	r18, 0xFF	; 255
    4a3e:	89 ef       	ldi	r24, 0xF9	; 249
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	21 50       	subi	r18, 0x01	; 1
    4a44:	80 40       	sbci	r24, 0x00	; 0
    4a46:	90 40       	sbci	r25, 0x00	; 0
    4a48:	e1 f7       	brne	.-8      	; 0x4a42 <send_reset_CAN+0x24>
    4a4a:	00 c0       	rjmp	.+0      	; 0x4a4c <send_reset_CAN+0x2e>
    4a4c:	00 00       	nop
	_delay_ms(10);
}
    4a4e:	0f 90       	pop	r0
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	08 95       	ret

00004a56 <erase_SD_card>:

//Tell A2 to erase its SD card
void erase_SD_card(void)
{
    4a56:	cf 93       	push	r28
    4a58:	df 93       	push	r29
    4a5a:	1f 92       	push	r1
    4a5c:	cd b7       	in	r28, 0x3d	; 61
    4a5e:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = 0; //IVA001: Send a valid value
    4a60:	19 82       	std	Y+1, r1	; 0x01
	transmit_CAN(ERASE_SD_CAN, 0, 1, message);
    4a62:	9e 01       	movw	r18, r28
    4a64:	2f 5f       	subi	r18, 0xFF	; 255
    4a66:	3f 4f       	sbci	r19, 0xFF	; 255
    4a68:	41 e0       	ldi	r20, 0x01	; 1
    4a6a:	60 e0       	ldi	r22, 0x00	; 0
    4a6c:	81 e9       	ldi	r24, 0x91	; 145
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
}
    4a74:	0f 90       	pop	r0
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	08 95       	ret

00004a7c <update_A2_brush_slow_start>:

void update_A2_brush_slow_start(void)
{
    4a7c:	cf 93       	push	r28
    4a7e:	df 93       	push	r29
    4a80:	1f 92       	push	r1
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = brush_slow_start;
    4a86:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <brush_slow_start>
    4a8a:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(BRUSH_SLOW_START_CAN, 0, 1, message);
    4a8c:	9e 01       	movw	r18, r28
    4a8e:	2f 5f       	subi	r18, 0xFF	; 255
    4a90:	3f 4f       	sbci	r19, 0xFF	; 255
    4a92:	41 e0       	ldi	r20, 0x01	; 1
    4a94:	60 e0       	ldi	r22, 0x00	; 0
    4a96:	81 e8       	ldi	r24, 0x81	; 129
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4a9e:	2f ef       	ldi	r18, 0xFF	; 255
    4aa0:	89 ef       	ldi	r24, 0xF9	; 249
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	21 50       	subi	r18, 0x01	; 1
    4aa6:	80 40       	sbci	r24, 0x00	; 0
    4aa8:	90 40       	sbci	r25, 0x00	; 0
    4aaa:	e1 f7       	brne	.-8      	; 0x4aa4 <update_A2_brush_slow_start+0x28>
    4aac:	00 c0       	rjmp	.+0      	; 0x4aae <update_A2_brush_slow_start+0x32>
    4aae:	00 00       	nop
	_delay_ms(10);
}
    4ab0:	0f 90       	pop	r0
    4ab2:	df 91       	pop	r29
    4ab4:	cf 91       	pop	r28
    4ab6:	08 95       	ret

00004ab8 <update_A2_vaccum_slow_start>:

void update_A2_vaccum_slow_start(void)
{
    4ab8:	cf 93       	push	r28
    4aba:	df 93       	push	r29
    4abc:	1f 92       	push	r1
    4abe:	cd b7       	in	r28, 0x3d	; 61
    4ac0:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = vacuum_slow_start;
    4ac2:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <vacuum_slow_start>
    4ac6:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(VACCUM_SLOW_START_CAN, 0, 1, message);
    4ac8:	9e 01       	movw	r18, r28
    4aca:	2f 5f       	subi	r18, 0xFF	; 255
    4acc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ace:	41 e0       	ldi	r20, 0x01	; 1
    4ad0:	60 e0       	ldi	r22, 0x00	; 0
    4ad2:	82 e8       	ldi	r24, 0x82	; 130
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4ada:	2f ef       	ldi	r18, 0xFF	; 255
    4adc:	89 ef       	ldi	r24, 0xF9	; 249
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	21 50       	subi	r18, 0x01	; 1
    4ae2:	80 40       	sbci	r24, 0x00	; 0
    4ae4:	90 40       	sbci	r25, 0x00	; 0
    4ae6:	e1 f7       	brne	.-8      	; 0x4ae0 <update_A2_vaccum_slow_start+0x28>
    4ae8:	00 c0       	rjmp	.+0      	; 0x4aea <update_A2_vaccum_slow_start+0x32>
    4aea:	00 00       	nop
	_delay_ms(10);
}
    4aec:	0f 90       	pop	r0
    4aee:	df 91       	pop	r29
    4af0:	cf 91       	pop	r28
    4af2:	08 95       	ret

00004af4 <update_A2_presweep_slow_start>:

void update_A2_presweep_slow_start(void)
{
    4af4:	cf 93       	push	r28
    4af6:	df 93       	push	r29
    4af8:	1f 92       	push	r1
    4afa:	cd b7       	in	r28, 0x3d	; 61
    4afc:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = pre_swp_slow_start;
    4afe:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <pre_swp_slow_start>
    4b02:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(PRESWEEP_SLOW_START_CAN, 0, 1, message);
    4b04:	9e 01       	movw	r18, r28
    4b06:	2f 5f       	subi	r18, 0xFF	; 255
    4b08:	3f 4f       	sbci	r19, 0xFF	; 255
    4b0a:	41 e0       	ldi	r20, 0x01	; 1
    4b0c:	60 e0       	ldi	r22, 0x00	; 0
    4b0e:	83 e8       	ldi	r24, 0x83	; 131
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    4b16:	2f ef       	ldi	r18, 0xFF	; 255
    4b18:	89 ef       	ldi	r24, 0xF9	; 249
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	21 50       	subi	r18, 0x01	; 1
    4b1e:	80 40       	sbci	r24, 0x00	; 0
    4b20:	90 40       	sbci	r25, 0x00	; 0
    4b22:	e1 f7       	brne	.-8      	; 0x4b1c <update_A2_presweep_slow_start+0x28>
    4b24:	00 c0       	rjmp	.+0      	; 0x4b26 <update_A2_presweep_slow_start+0x32>
    4b26:	00 00       	nop
	_delay_ms(10);
    4b28:	0f 90       	pop	r0
    4b2a:	df 91       	pop	r29
    4b2c:	cf 91       	pop	r28
    4b2e:	08 95       	ret

00004b30 <initialize_keypad>:
	//Switches are inputs, LED's are outputs
	//LED's are active low so all are set to high
	//Turn on interrupts for all switches
	//Falling edge & low level interrupts
	//PORT A
	PORTA_DIRCLR = (1 << S_HL) | (1 << S_SLD);
    4b30:	88 e8       	ldi	r24, 0x88	; 136
    4b32:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	PORTA_INT0MASK = (1 << S_HL) | (1 << S_SLD);	//Turn on interrupt
    4b36:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
	PORTA_INTCTRL = 0x05;			//Low level interrupts
    4b3a:	95 e0       	ldi	r25, 0x05	; 5
    4b3c:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
	PORTA_PIN7CTRL = 0x02;			//Falling Edge
    4b40:	82 e0       	ldi	r24, 0x02	; 2
    4b42:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <__TEXT_REGION_LENGTH__+0x700617>
	PORTA_PIN3CTRL = 0x02;
    4b46:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <__TEXT_REGION_LENGTH__+0x700613>

	PORTA_DIRSET = (1 << L_P2);
    4b4a:	20 e4       	ldi	r18, 0x40	; 64
    4b4c:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

	//PORT B
	PORTB_DIRCLR = (1 << S_PU) | (1 << S_SLO);
    4b50:	28 e2       	ldi	r18, 0x28	; 40
    4b52:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	PORTB_INT0MASK = (1 << S_PU) | (1 << S_SLO);
    4b56:	20 93 2a 06 	sts	0x062A, r18	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
	PORTB_INTCTRL = 0x05;
    4b5a:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <__TEXT_REGION_LENGTH__+0x700629>
	PORTB_PIN3CTRL = 0x02;
    4b5e:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <__TEXT_REGION_LENGTH__+0x700633>
	PORTB_PIN5CTRL = 0x02;
    4b62:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <__TEXT_REGION_LENGTH__+0x700635>

	PORTB_DIRSET = (1 << L_HL) | (1 << L_P5) | (1 << L_P4) | (1 << L_P3) | (1 << L_SLO) | (1 << L_SLD);
    4b66:	27 ed       	ldi	r18, 0xD7	; 215
    4b68:	20 93 21 06 	sts	0x0621, r18	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	PORTB_OUTSET = (1 << L_HL) | (1 << L_P5) | (1 << L_P4) | (1 << L_P3) | (1 << L_SLO) | (1 << L_SLD);
    4b6c:	20 93 25 06 	sts	0x0625, r18	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>

	//PORT F
	//PORTF_DIRSET = (1 << 3);
	//PORT H
	PORTH_DIRCLR = (1 << S_ECO) | (1 << S_TR) | (1 << S_EP) | (1 << S_DU);
    4b70:	26 ea       	ldi	r18, 0xA6	; 166
    4b72:	20 93 e2 06 	sts	0x06E2, r18	; 0x8006e2 <__TEXT_REGION_LENGTH__+0x7006e2>
	PORTH_INT0MASK = (1 << S_ECO) | (1 << S_TR) | (1 << S_DU);
    4b76:	26 e8       	ldi	r18, 0x86	; 134
    4b78:	20 93 ea 06 	sts	0x06EA, r18	; 0x8006ea <__TEXT_REGION_LENGTH__+0x7006ea>
	PORTH_INT1MASK = (1 << S_EP);
    4b7c:	20 e2       	ldi	r18, 0x20	; 32
    4b7e:	20 93 eb 06 	sts	0x06EB, r18	; 0x8006eb <__TEXT_REGION_LENGTH__+0x7006eb>
	PORTH_INTCTRL = 0x05;
    4b82:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <__TEXT_REGION_LENGTH__+0x7006e9>
	PORTH_PIN1CTRL = 0x02; PORTH_PIN2CTRL = 0x02; PORTH_PIN5CTRL = 0x00; PORTH_PIN7CTRL = 0x02;
    4b86:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <__TEXT_REGION_LENGTH__+0x7006f1>
    4b8a:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <__TEXT_REGION_LENGTH__+0x7006f2>
    4b8e:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <__TEXT_REGION_LENGTH__+0x7006f5>
    4b92:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <__TEXT_REGION_LENGTH__+0x7006f7>

	PORTH_DIRSET = (1 << L_ECO) | (1 << L_EP) | (1 << L_TR) | (1 << L_D5);
    4b96:	29 e5       	ldi	r18, 0x59	; 89
    4b98:	20 93 e1 06 	sts	0x06E1, r18	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>
	PORTH_OUTSET = (1 << L_ECO) | (1 << L_EP) | (1 << L_TR) | (1 << L_D5);
    4b9c:	20 93 e5 06 	sts	0x06E5, r18	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>

	//PORT J
	PORTJ_DIRCLR = (1 << S_RV) | (1 << S_DD) | (1 << S_VAC);
    4ba0:	21 ea       	ldi	r18, 0xA1	; 161
    4ba2:	20 93 02 07 	sts	0x0702, r18	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
	PORTJ_INT0MASK = (1 << S_RV) | (1 << S_DD);
    4ba6:	21 e2       	ldi	r18, 0x21	; 33
    4ba8:	20 93 0a 07 	sts	0x070A, r18	; 0x80070a <__TEXT_REGION_LENGTH__+0x70070a>
	PORTJ_INT1MASK = (1 << S_VAC);
    4bac:	20 e8       	ldi	r18, 0x80	; 128
    4bae:	20 93 0b 07 	sts	0x070B, r18	; 0x80070b <__TEXT_REGION_LENGTH__+0x70070b>
	PORTJ_INTCTRL = 0x05;
    4bb2:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <__TEXT_REGION_LENGTH__+0x700709>
	PORTJ_PIN0CTRL = 0x02; PORTJ_PIN5CTRL = 0x02; PORTJ_PIN7CTRL = 0x02;
    4bb6:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <__TEXT_REGION_LENGTH__+0x700710>
    4bba:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <__TEXT_REGION_LENGTH__+0x700715>
    4bbe:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <__TEXT_REGION_LENGTH__+0x700717>

	PORTJ_DIRSET = (1 << L_D4) | (1 << L_D3) | (1 << L_D2) | (1 << L_D1) | (1 << L_VAC);
    4bc2:	2e e5       	ldi	r18, 0x5E	; 94
    4bc4:	20 93 01 07 	sts	0x0701, r18	; 0x800701 <__TEXT_REGION_LENGTH__+0x700701>
	PORTJ_OUTSET = (1 << L_D4) | (1 << L_D3) | (1 << L_D2) | (1 << L_D1) | (1 << L_VAC);
    4bc8:	20 93 05 07 	sts	0x0705, r18	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>

	//PORT K
	PORTK_DIRCLR = (1 << S_HRN) | (1 << S_BR) | (1 << S_ATO) | (1 << S_PD);
    4bcc:	26 e9       	ldi	r18, 0x96	; 150
    4bce:	20 93 22 07 	sts	0x0722, r18	; 0x800722 <__TEXT_REGION_LENGTH__+0x700722>
	PORTK_INT0MASK = (1 << S_HRN);
    4bd2:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <__TEXT_REGION_LENGTH__+0x70072a>
	PORTK_INT1MASK = (1 << S_BR) | (1 << S_ATO) | (1 << S_PD);
    4bd6:	24 e9       	ldi	r18, 0x94	; 148
    4bd8:	20 93 2b 07 	sts	0x072B, r18	; 0x80072b <__TEXT_REGION_LENGTH__+0x70072b>
	PORTK_INTCTRL = 0x05;
    4bdc:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <__TEXT_REGION_LENGTH__+0x700729>
	PORTK_PIN1CTRL = 0x00; PORTK_PIN2CTRL = 0x02; PORTK_PIN4CTRL = 0x02; PORTK_PIN7CTRL = 0x02;
    4be0:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <__TEXT_REGION_LENGTH__+0x700731>
    4be4:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <__TEXT_REGION_LENGTH__+0x700732>
    4be8:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <__TEXT_REGION_LENGTH__+0x700734>
    4bec:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <__TEXT_REGION_LENGTH__+0x700737>

	PORTK_DIRSET = (1 << L_RV) | (1 << L_BR) | (1 << L_ATO) | (1 << L_P1);
    4bf0:	89 e6       	ldi	r24, 0x69	; 105
    4bf2:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <__TEXT_REGION_LENGTH__+0x700721>
	PORTK_OUTSET = (1 << L_RV) | (1 << L_BR) | (1 << L_ATO) | (1 << L_P1);
    4bf6:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>

	//Initialize all the switch position to not being pressed
	for (int s_num = 0; s_num < NUM_SWITCHES; s_num++)
    4bfa:	80 e0       	ldi	r24, 0x00	; 0
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
	{
		switch_down[s_num] = FALSE;
    4bfe:	fc 01       	movw	r30, r24
    4c00:	e7 52       	subi	r30, 0x27	; 39
    4c02:	fe 4d       	sbci	r31, 0xDE	; 222
    4c04:	10 82       	st	Z, r1
		switch_counter[s_num] = 0;
    4c06:	fc 01       	movw	r30, r24
    4c08:	ee 0f       	add	r30, r30
    4c0a:	ff 1f       	adc	r31, r31
    4c0c:	e5 5a       	subi	r30, 0xA5	; 165
    4c0e:	fe 4d       	sbci	r31, 0xDE	; 222
    4c10:	10 82       	st	Z, r1
    4c12:	11 82       	std	Z+1, r1	; 0x01
		switch_pressed[s_num] = FALSE;
    4c14:	fc 01       	movw	r30, r24
    4c16:	eb 52       	subi	r30, 0x2B	; 43
    4c18:	fd 4d       	sbci	r31, 0xDD	; 221
    4c1a:	10 82       	st	Z, r1
		switch_debounce[s_num] = FALSE;
    4c1c:	fc 01       	movw	r30, r24
    4c1e:	e9 5f       	subi	r30, 0xF9	; 249
    4c20:	fc 4d       	sbci	r31, 0xDC	; 220
    4c22:	10 82       	st	Z, r1

	PORTK_DIRSET = (1 << L_RV) | (1 << L_BR) | (1 << L_ATO) | (1 << L_P1);
	PORTK_OUTSET = (1 << L_RV) | (1 << L_BR) | (1 << L_ATO) | (1 << L_P1);

	//Initialize all the switch position to not being pressed
	for (int s_num = 0; s_num < NUM_SWITCHES; s_num++)
    4c24:	01 96       	adiw	r24, 0x01	; 1
    4c26:	8f 30       	cpi	r24, 0x0F	; 15
    4c28:	91 05       	cpc	r25, r1
    4c2a:	49 f7       	brne	.-46     	; 0x4bfe <initialize_keypad+0xce>
		switch_down[s_num] = FALSE;
		switch_counter[s_num] = 0;
		switch_pressed[s_num] = FALSE;
		switch_debounce[s_num] = FALSE;
	}
}
    4c2c:	08 95       	ret

00004c2e <switch_low>:

//Check if a switch is low
uint8_t switch_low(uint8_t switch_num)
{
	switch (switch_num)
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	8f 30       	cpi	r24, 0x0F	; 15
    4c32:	91 05       	cpc	r25, r1
    4c34:	08 f0       	brcs	.+2      	; 0x4c38 <switch_low+0xa>
    4c36:	73 c0       	rjmp	.+230    	; 0x4d1e <switch_low+0xf0>
    4c38:	fc 01       	movw	r30, r24
    4c3a:	e7 56       	subi	r30, 0x67	; 103
    4c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c3e:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case S_SLD_NUM: return S_SLD_LOW;
    4c42:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4c46:	83 fb       	bst	r24, 3
    4c48:	99 27       	eor	r25, r25
    4c4a:	90 f9       	bld	r25, 0
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	89 27       	eor	r24, r25
    4c50:	08 95       	ret
	case S_HL_NUM: return S_HL_LOW;
    4c52:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4c56:	80 95       	com	r24
    4c58:	88 1f       	adc	r24, r24
    4c5a:	88 27       	eor	r24, r24
    4c5c:	88 1f       	adc	r24, r24
    4c5e:	08 95       	ret
	case S_PU_NUM: return S_PU_LOW;
    4c60:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    4c64:	83 fb       	bst	r24, 3
    4c66:	99 27       	eor	r25, r25
    4c68:	90 f9       	bld	r25, 0
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	89 27       	eor	r24, r25
    4c6e:	08 95       	ret
	case S_SLO_NUM: return S_SLO_LOW;
    4c70:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    4c74:	85 fb       	bst	r24, 5
    4c76:	99 27       	eor	r25, r25
    4c78:	90 f9       	bld	r25, 0
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	89 27       	eor	r24, r25
    4c7e:	08 95       	ret
	case S_ECO_NUM: return S_ECO_LOW;
    4c80:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4c84:	86 95       	lsr	r24
    4c86:	81 70       	andi	r24, 0x01	; 1
    4c88:	91 e0       	ldi	r25, 0x01	; 1
    4c8a:	89 27       	eor	r24, r25
    4c8c:	08 95       	ret
	case S_TR_NUM: return S_TR_LOW;
    4c8e:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4c92:	82 fb       	bst	r24, 2
    4c94:	99 27       	eor	r25, r25
    4c96:	90 f9       	bld	r25, 0
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	89 27       	eor	r24, r25
    4c9c:	08 95       	ret
	case S_EP_NUM: return S_EP_LOW;
    4c9e:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4ca2:	85 fb       	bst	r24, 5
    4ca4:	99 27       	eor	r25, r25
    4ca6:	90 f9       	bld	r25, 0
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	89 27       	eor	r24, r25
    4cac:	08 95       	ret
	case S_DU_NUM: return S_DU_LOW;
    4cae:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4cb2:	80 95       	com	r24
    4cb4:	88 1f       	adc	r24, r24
    4cb6:	88 27       	eor	r24, r24
    4cb8:	88 1f       	adc	r24, r24
    4cba:	08 95       	ret
	case S_RV_NUM: return S_RV_LOW;
    4cbc:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    4cc0:	80 95       	com	r24
    4cc2:	81 70       	andi	r24, 0x01	; 1
    4cc4:	08 95       	ret
	case S_DD_NUM: return S_DD_LOW;
    4cc6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    4cca:	85 fb       	bst	r24, 5
    4ccc:	99 27       	eor	r25, r25
    4cce:	90 f9       	bld	r25, 0
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	89 27       	eor	r24, r25
    4cd4:	08 95       	ret
	case S_VAC_NUM: return S_VAC_LOW;
    4cd6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    4cda:	80 95       	com	r24
    4cdc:	88 1f       	adc	r24, r24
    4cde:	88 27       	eor	r24, r24
    4ce0:	88 1f       	adc	r24, r24
    4ce2:	08 95       	ret
	case S_HRN_NUM: return S_HRN_LOW;
    4ce4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    4ce8:	86 95       	lsr	r24
    4cea:	81 70       	andi	r24, 0x01	; 1
    4cec:	91 e0       	ldi	r25, 0x01	; 1
    4cee:	89 27       	eor	r24, r25
    4cf0:	08 95       	ret
	case S_BR_NUM: return S_BR_LOW;
    4cf2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    4cf6:	82 fb       	bst	r24, 2
    4cf8:	99 27       	eor	r25, r25
    4cfa:	90 f9       	bld	r25, 0
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	89 27       	eor	r24, r25
    4d00:	08 95       	ret
	case S_ATO_NUM: return S_ATO_LOW;
    4d02:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    4d06:	82 95       	swap	r24
    4d08:	81 70       	andi	r24, 0x01	; 1
    4d0a:	91 e0       	ldi	r25, 0x01	; 1
    4d0c:	89 27       	eor	r24, r25
    4d0e:	08 95       	ret
	case S_PD_NUM: return S_PD_LOW;
    4d10:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    4d14:	80 95       	com	r24
    4d16:	88 1f       	adc	r24, r24
    4d18:	88 27       	eor	r24, r24
    4d1a:	88 1f       	adc	r24, r24
    4d1c:	08 95       	ret

	default: return FALSE;
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4d20:	08 95       	ret

00004d22 <clear_switch_pressed>:
//Clear all switch pressed variables
//Usually used after a long period of delay when key presses will be ignored
void clear_switch_pressed(void)
{
	//Initialize all the switch position to not being pressed
	for (int s_num = 0; s_num < NUM_SWITCHES; s_num++)
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	90 e0       	ldi	r25, 0x00	; 0
	{
		switch_down[s_num] = FALSE;
    4d26:	fc 01       	movw	r30, r24
    4d28:	e7 52       	subi	r30, 0x27	; 39
    4d2a:	fe 4d       	sbci	r31, 0xDE	; 222
    4d2c:	10 82       	st	Z, r1
		switch_counter[s_num] = 0;
    4d2e:	fc 01       	movw	r30, r24
    4d30:	ee 0f       	add	r30, r30
    4d32:	ff 1f       	adc	r31, r31
    4d34:	e5 5a       	subi	r30, 0xA5	; 165
    4d36:	fe 4d       	sbci	r31, 0xDE	; 222
    4d38:	10 82       	st	Z, r1
    4d3a:	11 82       	std	Z+1, r1	; 0x01
		switch_pressed[s_num] = FALSE;
    4d3c:	fc 01       	movw	r30, r24
    4d3e:	eb 52       	subi	r30, 0x2B	; 43
    4d40:	fd 4d       	sbci	r31, 0xDD	; 221
    4d42:	10 82       	st	Z, r1
		switch_debounce[s_num] = FALSE;
    4d44:	fc 01       	movw	r30, r24
    4d46:	e9 5f       	subi	r30, 0xF9	; 249
    4d48:	fc 4d       	sbci	r31, 0xDC	; 220
    4d4a:	10 82       	st	Z, r1
//Clear all switch pressed variables
//Usually used after a long period of delay when key presses will be ignored
void clear_switch_pressed(void)
{
	//Initialize all the switch position to not being pressed
	for (int s_num = 0; s_num < NUM_SWITCHES; s_num++)
    4d4c:	01 96       	adiw	r24, 0x01	; 1
    4d4e:	8f 30       	cpi	r24, 0x0F	; 15
    4d50:	91 05       	cpc	r25, r1
    4d52:	49 f7       	brne	.-46     	; 0x4d26 <clear_switch_pressed+0x4>
		switch_down[s_num] = FALSE;
		switch_counter[s_num] = 0;
		switch_pressed[s_num] = FALSE;
		switch_debounce[s_num] = FALSE;
	}
}
    4d54:	08 95       	ret

00004d56 <__vector_66>:

 /*Function:
 *HRN - Turn on/off horn
 */
ISR(HL_SLD_SWITCH)
{
    4d56:	1f 92       	push	r1
    4d58:	0f 92       	push	r0
    4d5a:	0f b6       	in	r0, 0x3f	; 63
    4d5c:	0f 92       	push	r0
    4d5e:	11 24       	eor	r1, r1
    4d60:	08 b6       	in	r0, 0x38	; 56
    4d62:	0f 92       	push	r0
    4d64:	18 be       	out	0x38, r1	; 56
    4d66:	8f 93       	push	r24
	if (S_HL_LOW)
    4d68:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4d6c:	88 23       	and	r24, r24
    4d6e:	64 f0       	brlt	.+24     	; 0x4d88 <__vector_66+0x32>
	{
		if (!switch_down[S_HL_NUM])
    4d70:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <switch_down+0x1>
    4d74:	81 11       	cpse	r24, r1
    4d76:	17 c0       	rjmp	.+46     	; 0x4da6 <__vector_66+0x50>
		{
			switch_down[S_HL_NUM] = TRUE;
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <switch_down+0x1>
			switch_counter[S_HL_NUM] = 0;
    4d7e:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <switch_counter+0x2>
    4d82:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <switch_counter+0x3>
    4d86:	0f c0       	rjmp	.+30     	; 0x4da6 <__vector_66+0x50>
		}
	}
	else if (S_SLD_LOW)
    4d88:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4d8c:	83 fd       	sbrc	r24, 3
    4d8e:	0b c0       	rjmp	.+22     	; 0x4da6 <__vector_66+0x50>
	{
		if (!switch_down[S_SLD_NUM])
    4d90:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <switch_down>
    4d94:	81 11       	cpse	r24, r1
    4d96:	07 c0       	rjmp	.+14     	; 0x4da6 <__vector_66+0x50>
		{
			switch_down[S_SLD_NUM] = TRUE;
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <switch_down>
			switch_counter[S_SLD_NUM] = 0;
    4d9e:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <switch_counter>
    4da2:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <switch_counter+0x1>
		}
	}
}
    4da6:	8f 91       	pop	r24
    4da8:	0f 90       	pop	r0
    4daa:	08 be       	out	0x38, r0	; 56
    4dac:	0f 90       	pop	r0
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	0f 90       	pop	r0
    4db2:	1f 90       	pop	r1
    4db4:	18 95       	reti

00004db6 <__vector_34>:
/*Function:
*SLO - Set slow/fast moving speed
*PU - Increase water pump flow
*/
ISR(PU_SLO_SWITCH)
{
    4db6:	1f 92       	push	r1
    4db8:	0f 92       	push	r0
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	0f 92       	push	r0
    4dbe:	11 24       	eor	r1, r1
    4dc0:	08 b6       	in	r0, 0x38	; 56
    4dc2:	0f 92       	push	r0
    4dc4:	18 be       	out	0x38, r1	; 56
    4dc6:	8f 93       	push	r24
	if (S_SLO_LOW)
    4dc8:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    4dcc:	85 fd       	sbrc	r24, 5
    4dce:	0b c0       	rjmp	.+22     	; 0x4de6 <__vector_34+0x30>
	{
		if (!switch_down[S_SLO_NUM])
    4dd0:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <switch_down+0x3>
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	07 c0       	rjmp	.+14     	; 0x4de6 <__vector_34+0x30>
		{
			switch_down[S_SLO_NUM] = TRUE;
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	80 93 dc 21 	sts	0x21DC, r24	; 0x8021dc <switch_down+0x3>
			switch_counter[S_SLO_NUM] = 0;
    4dde:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <switch_counter+0x6>
    4de2:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <switch_counter+0x7>
		}
	}
	if (!(reverse || transport || top_error) && S_PU_LOW)
    4de6:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    4dea:	81 11       	cpse	r24, r1
    4dec:	17 c0       	rjmp	.+46     	; 0x4e1c <__vector_34+0x66>
    4dee:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    4df2:	81 11       	cpse	r24, r1
    4df4:	13 c0       	rjmp	.+38     	; 0x4e1c <__vector_34+0x66>
    4df6:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    4dfa:	81 11       	cpse	r24, r1
    4dfc:	0f c0       	rjmp	.+30     	; 0x4e1c <__vector_34+0x66>
    4dfe:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    4e02:	83 fd       	sbrc	r24, 3
    4e04:	0b c0       	rjmp	.+22     	; 0x4e1c <__vector_34+0x66>
	{
		if (!switch_down[S_PU_NUM])
    4e06:	80 91 db 21 	lds	r24, 0x21DB	; 0x8021db <switch_down+0x2>
    4e0a:	81 11       	cpse	r24, r1
    4e0c:	07 c0       	rjmp	.+14     	; 0x4e1c <__vector_34+0x66>
		{
			switch_down[S_PU_NUM] = TRUE;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <switch_down+0x2>
			switch_counter[S_PU_NUM] = 0;
    4e14:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <switch_counter+0x4>
    4e18:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <switch_counter+0x5>
		}
	}
}
    4e1c:	8f 91       	pop	r24
    4e1e:	0f 90       	pop	r0
    4e20:	08 be       	out	0x38, r0	; 56
    4e22:	0f 90       	pop	r0
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	0f 90       	pop	r0
    4e28:	1f 90       	pop	r1
    4e2a:	18 95       	reti

00004e2c <__vector_96>:
 *TR  - Transport Mode switch
 *		Transport mode turns off all cleaning functions to allow movement without cleaning
 *DU - Increase detergent dosage
 */
ISR(ECO_TR_DU_SWITCH)
{
    4e2c:	1f 92       	push	r1
    4e2e:	0f 92       	push	r0
    4e30:	0f b6       	in	r0, 0x3f	; 63
    4e32:	0f 92       	push	r0
    4e34:	11 24       	eor	r1, r1
    4e36:	08 b6       	in	r0, 0x38	; 56
    4e38:	0f 92       	push	r0
    4e3a:	18 be       	out	0x38, r1	; 56
    4e3c:	8f 93       	push	r24
	if (!switch_down[S_ECO_NUM] && !top_error)
    4e3e:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <switch_down+0x4>
    4e42:	81 11       	cpse	r24, r1
    4e44:	0b c0       	rjmp	.+22     	; 0x4e5c <__vector_96+0x30>
    4e46:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    4e4a:	81 11       	cpse	r24, r1
    4e4c:	07 c0       	rjmp	.+14     	; 0x4e5c <__vector_96+0x30>
	{
		switch_down[S_ECO_NUM] = TRUE;
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <switch_down+0x4>
		switch_counter[S_ECO_NUM] = 0;
    4e54:	10 92 63 21 	sts	0x2163, r1	; 0x802163 <switch_counter+0x8>
    4e58:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <switch_counter+0x9>
	}
	if (!switch_down[S_TR_NUM] && S_TR_LOW && !top_error)
    4e5c:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <switch_down+0x5>
    4e60:	81 11       	cpse	r24, r1
    4e62:	0f c0       	rjmp	.+30     	; 0x4e82 <__vector_96+0x56>
    4e64:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4e68:	82 fd       	sbrc	r24, 2
    4e6a:	0b c0       	rjmp	.+22     	; 0x4e82 <__vector_96+0x56>
    4e6c:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    4e70:	81 11       	cpse	r24, r1
    4e72:	07 c0       	rjmp	.+14     	; 0x4e82 <__vector_96+0x56>
	{
		switch_down[S_TR_NUM] = TRUE;
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <switch_down+0x5>
		switch_counter[S_TR_NUM] = 0;
    4e7a:	10 92 65 21 	sts	0x2165, r1	; 0x802165 <switch_counter+0xa>
    4e7e:	10 92 66 21 	sts	0x2166, r1	; 0x802166 <switch_counter+0xb>
	}
	if ((test_mode || !(reverse || transport || top_error)) && S_DU_LOW)
    4e82:	80 91 d3 22 	lds	r24, 0x22D3	; 0x8022d3 <test_mode>
    4e86:	81 11       	cpse	r24, r1
    4e88:	0c c0       	rjmp	.+24     	; 0x4ea2 <__vector_96+0x76>
    4e8a:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    4e8e:	81 11       	cpse	r24, r1
    4e90:	17 c0       	rjmp	.+46     	; 0x4ec0 <__vector_96+0x94>
    4e92:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    4e96:	81 11       	cpse	r24, r1
    4e98:	13 c0       	rjmp	.+38     	; 0x4ec0 <__vector_96+0x94>
    4e9a:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    4e9e:	81 11       	cpse	r24, r1
    4ea0:	0f c0       	rjmp	.+30     	; 0x4ec0 <__vector_96+0x94>
    4ea2:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4ea6:	88 23       	and	r24, r24
    4ea8:	5c f0       	brlt	.+22     	; 0x4ec0 <__vector_96+0x94>
	{
		if (!switch_down[S_DU_NUM])
    4eaa:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <switch_down+0x7>
    4eae:	81 11       	cpse	r24, r1
    4eb0:	07 c0       	rjmp	.+14     	; 0x4ec0 <__vector_96+0x94>
		{
			switch_down[S_DU_NUM] = TRUE;
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <switch_down+0x7>
			switch_counter[S_DU_NUM] = 0;
    4eb8:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <switch_counter+0xe>
    4ebc:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <switch_counter+0xf>
		}
	}
}
    4ec0:	8f 91       	pop	r24
    4ec2:	0f 90       	pop	r0
    4ec4:	08 be       	out	0x38, r0	; 56
    4ec6:	0f 90       	pop	r0
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	0f 90       	pop	r0
    4ecc:	1f 90       	pop	r1
    4ece:	18 95       	reti

00004ed0 <__vector_97>:
/*
 *Function:
 *EP -  Extra brush pressure
 */
ISR(EP_SWITCH)
{
    4ed0:	1f 92       	push	r1
    4ed2:	0f 92       	push	r0
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	0f 92       	push	r0
    4ed8:	11 24       	eor	r1, r1
    4eda:	08 b6       	in	r0, 0x38	; 56
    4edc:	0f 92       	push	r0
    4ede:	18 be       	out	0x38, r1	; 56
    4ee0:	8f 93       	push	r24
	if ((reverse || transport || !brush || (brush_state == OFF) || top_error) && user_settings_menu_enable == FALSE)
    4ee2:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    4ee6:	81 11       	cpse	r24, r1
    4ee8:	10 c0       	rjmp	.+32     	; 0x4f0a <__vector_97+0x3a>
    4eea:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    4eee:	81 11       	cpse	r24, r1
    4ef0:	0c c0       	rjmp	.+24     	; 0x4f0a <__vector_97+0x3a>
    4ef2:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    4ef6:	88 23       	and	r24, r24
    4ef8:	41 f0       	breq	.+16     	; 0x4f0a <__vector_97+0x3a>
    4efa:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    4efe:	88 23       	and	r24, r24
    4f00:	21 f0       	breq	.+8      	; 0x4f0a <__vector_97+0x3a>
    4f02:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    4f06:	88 23       	and	r24, r24
    4f08:	21 f0       	breq	.+8      	; 0x4f12 <__vector_97+0x42>
    4f0a:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <user_settings_menu_enable>
    4f0e:	88 23       	and	r24, r24
    4f10:	c9 f1       	breq	.+114    	; 0x4f84 <__vector_97+0xb4>
	{
		return;
	}
	if (!user_settings_menu_enable)// while not in user or settings menu
    4f12:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <user_settings_menu_enable>
    4f16:	81 11       	cpse	r24, r1
    4f18:	26 c0       	rjmp	.+76     	; 0x4f66 <__vector_97+0x96>
	{
		if (S_EP_LOW && !(ep_down || ep_up))
    4f1a:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4f1e:	85 fd       	sbrc	r24, 5
    4f20:	14 c0       	rjmp	.+40     	; 0x4f4a <__vector_97+0x7a>
    4f22:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <ep_down>
    4f26:	81 11       	cpse	r24, r1
    4f28:	10 c0       	rjmp	.+32     	; 0x4f4a <__vector_97+0x7a>
    4f2a:	80 91 f8 22 	lds	r24, 0x22F8	; 0x8022f8 <ep_up>
    4f2e:	81 11       	cpse	r24, r1
    4f30:	0c c0       	rjmp	.+24     	; 0x4f4a <__vector_97+0x7a>
		{
			switch_pressed[S_EP_NUM] = TRUE;
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <switch_pressed+0x6>
			switch_counter[S_EP_NUM] = 0;
    4f38:	10 92 67 21 	sts	0x2167, r1	; 0x802167 <switch_counter+0xc>
    4f3c:	10 92 68 21 	sts	0x2168, r1	; 0x802168 <switch_counter+0xd>
			ep_down = TRUE;
    4f40:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <ep_down>
			ep_down_counter = 0;
    4f44:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <ep_down_counter>
    4f48:	1d c0       	rjmp	.+58     	; 0x4f84 <__vector_97+0xb4>
		}
		else if (ep_down && ep_down_counter >= _30_MS)
    4f4a:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <ep_down>
    4f4e:	88 23       	and	r24, r24
    4f50:	c9 f0       	breq	.+50     	; 0x4f84 <__vector_97+0xb4>
    4f52:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <ep_down_counter>
    4f56:	83 30       	cpi	r24, 0x03	; 3
    4f58:	a8 f0       	brcs	.+42     	; 0x4f84 <__vector_97+0xb4>
		{
			ep_up = TRUE;
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	80 93 f8 22 	sts	0x22F8, r24	; 0x8022f8 <ep_up>
			ep_down = FALSE;
    4f60:	10 92 47 23 	sts	0x2347, r1	; 0x802347 <ep_down>
    4f64:	0f c0       	rjmp	.+30     	; 0x4f84 <__vector_97+0xb4>
		}
	}
	else   // while in user settings
	{
		if (S_EP_LOW)
    4f66:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    4f6a:	85 fd       	sbrc	r24, 5
    4f6c:	0b c0       	rjmp	.+22     	; 0x4f84 <__vector_97+0xb4>
		{
			if (!switch_down[S_EP_NUM])
    4f6e:	80 91 df 21 	lds	r24, 0x21DF	; 0x8021df <switch_down+0x6>
    4f72:	81 11       	cpse	r24, r1
    4f74:	07 c0       	rjmp	.+14     	; 0x4f84 <__vector_97+0xb4>
			{
				switch_down[S_EP_NUM] = TRUE;
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	80 93 df 21 	sts	0x21DF, r24	; 0x8021df <switch_down+0x6>
				switch_counter[S_EP_NUM] = 0;
    4f7c:	10 92 67 21 	sts	0x2167, r1	; 0x802167 <switch_counter+0xc>
    4f80:	10 92 68 21 	sts	0x2168, r1	; 0x802168 <switch_counter+0xd>
			}
		}
	}
}
    4f84:	8f 91       	pop	r24
    4f86:	0f 90       	pop	r0
    4f88:	08 be       	out	0x38, r0	; 56
    4f8a:	0f 90       	pop	r0
    4f8c:	0f be       	out	0x3f, r0	; 63
    4f8e:	0f 90       	pop	r0
    4f90:	1f 90       	pop	r1
    4f92:	18 95       	reti

00004f94 <__vector_98>:
 *RV - Set forward/reverse
 *DD - Decrease detergent dosage
 *
 */
ISR(RV_DD_SWITCH)
{
    4f94:	1f 92       	push	r1
    4f96:	0f 92       	push	r0
    4f98:	0f b6       	in	r0, 0x3f	; 63
    4f9a:	0f 92       	push	r0
    4f9c:	11 24       	eor	r1, r1
    4f9e:	08 b6       	in	r0, 0x38	; 56
    4fa0:	0f 92       	push	r0
    4fa2:	18 be       	out	0x38, r1	; 56
    4fa4:	8f 93       	push	r24
	if (S_RV_LOW)
    4fa6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    4faa:	80 fd       	sbrc	r24, 0
    4fac:	0b c0       	rjmp	.+22     	; 0x4fc4 <__vector_98+0x30>
	{
		if (!switch_down[S_RV_NUM])
    4fae:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <switch_down+0x8>
    4fb2:	81 11       	cpse	r24, r1
    4fb4:	07 c0       	rjmp	.+14     	; 0x4fc4 <__vector_98+0x30>
		{
			switch_down[S_RV_NUM] = TRUE;
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	80 93 e1 21 	sts	0x21E1, r24	; 0x8021e1 <switch_down+0x8>
			switch_counter[S_RV_NUM] = 0;
    4fbc:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <switch_counter+0x10>
    4fc0:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <switch_counter+0x11>
		}
	}
	if ((test_mode || !(reverse || transport || top_error)) && S_DD_LOW)
    4fc4:	80 91 d3 22 	lds	r24, 0x22D3	; 0x8022d3 <test_mode>
    4fc8:	81 11       	cpse	r24, r1
    4fca:	0c c0       	rjmp	.+24     	; 0x4fe4 <__vector_98+0x50>
    4fcc:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    4fd0:	81 11       	cpse	r24, r1
    4fd2:	17 c0       	rjmp	.+46     	; 0x5002 <__vector_98+0x6e>
    4fd4:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    4fd8:	81 11       	cpse	r24, r1
    4fda:	13 c0       	rjmp	.+38     	; 0x5002 <__vector_98+0x6e>
    4fdc:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    4fe0:	81 11       	cpse	r24, r1
    4fe2:	0f c0       	rjmp	.+30     	; 0x5002 <__vector_98+0x6e>
    4fe4:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    4fe8:	85 fd       	sbrc	r24, 5
    4fea:	0b c0       	rjmp	.+22     	; 0x5002 <__vector_98+0x6e>
	{
		if (!switch_down[S_DD_NUM])
    4fec:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <switch_down+0x9>
    4ff0:	81 11       	cpse	r24, r1
    4ff2:	07 c0       	rjmp	.+14     	; 0x5002 <__vector_98+0x6e>
		{
			switch_down[S_DD_NUM] = TRUE;
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <switch_down+0x9>
			switch_counter[S_DD_NUM] = 0;
    4ffa:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <switch_counter+0x12>
    4ffe:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <switch_counter+0x13>
		}
	}
}
    5002:	8f 91       	pop	r24
    5004:	0f 90       	pop	r0
    5006:	08 be       	out	0x38, r0	; 56
    5008:	0f 90       	pop	r0
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	0f 90       	pop	r0
    500e:	1f 90       	pop	r1
    5010:	18 95       	reti

00005012 <__vector_99>:
 *Function:
 *VAC - Turn on/off vacuum
 *
 */
ISR(VAC_SWITCH)
{
    5012:	1f 92       	push	r1
    5014:	0f 92       	push	r0
    5016:	0f b6       	in	r0, 0x3f	; 63
    5018:	0f 92       	push	r0
    501a:	11 24       	eor	r1, r1
    501c:	08 b6       	in	r0, 0x38	; 56
    501e:	0f 92       	push	r0
    5020:	18 be       	out	0x38, r1	; 56
    5022:	8f 93       	push	r24
	if (S_VAC_LOW)
    5024:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    5028:	88 23       	and	r24, r24
    502a:	7c f0       	brlt	.+30     	; 0x504a <__vector_99+0x38>
	{
		if (!switch_down[S_VAC_NUM] && !top_error)
    502c:	80 91 e3 21 	lds	r24, 0x21E3	; 0x8021e3 <switch_down+0xa>
    5030:	81 11       	cpse	r24, r1
    5032:	0b c0       	rjmp	.+22     	; 0x504a <__vector_99+0x38>
    5034:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    5038:	81 11       	cpse	r24, r1
    503a:	07 c0       	rjmp	.+14     	; 0x504a <__vector_99+0x38>
		{
			switch_down[S_VAC_NUM] = TRUE;
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <switch_down+0xa>
			switch_counter[S_VAC_NUM] = 0;
    5042:	10 92 6f 21 	sts	0x216F, r1	; 0x80216f <switch_counter+0x14>
    5046:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <switch_counter+0x15>
		}
	}
}
    504a:	8f 91       	pop	r24
    504c:	0f 90       	pop	r0
    504e:	08 be       	out	0x38, r0	; 56
    5050:	0f 90       	pop	r0
    5052:	0f be       	out	0x3f, r0	; 63
    5054:	0f 90       	pop	r0
    5056:	1f 90       	pop	r1
    5058:	18 95       	reti

0000505a <__vector_100>:
 *Function:
 *HRN - Turns on horn while pressed down
 *
 */
ISR(HRN_SWITCH)
{
    505a:	1f 92       	push	r1
    505c:	0f 92       	push	r0
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	0f 92       	push	r0
    5062:	11 24       	eor	r1, r1
    5064:	08 b6       	in	r0, 0x38	; 56
    5066:	0f 92       	push	r0
    5068:	18 be       	out	0x38, r1	; 56
    506a:	8f 93       	push	r24
	if (S_HRN_LOW && !(hrn_down || hrn_up))
    506c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    5070:	81 fd       	sbrc	r24, 1
    5072:	14 c0       	rjmp	.+40     	; 0x509c <__vector_100+0x42>
    5074:	80 91 97 22 	lds	r24, 0x2297	; 0x802297 <hrn_down>
    5078:	81 11       	cpse	r24, r1
    507a:	10 c0       	rjmp	.+32     	; 0x509c <__vector_100+0x42>
    507c:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <hrn_up>
    5080:	81 11       	cpse	r24, r1
    5082:	0c c0       	rjmp	.+24     	; 0x509c <__vector_100+0x42>
	{
		switch_pressed[S_HRN_NUM] = TRUE;
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <switch_pressed+0xb>
		switch_counter[S_HRN_NUM] = 0;
    508a:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <switch_counter+0x16>
    508e:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <switch_counter+0x17>
		hrn_down = TRUE;
    5092:	80 93 97 22 	sts	0x2297, r24	; 0x802297 <hrn_down>
		hrn_down_counter = 0;
    5096:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <hrn_down_counter>
    509a:	0d c0       	rjmp	.+26     	; 0x50b6 <__vector_100+0x5c>
	}
	else if (hrn_down && hrn_down_counter >= _30_MS)
    509c:	80 91 97 22 	lds	r24, 0x2297	; 0x802297 <hrn_down>
    50a0:	88 23       	and	r24, r24
    50a2:	49 f0       	breq	.+18     	; 0x50b6 <__vector_100+0x5c>
    50a4:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <hrn_down_counter>
    50a8:	83 30       	cpi	r24, 0x03	; 3
    50aa:	28 f0       	brcs	.+10     	; 0x50b6 <__vector_100+0x5c>
	{
		hrn_up = TRUE;
    50ac:	81 e0       	ldi	r24, 0x01	; 1
    50ae:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <hrn_up>
		hrn_down = FALSE;
    50b2:	10 92 97 22 	sts	0x2297, r1	; 0x802297 <hrn_down>
	}
}
    50b6:	8f 91       	pop	r24
    50b8:	0f 90       	pop	r0
    50ba:	08 be       	out	0x38, r0	; 56
    50bc:	0f 90       	pop	r0
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	0f 90       	pop	r0
    50c2:	1f 90       	pop	r1
    50c4:	18 95       	reti

000050c6 <__vector_101>:
 *ATO - Sets automatic/manual mode
 *PD - Decrease water pump flow
 *BR - Turn on brush
 */
ISR(ATO_PD_BR_SWITCH)
{
    50c6:	1f 92       	push	r1
    50c8:	0f 92       	push	r0
    50ca:	0f b6       	in	r0, 0x3f	; 63
    50cc:	0f 92       	push	r0
    50ce:	11 24       	eor	r1, r1
    50d0:	08 b6       	in	r0, 0x38	; 56
    50d2:	0f 92       	push	r0
    50d4:	18 be       	out	0x38, r1	; 56
    50d6:	8f 93       	push	r24
	if (!(reverse || transport || top_error) && S_ATO_LOW)
    50d8:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    50dc:	81 11       	cpse	r24, r1
    50de:	44 c0       	rjmp	.+136    	; 0x5168 <__vector_101+0xa2>
    50e0:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    50e4:	81 11       	cpse	r24, r1
    50e6:	3c c0       	rjmp	.+120    	; 0x5160 <__vector_101+0x9a>
    50e8:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    50ec:	81 11       	cpse	r24, r1
    50ee:	33 c0       	rjmp	.+102    	; 0x5156 <__vector_101+0x90>
    50f0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    50f4:	84 fd       	sbrc	r24, 4
    50f6:	2f c0       	rjmp	.+94     	; 0x5156 <__vector_101+0x90>
	{
		if (!switch_down[S_ATO_NUM])
    50f8:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <switch_down+0xd>
    50fc:	81 11       	cpse	r24, r1
    50fe:	2b c0       	rjmp	.+86     	; 0x5156 <__vector_101+0x90>
		{
			switch_down[S_ATO_NUM] = TRUE;
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <switch_down+0xd>
			switch_counter[S_ATO_NUM] = 0;
    5106:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <switch_counter+0x1a>
    510a:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <switch_counter+0x1b>
    510e:	23 c0       	rjmp	.+70     	; 0x5156 <__vector_101+0x90>
		}
	}
	if (!(reverse || transport || top_error) && S_PD_LOW)
    5110:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    5114:	88 23       	and	r24, r24
    5116:	5c f0       	brlt	.+22     	; 0x512e <__vector_101+0x68>
	{
		if (!switch_down[S_PD_NUM])
    5118:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <switch_down+0xe>
    511c:	81 11       	cpse	r24, r1
    511e:	07 c0       	rjmp	.+14     	; 0x512e <__vector_101+0x68>
		{
			switch_down[S_PD_NUM] = TRUE;
    5120:	81 e0       	ldi	r24, 0x01	; 1
    5122:	80 93 e7 21 	sts	0x21E7, r24	; 0x8021e7 <switch_down+0xe>
			switch_counter[S_PD_NUM] = 0;
    5126:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <switch_counter+0x1c>
    512a:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <switch_counter+0x1d>
		}
	}
	if (!(reverse || transport || top_error) && S_BR_LOW)
    512e:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    5132:	81 11       	cpse	r24, r1
    5134:	19 c0       	rjmp	.+50     	; 0x5168 <__vector_101+0xa2>
    5136:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    513a:	82 fd       	sbrc	r24, 2
    513c:	15 c0       	rjmp	.+42     	; 0x5168 <__vector_101+0xa2>
	{
		if (!switch_down[S_BR_NUM])
    513e:	80 91 e5 21 	lds	r24, 0x21E5	; 0x8021e5 <switch_down+0xc>
    5142:	81 11       	cpse	r24, r1
    5144:	11 c0       	rjmp	.+34     	; 0x5168 <__vector_101+0xa2>
		{
			switch_down[S_BR_NUM] = TRUE;
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	80 93 e5 21 	sts	0x21E5, r24	; 0x8021e5 <switch_down+0xc>
			switch_counter[S_BR_NUM] = 0;
    514c:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <switch_counter+0x18>
    5150:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <switch_counter+0x19>
		}
	}
}
    5154:	09 c0       	rjmp	.+18     	; 0x5168 <__vector_101+0xa2>
		{
			switch_down[S_ATO_NUM] = TRUE;
			switch_counter[S_ATO_NUM] = 0;
		}
	}
	if (!(reverse || transport || top_error) && S_PD_LOW)
    5156:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    515a:	88 23       	and	r24, r24
    515c:	c9 f2       	breq	.-78     	; 0x5110 <__vector_101+0x4a>
    515e:	e7 cf       	rjmp	.-50     	; 0x512e <__vector_101+0x68>
		{
			switch_down[S_PD_NUM] = TRUE;
			switch_counter[S_PD_NUM] = 0;
		}
	}
	if (!(reverse || transport || top_error) && S_BR_LOW)
    5160:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    5164:	88 23       	and	r24, r24
    5166:	19 f3       	breq	.-58     	; 0x512e <__vector_101+0x68>
		{
			switch_down[S_BR_NUM] = TRUE;
			switch_counter[S_BR_NUM] = 0;
		}
	}
}
    5168:	8f 91       	pop	r24
    516a:	0f 90       	pop	r0
    516c:	08 be       	out	0x38, r0	; 56
    516e:	0f 90       	pop	r0
    5170:	0f be       	out	0x3f, r0	; 63
    5172:	0f 90       	pop	r0
    5174:	1f 90       	pop	r1
    5176:	18 95       	reti

00005178 <initialize_keypad_settings>:
	else
	{
		beacon_lamp = ON;
#if LCD_INFO
		lcd_set_cursor(0, 0);
		lcd_write_P(PSTR("BEACON LAMP ON"));
    5178:	0f 93       	push	r16
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62
    5184:	26 97       	sbiw	r28, 0x06	; 6
    5186:	cd bf       	out	0x3d, r28	; 61
    5188:	de bf       	out	0x3e, r29	; 62
    518a:	e3 ed       	ldi	r30, 0xD3	; 211
    518c:	f1 e2       	ldi	r31, 0x21	; 33
    518e:	8f e0       	ldi	r24, 0x0F	; 15
    5190:	80 83       	st	Z, r24
    5192:	8c e1       	ldi	r24, 0x1C	; 28
    5194:	81 83       	std	Z+1, r24	; 0x01
    5196:	8d e2       	ldi	r24, 0x2D	; 45
    5198:	82 83       	std	Z+2, r24	; 0x02
    519a:	82 e4       	ldi	r24, 0x42	; 66
    519c:	83 83       	std	Z+3, r24	; 0x03
    519e:	8c e5       	ldi	r24, 0x5C	; 92
    51a0:	84 83       	std	Z+4, r24	; 0x04
    51a2:	ef eb       	ldi	r30, 0xBF	; 191
    51a4:	f2 e2       	ldi	r31, 0x22	; 34
    51a6:	88 e2       	ldi	r24, 0x28	; 40
    51a8:	80 83       	st	Z, r24
    51aa:	87 e3       	ldi	r24, 0x37	; 55
    51ac:	81 83       	std	Z+1, r24	; 0x01
    51ae:	86 e4       	ldi	r24, 0x46	; 70
    51b0:	82 83       	std	Z+2, r24	; 0x02
    51b2:	85 e5       	ldi	r24, 0x55	; 85
    51b4:	83 83       	std	Z+3, r24	; 0x03
    51b6:	84 e6       	ldi	r24, 0x64	; 100
    51b8:	84 83       	std	Z+4, r24	; 0x04
    51ba:	10 92 06 23 	sts	0x2306, r1	; 0x802306 <water_pump_sl>
    51be:	25 e2       	ldi	r18, 0x25	; 37
    51c0:	37 e0       	ldi	r19, 0x07	; 7
    51c2:	80 e4       	ldi	r24, 0x40	; 64
    51c4:	d9 01       	movw	r26, r18
    51c6:	8c 93       	st	X, r24
    51c8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    51cc:	e5 e2       	ldi	r30, 0x25	; 37
    51ce:	f6 e0       	ldi	r31, 0x06	; 6
    51d0:	90 e1       	ldi	r25, 0x10	; 16
    51d2:	90 83       	st	Z, r25
    51d4:	54 e0       	ldi	r21, 0x04	; 4
    51d6:	50 83       	st	Z, r21
    51d8:	42 e0       	ldi	r20, 0x02	; 2
    51da:	40 83       	st	Z, r20
    51dc:	10 92 05 23 	sts	0x2305, r1	; 0x802305 <detergent_pump_sl>
    51e0:	05 e0       	ldi	r16, 0x05	; 5
    51e2:	17 e0       	ldi	r17, 0x07	; 7
    51e4:	d8 01       	movw	r26, r16
    51e6:	9c 93       	st	X, r25
    51e8:	98 e0       	ldi	r25, 0x08	; 8
    51ea:	9c 93       	st	X, r25
    51ec:	5c 93       	st	X, r21
    51ee:	4c 93       	st	X, r20
    51f0:	65 ee       	ldi	r22, 0xE5	; 229
    51f2:	76 e0       	ldi	r23, 0x06	; 6
    51f4:	db 01       	movw	r26, r22
    51f6:	8c 93       	st	X, r24
    51f8:	41 e0       	ldi	r20, 0x01	; 1
    51fa:	40 93 a9 22 	sts	0x22A9, r20	; 0x8022a9 <fr_speed>
    51fe:	80 83       	st	Z, r24
    5200:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <water_pump>
    5204:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <solenoid_valve>
    5208:	50 e8       	ldi	r21, 0x80	; 128
    520a:	50 83       	st	Z, r21
    520c:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <detergent_pump>
    5210:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <vacuum>
    5214:	d8 01       	movw	r26, r16
    5216:	8c 93       	st	X, r24
    5218:	10 92 c5 22 	sts	0x22C5, r1	; 0x8022c5 <horn>
    521c:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <headlights>
    5220:	40 83       	st	Z, r20
    5222:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <beacon_lamp>
    5226:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <extra_pressure>
    522a:	fb 01       	movw	r30, r22
    522c:	90 83       	st	Z, r25
    522e:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <reverse>
    5232:	d9 01       	movw	r26, r18
    5234:	4c 93       	st	X, r20
    5236:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <brush>
    523a:	9c 93       	st	X, r25
    523c:	8b eb       	ldi	r24, 0xBB	; 187
    523e:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <brush_state>
    5242:	8c ec       	ldi	r24, 0xCC	; 204
    5244:	80 93 a4 22 	sts	0x22A4, r24	; 0x8022a4 <vacuum_state>
    5248:	10 92 5d 23 	sts	0x235D, r1	; 0x80235d <user_settings_menu_enable>
    524c:	ef ec       	ldi	r30, 0xCF	; 207
    524e:	f1 e0       	ldi	r31, 0x01	; 1
    5250:	80 81       	ld	r24, Z
    5252:	88 23       	and	r24, r24
    5254:	ec f3       	brlt	.-6      	; 0x5250 <initialize_keypad_settings+0xd8>
    5256:	80 e6       	ldi	r24, 0x60	; 96
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    525e:	8a 3a       	cpi	r24, 0xAA	; 170
    5260:	b1 f0       	breq	.+44     	; 0x528e <initialize_keypad_settings+0x116>
    5262:	86 e0       	ldi	r24, 0x06	; 6
    5264:	e0 e0       	ldi	r30, 0x00	; 0
    5266:	f0 e2       	ldi	r31, 0x20	; 32
    5268:	de 01       	movw	r26, r28
    526a:	11 96       	adiw	r26, 0x01	; 1
    526c:	01 90       	ld	r0, Z+
    526e:	0d 92       	st	X+, r0
    5270:	8a 95       	dec	r24
    5272:	e1 f7       	brne	.-8      	; 0x526c <initialize_keypad_settings+0xf4>
    5274:	46 e0       	ldi	r20, 0x06	; 6
    5276:	50 e0       	ldi	r21, 0x00	; 0
    5278:	61 e6       	ldi	r22, 0x61	; 97
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	ce 01       	movw	r24, r28
    527e:	01 96       	adiw	r24, 0x01	; 1
    5280:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
    5284:	6a ea       	ldi	r22, 0xAA	; 170
    5286:	80 e6       	ldi	r24, 0x60	; 96
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
    528e:	ef ec       	ldi	r30, 0xCF	; 207
    5290:	f1 e0       	ldi	r31, 0x01	; 1
    5292:	80 81       	ld	r24, Z
    5294:	88 23       	and	r24, r24
    5296:	ec f3       	brlt	.-6      	; 0x5292 <initialize_keypad_settings+0x11a>
    5298:	46 e0       	ldi	r20, 0x06	; 6
    529a:	50 e0       	ldi	r21, 0x00	; 0
    529c:	61 e6       	ldi	r22, 0x61	; 97
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	8d ec       	ldi	r24, 0xCD	; 205
    52a2:	92 e2       	ldi	r25, 0x22	; 34
    52a4:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
    52a8:	ef ec       	ldi	r30, 0xCF	; 207
    52aa:	f1 e0       	ldi	r31, 0x01	; 1
    52ac:	80 81       	ld	r24, Z
    52ae:	88 23       	and	r24, r24
    52b0:	ec f3       	brlt	.-6      	; 0x52ac <initialize_keypad_settings+0x134>
    52b2:	83 e2       	ldi	r24, 0x23	; 35
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    52ba:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <motors_status>
    52be:	26 96       	adiw	r28, 0x06	; 6
    52c0:	cd bf       	out	0x3d, r28	; 61
    52c2:	de bf       	out	0x3e, r29	; 62
    52c4:	df 91       	pop	r29
    52c6:	cf 91       	pop	r28
    52c8:	1f 91       	pop	r17
    52ca:	0f 91       	pop	r16
    52cc:	08 95       	ret

000052ce <is_reverse_transport>:
    52ce:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    52d2:	88 23       	and	r24, r24
    52d4:	91 f0       	breq	.+36     	; 0x52fa <is_reverse_transport+0x2c>
    52d6:	60 e0       	ldi	r22, 0x00	; 0
    52d8:	80 e0       	ldi	r24, 0x00	; 0
    52da:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    52de:	81 e1       	ldi	r24, 0x11	; 17
    52e0:	96 e1       	ldi	r25, 0x16	; 22
    52e2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    52e6:	60 e0       	ldi	r22, 0x00	; 0
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    52ee:	84 e0       	ldi	r24, 0x04	; 4
    52f0:	96 e1       	ldi	r25, 0x16	; 22
    52f2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    52f6:	81 e0       	ldi	r24, 0x01	; 1
    52f8:	08 95       	ret
    52fa:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    52fe:	88 23       	and	r24, r24
    5300:	89 f0       	breq	.+34     	; 0x5324 <is_reverse_transport+0x56>
    5302:	60 e0       	ldi	r22, 0x00	; 0
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    530a:	85 ef       	ldi	r24, 0xF5	; 245
    530c:	95 e1       	ldi	r25, 0x15	; 21
    530e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5312:	60 e0       	ldi	r22, 0x00	; 0
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    531a:	88 ee       	ldi	r24, 0xE8	; 232
    531c:	95 e1       	ldi	r25, 0x15	; 21
    531e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5322:	81 e0       	ldi	r24, 0x01	; 1
    5324:	08 95       	ret

00005326 <change_auto_state>:
    5326:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    532a:	81 11       	cpse	r24, r1
    532c:	e0 c0       	rjmp	.+448    	; 0x54ee <change_auto_state+0x1c8>
    532e:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    5332:	8a 3a       	cpi	r24, 0xAA	; 170
    5334:	09 f4       	brne	.+2      	; 0x5338 <change_auto_state+0x12>
    5336:	db c0       	rjmp	.+438    	; 0x54ee <change_auto_state+0x1c8>
    5338:	60 e0       	ldi	r22, 0x00	; 0
    533a:	80 e0       	ldi	r24, 0x00	; 0
    533c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5340:	8e e1       	ldi	r24, 0x1E	; 30
    5342:	96 e1       	ldi	r25, 0x16	; 22
    5344:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5348:	80 e2       	ldi	r24, 0x20	; 32
    534a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    534e:	ed ec       	ldi	r30, 0xCD	; 205
    5350:	f2 e2       	ldi	r31, 0x22	; 34
    5352:	82 81       	ldd	r24, Z+2	; 0x02
    5354:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <water_pump>
    5358:	83 81       	ldd	r24, Z+3	; 0x03
    535a:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <detergent_pump>
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5364:	80 81       	ld	r24, Z
    5366:	80 93 06 23 	sts	0x2306, r24	; 0x802306 <water_pump_sl>
    536a:	80 e4       	ldi	r24, 0x40	; 64
    536c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5370:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    5374:	e5 e2       	ldi	r30, 0x25	; 37
    5376:	f6 e0       	ldi	r31, 0x06	; 6
    5378:	80 e1       	ldi	r24, 0x10	; 16
    537a:	80 83       	st	Z, r24
    537c:	84 e0       	ldi	r24, 0x04	; 4
    537e:	80 83       	st	Z, r24
    5380:	82 e0       	ldi	r24, 0x02	; 2
    5382:	80 83       	st	Z, r24
    5384:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    5388:	81 30       	cpi	r24, 0x01	; 1
    538a:	e9 f4       	brne	.+58     	; 0x53c6 <change_auto_state+0xa0>
    538c:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <water_pump_sl>
    5390:	82 30       	cpi	r24, 0x02	; 2
    5392:	81 f0       	breq	.+32     	; 0x53b4 <change_auto_state+0x8e>
    5394:	28 f4       	brcc	.+10     	; 0x53a0 <change_auto_state+0x7a>
    5396:	88 23       	and	r24, r24
    5398:	99 f0       	breq	.+38     	; 0x53c0 <change_auto_state+0x9a>
    539a:	81 30       	cpi	r24, 0x01	; 1
    539c:	71 f0       	breq	.+28     	; 0x53ba <change_auto_state+0x94>
    539e:	13 c0       	rjmp	.+38     	; 0x53c6 <change_auto_state+0xa0>
    53a0:	83 30       	cpi	r24, 0x03	; 3
    53a2:	29 f0       	breq	.+10     	; 0x53ae <change_auto_state+0x88>
    53a4:	84 30       	cpi	r24, 0x04	; 4
    53a6:	79 f4       	brne	.+30     	; 0x53c6 <change_auto_state+0xa0>
    53a8:	82 e0       	ldi	r24, 0x02	; 2
    53aa:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    53ae:	84 e0       	ldi	r24, 0x04	; 4
    53b0:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    53b4:	80 e1       	ldi	r24, 0x10	; 16
    53b6:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    53ba:	80 e4       	ldi	r24, 0x40	; 64
    53bc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    53c0:	80 e4       	ldi	r24, 0x40	; 64
    53c2:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    53c6:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    53ca:	f0 e0       	ldi	r31, 0x00	; 0
    53cc:	e1 54       	subi	r30, 0x41	; 65
    53ce:	fd 4d       	sbci	r31, 0xDD	; 221
    53d0:	80 81       	ld	r24, Z
    53d2:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    53d6:	80 91 ce 22 	lds	r24, 0x22CE	; 0x8022ce <auto_settings+0x1>
    53da:	80 93 05 23 	sts	0x2305, r24	; 0x802305 <detergent_pump_sl>
    53de:	e5 e0       	ldi	r30, 0x05	; 5
    53e0:	f7 e0       	ldi	r31, 0x07	; 7
    53e2:	80 e1       	ldi	r24, 0x10	; 16
    53e4:	80 83       	st	Z, r24
    53e6:	88 e0       	ldi	r24, 0x08	; 8
    53e8:	80 83       	st	Z, r24
    53ea:	84 e0       	ldi	r24, 0x04	; 4
    53ec:	80 83       	st	Z, r24
    53ee:	82 e0       	ldi	r24, 0x02	; 2
    53f0:	80 83       	st	Z, r24
    53f2:	80 e4       	ldi	r24, 0x40	; 64
    53f4:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    53f8:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <detergent_pump>
    53fc:	81 30       	cpi	r24, 0x01	; 1
    53fe:	e9 f4       	brne	.+58     	; 0x543a <change_auto_state+0x114>
    5400:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <detergent_pump_sl>
    5404:	82 30       	cpi	r24, 0x02	; 2
    5406:	81 f0       	breq	.+32     	; 0x5428 <change_auto_state+0x102>
    5408:	28 f4       	brcc	.+10     	; 0x5414 <change_auto_state+0xee>
    540a:	88 23       	and	r24, r24
    540c:	99 f0       	breq	.+38     	; 0x5434 <change_auto_state+0x10e>
    540e:	81 30       	cpi	r24, 0x01	; 1
    5410:	71 f0       	breq	.+28     	; 0x542e <change_auto_state+0x108>
    5412:	13 c0       	rjmp	.+38     	; 0x543a <change_auto_state+0x114>
    5414:	83 30       	cpi	r24, 0x03	; 3
    5416:	29 f0       	breq	.+10     	; 0x5422 <change_auto_state+0xfc>
    5418:	84 30       	cpi	r24, 0x04	; 4
    541a:	79 f4       	brne	.+30     	; 0x543a <change_auto_state+0x114>
    541c:	80 e4       	ldi	r24, 0x40	; 64
    541e:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    5422:	82 e0       	ldi	r24, 0x02	; 2
    5424:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5428:	84 e0       	ldi	r24, 0x04	; 4
    542a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    542e:	88 e0       	ldi	r24, 0x08	; 8
    5430:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5434:	80 e1       	ldi	r24, 0x10	; 16
    5436:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    543a:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    543e:	f0 e0       	ldi	r31, 0x00	; 0
    5440:	ed 52       	subi	r30, 0x2D	; 45
    5442:	fe 4d       	sbci	r31, 0xDE	; 222
    5444:	80 81       	ld	r24, Z
    5446:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    544a:	80 91 d1 22 	lds	r24, 0x22D1	; 0x8022d1 <auto_settings+0x4>
    544e:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
    5452:	84 36       	cpi	r24, 0x64	; 100
    5454:	11 f0       	breq	.+4      	; 0x545a <change_auto_state+0x134>
    5456:	8b 34       	cpi	r24, 0x4B	; 75
    5458:	89 f4       	brne	.+34     	; 0x547c <change_auto_state+0x156>
    545a:	80 e4       	ldi	r24, 0x40	; 64
    545c:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5460:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <blink_vac_led>
    5464:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    5468:	88 23       	and	r24, r24
    546a:	21 f0       	breq	.+8      	; 0x5474 <change_auto_state+0x14e>
    546c:	8b e4       	ldi	r24, 0x4B	; 75
    546e:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
    5472:	0d c0       	rjmp	.+26     	; 0x548e <change_auto_state+0x168>
    5474:	84 e6       	ldi	r24, 0x64	; 100
    5476:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
    547a:	09 c0       	rjmp	.+18     	; 0x548e <change_auto_state+0x168>
    547c:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <vacuum_state>
    5480:	8c 3c       	cpi	r24, 0xCC	; 204
    5482:	29 f4       	brne	.+10     	; 0x548e <change_auto_state+0x168>
    5484:	80 e4       	ldi	r24, 0x40	; 64
    5486:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    548a:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <blink_vac_led>
    548e:	80 91 d2 22 	lds	r24, 0x22D2	; 0x8022d2 <auto_settings+0x5>
    5492:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    5496:	84 36       	cpi	r24, 0x64	; 100
    5498:	11 f0       	breq	.+4      	; 0x549e <change_auto_state+0x178>
    549a:	8b 34       	cpi	r24, 0x4B	; 75
    549c:	59 f4       	brne	.+22     	; 0x54b4 <change_auto_state+0x18e>
    549e:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    54a2:	88 23       	and	r24, r24
    54a4:	21 f0       	breq	.+8      	; 0x54ae <change_auto_state+0x188>
    54a6:	8b e4       	ldi	r24, 0x4B	; 75
    54a8:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    54ac:	03 c0       	rjmp	.+6      	; 0x54b4 <change_auto_state+0x18e>
    54ae:	84 e6       	ldi	r24, 0x64	; 100
    54b0:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    54b4:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    54b8:	8a 3a       	cpi	r24, 0xAA	; 170
    54ba:	29 f4       	brne	.+10     	; 0x54c6 <change_auto_state+0x1a0>
    54bc:	88 e0       	ldi	r24, 0x08	; 8
    54be:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    54c2:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    54c6:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    54ca:	8b 3b       	cpi	r24, 0xBB	; 187
    54cc:	69 f4       	brne	.+26     	; 0x54e8 <change_auto_state+0x1c2>
    54ce:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    54d2:	88 23       	and	r24, r24
    54d4:	21 f0       	breq	.+8      	; 0x54de <change_auto_state+0x1b8>
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <blink_brush_led>
    54dc:	05 c0       	rjmp	.+10     	; 0x54e8 <change_auto_state+0x1c2>
    54de:	88 e0       	ldi	r24, 0x08	; 8
    54e0:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    54e4:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    54e8:	8b e2       	ldi	r24, 0x2B	; 43
    54ea:	0e 94 a9 1c 	call	0x3952	; 0x3952 <log_event>
    54ee:	08 95       	ret

000054f0 <transport_mode_on>:
    54f0:	a5 e2       	ldi	r26, 0x25	; 37
    54f2:	b7 e0       	ldi	r27, 0x07	; 7
    54f4:	20 e4       	ldi	r18, 0x40	; 64
    54f6:	2c 93       	st	X, r18
    54f8:	20 93 05 06 	sts	0x0605, r18	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    54fc:	e5 e2       	ldi	r30, 0x25	; 37
    54fe:	f6 e0       	ldi	r31, 0x06	; 6
    5500:	80 e1       	ldi	r24, 0x10	; 16
    5502:	80 83       	st	Z, r24
    5504:	44 e0       	ldi	r20, 0x04	; 4
    5506:	40 83       	st	Z, r20
    5508:	32 e0       	ldi	r19, 0x02	; 2
    550a:	30 83       	st	Z, r19
    550c:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <water_pump>
    5510:	90 93 ea 21 	sts	0x21EA, r25	; 0x8021ea <temp_wp>
    5514:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <water_pump>
    5518:	e5 e0       	ldi	r30, 0x05	; 5
    551a:	f7 e0       	ldi	r31, 0x07	; 7
    551c:	80 83       	st	Z, r24
    551e:	98 e0       	ldi	r25, 0x08	; 8
    5520:	90 83       	st	Z, r25
    5522:	40 83       	st	Z, r20
    5524:	30 83       	st	Z, r19
    5526:	e5 ee       	ldi	r30, 0xE5	; 229
    5528:	f6 e0       	ldi	r31, 0x06	; 6
    552a:	20 83       	st	Z, r18
    552c:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <detergent_pump>
    5530:	20 93 a8 21 	sts	0x21A8, r18	; 0x8021a8 <temp_dp>
    5534:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <detergent_pump>
    5538:	9c 93       	st	X, r25
    553a:	20 91 b0 22 	lds	r18, 0x22B0	; 0x8022b0 <brush>
    553e:	20 93 96 22 	sts	0x2296, r18	; 0x802296 <temp_b>
    5542:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <brush>
    5546:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    554a:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <extra_pressure>
    554e:	90 83       	st	Z, r25
    5550:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    5554:	08 95       	ret

00005556 <transport_mode_off>:
    5556:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <temp_wp>
    555a:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <water_pump>
    555e:	88 23       	and	r24, r24
    5560:	e9 f0       	breq	.+58     	; 0x559c <transport_mode_off+0x46>
    5562:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <water_pump_sl>
    5566:	82 30       	cpi	r24, 0x02	; 2
    5568:	81 f0       	breq	.+32     	; 0x558a <transport_mode_off+0x34>
    556a:	28 f4       	brcc	.+10     	; 0x5576 <transport_mode_off+0x20>
    556c:	88 23       	and	r24, r24
    556e:	99 f0       	breq	.+38     	; 0x5596 <transport_mode_off+0x40>
    5570:	81 30       	cpi	r24, 0x01	; 1
    5572:	71 f0       	breq	.+28     	; 0x5590 <transport_mode_off+0x3a>
    5574:	13 c0       	rjmp	.+38     	; 0x559c <transport_mode_off+0x46>
    5576:	83 30       	cpi	r24, 0x03	; 3
    5578:	29 f0       	breq	.+10     	; 0x5584 <transport_mode_off+0x2e>
    557a:	84 30       	cpi	r24, 0x04	; 4
    557c:	79 f4       	brne	.+30     	; 0x559c <transport_mode_off+0x46>
    557e:	82 e0       	ldi	r24, 0x02	; 2
    5580:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    5584:	84 e0       	ldi	r24, 0x04	; 4
    5586:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    558a:	80 e1       	ldi	r24, 0x10	; 16
    558c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    5590:	80 e4       	ldi	r24, 0x40	; 64
    5592:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    5596:	80 e4       	ldi	r24, 0x40	; 64
    5598:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    559c:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    55a0:	f0 e0       	ldi	r31, 0x00	; 0
    55a2:	e1 54       	subi	r30, 0x41	; 65
    55a4:	fd 4d       	sbci	r31, 0xDD	; 221
    55a6:	80 81       	ld	r24, Z
    55a8:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    55ac:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <temp_dp>
    55b0:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <detergent_pump>
    55b4:	81 30       	cpi	r24, 0x01	; 1
    55b6:	e9 f4       	brne	.+58     	; 0x55f2 <transport_mode_off+0x9c>
    55b8:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <detergent_pump_sl>
    55bc:	82 30       	cpi	r24, 0x02	; 2
    55be:	81 f0       	breq	.+32     	; 0x55e0 <transport_mode_off+0x8a>
    55c0:	28 f4       	brcc	.+10     	; 0x55cc <transport_mode_off+0x76>
    55c2:	88 23       	and	r24, r24
    55c4:	99 f0       	breq	.+38     	; 0x55ec <transport_mode_off+0x96>
    55c6:	81 30       	cpi	r24, 0x01	; 1
    55c8:	71 f0       	breq	.+28     	; 0x55e6 <transport_mode_off+0x90>
    55ca:	13 c0       	rjmp	.+38     	; 0x55f2 <transport_mode_off+0x9c>
    55cc:	83 30       	cpi	r24, 0x03	; 3
    55ce:	29 f0       	breq	.+10     	; 0x55da <transport_mode_off+0x84>
    55d0:	84 30       	cpi	r24, 0x04	; 4
    55d2:	79 f4       	brne	.+30     	; 0x55f2 <transport_mode_off+0x9c>
    55d4:	80 e4       	ldi	r24, 0x40	; 64
    55d6:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    55da:	82 e0       	ldi	r24, 0x02	; 2
    55dc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    55e0:	84 e0       	ldi	r24, 0x04	; 4
    55e2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    55e6:	88 e0       	ldi	r24, 0x08	; 8
    55e8:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    55ec:	80 e1       	ldi	r24, 0x10	; 16
    55ee:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    55f2:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    55f6:	f0 e0       	ldi	r31, 0x00	; 0
    55f8:	ed 52       	subi	r30, 0x2D	; 45
    55fa:	fe 4d       	sbci	r31, 0xDE	; 222
    55fc:	80 81       	ld	r24, Z
    55fe:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5602:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <temp_b>
    5606:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    560a:	84 36       	cpi	r24, 0x64	; 100
    560c:	11 f0       	breq	.+4      	; 0x5612 <transport_mode_off+0xbc>
    560e:	8b 34       	cpi	r24, 0x4B	; 75
    5610:	59 f4       	brne	.+22     	; 0x5628 <transport_mode_off+0xd2>
    5612:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    5616:	88 23       	and	r24, r24
    5618:	21 f0       	breq	.+8      	; 0x5622 <transport_mode_off+0xcc>
    561a:	8b e4       	ldi	r24, 0x4B	; 75
    561c:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    5620:	03 c0       	rjmp	.+6      	; 0x5628 <transport_mode_off+0xd2>
    5622:	84 e6       	ldi	r24, 0x64	; 100
    5624:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    5628:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    562c:	8a 3a       	cpi	r24, 0xAA	; 170
    562e:	29 f4       	brne	.+10     	; 0x563a <transport_mode_off+0xe4>
    5630:	88 e0       	ldi	r24, 0x08	; 8
    5632:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    5636:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    563a:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    563e:	8b 3b       	cpi	r24, 0xBB	; 187
    5640:	69 f4       	brne	.+26     	; 0x565c <transport_mode_off+0x106>
    5642:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    5646:	88 23       	and	r24, r24
    5648:	21 f0       	breq	.+8      	; 0x5652 <transport_mode_off+0xfc>
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <blink_brush_led>
    5650:	05 c0       	rjmp	.+10     	; 0x565c <transport_mode_off+0x106>
    5652:	88 e0       	ldi	r24, 0x08	; 8
    5654:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5658:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    565c:	80 e1       	ldi	r24, 0x10	; 16
    565e:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    5662:	08 95       	ret

00005664 <change_transport_mode>:
    5664:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    5668:	88 23       	and	r24, r24
    566a:	d9 f0       	breq	.+54     	; 0x56a2 <change_transport_mode+0x3e>
    566c:	60 e0       	ldi	r22, 0x00	; 0
    566e:	80 e0       	ldi	r24, 0x00	; 0
    5670:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5674:	8b ed       	ldi	r24, 0xDB	; 219
    5676:	95 e1       	ldi	r25, 0x15	; 21
    5678:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	81 e0       	ldi	r24, 0x01	; 1
    5680:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5684:	8e ec       	ldi	r24, 0xCE	; 206
    5686:	95 e1       	ldi	r25, 0x15	; 21
    5688:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    568c:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <reverse>
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <transport>
    5696:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    569a:	80 e1       	ldi	r24, 0x10	; 16
    569c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    56a0:	08 95       	ret
    56a2:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    56a6:	88 23       	and	r24, r24
    56a8:	a9 f0       	breq	.+42     	; 0x56d4 <change_transport_mode+0x70>
    56aa:	60 e0       	ldi	r22, 0x00	; 0
    56ac:	80 e0       	ldi	r24, 0x00	; 0
    56ae:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    56b2:	80 ec       	ldi	r24, 0xC0	; 192
    56b4:	95 e1       	ldi	r25, 0x15	; 21
    56b6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    56ba:	60 e0       	ldi	r22, 0x00	; 0
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    56c2:	83 eb       	ldi	r24, 0xB3	; 179
    56c4:	95 e1       	ldi	r25, 0x15	; 21
    56c6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    56ca:	0e 94 ab 2a 	call	0x5556	; 0x5556 <transport_mode_off>
    56ce:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <transport>
    56d2:	08 95       	ret
    56d4:	60 e0       	ldi	r22, 0x00	; 0
    56d6:	80 e0       	ldi	r24, 0x00	; 0
    56d8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    56dc:	86 ea       	ldi	r24, 0xA6	; 166
    56de:	95 e1       	ldi	r25, 0x15	; 21
    56e0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    56e4:	60 e0       	ldi	r22, 0x00	; 0
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    56ec:	89 e9       	ldi	r24, 0x99	; 153
    56ee:	95 e1       	ldi	r25, 0x15	; 21
    56f0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    56f4:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <transport_mode_on>
    56f8:	81 e0       	ldi	r24, 0x01	; 1
    56fa:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <transport>
    56fe:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <vacuum_state>
    5702:	8a 3a       	cpi	r24, 0xAA	; 170
    5704:	19 f4       	brne	.+6      	; 0x570c <change_transport_mode+0xa8>
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <blink_vac_led>
    570c:	08 95       	ret

0000570e <reverse_mode_on>:
    570e:	a5 e2       	ldi	r26, 0x25	; 37
    5710:	b7 e0       	ldi	r27, 0x07	; 7
    5712:	90 e4       	ldi	r25, 0x40	; 64
    5714:	9c 93       	st	X, r25
    5716:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    571a:	e5 e2       	ldi	r30, 0x25	; 37
    571c:	f6 e0       	ldi	r31, 0x06	; 6
    571e:	80 e1       	ldi	r24, 0x10	; 16
    5720:	80 83       	st	Z, r24
    5722:	34 e0       	ldi	r19, 0x04	; 4
    5724:	30 83       	st	Z, r19
    5726:	22 e0       	ldi	r18, 0x02	; 2
    5728:	20 83       	st	Z, r18
    572a:	40 91 c9 21 	lds	r20, 0x21C9	; 0x8021c9 <water_pump>
    572e:	40 93 ea 21 	sts	0x21EA, r20	; 0x8021ea <temp_wp>
    5732:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <water_pump>
    5736:	e5 e0       	ldi	r30, 0x05	; 5
    5738:	f7 e0       	ldi	r31, 0x07	; 7
    573a:	80 83       	st	Z, r24
    573c:	88 e0       	ldi	r24, 0x08	; 8
    573e:	80 83       	st	Z, r24
    5740:	30 83       	st	Z, r19
    5742:	20 83       	st	Z, r18
    5744:	e5 ee       	ldi	r30, 0xE5	; 229
    5746:	f6 e0       	ldi	r31, 0x06	; 6
    5748:	90 83       	st	Z, r25
    574a:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <detergent_pump>
    574e:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <temp_dp>
    5752:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <detergent_pump>
    5756:	8c 93       	st	X, r24
    5758:	90 91 b0 22 	lds	r25, 0x22B0	; 0x8022b0 <brush>
    575c:	90 93 96 22 	sts	0x2296, r25	; 0x802296 <temp_b>
    5760:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <brush>
    5764:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    5768:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <extra_pressure>
    576c:	80 83       	st	Z, r24
    576e:	08 95       	ret

00005770 <reverse_mode_off>:
    5770:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <temp_wp>
    5774:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <water_pump>
    5778:	88 23       	and	r24, r24
    577a:	e9 f0       	breq	.+58     	; 0x57b6 <reverse_mode_off+0x46>
    577c:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <water_pump_sl>
    5780:	82 30       	cpi	r24, 0x02	; 2
    5782:	81 f0       	breq	.+32     	; 0x57a4 <reverse_mode_off+0x34>
    5784:	28 f4       	brcc	.+10     	; 0x5790 <reverse_mode_off+0x20>
    5786:	88 23       	and	r24, r24
    5788:	99 f0       	breq	.+38     	; 0x57b0 <reverse_mode_off+0x40>
    578a:	81 30       	cpi	r24, 0x01	; 1
    578c:	71 f0       	breq	.+28     	; 0x57aa <reverse_mode_off+0x3a>
    578e:	13 c0       	rjmp	.+38     	; 0x57b6 <reverse_mode_off+0x46>
    5790:	83 30       	cpi	r24, 0x03	; 3
    5792:	29 f0       	breq	.+10     	; 0x579e <reverse_mode_off+0x2e>
    5794:	84 30       	cpi	r24, 0x04	; 4
    5796:	79 f4       	brne	.+30     	; 0x57b6 <reverse_mode_off+0x46>
    5798:	82 e0       	ldi	r24, 0x02	; 2
    579a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    579e:	84 e0       	ldi	r24, 0x04	; 4
    57a0:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    57a4:	80 e1       	ldi	r24, 0x10	; 16
    57a6:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    57aa:	80 e4       	ldi	r24, 0x40	; 64
    57ac:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    57b0:	80 e4       	ldi	r24, 0x40	; 64
    57b2:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    57b6:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    57ba:	f0 e0       	ldi	r31, 0x00	; 0
    57bc:	e1 54       	subi	r30, 0x41	; 65
    57be:	fd 4d       	sbci	r31, 0xDD	; 221
    57c0:	80 81       	ld	r24, Z
    57c2:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    57c6:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <temp_dp>
    57ca:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <detergent_pump>
    57ce:	81 30       	cpi	r24, 0x01	; 1
    57d0:	e9 f4       	brne	.+58     	; 0x580c <reverse_mode_off+0x9c>
    57d2:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <detergent_pump_sl>
    57d6:	82 30       	cpi	r24, 0x02	; 2
    57d8:	81 f0       	breq	.+32     	; 0x57fa <reverse_mode_off+0x8a>
    57da:	28 f4       	brcc	.+10     	; 0x57e6 <reverse_mode_off+0x76>
    57dc:	88 23       	and	r24, r24
    57de:	99 f0       	breq	.+38     	; 0x5806 <reverse_mode_off+0x96>
    57e0:	81 30       	cpi	r24, 0x01	; 1
    57e2:	71 f0       	breq	.+28     	; 0x5800 <reverse_mode_off+0x90>
    57e4:	13 c0       	rjmp	.+38     	; 0x580c <reverse_mode_off+0x9c>
    57e6:	83 30       	cpi	r24, 0x03	; 3
    57e8:	29 f0       	breq	.+10     	; 0x57f4 <reverse_mode_off+0x84>
    57ea:	84 30       	cpi	r24, 0x04	; 4
    57ec:	79 f4       	brne	.+30     	; 0x580c <reverse_mode_off+0x9c>
    57ee:	80 e4       	ldi	r24, 0x40	; 64
    57f0:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    57f4:	82 e0       	ldi	r24, 0x02	; 2
    57f6:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    57fa:	84 e0       	ldi	r24, 0x04	; 4
    57fc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5800:	88 e0       	ldi	r24, 0x08	; 8
    5802:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5806:	80 e1       	ldi	r24, 0x10	; 16
    5808:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    580c:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5810:	f0 e0       	ldi	r31, 0x00	; 0
    5812:	ed 52       	subi	r30, 0x2D	; 45
    5814:	fe 4d       	sbci	r31, 0xDE	; 222
    5816:	80 81       	ld	r24, Z
    5818:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    581c:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <temp_b>
    5820:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    5824:	84 36       	cpi	r24, 0x64	; 100
    5826:	11 f0       	breq	.+4      	; 0x582c <reverse_mode_off+0xbc>
    5828:	8b 34       	cpi	r24, 0x4B	; 75
    582a:	59 f4       	brne	.+22     	; 0x5842 <reverse_mode_off+0xd2>
    582c:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    5830:	88 23       	and	r24, r24
    5832:	21 f0       	breq	.+8      	; 0x583c <reverse_mode_off+0xcc>
    5834:	8b e4       	ldi	r24, 0x4B	; 75
    5836:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    583a:	03 c0       	rjmp	.+6      	; 0x5842 <reverse_mode_off+0xd2>
    583c:	84 e6       	ldi	r24, 0x64	; 100
    583e:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    5842:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    5846:	8a 3a       	cpi	r24, 0xAA	; 170
    5848:	29 f4       	brne	.+10     	; 0x5854 <reverse_mode_off+0xe4>
    584a:	88 e0       	ldi	r24, 0x08	; 8
    584c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    5850:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    5854:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <brush_state>
    5858:	8b 3b       	cpi	r24, 0xBB	; 187
    585a:	69 f4       	brne	.+26     	; 0x5876 <reverse_mode_off+0x106>
    585c:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    5860:	88 23       	and	r24, r24
    5862:	21 f0       	breq	.+8      	; 0x586c <reverse_mode_off+0xfc>
    5864:	81 e0       	ldi	r24, 0x01	; 1
    5866:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <blink_brush_led>
    586a:	08 95       	ret
    586c:	88 e0       	ldi	r24, 0x08	; 8
    586e:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5872:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
    5876:	08 95       	ret

00005878 <change_forward_reverse_state>:
    5878:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <transport>
    587c:	88 23       	and	r24, r24
    587e:	d9 f0       	breq	.+54     	; 0x58b6 <change_forward_reverse_state+0x3e>
    5880:	60 e0       	ldi	r22, 0x00	; 0
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5888:	8c e8       	ldi	r24, 0x8C	; 140
    588a:	95 e1       	ldi	r25, 0x15	; 21
    588c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5898:	8f e7       	ldi	r24, 0x7F	; 127
    589a:	95 e1       	ldi	r25, 0x15	; 21
    589c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    58a0:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <transport>
    58a4:	81 e0       	ldi	r24, 0x01	; 1
    58a6:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <reverse>
    58aa:	90 e1       	ldi	r25, 0x10	; 16
    58ac:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    58b0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    58b4:	08 95       	ret
    58b6:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <reverse>
    58ba:	88 23       	and	r24, r24
    58bc:	c1 f0       	breq	.+48     	; 0x58ee <change_forward_reverse_state+0x76>
    58be:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <reverse>
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    58c8:	60 e0       	ldi	r22, 0x00	; 0
    58ca:	80 e0       	ldi	r24, 0x00	; 0
    58cc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    58d0:	82 e7       	ldi	r24, 0x72	; 114
    58d2:	95 e1       	ldi	r25, 0x15	; 21
    58d4:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    58d8:	60 e0       	ldi	r22, 0x00	; 0
    58da:	81 e0       	ldi	r24, 0x01	; 1
    58dc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    58e0:	85 e6       	ldi	r24, 0x65	; 101
    58e2:	95 e1       	ldi	r25, 0x15	; 21
    58e4:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    58e8:	0e 94 b8 2b 	call	0x5770	; 0x5770 <reverse_mode_off>
    58ec:	08 95       	ret
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <reverse>
    58f4:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    58f8:	60 e0       	ldi	r22, 0x00	; 0
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5900:	88 e5       	ldi	r24, 0x58	; 88
    5902:	95 e1       	ldi	r25, 0x15	; 21
    5904:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5908:	60 e0       	ldi	r22, 0x00	; 0
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5910:	8b e4       	ldi	r24, 0x4B	; 75
    5912:	95 e1       	ldi	r25, 0x15	; 21
    5914:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5918:	0e 94 87 2b 	call	0x570e	; 0x570e <reverse_mode_on>
    591c:	08 95       	ret

0000591e <change_auto_settings>:
    591e:	cf 93       	push	r28
    5920:	df 93       	push	r29
    5922:	cd b7       	in	r28, 0x3d	; 61
    5924:	de b7       	in	r29, 0x3e	; 62
    5926:	26 97       	sbiw	r28, 0x06	; 6
    5928:	cd bf       	out	0x3d, r28	; 61
    592a:	de bf       	out	0x3e, r29	; 62
    592c:	f8 94       	cli
    592e:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <water_pump_sl>
    5932:	89 83       	std	Y+1, r24	; 0x01
    5934:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <detergent_pump_sl>
    5938:	8a 83       	std	Y+2, r24	; 0x02
    593a:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    593e:	8b 83       	std	Y+3, r24	; 0x03
    5940:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <detergent_pump>
    5944:	8c 83       	std	Y+4, r24	; 0x04
    5946:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <vacuum>
    594a:	8d 83       	std	Y+5, r24	; 0x05
    594c:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    5950:	8e 83       	std	Y+6, r24	; 0x06
    5952:	ef ec       	ldi	r30, 0xCF	; 207
    5954:	f1 e0       	ldi	r31, 0x01	; 1
    5956:	80 81       	ld	r24, Z
    5958:	88 23       	and	r24, r24
    595a:	ec f3       	brlt	.-6      	; 0x5956 <change_auto_settings+0x38>
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5962:	46 e0       	ldi	r20, 0x06	; 6
    5964:	50 e0       	ldi	r21, 0x00	; 0
    5966:	61 e6       	ldi	r22, 0x61	; 97
    5968:	70 e0       	ldi	r23, 0x00	; 0
    596a:	ce 01       	movw	r24, r28
    596c:	01 96       	adiw	r24, 0x01	; 1
    596e:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
    5972:	46 e0       	ldi	r20, 0x06	; 6
    5974:	50 e0       	ldi	r21, 0x00	; 0
    5976:	61 e6       	ldi	r22, 0x61	; 97
    5978:	70 e0       	ldi	r23, 0x00	; 0
    597a:	8d ec       	ldi	r24, 0xCD	; 205
    597c:	92 e2       	ldi	r25, 0x22	; 34
    597e:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
    5982:	78 94       	sei
    5984:	81 e3       	ldi	r24, 0x31	; 49
    5986:	0e 94 a9 1c 	call	0x3952	; 0x3952 <log_event>
    598a:	26 96       	adiw	r28, 0x06	; 6
    598c:	cd bf       	out	0x3d, r28	; 61
    598e:	de bf       	out	0x3e, r29	; 62
    5990:	df 91       	pop	r29
    5992:	cf 91       	pop	r28
    5994:	08 95       	ret

00005996 <increase_water_pump_level>:
    5996:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    599a:	81 11       	cpse	r24, r1
    599c:	bb c0       	rjmp	.+374    	; 0x5b14 <increase_water_pump_level+0x17e>
    599e:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    59a2:	8a 3a       	cpi	r24, 0xAA	; 170
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <increase_water_pump_level+0x12>
    59a6:	b6 c0       	rjmp	.+364    	; 0x5b14 <increase_water_pump_level+0x17e>
    59a8:	80 e2       	ldi	r24, 0x20	; 32
    59aa:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    59ae:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    59b2:	81 11       	cpse	r24, r1
    59b4:	1f c0       	rjmp	.+62     	; 0x59f4 <increase_water_pump_level+0x5e>
    59b6:	80 e4       	ldi	r24, 0x40	; 64
    59b8:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    59bc:	81 e0       	ldi	r24, 0x01	; 1
    59be:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <water_pump>
    59c2:	10 92 06 23 	sts	0x2306, r1	; 0x802306 <water_pump_sl>
    59c6:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <speed_settings_water>
    59ca:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <water_pump_dc>
    59ce:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    59d2:	60 e0       	ldi	r22, 0x00	; 0
    59d4:	80 e0       	ldi	r24, 0x00	; 0
    59d6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    59da:	8e e3       	ldi	r24, 0x3E	; 62
    59dc:	95 e1       	ldi	r25, 0x15	; 21
    59de:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    59e2:	60 e0       	ldi	r22, 0x00	; 0
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    59ea:	81 e3       	ldi	r24, 0x31	; 49
    59ec:	95 e1       	ldi	r25, 0x15	; 21
    59ee:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    59f2:	08 95       	ret
    59f4:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <water_pump_sl>
    59f8:	81 30       	cpi	r24, 0x01	; 1
    59fa:	39 f1       	breq	.+78     	; 0x5a4a <increase_water_pump_level+0xb4>
    59fc:	38 f0       	brcs	.+14     	; 0x5a0c <increase_water_pump_level+0x76>
    59fe:	82 30       	cpi	r24, 0x02	; 2
    5a00:	09 f4       	brne	.+2      	; 0x5a04 <increase_water_pump_level+0x6e>
    5a02:	45 c0       	rjmp	.+138    	; 0x5a8e <increase_water_pump_level+0xf8>
    5a04:	83 30       	cpi	r24, 0x03	; 3
    5a06:	09 f4       	brne	.+2      	; 0x5a0a <increase_water_pump_level+0x74>
    5a08:	64 c0       	rjmp	.+200    	; 0x5ad2 <increase_water_pump_level+0x13c>
    5a0a:	08 95       	ret
    5a0c:	80 e4       	ldi	r24, 0x40	; 64
    5a0e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    5a12:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5a16:	ef 5f       	subi	r30, 0xFF	; 255
    5a18:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5a1c:	f0 e0       	ldi	r31, 0x00	; 0
    5a1e:	e1 54       	subi	r30, 0x41	; 65
    5a20:	fd 4d       	sbci	r31, 0xDD	; 221
    5a22:	80 81       	ld	r24, Z
    5a24:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5a28:	60 e0       	ldi	r22, 0x00	; 0
    5a2a:	80 e0       	ldi	r24, 0x00	; 0
    5a2c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5a30:	84 e2       	ldi	r24, 0x24	; 36
    5a32:	95 e1       	ldi	r25, 0x15	; 21
    5a34:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5a38:	60 e0       	ldi	r22, 0x00	; 0
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5a40:	87 e1       	ldi	r24, 0x17	; 23
    5a42:	95 e1       	ldi	r25, 0x15	; 21
    5a44:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5a48:	08 95       	ret
    5a4a:	80 e1       	ldi	r24, 0x10	; 16
    5a4c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    5a50:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5a54:	ef 5f       	subi	r30, 0xFF	; 255
    5a56:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5a5a:	f0 e0       	ldi	r31, 0x00	; 0
    5a5c:	e1 54       	subi	r30, 0x41	; 65
    5a5e:	fd 4d       	sbci	r31, 0xDD	; 221
    5a60:	80 81       	ld	r24, Z
    5a62:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5a66:	81 e0       	ldi	r24, 0x01	; 1
    5a68:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5a6c:	60 e0       	ldi	r22, 0x00	; 0
    5a6e:	80 e0       	ldi	r24, 0x00	; 0
    5a70:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5a74:	8a e0       	ldi	r24, 0x0A	; 10
    5a76:	95 e1       	ldi	r25, 0x15	; 21
    5a78:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5a7c:	60 e0       	ldi	r22, 0x00	; 0
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5a84:	8d ef       	ldi	r24, 0xFD	; 253
    5a86:	94 e1       	ldi	r25, 0x14	; 20
    5a88:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5a8c:	08 95       	ret
    5a8e:	84 e0       	ldi	r24, 0x04	; 4
    5a90:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    5a94:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5a98:	ef 5f       	subi	r30, 0xFF	; 255
    5a9a:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5a9e:	f0 e0       	ldi	r31, 0x00	; 0
    5aa0:	e1 54       	subi	r30, 0x41	; 65
    5aa2:	fd 4d       	sbci	r31, 0xDD	; 221
    5aa4:	80 81       	ld	r24, Z
    5aa6:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5aaa:	81 e0       	ldi	r24, 0x01	; 1
    5aac:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5ab0:	60 e0       	ldi	r22, 0x00	; 0
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5ab8:	80 ef       	ldi	r24, 0xF0	; 240
    5aba:	94 e1       	ldi	r25, 0x14	; 20
    5abc:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5ac0:	60 e0       	ldi	r22, 0x00	; 0
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5ac8:	82 ee       	ldi	r24, 0xE2	; 226
    5aca:	94 e1       	ldi	r25, 0x14	; 20
    5acc:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5ad0:	08 95       	ret
    5ad2:	82 e0       	ldi	r24, 0x02	; 2
    5ad4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    5ad8:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5adc:	ef 5f       	subi	r30, 0xFF	; 255
    5ade:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5ae2:	f0 e0       	ldi	r31, 0x00	; 0
    5ae4:	e1 54       	subi	r30, 0x41	; 65
    5ae6:	fd 4d       	sbci	r31, 0xDD	; 221
    5ae8:	80 81       	ld	r24, Z
    5aea:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5af4:	60 e0       	ldi	r22, 0x00	; 0
    5af6:	80 e0       	ldi	r24, 0x00	; 0
    5af8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5afc:	85 ed       	ldi	r24, 0xD5	; 213
    5afe:	94 e1       	ldi	r25, 0x14	; 20
    5b00:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5b04:	60 e0       	ldi	r22, 0x00	; 0
    5b06:	81 e0       	ldi	r24, 0x01	; 1
    5b08:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5b0c:	87 ec       	ldi	r24, 0xC7	; 199
    5b0e:	94 e1       	ldi	r25, 0x14	; 20
    5b10:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5b14:	08 95       	ret

00005b16 <decrease_water_pump_level>:
    5b16:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    5b1a:	81 11       	cpse	r24, r1
    5b1c:	b9 c0       	rjmp	.+370    	; 0x5c90 <decrease_water_pump_level+0x17a>
    5b1e:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    5b22:	8a 3a       	cpi	r24, 0xAA	; 170
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <decrease_water_pump_level+0x12>
    5b26:	b4 c0       	rjmp	.+360    	; 0x5c90 <decrease_water_pump_level+0x17a>
    5b28:	80 e2       	ldi	r24, 0x20	; 32
    5b2a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5b2e:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <water_pump_sl>
    5b32:	82 30       	cpi	r24, 0x02	; 2
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <decrease_water_pump_level+0x22>
    5b36:	47 c0       	rjmp	.+142    	; 0x5bc6 <decrease_water_pump_level+0xb0>
    5b38:	28 f4       	brcc	.+10     	; 0x5b44 <decrease_water_pump_level+0x2e>
    5b3a:	88 23       	and	r24, r24
    5b3c:	51 f0       	breq	.+20     	; 0x5b52 <decrease_water_pump_level+0x3c>
    5b3e:	81 30       	cpi	r24, 0x01	; 1
    5b40:	01 f1       	breq	.+64     	; 0x5b82 <decrease_water_pump_level+0x6c>
    5b42:	08 95       	ret
    5b44:	83 30       	cpi	r24, 0x03	; 3
    5b46:	09 f4       	brne	.+2      	; 0x5b4a <decrease_water_pump_level+0x34>
    5b48:	60 c0       	rjmp	.+192    	; 0x5c0a <decrease_water_pump_level+0xf4>
    5b4a:	84 30       	cpi	r24, 0x04	; 4
    5b4c:	09 f4       	brne	.+2      	; 0x5b50 <decrease_water_pump_level+0x3a>
    5b4e:	7f c0       	rjmp	.+254    	; 0x5c4e <decrease_water_pump_level+0x138>
    5b50:	08 95       	ret
    5b52:	80 e4       	ldi	r24, 0x40	; 64
    5b54:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5b58:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <water_pump>
    5b5c:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <solenoid_valve>
    5b60:	60 e0       	ldi	r22, 0x00	; 0
    5b62:	80 e0       	ldi	r24, 0x00	; 0
    5b64:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5b68:	8a eb       	ldi	r24, 0xBA	; 186
    5b6a:	94 e1       	ldi	r25, 0x14	; 20
    5b6c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5b70:	60 e0       	ldi	r22, 0x00	; 0
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5b78:	8d ea       	ldi	r24, 0xAD	; 173
    5b7a:	94 e1       	ldi	r25, 0x14	; 20
    5b7c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5b80:	08 95       	ret
    5b82:	80 e4       	ldi	r24, 0x40	; 64
    5b84:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    5b88:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5b8c:	e1 50       	subi	r30, 0x01	; 1
    5b8e:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5b92:	f0 e0       	ldi	r31, 0x00	; 0
    5b94:	e1 54       	subi	r30, 0x41	; 65
    5b96:	fd 4d       	sbci	r31, 0xDD	; 221
    5b98:	80 81       	ld	r24, Z
    5b9a:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5b9e:	81 e0       	ldi	r24, 0x01	; 1
    5ba0:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5ba4:	60 e0       	ldi	r22, 0x00	; 0
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5bac:	80 ea       	ldi	r24, 0xA0	; 160
    5bae:	94 e1       	ldi	r25, 0x14	; 20
    5bb0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5bb4:	60 e0       	ldi	r22, 0x00	; 0
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5bbc:	83 e9       	ldi	r24, 0x93	; 147
    5bbe:	94 e1       	ldi	r25, 0x14	; 20
    5bc0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5bc4:	08 95       	ret
    5bc6:	80 e1       	ldi	r24, 0x10	; 16
    5bc8:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    5bcc:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5bd0:	e1 50       	subi	r30, 0x01	; 1
    5bd2:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5bd6:	f0 e0       	ldi	r31, 0x00	; 0
    5bd8:	e1 54       	subi	r30, 0x41	; 65
    5bda:	fd 4d       	sbci	r31, 0xDD	; 221
    5bdc:	80 81       	ld	r24, Z
    5bde:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5be8:	60 e0       	ldi	r22, 0x00	; 0
    5bea:	80 e0       	ldi	r24, 0x00	; 0
    5bec:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5bf0:	86 e8       	ldi	r24, 0x86	; 134
    5bf2:	94 e1       	ldi	r25, 0x14	; 20
    5bf4:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5bf8:	60 e0       	ldi	r22, 0x00	; 0
    5bfa:	81 e0       	ldi	r24, 0x01	; 1
    5bfc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5c00:	89 e7       	ldi	r24, 0x79	; 121
    5c02:	94 e1       	ldi	r25, 0x14	; 20
    5c04:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5c08:	08 95       	ret
    5c0a:	84 e0       	ldi	r24, 0x04	; 4
    5c0c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    5c10:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5c14:	e1 50       	subi	r30, 0x01	; 1
    5c16:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5c1a:	f0 e0       	ldi	r31, 0x00	; 0
    5c1c:	e1 54       	subi	r30, 0x41	; 65
    5c1e:	fd 4d       	sbci	r31, 0xDD	; 221
    5c20:	80 81       	ld	r24, Z
    5c22:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5c2c:	60 e0       	ldi	r22, 0x00	; 0
    5c2e:	80 e0       	ldi	r24, 0x00	; 0
    5c30:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5c34:	8c e6       	ldi	r24, 0x6C	; 108
    5c36:	94 e1       	ldi	r25, 0x14	; 20
    5c38:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5c3c:	60 e0       	ldi	r22, 0x00	; 0
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5c44:	8f e5       	ldi	r24, 0x5F	; 95
    5c46:	94 e1       	ldi	r25, 0x14	; 20
    5c48:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5c4c:	08 95       	ret
    5c4e:	82 e0       	ldi	r24, 0x02	; 2
    5c50:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    5c54:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <water_pump_sl>
    5c58:	e1 50       	subi	r30, 0x01	; 1
    5c5a:	e0 93 06 23 	sts	0x2306, r30	; 0x802306 <water_pump_sl>
    5c5e:	f0 e0       	ldi	r31, 0x00	; 0
    5c60:	e1 54       	subi	r30, 0x41	; 65
    5c62:	fd 4d       	sbci	r31, 0xDD	; 221
    5c64:	80 81       	ld	r24, Z
    5c66:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <water_pump_dc>
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    5c70:	60 e0       	ldi	r22, 0x00	; 0
    5c72:	80 e0       	ldi	r24, 0x00	; 0
    5c74:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5c78:	82 e5       	ldi	r24, 0x52	; 82
    5c7a:	94 e1       	ldi	r25, 0x14	; 20
    5c7c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5c80:	60 e0       	ldi	r22, 0x00	; 0
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5c88:	84 e4       	ldi	r24, 0x44	; 68
    5c8a:	94 e1       	ldi	r25, 0x14	; 20
    5c8c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5c90:	08 95       	ret

00005c92 <increase_detergent_pump_level>:
    5c92:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    5c96:	81 11       	cpse	r24, r1
    5c98:	b0 c0       	rjmp	.+352    	; 0x5dfa <increase_detergent_pump_level+0x168>
    5c9a:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    5c9e:	8a 3a       	cpi	r24, 0xAA	; 170
    5ca0:	09 f4       	brne	.+2      	; 0x5ca4 <increase_detergent_pump_level+0x12>
    5ca2:	ab c0       	rjmp	.+342    	; 0x5dfa <increase_detergent_pump_level+0x168>
    5ca4:	80 e2       	ldi	r24, 0x20	; 32
    5ca6:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5caa:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <detergent_pump>
    5cae:	81 11       	cpse	r24, r1
    5cb0:	1d c0       	rjmp	.+58     	; 0x5cec <increase_detergent_pump_level+0x5a>
    5cb2:	80 e1       	ldi	r24, 0x10	; 16
    5cb4:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <detergent_pump>
    5cbe:	10 92 05 23 	sts	0x2305, r1	; 0x802305 <detergent_pump_sl>
    5cc2:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <speed_settings_dosage>
    5cc6:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5cca:	60 e0       	ldi	r22, 0x00	; 0
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
    5cce:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5cd2:	87 e3       	ldi	r24, 0x37	; 55
    5cd4:	94 e1       	ldi	r25, 0x14	; 20
    5cd6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5cda:	60 e0       	ldi	r22, 0x00	; 0
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5ce2:	8a e2       	ldi	r24, 0x2A	; 42
    5ce4:	94 e1       	ldi	r25, 0x14	; 20
    5ce6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5cea:	08 95       	ret
    5cec:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <detergent_pump_sl>
    5cf0:	81 30       	cpi	r24, 0x01	; 1
    5cf2:	39 f1       	breq	.+78     	; 0x5d42 <increase_detergent_pump_level+0xb0>
    5cf4:	38 f0       	brcs	.+14     	; 0x5d04 <increase_detergent_pump_level+0x72>
    5cf6:	82 30       	cpi	r24, 0x02	; 2
    5cf8:	09 f4       	brne	.+2      	; 0x5cfc <increase_detergent_pump_level+0x6a>
    5cfa:	42 c0       	rjmp	.+132    	; 0x5d80 <increase_detergent_pump_level+0xee>
    5cfc:	83 30       	cpi	r24, 0x03	; 3
    5cfe:	09 f4       	brne	.+2      	; 0x5d02 <increase_detergent_pump_level+0x70>
    5d00:	5e c0       	rjmp	.+188    	; 0x5dbe <increase_detergent_pump_level+0x12c>
    5d02:	08 95       	ret
    5d04:	88 e0       	ldi	r24, 0x08	; 8
    5d06:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5d0a:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5d0e:	ef 5f       	subi	r30, 0xFF	; 255
    5d10:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5d14:	f0 e0       	ldi	r31, 0x00	; 0
    5d16:	ed 52       	subi	r30, 0x2D	; 45
    5d18:	fe 4d       	sbci	r31, 0xDE	; 222
    5d1a:	80 81       	ld	r24, Z
    5d1c:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5d20:	60 e0       	ldi	r22, 0x00	; 0
    5d22:	80 e0       	ldi	r24, 0x00	; 0
    5d24:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5d28:	8d e1       	ldi	r24, 0x1D	; 29
    5d2a:	94 e1       	ldi	r25, 0x14	; 20
    5d2c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5d30:	60 e0       	ldi	r22, 0x00	; 0
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5d38:	80 e1       	ldi	r24, 0x10	; 16
    5d3a:	94 e1       	ldi	r25, 0x14	; 20
    5d3c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5d40:	08 95       	ret
    5d42:	84 e0       	ldi	r24, 0x04	; 4
    5d44:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5d48:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5d4c:	ef 5f       	subi	r30, 0xFF	; 255
    5d4e:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5d52:	f0 e0       	ldi	r31, 0x00	; 0
    5d54:	ed 52       	subi	r30, 0x2D	; 45
    5d56:	fe 4d       	sbci	r31, 0xDE	; 222
    5d58:	80 81       	ld	r24, Z
    5d5a:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5d5e:	60 e0       	ldi	r22, 0x00	; 0
    5d60:	80 e0       	ldi	r24, 0x00	; 0
    5d62:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5d66:	83 e0       	ldi	r24, 0x03	; 3
    5d68:	94 e1       	ldi	r25, 0x14	; 20
    5d6a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5d6e:	60 e0       	ldi	r22, 0x00	; 0
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5d76:	86 ef       	ldi	r24, 0xF6	; 246
    5d78:	93 e1       	ldi	r25, 0x13	; 19
    5d7a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5d7e:	08 95       	ret
    5d80:	82 e0       	ldi	r24, 0x02	; 2
    5d82:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5d86:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5d8a:	ef 5f       	subi	r30, 0xFF	; 255
    5d8c:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	ed 52       	subi	r30, 0x2D	; 45
    5d94:	fe 4d       	sbci	r31, 0xDE	; 222
    5d96:	80 81       	ld	r24, Z
    5d98:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5d9c:	60 e0       	ldi	r22, 0x00	; 0
    5d9e:	80 e0       	ldi	r24, 0x00	; 0
    5da0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5da4:	89 ee       	ldi	r24, 0xE9	; 233
    5da6:	93 e1       	ldi	r25, 0x13	; 19
    5da8:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5dac:	60 e0       	ldi	r22, 0x00	; 0
    5dae:	81 e0       	ldi	r24, 0x01	; 1
    5db0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5db4:	8b ed       	ldi	r24, 0xDB	; 219
    5db6:	93 e1       	ldi	r25, 0x13	; 19
    5db8:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5dbc:	08 95       	ret
    5dbe:	80 e4       	ldi	r24, 0x40	; 64
    5dc0:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    5dc4:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5dc8:	ef 5f       	subi	r30, 0xFF	; 255
    5dca:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5dce:	f0 e0       	ldi	r31, 0x00	; 0
    5dd0:	ed 52       	subi	r30, 0x2D	; 45
    5dd2:	fe 4d       	sbci	r31, 0xDE	; 222
    5dd4:	80 81       	ld	r24, Z
    5dd6:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5dda:	60 e0       	ldi	r22, 0x00	; 0
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5de2:	8e ec       	ldi	r24, 0xCE	; 206
    5de4:	93 e1       	ldi	r25, 0x13	; 19
    5de6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5dea:	60 e0       	ldi	r22, 0x00	; 0
    5dec:	81 e0       	ldi	r24, 0x01	; 1
    5dee:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5df2:	80 ec       	ldi	r24, 0xC0	; 192
    5df4:	93 e1       	ldi	r25, 0x13	; 19
    5df6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5dfa:	08 95       	ret

00005dfc <decrease_detergent_pump_level>:
    5dfc:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    5e00:	81 11       	cpse	r24, r1
    5e02:	ab c0       	rjmp	.+342    	; 0x5f5a <decrease_detergent_pump_level+0x15e>
    5e04:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    5e08:	8a 3a       	cpi	r24, 0xAA	; 170
    5e0a:	09 f4       	brne	.+2      	; 0x5e0e <decrease_detergent_pump_level+0x12>
    5e0c:	a6 c0       	rjmp	.+332    	; 0x5f5a <decrease_detergent_pump_level+0x15e>
    5e0e:	80 e2       	ldi	r24, 0x20	; 32
    5e10:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5e14:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <detergent_pump_sl>
    5e18:	82 30       	cpi	r24, 0x02	; 2
    5e1a:	09 f4       	brne	.+2      	; 0x5e1e <decrease_detergent_pump_level+0x22>
    5e1c:	42 c0       	rjmp	.+132    	; 0x5ea2 <decrease_detergent_pump_level+0xa6>
    5e1e:	28 f4       	brcc	.+10     	; 0x5e2a <decrease_detergent_pump_level+0x2e>
    5e20:	88 23       	and	r24, r24
    5e22:	51 f0       	breq	.+20     	; 0x5e38 <decrease_detergent_pump_level+0x3c>
    5e24:	81 30       	cpi	r24, 0x01	; 1
    5e26:	f1 f0       	breq	.+60     	; 0x5e64 <decrease_detergent_pump_level+0x68>
    5e28:	08 95       	ret
    5e2a:	83 30       	cpi	r24, 0x03	; 3
    5e2c:	09 f4       	brne	.+2      	; 0x5e30 <decrease_detergent_pump_level+0x34>
    5e2e:	58 c0       	rjmp	.+176    	; 0x5ee0 <decrease_detergent_pump_level+0xe4>
    5e30:	84 30       	cpi	r24, 0x04	; 4
    5e32:	09 f4       	brne	.+2      	; 0x5e36 <decrease_detergent_pump_level+0x3a>
    5e34:	74 c0       	rjmp	.+232    	; 0x5f1e <decrease_detergent_pump_level+0x122>
    5e36:	08 95       	ret
    5e38:	80 e1       	ldi	r24, 0x10	; 16
    5e3a:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    5e3e:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <detergent_pump>
    5e42:	60 e0       	ldi	r22, 0x00	; 0
    5e44:	80 e0       	ldi	r24, 0x00	; 0
    5e46:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5e4a:	83 eb       	ldi	r24, 0xB3	; 179
    5e4c:	93 e1       	ldi	r25, 0x13	; 19
    5e4e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5e52:	60 e0       	ldi	r22, 0x00	; 0
    5e54:	81 e0       	ldi	r24, 0x01	; 1
    5e56:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5e5a:	86 ea       	ldi	r24, 0xA6	; 166
    5e5c:	93 e1       	ldi	r25, 0x13	; 19
    5e5e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5e62:	08 95       	ret
    5e64:	88 e0       	ldi	r24, 0x08	; 8
    5e66:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    5e6a:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5e6e:	e1 50       	subi	r30, 0x01	; 1
    5e70:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5e74:	f0 e0       	ldi	r31, 0x00	; 0
    5e76:	ed 52       	subi	r30, 0x2D	; 45
    5e78:	fe 4d       	sbci	r31, 0xDE	; 222
    5e7a:	80 81       	ld	r24, Z
    5e7c:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5e80:	60 e0       	ldi	r22, 0x00	; 0
    5e82:	80 e0       	ldi	r24, 0x00	; 0
    5e84:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5e88:	89 e9       	ldi	r24, 0x99	; 153
    5e8a:	93 e1       	ldi	r25, 0x13	; 19
    5e8c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5e90:	60 e0       	ldi	r22, 0x00	; 0
    5e92:	81 e0       	ldi	r24, 0x01	; 1
    5e94:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5e98:	8c e8       	ldi	r24, 0x8C	; 140
    5e9a:	93 e1       	ldi	r25, 0x13	; 19
    5e9c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5ea0:	08 95       	ret
    5ea2:	84 e0       	ldi	r24, 0x04	; 4
    5ea4:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    5ea8:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5eac:	e1 50       	subi	r30, 0x01	; 1
    5eae:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5eb2:	f0 e0       	ldi	r31, 0x00	; 0
    5eb4:	ed 52       	subi	r30, 0x2D	; 45
    5eb6:	fe 4d       	sbci	r31, 0xDE	; 222
    5eb8:	80 81       	ld	r24, Z
    5eba:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5ebe:	60 e0       	ldi	r22, 0x00	; 0
    5ec0:	80 e0       	ldi	r24, 0x00	; 0
    5ec2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5ec6:	8f e7       	ldi	r24, 0x7F	; 127
    5ec8:	93 e1       	ldi	r25, 0x13	; 19
    5eca:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5ece:	60 e0       	ldi	r22, 0x00	; 0
    5ed0:	81 e0       	ldi	r24, 0x01	; 1
    5ed2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5ed6:	82 e7       	ldi	r24, 0x72	; 114
    5ed8:	93 e1       	ldi	r25, 0x13	; 19
    5eda:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5ede:	08 95       	ret
    5ee0:	82 e0       	ldi	r24, 0x02	; 2
    5ee2:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    5ee6:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5eea:	e1 50       	subi	r30, 0x01	; 1
    5eec:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5ef0:	f0 e0       	ldi	r31, 0x00	; 0
    5ef2:	ed 52       	subi	r30, 0x2D	; 45
    5ef4:	fe 4d       	sbci	r31, 0xDE	; 222
    5ef6:	80 81       	ld	r24, Z
    5ef8:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5efc:	60 e0       	ldi	r22, 0x00	; 0
    5efe:	80 e0       	ldi	r24, 0x00	; 0
    5f00:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5f04:	85 e6       	ldi	r24, 0x65	; 101
    5f06:	93 e1       	ldi	r25, 0x13	; 19
    5f08:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	81 e0       	ldi	r24, 0x01	; 1
    5f10:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5f14:	88 e5       	ldi	r24, 0x58	; 88
    5f16:	93 e1       	ldi	r25, 0x13	; 19
    5f18:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5f1c:	08 95       	ret
    5f1e:	80 e4       	ldi	r24, 0x40	; 64
    5f20:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    5f24:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <detergent_pump_sl>
    5f28:	e1 50       	subi	r30, 0x01	; 1
    5f2a:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <detergent_pump_sl>
    5f2e:	f0 e0       	ldi	r31, 0x00	; 0
    5f30:	ed 52       	subi	r30, 0x2D	; 45
    5f32:	fe 4d       	sbci	r31, 0xDE	; 222
    5f34:	80 81       	ld	r24, Z
    5f36:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <detergent_pump_dc>
    5f3a:	60 e0       	ldi	r22, 0x00	; 0
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    5f3e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5f42:	8b e4       	ldi	r24, 0x4B	; 75
    5f44:	93 e1       	ldi	r25, 0x13	; 19
    5f46:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5f4a:	60 e0       	ldi	r22, 0x00	; 0
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5f52:	8d e3       	ldi	r24, 0x3D	; 61
    5f54:	93 e1       	ldi	r25, 0x13	; 19
    5f56:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5f5a:	08 95       	ret

00005f5c <change_vacuum_state>:
    5f5c:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    5f60:	81 11       	cpse	r24, r1
    5f62:	50 c0       	rjmp	.+160    	; 0x6004 <change_vacuum_state+0xa8>
    5f64:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    5f68:	8a 3a       	cpi	r24, 0xAA	; 170
    5f6a:	09 f4       	brne	.+2      	; 0x5f6e <change_vacuum_state+0x12>
    5f6c:	4b c0       	rjmp	.+150    	; 0x6004 <change_vacuum_state+0xa8>
    5f6e:	80 91 91 22 	lds	r24, 0x2291	; 0x802291 <tank_full>
    5f72:	88 23       	and	r24, r24
    5f74:	49 f0       	breq	.+18     	; 0x5f88 <change_vacuum_state+0x2c>
    5f76:	80 e2       	ldi	r24, 0x20	; 32
    5f78:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5f7c:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <vacuum>
    5f80:	80 e4       	ldi	r24, 0x40	; 64
    5f82:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    5f86:	08 95       	ret
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <runtimer_on>
    5f8e:	80 e2       	ldi	r24, 0x20	; 32
    5f90:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    5f94:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <vacuum>
    5f98:	88 23       	and	r24, r24
    5f9a:	b1 f0       	breq	.+44     	; 0x5fc8 <change_vacuum_state+0x6c>
    5f9c:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <vacuum>
    5fa0:	80 e4       	ldi	r24, 0x40	; 64
    5fa2:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    5fa6:	60 e0       	ldi	r22, 0x00	; 0
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5fae:	80 e3       	ldi	r24, 0x30	; 48
    5fb0:	93 e1       	ldi	r25, 0x13	; 19
    5fb2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5fb6:	60 e0       	ldi	r22, 0x00	; 0
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5fbe:	83 e2       	ldi	r24, 0x23	; 35
    5fc0:	93 e1       	ldi	r25, 0x13	; 19
    5fc2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5fc6:	08 95       	ret
    5fc8:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    5fcc:	88 23       	and	r24, r24
    5fce:	21 f0       	breq	.+8      	; 0x5fd8 <change_vacuum_state+0x7c>
    5fd0:	8b e4       	ldi	r24, 0x4B	; 75
    5fd2:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
    5fd6:	03 c0       	rjmp	.+6      	; 0x5fde <change_vacuum_state+0x82>
    5fd8:	84 e6       	ldi	r24, 0x64	; 100
    5fda:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
    5fde:	80 e4       	ldi	r24, 0x40	; 64
    5fe0:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
    5fe4:	60 e0       	ldi	r22, 0x00	; 0
    5fe6:	80 e0       	ldi	r24, 0x00	; 0
    5fe8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5fec:	86 e1       	ldi	r24, 0x16	; 22
    5fee:	93 e1       	ldi	r25, 0x13	; 19
    5ff0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    5ff4:	60 e0       	ldi	r22, 0x00	; 0
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    5ffc:	89 e0       	ldi	r24, 0x09	; 9
    5ffe:	93 e1       	ldi	r25, 0x13	; 19
    6000:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6004:	08 95       	ret

00006006 <change_horn_state>:
    6006:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <horn>
    600a:	88 23       	and	r24, r24
    600c:	d9 f0       	breq	.+54     	; 0x6044 <change_horn_state+0x3e>
    600e:	10 92 c5 22 	sts	0x22C5, r1	; 0x8022c5 <horn>
    6012:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    6016:	81 11       	cpse	r24, r1
    6018:	10 c0       	rjmp	.+32     	; 0x603a <change_horn_state+0x34>
    601a:	60 e0       	ldi	r22, 0x00	; 0
    601c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6020:	8c ef       	ldi	r24, 0xFC	; 252
    6022:	92 e1       	ldi	r25, 0x12	; 18
    6024:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6028:	60 e0       	ldi	r22, 0x00	; 0
    602a:	81 e0       	ldi	r24, 0x01	; 1
    602c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6030:	8f ee       	ldi	r24, 0xEF	; 239
    6032:	92 e1       	ldi	r25, 0x12	; 18
    6034:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6038:	08 95       	ret
    603a:	82 ee       	ldi	r24, 0xE2	; 226
    603c:	92 e1       	ldi	r25, 0x12	; 18
    603e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    6042:	08 95       	ret
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <horn>
    604a:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    604e:	81 11       	cpse	r24, r1
    6050:	10 c0       	rjmp	.+32     	; 0x6072 <change_horn_state+0x6c>
    6052:	60 e0       	ldi	r22, 0x00	; 0
    6054:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6058:	85 ed       	ldi	r24, 0xD5	; 213
    605a:	92 e1       	ldi	r25, 0x12	; 18
    605c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6060:	60 e0       	ldi	r22, 0x00	; 0
    6062:	81 e0       	ldi	r24, 0x01	; 1
    6064:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6068:	88 ec       	ldi	r24, 0xC8	; 200
    606a:	92 e1       	ldi	r25, 0x12	; 18
    606c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6070:	08 95       	ret
    6072:	8b eb       	ldi	r24, 0xBB	; 187
    6074:	92 e1       	ldi	r25, 0x12	; 18
    6076:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    607a:	08 95       	ret

0000607c <change_headlights_state>:
    607c:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <headlights>
    6080:	88 23       	and	r24, r24
    6082:	f1 f0       	breq	.+60     	; 0x60c0 <change_headlights_state+0x44>
    6084:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <headlights>
    6088:	81 e0       	ldi	r24, 0x01	; 1
    608a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    608e:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    6092:	81 11       	cpse	r24, r1
    6094:	10 c0       	rjmp	.+32     	; 0x60b6 <change_headlights_state+0x3a>
    6096:	60 e0       	ldi	r22, 0x00	; 0
    6098:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    609c:	8e ea       	ldi	r24, 0xAE	; 174
    609e:	92 e1       	ldi	r25, 0x12	; 18
    60a0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    60a4:	60 e0       	ldi	r22, 0x00	; 0
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    60ac:	81 ea       	ldi	r24, 0xA1	; 161
    60ae:	92 e1       	ldi	r25, 0x12	; 18
    60b0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    60b4:	08 95       	ret
    60b6:	84 e9       	ldi	r24, 0x94	; 148
    60b8:	92 e1       	ldi	r25, 0x12	; 18
    60ba:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    60be:	08 95       	ret
    60c0:	81 e0       	ldi	r24, 0x01	; 1
    60c2:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <headlights>
    60c6:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    60ca:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    60ce:	81 11       	cpse	r24, r1
    60d0:	10 c0       	rjmp	.+32     	; 0x60f2 <change_headlights_state+0x76>
    60d2:	60 e0       	ldi	r22, 0x00	; 0
    60d4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    60d8:	87 e8       	ldi	r24, 0x87	; 135
    60da:	92 e1       	ldi	r25, 0x12	; 18
    60dc:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    60e0:	60 e0       	ldi	r22, 0x00	; 0
    60e2:	81 e0       	ldi	r24, 0x01	; 1
    60e4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    60e8:	8a e7       	ldi	r24, 0x7A	; 122
    60ea:	92 e1       	ldi	r25, 0x12	; 18
    60ec:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    60f0:	08 95       	ret
    60f2:	8d e6       	ldi	r24, 0x6D	; 109
    60f4:	92 e1       	ldi	r25, 0x12	; 18
    60f6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    60fa:	08 95       	ret

000060fc <change_solenoid_valve_state>:
    60fc:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <solenoid_valve>
    6100:	88 23       	and	r24, r24
    6102:	61 f0       	breq	.+24     	; 0x611c <change_solenoid_valve_state+0x20>
    6104:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    6108:	81 11       	cpse	r24, r1
    610a:	18 c0       	rjmp	.+48     	; 0x613c <change_solenoid_valve_state+0x40>
    610c:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <solenoid_valve>
    6110:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <solenoid_led>
    6114:	80 e8       	ldi	r24, 0x80	; 128
    6116:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    611a:	0c c0       	rjmp	.+24     	; 0x6134 <change_solenoid_valve_state+0x38>
    611c:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    6120:	81 11       	cpse	r24, r1
    6122:	0c c0       	rjmp	.+24     	; 0x613c <change_solenoid_valve_state+0x40>
    6124:	81 e0       	ldi	r24, 0x01	; 1
    6126:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <solenoid_valve>
    612a:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <solenoid_led>
    612e:	80 e8       	ldi	r24, 0x80	; 128
    6130:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    6134:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <water_pump>
    6138:	88 23       	and	r24, r24
    613a:	91 f0       	breq	.+36     	; 0x6160 <change_solenoid_valve_state+0x64>
    613c:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <solenoid_led>
    6140:	81 11       	cpse	r24, r1
    6142:	07 c0       	rjmp	.+14     	; 0x6152 <change_solenoid_valve_state+0x56>
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <solenoid_led>
    614a:	80 e8       	ldi	r24, 0x80	; 128
    614c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    6150:	08 95       	ret
    6152:	81 30       	cpi	r24, 0x01	; 1
    6154:	29 f4       	brne	.+10     	; 0x6160 <change_solenoid_valve_state+0x64>
    6156:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <solenoid_led>
    615a:	80 e8       	ldi	r24, 0x80	; 128
    615c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    6160:	08 95       	ret

00006162 <change_extra_pressure_state>:
 *
 */
void change_extra_pressure_state(void)
{
	//Do not perform button action if in reverse or idle mode
	if (is_reverse_transport() || motors_status == MOTORS_OFF)
    6162:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    6166:	81 11       	cpse	r24, r1
    6168:	34 c0       	rjmp	.+104    	; 0x61d2 <change_extra_pressure_state+0x70>
    616a:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    616e:	8a 3a       	cpi	r24, 0xAA	; 170
    6170:	81 f1       	breq	.+96     	; 0x61d2 <change_extra_pressure_state+0x70>
		return;

	if (extra_pressure)
    6172:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <extra_pressure>
    6176:	88 23       	and	r24, r24
    6178:	b1 f0       	breq	.+44     	; 0x61a6 <change_extra_pressure_state+0x44>
	{
		extra_pressure = OFF;
    617a:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <extra_pressure>
		L_EP_OFF;
    617e:	88 e0       	ldi	r24, 0x08	; 8
    6180:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
#if LCD_INFO
		lcd_set_cursor(0, 0);
    6184:	60 e0       	ldi	r22, 0x00	; 0
    6186:	80 e0       	ldi	r24, 0x00	; 0
    6188:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("EXTRA       "));
    618c:	80 e6       	ldi	r24, 0x60	; 96
    618e:	92 e1       	ldi	r25, 0x12	; 18
    6190:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(1, 0);
    6194:	60 e0       	ldi	r22, 0x00	; 0
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("PRESSURE OFF"));
    619c:	83 e5       	ldi	r24, 0x53	; 83
    619e:	92 e1       	ldi	r25, 0x12	; 18
    61a0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    61a4:	08 95       	ret
#endif
	}
	else
	{
		extra_pressure = ON;
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <extra_pressure>
		L_EP_ON;
    61ac:	88 e0       	ldi	r24, 0x08	; 8
    61ae:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
#if LCD_INFO
		lcd_set_cursor(0, 0);
    61b2:	60 e0       	ldi	r22, 0x00	; 0
    61b4:	80 e0       	ldi	r24, 0x00	; 0
    61b6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("EXTRA       "));
    61ba:	86 e4       	ldi	r24, 0x46	; 70
    61bc:	92 e1       	ldi	r25, 0x12	; 18
    61be:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(1, 0);
    61c2:	60 e0       	ldi	r22, 0x00	; 0
    61c4:	81 e0       	ldi	r24, 0x01	; 1
    61c6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("PRESSURE ON "));
    61ca:	89 e3       	ldi	r24, 0x39	; 57
    61cc:	92 e1       	ldi	r25, 0x12	; 18
    61ce:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    61d2:	08 95       	ret

000061d4 <change_brush_state>:
 *
 */
void change_brush_state(void)
{
	//Do not perform button action if in reverse or idle mode
	if (is_reverse_transport() || motors_status == MOTORS_OFF)
    61d4:	0e 94 67 29 	call	0x52ce	; 0x52ce <is_reverse_transport>
    61d8:	81 11       	cpse	r24, r1
    61da:	45 c0       	rjmp	.+138    	; 0x6266 <change_brush_state+0x92>
    61dc:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    61e0:	8a 3a       	cpi	r24, 0xAA	; 170
    61e2:	09 f4       	brne	.+2      	; 0x61e6 <change_brush_state+0x12>
    61e4:	40 c0       	rjmp	.+128    	; 0x6266 <change_brush_state+0x92>
		return;

	L_ATO_OFF;
    61e6:	80 e2       	ldi	r24, 0x20	; 32
    61e8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
	if (brush)
    61ec:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    61f0:	88 23       	and	r24, r24
    61f2:	c1 f0       	breq	.+48     	; 0x6224 <change_brush_state+0x50>
	{
		brush = OFF;
    61f4:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <brush>
		L_BR_OFF;
    61f8:	88 e0       	ldi	r24, 0x08	; 8
    61fa:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
		blink_brush_led = FALSE;
    61fe:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
#if LCD_INFO
		lcd_set_cursor(0, 0);
    6202:	60 e0       	ldi	r22, 0x00	; 0
    6204:	80 e0       	ldi	r24, 0x00	; 0
    6206:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("BRUSH OFF   "));
    620a:	8c e2       	ldi	r24, 0x2C	; 44
    620c:	92 e1       	ldi	r25, 0x12	; 18
    620e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(1, 0);
    6212:	60 e0       	ldi	r22, 0x00	; 0
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("            "));
    621a:	8f e1       	ldi	r24, 0x1F	; 31
    621c:	92 e1       	ldi	r25, 0x12	; 18
    621e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6222:	08 95       	ret
		/*log_event(BRUSH_OFF_EVENT);*/
#endif
	}
	else
	{
		if (eco_mode)
    6224:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    6228:	88 23       	and	r24, r24
    622a:	21 f0       	breq	.+8      	; 0x6234 <change_brush_state+0x60>
			brush = BRUSH_ON_ECO;
    622c:	8b e4       	ldi	r24, 0x4B	; 75
    622e:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
    6232:	03 c0       	rjmp	.+6      	; 0x623a <change_brush_state+0x66>
		else
			brush = BRUSH_ON;
    6234:	84 e6       	ldi	r24, 0x64	; 100
    6236:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>
		L_BR_ON;
    623a:	88 e0       	ldi	r24, 0x08	; 8
    623c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		blink_brush_led = TRUE;
    6240:	81 e0       	ldi	r24, 0x01	; 1
    6242:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <blink_brush_led>
#if LCD_INFO
		lcd_set_cursor(0, 0);
    6246:	60 e0       	ldi	r22, 0x00	; 0
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("BRUSH ON    "));
    624e:	82 e1       	ldi	r24, 0x12	; 18
    6250:	92 e1       	ldi	r25, 0x12	; 18
    6252:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(1, 0);
    6256:	60 e0       	ldi	r22, 0x00	; 0
    6258:	81 e0       	ldi	r24, 0x01	; 1
    625a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("            "));
    625e:	85 e0       	ldi	r24, 0x05	; 5
    6260:	92 e1       	ldi	r25, 0x12	; 18
    6262:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6266:	08 95       	ret

00006268 <change_speed>:
 *
 */
void change_speed(void)
{
	//Turn on auto mode light
	L_ATO_OFF;
    6268:	80 e2       	ldi	r24, 0x20	; 32
    626a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
	if (fr_speed == FAST)
    626e:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <fr_speed>
    6272:	81 30       	cpi	r24, 0x01	; 1
    6274:	41 f4       	brne	.+16     	; 0x6286 <change_speed+0x1e>
	{
		fr_speed = SLOW;
    6276:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <fr_speed>
		L_SLO_ON;
    627a:	80 e4       	ldi	r24, 0x40	; 64
    627c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		lcd_menu();
    6280:	0e 94 8d 33 	call	0x671a	; 0x671a <lcd_menu>
    6284:	08 95       	ret
	}
	else
	{
		fr_speed = FAST;
    6286:	81 e0       	ldi	r24, 0x01	; 1
    6288:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <fr_speed>
		L_SLO_OFF;
    628c:	80 e4       	ldi	r24, 0x40	; 64
    628e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
		lcd_menu();
    6292:	0e 94 8d 33 	call	0x671a	; 0x671a <lcd_menu>
    6296:	08 95       	ret

00006298 <change_eco_mode>:
	}
}

void change_eco_mode(void)
{
    6298:	cf 93       	push	r28
    629a:	df 93       	push	r29
    629c:	1f 92       	push	r1
    629e:	cd b7       	in	r28, 0x3d	; 61
    62a0:	de b7       	in	r29, 0x3e	; 62
	if (motors_status == MOTORS_OFF)
    62a2:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    62a6:	8a 3a       	cpi	r24, 0xAA	; 170
    62a8:	09 f4       	brne	.+2      	; 0x62ac <change_eco_mode+0x14>
    62aa:	73 c0       	rjmp	.+230    	; 0x6392 <change_eco_mode+0xfa>
		return;
	eco_mode = !eco_mode;
    62ac:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <eco_mode>
    62b0:	91 e0       	ldi	r25, 0x01	; 1
    62b2:	81 11       	cpse	r24, r1
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <eco_mode>
	if (eco_mode)
    62ba:	81 11       	cpse	r24, r1
    62bc:	36 c0       	rjmp	.+108    	; 0x632a <change_eco_mode+0x92>
	{
		L_ECO_ON;
    62be:	81 e0       	ldi	r24, 0x01	; 1
    62c0:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
#if LCD_INFO
		lcd_set_cursor(0, 0);
    62c4:	60 e0       	ldi	r22, 0x00	; 0
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("ECO ON      "));
    62cc:	88 ef       	ldi	r24, 0xF8	; 248
    62ce:	91 e1       	ldi	r25, 0x11	; 17
    62d0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(1, 0);
    62d4:	60 e0       	ldi	r22, 0x00	; 0
    62d6:	81 e0       	ldi	r24, 0x01	; 1
    62d8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("            "));
    62dc:	8b ee       	ldi	r24, 0xEB	; 235
    62de:	91 e1       	ldi	r25, 0x11	; 17
    62e0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
#endif

		if (vacuum == VAC_ON)
    62e4:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <vacuum>
    62e8:	84 36       	cpi	r24, 0x64	; 100
    62ea:	19 f4       	brne	.+6      	; 0x62f2 <change_eco_mode+0x5a>
			vacuum = VAC_ON_ECO;
    62ec:	8b e4       	ldi	r24, 0x4B	; 75
    62ee:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
		if (brush == BRUSH_ON)
    62f2:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    62f6:	84 36       	cpi	r24, 0x64	; 100
    62f8:	19 f4       	brne	.+6      	; 0x6300 <change_eco_mode+0x68>
			brush = BRUSH_ON_ECO;
    62fa:	8b e4       	ldi	r24, 0x4B	; 75
    62fc:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>

		uint8_t message[1] = { ON };
    6300:	81 e0       	ldi	r24, 0x01	; 1
    6302:	89 83       	std	Y+1, r24	; 0x01
		transmit_CAN(ECO_CAN, 0, 1, message);
    6304:	9e 01       	movw	r18, r28
    6306:	2f 5f       	subi	r18, 0xFF	; 255
    6308:	3f 4f       	sbci	r19, 0xFF	; 255
    630a:	41 e0       	ldi	r20, 0x01	; 1
    630c:	60 e0       	ldi	r22, 0x00	; 0
    630e:	80 e4       	ldi	r24, 0x40	; 64
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    6316:	2f ef       	ldi	r18, 0xFF	; 255
    6318:	89 ef       	ldi	r24, 0xF9	; 249
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	21 50       	subi	r18, 0x01	; 1
    631e:	80 40       	sbci	r24, 0x00	; 0
    6320:	90 40       	sbci	r25, 0x00	; 0
    6322:	e1 f7       	brne	.-8      	; 0x631c <change_eco_mode+0x84>
    6324:	00 c0       	rjmp	.+0      	; 0x6326 <change_eco_mode+0x8e>
    6326:	00 00       	nop
    6328:	34 c0       	rjmp	.+104    	; 0x6392 <change_eco_mode+0xfa>
		_delay_ms(10);
	}
	else
	{
		L_ECO_OFF;
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
#if LCD_INFO
		lcd_set_cursor(0, 0);
    6330:	60 e0       	ldi	r22, 0x00	; 0
    6332:	80 e0       	ldi	r24, 0x00	; 0
    6334:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("ECO OFF     "));
    6338:	8e ed       	ldi	r24, 0xDE	; 222
    633a:	91 e1       	ldi	r25, 0x11	; 17
    633c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(1, 0);
    6340:	60 e0       	ldi	r22, 0x00	; 0
    6342:	81 e0       	ldi	r24, 0x01	; 1
    6344:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("            "));
    6348:	81 ed       	ldi	r24, 0xD1	; 209
    634a:	91 e1       	ldi	r25, 0x11	; 17
    634c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
#endif

		if (vacuum == VAC_ON_ECO)
    6350:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <vacuum>
    6354:	8b 34       	cpi	r24, 0x4B	; 75
    6356:	19 f4       	brne	.+6      	; 0x635e <change_eco_mode+0xc6>
			vacuum = VAC_ON;
    6358:	84 e6       	ldi	r24, 0x64	; 100
    635a:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <vacuum>
		if (brush == BRUSH_ON_ECO)
    635e:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <brush>
    6362:	8b 34       	cpi	r24, 0x4B	; 75
    6364:	19 f4       	brne	.+6      	; 0x636c <change_eco_mode+0xd4>
			brush = BRUSH_ON;
    6366:	84 e6       	ldi	r24, 0x64	; 100
    6368:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <brush>

		uint8_t message[1] = { OFF };
    636c:	19 82       	std	Y+1, r1	; 0x01
		transmit_CAN(ECO_CAN, 0, 1, message);
    636e:	9e 01       	movw	r18, r28
    6370:	2f 5f       	subi	r18, 0xFF	; 255
    6372:	3f 4f       	sbci	r19, 0xFF	; 255
    6374:	41 e0       	ldi	r20, 0x01	; 1
    6376:	60 e0       	ldi	r22, 0x00	; 0
    6378:	80 e4       	ldi	r24, 0x40	; 64
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    6380:	2f ef       	ldi	r18, 0xFF	; 255
    6382:	89 ef       	ldi	r24, 0xF9	; 249
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	21 50       	subi	r18, 0x01	; 1
    6388:	80 40       	sbci	r24, 0x00	; 0
    638a:	90 40       	sbci	r25, 0x00	; 0
    638c:	e1 f7       	brne	.-8      	; 0x6386 <change_eco_mode+0xee>
    638e:	00 c0       	rjmp	.+0      	; 0x6390 <change_eco_mode+0xf8>
    6390:	00 00       	nop
		_delay_ms(10);
	}
}
    6392:	0f 90       	pop	r0
    6394:	df 91       	pop	r29
    6396:	cf 91       	pop	r28
    6398:	08 95       	ret

0000639a <turn_off_motors>:

//Turn off motors if zero percent battery is reached
//Save this state to EEPROM so RB800 must be fully charged before continuing operation
void turn_off_motors(void)
{
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
	L_P1_OFF; L_P2_OFF; L_P3_OFF; L_P4_OFF; L_P5_OFF; water_pump = OFF;
    639e:	45 e2       	ldi	r20, 0x25	; 37
    63a0:	57 e0       	ldi	r21, 0x07	; 7
    63a2:	80 e4       	ldi	r24, 0x40	; 64
    63a4:	ea 01       	movw	r28, r20
    63a6:	88 83       	st	Y, r24
    63a8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    63ac:	a5 e2       	ldi	r26, 0x25	; 37
    63ae:	b6 e0       	ldi	r27, 0x06	; 6
    63b0:	90 e1       	ldi	r25, 0x10	; 16
    63b2:	9c 93       	st	X, r25
    63b4:	34 e0       	ldi	r19, 0x04	; 4
    63b6:	3c 93       	st	X, r19
    63b8:	22 e0       	ldi	r18, 0x02	; 2
    63ba:	2c 93       	st	X, r18
    63bc:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <water_pump>
	L_D1_OFF; L_D2_OFF; L_D3_OFF; L_D4_OFF; L_D5_OFF; detergent_pump = OFF;
    63c0:	e5 e0       	ldi	r30, 0x05	; 5
    63c2:	f7 e0       	ldi	r31, 0x07	; 7
    63c4:	90 83       	st	Z, r25
    63c6:	98 e0       	ldi	r25, 0x08	; 8
    63c8:	90 83       	st	Z, r25
    63ca:	30 83       	st	Z, r19
    63cc:	20 83       	st	Z, r18
    63ce:	25 ee       	ldi	r18, 0xE5	; 229
    63d0:	36 e0       	ldi	r19, 0x06	; 6
    63d2:	e9 01       	movw	r28, r18
    63d4:	88 83       	st	Y, r24
    63d6:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <detergent_pump>
	L_BR_OFF; brush = OFF; blink_brush_led = FALSE;
    63da:	ea 01       	movw	r28, r20
    63dc:	98 83       	st	Y, r25
    63de:	10 92 b0 22 	sts	0x22B0, r1	; 0x8022b0 <brush>
    63e2:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <blink_brush_led>
	extra_pressure = OFF; L_EP_OFF;
    63e6:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <extra_pressure>
    63ea:	e9 01       	movw	r28, r18
    63ec:	98 83       	st	Y, r25
	L_VAC_OFF; vacuum = OFF; blink_vac_led = OFF;
    63ee:	80 83       	st	Z, r24
    63f0:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <vacuum>
    63f4:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <blink_vac_led>
	L_ATO_OFF;
    63f8:	80 e2       	ldi	r24, 0x20	; 32
    63fa:	fa 01       	movw	r30, r20
    63fc:	80 83       	st	Z, r24
	L_SLD_OFF;solenoid_valve = OFF;
    63fe:	80 e8       	ldi	r24, 0x80	; 128
    6400:	8c 93       	st	X, r24
    6402:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <solenoid_valve>
	update_A2_settings();
    6406:	0e 94 c5 1c 	call	0x398a	; 0x398a <update_A2_settings>
}
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	08 95       	ret

00006410 <initialize_Screen>:

	m[0] = custom_char_addr;
	m[1] = '\0';

	lcd_write(m);
}
    6410:	cf 93       	push	r28
    6412:	df 93       	push	r29
    6414:	cd b7       	in	r28, 0x3d	; 61
    6416:	de b7       	in	r29, 0x3e	; 62
    6418:	2a 97       	sbiw	r28, 0x0a	; 10
    641a:	cd bf       	out	0x3d, r28	; 61
    641c:	de bf       	out	0x3e, r29	; 62
    641e:	19 82       	std	Y+1, r1	; 0x01
    6420:	88 e3       	ldi	r24, 0x38	; 56
    6422:	8a 83       	std	Y+2, r24	; 0x02
    6424:	22 e0       	ldi	r18, 0x02	; 2
    6426:	ae 01       	movw	r20, r28
    6428:	4f 5f       	subi	r20, 0xFF	; 255
    642a:	5f 4f       	sbci	r21, 0xFF	; 255
    642c:	6c e3       	ldi	r22, 0x3C	; 60
    642e:	86 ef       	ldi	r24, 0xF6	; 246
    6430:	91 e2       	ldi	r25, 0x21	; 33
    6432:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6436:	19 82       	std	Y+1, r1	; 0x01
    6438:	89 e3       	ldi	r24, 0x39	; 57
    643a:	8a 83       	std	Y+2, r24	; 0x02
    643c:	22 e0       	ldi	r18, 0x02	; 2
    643e:	ae 01       	movw	r20, r28
    6440:	4f 5f       	subi	r20, 0xFF	; 255
    6442:	5f 4f       	sbci	r21, 0xFF	; 255
    6444:	6c e3       	ldi	r22, 0x3C	; 60
    6446:	86 ef       	ldi	r24, 0xF6	; 246
    6448:	91 e2       	ldi	r25, 0x21	; 33
    644a:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    644e:	19 82       	std	Y+1, r1	; 0x01
    6450:	84 e1       	ldi	r24, 0x14	; 20
    6452:	8a 83       	std	Y+2, r24	; 0x02
    6454:	80 e7       	ldi	r24, 0x70	; 112
    6456:	8b 83       	std	Y+3, r24	; 0x03
    6458:	8e e5       	ldi	r24, 0x5E	; 94
    645a:	8c 83       	std	Y+4, r24	; 0x04
    645c:	8d e6       	ldi	r24, 0x6D	; 109
    645e:	8d 83       	std	Y+5, r24	; 0x05
    6460:	25 e0       	ldi	r18, 0x05	; 5
    6462:	ae 01       	movw	r20, r28
    6464:	4f 5f       	subi	r20, 0xFF	; 255
    6466:	5f 4f       	sbci	r21, 0xFF	; 255
    6468:	6c e3       	ldi	r22, 0x3C	; 60
    646a:	86 ef       	ldi	r24, 0xF6	; 246
    646c:	91 e2       	ldi	r25, 0x21	; 33
    646e:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6472:	19 82       	std	Y+1, r1	; 0x01
    6474:	8c e0       	ldi	r24, 0x0C	; 12
    6476:	8a 83       	std	Y+2, r24	; 0x02
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	8b 83       	std	Y+3, r24	; 0x03
    647c:	86 e0       	ldi	r24, 0x06	; 6
    647e:	8c 83       	std	Y+4, r24	; 0x04
    6480:	24 e0       	ldi	r18, 0x04	; 4
    6482:	ae 01       	movw	r20, r28
    6484:	4f 5f       	subi	r20, 0xFF	; 255
    6486:	5f 4f       	sbci	r21, 0xFF	; 255
    6488:	6c e3       	ldi	r22, 0x3C	; 60
    648a:	86 ef       	ldi	r24, 0xF6	; 246
    648c:	91 e2       	ldi	r25, 0x21	; 33
    648e:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6492:	2a 96       	adiw	r28, 0x0a	; 10
    6494:	cd bf       	out	0x3d, r28	; 61
    6496:	de bf       	out	0x3e, r29	; 62
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	08 95       	ret

0000649e <lcd_write>:
    649e:	0f 93       	push	r16
    64a0:	1f 93       	push	r17
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
    64a6:	cd b7       	in	r28, 0x3d	; 61
    64a8:	de b7       	in	r29, 0x3e	; 62
    64aa:	0d b7       	in	r16, 0x3d	; 61
    64ac:	1e b7       	in	r17, 0x3e	; 62
    64ae:	fc 01       	movw	r30, r24
    64b0:	01 90       	ld	r0, Z+
    64b2:	00 20       	and	r0, r0
    64b4:	e9 f7       	brne	.-6      	; 0x64b0 <lcd_write+0x12>
    64b6:	31 97       	sbiw	r30, 0x01	; 1
    64b8:	bf 01       	movw	r22, r30
    64ba:	68 1b       	sub	r22, r24
    64bc:	79 0b       	sbc	r23, r25
    64be:	36 2f       	mov	r19, r22
    64c0:	ab 01       	movw	r20, r22
    64c2:	55 27       	eor	r21, r21
    64c4:	4d 5f       	subi	r20, 0xFD	; 253
    64c6:	5f 4f       	sbci	r21, 0xFF	; 255
    64c8:	ed b7       	in	r30, 0x3d	; 61
    64ca:	fe b7       	in	r31, 0x3e	; 62
    64cc:	e4 1b       	sub	r30, r20
    64ce:	f5 0b       	sbc	r31, r21
    64d0:	ed bf       	out	0x3d, r30	; 61
    64d2:	fe bf       	out	0x3e, r31	; 62
    64d4:	4d b7       	in	r20, 0x3d	; 61
    64d6:	5e b7       	in	r21, 0x3e	; 62
    64d8:	4f 5f       	subi	r20, 0xFF	; 255
    64da:	5f 4f       	sbci	r21, 0xFF	; 255
    64dc:	20 e4       	ldi	r18, 0x40	; 64
    64de:	21 83       	std	Z+1, r18	; 0x01
    64e0:	66 23       	and	r22, r22
    64e2:	49 f0       	breq	.+18     	; 0x64f6 <lcd_write+0x58>
    64e4:	fc 01       	movw	r30, r24
    64e6:	da 01       	movw	r26, r20
    64e8:	11 96       	adiw	r26, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	81 91       	ld	r24, Z+
    64ee:	8d 93       	st	X+, r24
    64f0:	9f 5f       	subi	r25, 0xFF	; 255
    64f2:	39 13       	cpse	r19, r25
    64f4:	fb cf       	rjmp	.-10     	; 0x64ec <lcd_write+0x4e>
    64f6:	21 e0       	ldi	r18, 0x01	; 1
    64f8:	26 0f       	add	r18, r22
    64fa:	6c e3       	ldi	r22, 0x3C	; 60
    64fc:	86 ef       	ldi	r24, 0xF6	; 246
    64fe:	91 e2       	ldi	r25, 0x21	; 33
    6500:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6504:	0d bf       	out	0x3d, r16	; 61
    6506:	1e bf       	out	0x3e, r17	; 62
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	1f 91       	pop	r17
    650e:	0f 91       	pop	r16
    6510:	08 95       	ret

00006512 <lcd_write_P>:
    6512:	cf 93       	push	r28
    6514:	df 93       	push	r29
    6516:	cd b7       	in	r28, 0x3d	; 61
    6518:	de b7       	in	r29, 0x3e	; 62
    651a:	68 97       	sbiw	r28, 0x18	; 24
    651c:	cd bf       	out	0x3d, r28	; 61
    651e:	de bf       	out	0x3e, r29	; 62
    6520:	20 e4       	ldi	r18, 0x40	; 64
    6522:	29 83       	std	Y+1, r18	; 0x01
    6524:	fc 01       	movw	r30, r24
    6526:	24 91       	lpm	r18, Z
    6528:	2a 83       	std	Y+2, r18	; 0x02
    652a:	22 23       	and	r18, r18
    652c:	69 f0       	breq	.+26     	; 0x6548 <lcd_write_P+0x36>
    652e:	31 96       	adiw	r30, 0x01	; 1
    6530:	de 01       	movw	r26, r28
    6532:	13 96       	adiw	r26, 0x03	; 3
    6534:	21 e0       	ldi	r18, 0x01	; 1
    6536:	84 91       	lpm	r24, Z
    6538:	8d 93       	st	X+, r24
    653a:	88 23       	and	r24, r24
    653c:	31 f0       	breq	.+12     	; 0x654a <lcd_write_P+0x38>
    653e:	2f 5f       	subi	r18, 0xFF	; 255
    6540:	31 96       	adiw	r30, 0x01	; 1
    6542:	25 31       	cpi	r18, 0x15	; 21
    6544:	c1 f7       	brne	.-16     	; 0x6536 <lcd_write_P+0x24>
    6546:	01 c0       	rjmp	.+2      	; 0x654a <lcd_write_P+0x38>
    6548:	20 e0       	ldi	r18, 0x00	; 0
    654a:	2e 5f       	subi	r18, 0xFE	; 254
    654c:	ae 01       	movw	r20, r28
    654e:	4f 5f       	subi	r20, 0xFF	; 255
    6550:	5f 4f       	sbci	r21, 0xFF	; 255
    6552:	6c e3       	ldi	r22, 0x3C	; 60
    6554:	86 ef       	ldi	r24, 0xF6	; 246
    6556:	91 e2       	ldi	r25, 0x21	; 33
    6558:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    655c:	68 96       	adiw	r28, 0x18	; 24
    655e:	cd bf       	out	0x3d, r28	; 61
    6560:	de bf       	out	0x3e, r29	; 62
    6562:	df 91       	pop	r29
    6564:	cf 91       	pop	r28
    6566:	08 95       	ret

00006568 <lcd_set_cursor>:
    6568:	cf 93       	push	r28
    656a:	df 93       	push	r29
    656c:	00 d0       	rcall	.+0      	; 0x656e <lcd_set_cursor+0x6>
    656e:	1f 92       	push	r1
    6570:	cd b7       	in	r28, 0x3d	; 61
    6572:	de b7       	in	r29, 0x3e	; 62
    6574:	90 e8       	ldi	r25, 0x80	; 128
    6576:	99 83       	std	Y+1, r25	; 0x01
    6578:	90 e4       	ldi	r25, 0x40	; 64
    657a:	89 9f       	mul	r24, r25
    657c:	60 0d       	add	r22, r0
    657e:	11 24       	eor	r1, r1
    6580:	60 58       	subi	r22, 0x80	; 128
    6582:	6a 83       	std	Y+2, r22	; 0x02
    6584:	22 e0       	ldi	r18, 0x02	; 2
    6586:	ae 01       	movw	r20, r28
    6588:	4f 5f       	subi	r20, 0xFF	; 255
    658a:	5f 4f       	sbci	r21, 0xFF	; 255
    658c:	6c e3       	ldi	r22, 0x3C	; 60
    658e:	86 ef       	ldi	r24, 0xF6	; 246
    6590:	91 e2       	ldi	r25, 0x21	; 33
    6592:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6596:	23 96       	adiw	r28, 0x03	; 3
    6598:	cd bf       	out	0x3d, r28	; 61
    659a:	de bf       	out	0x3e, r29	; 62
    659c:	df 91       	pop	r29
    659e:	cf 91       	pop	r28
    65a0:	08 95       	ret

000065a2 <lcd_clear_screen>:
    65a2:	cf 93       	push	r28
    65a4:	df 93       	push	r29
    65a6:	00 d0       	rcall	.+0      	; 0x65a8 <lcd_clear_screen+0x6>
    65a8:	00 d0       	rcall	.+0      	; 0x65aa <lcd_clear_screen+0x8>
    65aa:	cd b7       	in	r28, 0x3d	; 61
    65ac:	de b7       	in	r29, 0x3e	; 62
    65ae:	19 82       	std	Y+1, r1	; 0x01
    65b0:	81 e0       	ldi	r24, 0x01	; 1
    65b2:	8a 83       	std	Y+2, r24	; 0x02
    65b4:	86 e0       	ldi	r24, 0x06	; 6
    65b6:	8b 83       	std	Y+3, r24	; 0x03
    65b8:	23 e0       	ldi	r18, 0x03	; 3
    65ba:	ae 01       	movw	r20, r28
    65bc:	4f 5f       	subi	r20, 0xFF	; 255
    65be:	5f 4f       	sbci	r21, 0xFF	; 255
    65c0:	6c e3       	ldi	r22, 0x3C	; 60
    65c2:	86 ef       	ldi	r24, 0xF6	; 246
    65c4:	91 e2       	ldi	r25, 0x21	; 33
    65c6:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    65ca:	24 96       	adiw	r28, 0x04	; 4
    65cc:	cd bf       	out	0x3d, r28	; 61
    65ce:	de bf       	out	0x3e, r29	; 62
    65d0:	df 91       	pop	r29
    65d2:	cf 91       	pop	r28
    65d4:	08 95       	ret

000065d6 <lcd_write_new>:
    65d6:	ef 92       	push	r14
    65d8:	ff 92       	push	r15
    65da:	0f 93       	push	r16
    65dc:	1f 93       	push	r17
    65de:	cf 93       	push	r28
    65e0:	df 93       	push	r29
    65e2:	cd b7       	in	r28, 0x3d	; 61
    65e4:	de b7       	in	r29, 0x3e	; 62
    65e6:	8c 01       	movw	r16, r24
    65e8:	ed b6       	in	r14, 0x3d	; 61
    65ea:	fe b6       	in	r15, 0x3e	; 62
    65ec:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <lcd_clear_screen>
    65f0:	f8 01       	movw	r30, r16
    65f2:	01 90       	ld	r0, Z+
    65f4:	00 20       	and	r0, r0
    65f6:	e9 f7       	brne	.-6      	; 0x65f2 <lcd_write_new+0x1c>
    65f8:	31 97       	sbiw	r30, 0x01	; 1
    65fa:	bf 01       	movw	r22, r30
    65fc:	60 1b       	sub	r22, r16
    65fe:	71 0b       	sbc	r23, r17
    6600:	36 2f       	mov	r19, r22
    6602:	cb 01       	movw	r24, r22
    6604:	99 27       	eor	r25, r25
    6606:	03 96       	adiw	r24, 0x03	; 3
    6608:	4d b7       	in	r20, 0x3d	; 61
    660a:	5e b7       	in	r21, 0x3e	; 62
    660c:	48 1b       	sub	r20, r24
    660e:	59 0b       	sbc	r21, r25
    6610:	4d bf       	out	0x3d, r20	; 61
    6612:	5e bf       	out	0x3e, r21	; 62
    6614:	4f 5f       	subi	r20, 0xFF	; 255
    6616:	5f 4f       	sbci	r21, 0xFF	; 255
    6618:	80 e4       	ldi	r24, 0x40	; 64
    661a:	ed b7       	in	r30, 0x3d	; 61
    661c:	fe b7       	in	r31, 0x3e	; 62
    661e:	81 83       	std	Z+1, r24	; 0x01
    6620:	66 23       	and	r22, r22
    6622:	49 f0       	breq	.+18     	; 0x6636 <lcd_write_new+0x60>
    6624:	f8 01       	movw	r30, r16
    6626:	da 01       	movw	r26, r20
    6628:	11 96       	adiw	r26, 0x01	; 1
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	81 91       	ld	r24, Z+
    662e:	8d 93       	st	X+, r24
    6630:	9f 5f       	subi	r25, 0xFF	; 255
    6632:	39 13       	cpse	r19, r25
    6634:	fb cf       	rjmp	.-10     	; 0x662c <lcd_write_new+0x56>
    6636:	21 e0       	ldi	r18, 0x01	; 1
    6638:	26 0f       	add	r18, r22
    663a:	6c e3       	ldi	r22, 0x3C	; 60
    663c:	86 ef       	ldi	r24, 0xF6	; 246
    663e:	91 e2       	ldi	r25, 0x21	; 33
    6640:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6644:	ed be       	out	0x3d, r14	; 61
    6646:	fe be       	out	0x3e, r15	; 62
    6648:	df 91       	pop	r29
    664a:	cf 91       	pop	r28
    664c:	1f 91       	pop	r17
    664e:	0f 91       	pop	r16
    6650:	ff 90       	pop	r15
    6652:	ef 90       	pop	r14
    6654:	08 95       	ret

00006656 <lcd_write_new_P>:
    6656:	0f 93       	push	r16
    6658:	1f 93       	push	r17
    665a:	cf 93       	push	r28
    665c:	df 93       	push	r29
    665e:	cd b7       	in	r28, 0x3d	; 61
    6660:	de b7       	in	r29, 0x3e	; 62
    6662:	68 97       	sbiw	r28, 0x18	; 24
    6664:	cd bf       	out	0x3d, r28	; 61
    6666:	de bf       	out	0x3e, r29	; 62
    6668:	8c 01       	movw	r16, r24
    666a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <lcd_clear_screen>
    666e:	80 e4       	ldi	r24, 0x40	; 64
    6670:	89 83       	std	Y+1, r24	; 0x01
    6672:	f8 01       	movw	r30, r16
    6674:	84 91       	lpm	r24, Z
    6676:	8a 83       	std	Y+2, r24	; 0x02
    6678:	88 23       	and	r24, r24
    667a:	69 f0       	breq	.+26     	; 0x6696 <lcd_write_new_P+0x40>
    667c:	31 96       	adiw	r30, 0x01	; 1
    667e:	de 01       	movw	r26, r28
    6680:	13 96       	adiw	r26, 0x03	; 3
    6682:	21 e0       	ldi	r18, 0x01	; 1
    6684:	84 91       	lpm	r24, Z
    6686:	8d 93       	st	X+, r24
    6688:	88 23       	and	r24, r24
    668a:	31 f0       	breq	.+12     	; 0x6698 <lcd_write_new_P+0x42>
    668c:	2f 5f       	subi	r18, 0xFF	; 255
    668e:	31 96       	adiw	r30, 0x01	; 1
    6690:	25 31       	cpi	r18, 0x15	; 21
    6692:	c1 f7       	brne	.-16     	; 0x6684 <lcd_write_new_P+0x2e>
    6694:	01 c0       	rjmp	.+2      	; 0x6698 <lcd_write_new_P+0x42>
    6696:	20 e0       	ldi	r18, 0x00	; 0
    6698:	2f 5f       	subi	r18, 0xFF	; 255
    669a:	ae 01       	movw	r20, r28
    669c:	4f 5f       	subi	r20, 0xFF	; 255
    669e:	5f 4f       	sbci	r21, 0xFF	; 255
    66a0:	6c e3       	ldi	r22, 0x3C	; 60
    66a2:	86 ef       	ldi	r24, 0xF6	; 246
    66a4:	91 e2       	ldi	r25, 0x21	; 33
    66a6:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    66aa:	68 96       	adiw	r28, 0x18	; 24
    66ac:	cd bf       	out	0x3d, r28	; 61
    66ae:	de bf       	out	0x3e, r29	; 62
    66b0:	df 91       	pop	r29
    66b2:	cf 91       	pop	r28
    66b4:	1f 91       	pop	r17
    66b6:	0f 91       	pop	r16
    66b8:	08 95       	ret

000066ba <lcd_cursor_on>:
    66ba:	cf 93       	push	r28
    66bc:	df 93       	push	r29
    66be:	00 d0       	rcall	.+0      	; 0x66c0 <lcd_cursor_on+0x6>
    66c0:	1f 92       	push	r1
    66c2:	cd b7       	in	r28, 0x3d	; 61
    66c4:	de b7       	in	r29, 0x3e	; 62
    66c6:	19 82       	std	Y+1, r1	; 0x01
    66c8:	8e e0       	ldi	r24, 0x0E	; 14
    66ca:	8a 83       	std	Y+2, r24	; 0x02
    66cc:	22 e0       	ldi	r18, 0x02	; 2
    66ce:	ae 01       	movw	r20, r28
    66d0:	4f 5f       	subi	r20, 0xFF	; 255
    66d2:	5f 4f       	sbci	r21, 0xFF	; 255
    66d4:	6c e3       	ldi	r22, 0x3C	; 60
    66d6:	86 ef       	ldi	r24, 0xF6	; 246
    66d8:	91 e2       	ldi	r25, 0x21	; 33
    66da:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    66de:	23 96       	adiw	r28, 0x03	; 3
    66e0:	cd bf       	out	0x3d, r28	; 61
    66e2:	de bf       	out	0x3e, r29	; 62
    66e4:	df 91       	pop	r29
    66e6:	cf 91       	pop	r28
    66e8:	08 95       	ret

000066ea <lcd_cursor_off>:
    66ea:	cf 93       	push	r28
    66ec:	df 93       	push	r29
    66ee:	00 d0       	rcall	.+0      	; 0x66f0 <lcd_cursor_off+0x6>
    66f0:	1f 92       	push	r1
    66f2:	cd b7       	in	r28, 0x3d	; 61
    66f4:	de b7       	in	r29, 0x3e	; 62
    66f6:	19 82       	std	Y+1, r1	; 0x01
    66f8:	8c e0       	ldi	r24, 0x0C	; 12
    66fa:	8a 83       	std	Y+2, r24	; 0x02
    66fc:	22 e0       	ldi	r18, 0x02	; 2
    66fe:	ae 01       	movw	r20, r28
    6700:	4f 5f       	subi	r20, 0xFF	; 255
    6702:	5f 4f       	sbci	r21, 0xFF	; 255
    6704:	6c e3       	ldi	r22, 0x3C	; 60
    6706:	86 ef       	ldi	r24, 0xF6	; 246
    6708:	91 e2       	ldi	r25, 0x21	; 33
    670a:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    670e:	23 96       	adiw	r28, 0x03	; 3
    6710:	cd bf       	out	0x3d, r28	; 61
    6712:	de bf       	out	0x3e, r29	; 62
    6714:	df 91       	pop	r29
    6716:	cf 91       	pop	r28
    6718:	08 95       	ret

0000671a <lcd_menu>:
    671a:	cf 93       	push	r28
    671c:	df 93       	push	r29
    671e:	cd b7       	in	r28, 0x3d	; 61
    6720:	de b7       	in	r29, 0x3e	; 62
    6722:	2b 97       	sbiw	r28, 0x0b	; 11
    6724:	cd bf       	out	0x3d, r28	; 61
    6726:	de bf       	out	0x3e, r29	; 62
    6728:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <lcd_clear_screen>
    672c:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <extra_pressure>
    6730:	81 30       	cpi	r24, 0x01	; 1
    6732:	89 f4       	brne	.+34     	; 0x6756 <lcd_menu+0x3c>
    6734:	60 e0       	ldi	r22, 0x00	; 0
    6736:	80 e0       	ldi	r24, 0x00	; 0
    6738:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    673c:	80 e7       	ldi	r24, 0x70	; 112
    673e:	96 e1       	ldi	r25, 0x16	; 22
    6740:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6744:	60 e0       	ldi	r22, 0x00	; 0
    6746:	81 e0       	ldi	r24, 0x01	; 1
    6748:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    674c:	83 e6       	ldi	r24, 0x63	; 99
    674e:	96 e1       	ldi	r25, 0x16	; 22
    6750:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6754:	43 c0       	rjmp	.+134    	; 0x67dc <lcd_menu+0xc2>
    6756:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <horn>
    675a:	81 30       	cpi	r24, 0x01	; 1
    675c:	89 f4       	brne	.+34     	; 0x6780 <lcd_menu+0x66>
    675e:	60 e0       	ldi	r22, 0x00	; 0
    6760:	80 e0       	ldi	r24, 0x00	; 0
    6762:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6766:	86 e5       	ldi	r24, 0x56	; 86
    6768:	96 e1       	ldi	r25, 0x16	; 22
    676a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    676e:	60 e0       	ldi	r22, 0x00	; 0
    6770:	81 e0       	ldi	r24, 0x01	; 1
    6772:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6776:	89 e4       	ldi	r24, 0x49	; 73
    6778:	96 e1       	ldi	r25, 0x16	; 22
    677a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    677e:	2e c0       	rjmp	.+92     	; 0x67dc <lcd_menu+0xc2>
    6780:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <fr_speed>
    6784:	81 11       	cpse	r24, r1
    6786:	05 c0       	rjmp	.+10     	; 0x6792 <lcd_menu+0x78>
    6788:	84 e4       	ldi	r24, 0x44	; 68
    678a:	96 e1       	ldi	r25, 0x16	; 22
    678c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    6790:	08 c0       	rjmp	.+16     	; 0x67a2 <lcd_menu+0x88>
    6792:	60 e0       	ldi	r22, 0x00	; 0
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    679a:	8f e3       	ldi	r24, 0x3F	; 63
    679c:	96 e1       	ldi	r25, 0x16	; 22
    679e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    67a2:	80 91 91 22 	lds	r24, 0x2291	; 0x802291 <tank_full>
    67a6:	88 23       	and	r24, r24
    67a8:	c9 f0       	breq	.+50     	; 0x67dc <lcd_menu+0xc2>
    67aa:	65 e0       	ldi	r22, 0x05	; 5
    67ac:	80 e0       	ldi	r24, 0x00	; 0
    67ae:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    67b2:	8c e0       	ldi	r24, 0x0C	; 12
    67b4:	89 83       	std	Y+1, r24	; 0x01
    67b6:	8d e0       	ldi	r24, 0x0D	; 13
    67b8:	8a 83       	std	Y+2, r24	; 0x02
    67ba:	1b 82       	std	Y+3, r1	; 0x03
    67bc:	ce 01       	movw	r24, r28
    67be:	01 96       	adiw	r24, 0x01	; 1
    67c0:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    67c4:	8a e3       	ldi	r24, 0x3A	; 58
    67c6:	96 e1       	ldi	r25, 0x16	; 22
    67c8:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    67cc:	67 e0       	ldi	r22, 0x07	; 7
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    67d4:	85 e3       	ldi	r24, 0x35	; 53
    67d6:	96 e1       	ldi	r25, 0x16	; 22
    67d8:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    67dc:	6c e0       	ldi	r22, 0x0C	; 12
    67de:	80 e0       	ldi	r24, 0x00	; 0
    67e0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    67e4:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <colon_toggle>
    67e8:	81 11       	cpse	r24, r1
    67ea:	04 c0       	rjmp	.+8      	; 0x67f4 <lcd_menu+0xda>
    67ec:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <runtimer_on>
    67f0:	81 11       	cpse	r24, r1
    67f2:	17 c0       	rjmp	.+46     	; 0x6822 <lcd_menu+0x108>
    67f4:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    67f8:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    67fc:	20 91 02 23 	lds	r18, 0x2302	; 0x802302 <minutes>
    6800:	1f 92       	push	r1
    6802:	2f 93       	push	r18
    6804:	9f 93       	push	r25
    6806:	8f 93       	push	r24
    6808:	8f e1       	ldi	r24, 0x1F	; 31
    680a:	90 e2       	ldi	r25, 0x20	; 32
    680c:	9f 93       	push	r25
    680e:	8f 93       	push	r24
    6810:	ce 01       	movw	r24, r28
    6812:	01 96       	adiw	r24, 0x01	; 1
    6814:	9f 93       	push	r25
    6816:	8f 93       	push	r24
    6818:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
    681c:	cd bf       	out	0x3d, r28	; 61
    681e:	de bf       	out	0x3e, r29	; 62
    6820:	16 c0       	rjmp	.+44     	; 0x684e <lcd_menu+0x134>
    6822:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    6826:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    682a:	20 91 02 23 	lds	r18, 0x2302	; 0x802302 <minutes>
    682e:	1f 92       	push	r1
    6830:	2f 93       	push	r18
    6832:	9f 93       	push	r25
    6834:	8f 93       	push	r24
    6836:	88 e2       	ldi	r24, 0x28	; 40
    6838:	90 e2       	ldi	r25, 0x20	; 32
    683a:	9f 93       	push	r25
    683c:	8f 93       	push	r24
    683e:	ce 01       	movw	r24, r28
    6840:	01 96       	adiw	r24, 0x01	; 1
    6842:	9f 93       	push	r25
    6844:	8f 93       	push	r24
    6846:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	de bf       	out	0x3e, r29	; 62
    684e:	ce 01       	movw	r24, r28
    6850:	01 96       	adiw	r24, 0x01	; 1
    6852:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    6856:	6d e0       	ldi	r22, 0x0D	; 13
    6858:	81 e0       	ldi	r24, 0x01	; 1
    685a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    685e:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    6862:	81 11       	cpse	r24, r1
    6864:	09 c0       	rjmp	.+18     	; 0x6878 <lcd_menu+0x15e>
    6866:	8d e2       	ldi	r24, 0x2D	; 45
    6868:	89 83       	std	Y+1, r24	; 0x01
    686a:	8a 83       	std	Y+2, r24	; 0x02
    686c:	8b 83       	std	Y+3, r24	; 0x03
    686e:	8c 83       	std	Y+4, r24	; 0x04
    6870:	8d 83       	std	Y+5, r24	; 0x05
    6872:	8e 83       	std	Y+6, r24	; 0x06
    6874:	8f 83       	std	Y+7, r24	; 0x07
    6876:	20 c0       	rjmp	.+64     	; 0x68b8 <lcd_menu+0x19e>
    6878:	8b e0       	ldi	r24, 0x0B	; 11
    687a:	89 83       	std	Y+1, r24	; 0x01
    687c:	20 91 ae 21 	lds	r18, 0x21AE	; 0x8021ae <min_battery_level>
    6880:	9d ec       	ldi	r25, 0xCD	; 205
    6882:	29 9f       	mul	r18, r25
    6884:	91 2d       	mov	r25, r1
    6886:	11 24       	eor	r1, r1
    6888:	92 95       	swap	r25
    688a:	9f 70       	andi	r25, 0x0F	; 15
    688c:	fe 01       	movw	r30, r28
    688e:	31 96       	adiw	r30, 0x01	; 1
    6890:	82 e0       	ldi	r24, 0x02	; 2
    6892:	40 e2       	ldi	r20, 0x20	; 32
    6894:	59 e0       	ldi	r21, 0x09	; 9
    6896:	21 11       	cpse	r18, r1
    6898:	02 c0       	rjmp	.+4      	; 0x689e <lcd_menu+0x184>
    689a:	41 83       	std	Z+1, r20	; 0x01
    689c:	07 c0       	rjmp	.+14     	; 0x68ac <lcd_menu+0x192>
    689e:	3e ef       	ldi	r19, 0xFE	; 254
    68a0:	38 0f       	add	r19, r24
    68a2:	93 17       	cp	r25, r19
    68a4:	10 f0       	brcs	.+4      	; 0x68aa <lcd_menu+0x190>
    68a6:	51 83       	std	Z+1, r21	; 0x01
    68a8:	01 c0       	rjmp	.+2      	; 0x68ac <lcd_menu+0x192>
    68aa:	41 83       	std	Z+1, r20	; 0x01
    68ac:	8f 5f       	subi	r24, 0xFF	; 255
    68ae:	31 96       	adiw	r30, 0x01	; 1
    68b0:	87 30       	cpi	r24, 0x07	; 7
    68b2:	89 f7       	brne	.-30     	; 0x6896 <lcd_menu+0x17c>
    68b4:	8a e0       	ldi	r24, 0x0A	; 10
    68b6:	8f 83       	std	Y+7, r24	; 0x07
    68b8:	18 86       	std	Y+8, r1	; 0x08
    68ba:	ce 01       	movw	r24, r28
    68bc:	01 96       	adiw	r24, 0x01	; 1
    68be:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    68c2:	2b 96       	adiw	r28, 0x0b	; 11
    68c4:	cd bf       	out	0x3d, r28	; 61
    68c6:	de bf       	out	0x3e, r29	; 62
    68c8:	df 91       	pop	r29
    68ca:	cf 91       	pop	r28
    68cc:	08 95       	ret

000068ce <lcd_menu_update>:
    68ce:	cf 93       	push	r28
    68d0:	df 93       	push	r29
    68d2:	cd b7       	in	r28, 0x3d	; 61
    68d4:	de b7       	in	r29, 0x3e	; 62
    68d6:	2b 97       	sbiw	r28, 0x0b	; 11
    68d8:	cd bf       	out	0x3d, r28	; 61
    68da:	de bf       	out	0x3e, r29	; 62
    68dc:	80 91 91 22 	lds	r24, 0x2291	; 0x802291 <tank_full>
    68e0:	88 23       	and	r24, r24
    68e2:	09 f4       	brne	.+2      	; 0x68e6 <lcd_menu_update+0x18>
    68e4:	9b c0       	rjmp	.+310    	; 0x6a1c <lcd_menu_update+0x14e>
    68e6:	65 e0       	ldi	r22, 0x05	; 5
    68e8:	80 e0       	ldi	r24, 0x00	; 0
    68ea:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    68ee:	8c e0       	ldi	r24, 0x0C	; 12
    68f0:	89 83       	std	Y+1, r24	; 0x01
    68f2:	8d e0       	ldi	r24, 0x0D	; 13
    68f4:	8a 83       	std	Y+2, r24	; 0x02
    68f6:	1b 82       	std	Y+3, r1	; 0x03
    68f8:	ce 01       	movw	r24, r28
    68fa:	01 96       	adiw	r24, 0x01	; 1
    68fc:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    6900:	80 e3       	ldi	r24, 0x30	; 48
    6902:	96 e1       	ldi	r25, 0x16	; 22
    6904:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6908:	67 e0       	ldi	r22, 0x07	; 7
    690a:	81 e0       	ldi	r24, 0x01	; 1
    690c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6910:	8b e2       	ldi	r24, 0x2B	; 43
    6912:	96 e1       	ldi	r25, 0x16	; 22
    6914:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6918:	6d e0       	ldi	r22, 0x0D	; 13
    691a:	81 e0       	ldi	r24, 0x01	; 1
    691c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6920:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    6924:	81 11       	cpse	r24, r1
    6926:	09 c0       	rjmp	.+18     	; 0x693a <lcd_menu_update+0x6c>
    6928:	8d e2       	ldi	r24, 0x2D	; 45
    692a:	89 83       	std	Y+1, r24	; 0x01
    692c:	8a 83       	std	Y+2, r24	; 0x02
    692e:	8b 83       	std	Y+3, r24	; 0x03
    6930:	8c 83       	std	Y+4, r24	; 0x04
    6932:	8d 83       	std	Y+5, r24	; 0x05
    6934:	8e 83       	std	Y+6, r24	; 0x06
    6936:	8f 83       	std	Y+7, r24	; 0x07
    6938:	20 c0       	rjmp	.+64     	; 0x697a <lcd_menu_update+0xac>
    693a:	8b e0       	ldi	r24, 0x0B	; 11
    693c:	89 83       	std	Y+1, r24	; 0x01
    693e:	20 91 ae 21 	lds	r18, 0x21AE	; 0x8021ae <min_battery_level>
    6942:	9d ec       	ldi	r25, 0xCD	; 205
    6944:	29 9f       	mul	r18, r25
    6946:	91 2d       	mov	r25, r1
    6948:	11 24       	eor	r1, r1
    694a:	92 95       	swap	r25
    694c:	9f 70       	andi	r25, 0x0F	; 15
    694e:	fe 01       	movw	r30, r28
    6950:	31 96       	adiw	r30, 0x01	; 1
    6952:	82 e0       	ldi	r24, 0x02	; 2
    6954:	40 e2       	ldi	r20, 0x20	; 32
    6956:	59 e0       	ldi	r21, 0x09	; 9
    6958:	21 11       	cpse	r18, r1
    695a:	02 c0       	rjmp	.+4      	; 0x6960 <lcd_menu_update+0x92>
    695c:	41 83       	std	Z+1, r20	; 0x01
    695e:	07 c0       	rjmp	.+14     	; 0x696e <lcd_menu_update+0xa0>
    6960:	3e ef       	ldi	r19, 0xFE	; 254
    6962:	38 0f       	add	r19, r24
    6964:	93 17       	cp	r25, r19
    6966:	10 f0       	brcs	.+4      	; 0x696c <lcd_menu_update+0x9e>
    6968:	51 83       	std	Z+1, r21	; 0x01
    696a:	01 c0       	rjmp	.+2      	; 0x696e <lcd_menu_update+0xa0>
    696c:	41 83       	std	Z+1, r20	; 0x01
    696e:	8f 5f       	subi	r24, 0xFF	; 255
    6970:	31 96       	adiw	r30, 0x01	; 1
    6972:	87 30       	cpi	r24, 0x07	; 7
    6974:	89 f7       	brne	.-30     	; 0x6958 <lcd_menu_update+0x8a>
    6976:	8a e0       	ldi	r24, 0x0A	; 10
    6978:	8f 83       	std	Y+7, r24	; 0x07
    697a:	18 86       	std	Y+8, r1	; 0x08
    697c:	ce 01       	movw	r24, r28
    697e:	01 96       	adiw	r24, 0x01	; 1
    6980:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    6984:	6c e0       	ldi	r22, 0x0C	; 12
    6986:	80 e0       	ldi	r24, 0x00	; 0
    6988:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    698c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <colon_toggle>
    6990:	81 11       	cpse	r24, r1
    6992:	04 c0       	rjmp	.+8      	; 0x699c <lcd_menu_update+0xce>
    6994:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <runtimer_on>
    6998:	81 11       	cpse	r24, r1
    699a:	1e c0       	rjmp	.+60     	; 0x69d8 <lcd_menu_update+0x10a>
    699c:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    69a0:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    69a4:	20 91 02 23 	lds	r18, 0x2302	; 0x802302 <minutes>
    69a8:	1f 92       	push	r1
    69aa:	2f 93       	push	r18
    69ac:	9f 93       	push	r25
    69ae:	8f 93       	push	r24
    69b0:	8f e1       	ldi	r24, 0x1F	; 31
    69b2:	90 e2       	ldi	r25, 0x20	; 32
    69b4:	9f 93       	push	r25
    69b6:	8f 93       	push	r24
    69b8:	ce 01       	movw	r24, r28
    69ba:	01 96       	adiw	r24, 0x01	; 1
    69bc:	9f 93       	push	r25
    69be:	8f 93       	push	r24
    69c0:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	cd bf       	out	0x3d, r28	; 61
    69c8:	de bf       	out	0x3e, r29	; 62
    69ca:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <colon_toggle>
    69ce:	91 11       	cpse	r25, r1
    69d0:	80 e0       	ldi	r24, 0x00	; 0
    69d2:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <colon_toggle>
    69d6:	1d c0       	rjmp	.+58     	; 0x6a12 <lcd_menu_update+0x144>
    69d8:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    69dc:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    69e0:	20 91 02 23 	lds	r18, 0x2302	; 0x802302 <minutes>
    69e4:	1f 92       	push	r1
    69e6:	2f 93       	push	r18
    69e8:	9f 93       	push	r25
    69ea:	8f 93       	push	r24
    69ec:	88 e2       	ldi	r24, 0x28	; 40
    69ee:	90 e2       	ldi	r25, 0x20	; 32
    69f0:	9f 93       	push	r25
    69f2:	8f 93       	push	r24
    69f4:	ce 01       	movw	r24, r28
    69f6:	01 96       	adiw	r24, 0x01	; 1
    69f8:	9f 93       	push	r25
    69fa:	8f 93       	push	r24
    69fc:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
    6a00:	81 e0       	ldi	r24, 0x01	; 1
    6a02:	cd bf       	out	0x3d, r28	; 61
    6a04:	de bf       	out	0x3e, r29	; 62
    6a06:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <colon_toggle>
    6a0a:	91 11       	cpse	r25, r1
    6a0c:	80 e0       	ldi	r24, 0x00	; 0
    6a0e:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <colon_toggle>
    6a12:	ce 01       	movw	r24, r28
    6a14:	01 96       	adiw	r24, 0x01	; 1
    6a16:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    6a1a:	0a c0       	rjmp	.+20     	; 0x6a30 <lcd_menu_update+0x162>
    6a1c:	6d e0       	ldi	r22, 0x0D	; 13
    6a1e:	81 e0       	ldi	r24, 0x01	; 1
    6a20:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    6a24:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    6a28:	88 23       	and	r24, r24
    6a2a:	09 f4       	brne	.+2      	; 0x6a2e <lcd_menu_update+0x160>
    6a2c:	7d cf       	rjmp	.-262    	; 0x6928 <lcd_menu_update+0x5a>
    6a2e:	85 cf       	rjmp	.-246    	; 0x693a <lcd_menu_update+0x6c>
    6a30:	2b 96       	adiw	r28, 0x0b	; 11
    6a32:	cd bf       	out	0x3d, r28	; 61
    6a34:	de bf       	out	0x3e, r29	; 62
    6a36:	df 91       	pop	r29
    6a38:	cf 91       	pop	r28
    6a3a:	08 95       	ret

00006a3c <lcd_led_blink>:
    6a3c:	e5 e0       	ldi	r30, 0x05	; 5
    6a3e:	f6 e0       	ldi	r31, 0x06	; 6
    6a40:	80 e1       	ldi	r24, 0x10	; 16
    6a42:	80 83       	st	Z, r24
    6a44:	2f ef       	ldi	r18, 0xFF	; 255
    6a46:	37 ea       	ldi	r19, 0xA7	; 167
    6a48:	91 e6       	ldi	r25, 0x61	; 97
    6a4a:	21 50       	subi	r18, 0x01	; 1
    6a4c:	30 40       	sbci	r19, 0x00	; 0
    6a4e:	90 40       	sbci	r25, 0x00	; 0
    6a50:	e1 f7       	brne	.-8      	; 0x6a4a <lcd_led_blink+0xe>
    6a52:	00 c0       	rjmp	.+0      	; 0x6a54 <lcd_led_blink+0x18>
    6a54:	00 00       	nop
    6a56:	a6 e0       	ldi	r26, 0x06	; 6
    6a58:	b6 e0       	ldi	r27, 0x06	; 6
    6a5a:	8c 93       	st	X, r24
    6a5c:	2f ef       	ldi	r18, 0xFF	; 255
    6a5e:	37 ea       	ldi	r19, 0xA7	; 167
    6a60:	91 e6       	ldi	r25, 0x61	; 97
    6a62:	21 50       	subi	r18, 0x01	; 1
    6a64:	30 40       	sbci	r19, 0x00	; 0
    6a66:	90 40       	sbci	r25, 0x00	; 0
    6a68:	e1 f7       	brne	.-8      	; 0x6a62 <lcd_led_blink+0x26>
    6a6a:	00 c0       	rjmp	.+0      	; 0x6a6c <lcd_led_blink+0x30>
    6a6c:	00 00       	nop
    6a6e:	80 83       	st	Z, r24
    6a70:	2f ef       	ldi	r18, 0xFF	; 255
    6a72:	37 ea       	ldi	r19, 0xA7	; 167
    6a74:	91 e6       	ldi	r25, 0x61	; 97
    6a76:	21 50       	subi	r18, 0x01	; 1
    6a78:	30 40       	sbci	r19, 0x00	; 0
    6a7a:	90 40       	sbci	r25, 0x00	; 0
    6a7c:	e1 f7       	brne	.-8      	; 0x6a76 <lcd_led_blink+0x3a>
    6a7e:	00 c0       	rjmp	.+0      	; 0x6a80 <lcd_led_blink+0x44>
    6a80:	00 00       	nop
    6a82:	8c 93       	st	X, r24
    6a84:	2f ef       	ldi	r18, 0xFF	; 255
    6a86:	37 ea       	ldi	r19, 0xA7	; 167
    6a88:	91 e6       	ldi	r25, 0x61	; 97
    6a8a:	21 50       	subi	r18, 0x01	; 1
    6a8c:	30 40       	sbci	r19, 0x00	; 0
    6a8e:	90 40       	sbci	r25, 0x00	; 0
    6a90:	e1 f7       	brne	.-8      	; 0x6a8a <lcd_led_blink+0x4e>
    6a92:	00 c0       	rjmp	.+0      	; 0x6a94 <lcd_led_blink+0x58>
    6a94:	00 00       	nop
    6a96:	80 83       	st	Z, r24
    6a98:	08 95       	ret

00006a9a <lcd_create_CGRAM>:

//Create extra characters for screen images
void lcd_create_CGRAM(void)
{
    6a9a:	cf 93       	push	r28
    6a9c:	df 93       	push	r29
    6a9e:	cd b7       	in	r28, 0x3d	; 61
    6aa0:	de b7       	in	r29, 0x3e	; 62
    6aa2:	ca 55       	subi	r28, 0x5A	; 90
    6aa4:	d1 09       	sbc	r29, r1
    6aa6:	cd bf       	out	0x3d, r28	; 61
    6aa8:	de bf       	out	0x3e, r29	; 62
	unsigned char message[90];

	uint8_t i = 0;
	message[i++] = (0x80);	//1 control byte another required after data byte
    6aaa:	80 e8       	ldi	r24, 0x80	; 128
    6aac:	89 83       	std	Y+1, r24	; 0x01
	message[i++] = (0x38);	//Set IS Table 0
    6aae:	98 e3       	ldi	r25, 0x38	; 56
    6ab0:	9a 83       	std	Y+2, r25	; 0x02

	message[i++] = (0x80);	//1 control byte another required after data byte
    6ab2:	8b 83       	std	Y+3, r24	; 0x03
	message[i++] = (0x48);	//CGRAM Address 0x08
    6ab4:	88 e4       	ldi	r24, 0x48	; 72
    6ab6:	8c 83       	std	Y+4, r24	; 0x04

	message[i++] = (0x40);	//RS bit high to write to RAM
    6ab8:	80 e4       	ldi	r24, 0x40	; 64
    6aba:	8d 83       	std	Y+5, r24	; 0x05

	//Mid battery 9
	message[i++] = (0x1F);	//11111
    6abc:	8f e1       	ldi	r24, 0x1F	; 31
    6abe:	8e 83       	std	Y+6, r24	; 0x06
	message[i++] = (0x1F);	//11111
    6ac0:	8f 83       	std	Y+7, r24	; 0x07
	message[i++] = (0x1F);	//11111
    6ac2:	88 87       	std	Y+8, r24	; 0x08
	message[i++] = (0x1F);	//11111
    6ac4:	89 87       	std	Y+9, r24	; 0x09
	message[i++] = (0x1F);	//11111
    6ac6:	8a 87       	std	Y+10, r24	; 0x0a
	message[i++] = (0x1F);	//11111
    6ac8:	8b 87       	std	Y+11, r24	; 0x0b
	message[i++] = (0x1F);	//11111
    6aca:	8c 87       	std	Y+12, r24	; 0x0c
	message[i++] = (0x00);	//00000
    6acc:	1d 86       	std	Y+13, r1	; 0x0d

	//Right battery 10
	message[i++] = (0x1C);	//11100
    6ace:	9c e1       	ldi	r25, 0x1C	; 28
    6ad0:	9e 87       	std	Y+14, r25	; 0x0e
	message[i++] = (0x1C);	//11100
    6ad2:	9f 87       	std	Y+15, r25	; 0x0f
	message[i++] = (0x1F);	//11111
    6ad4:	88 8b       	std	Y+16, r24	; 0x10
	message[i++] = (0x1F);	//11111
    6ad6:	89 8b       	std	Y+17, r24	; 0x11
	message[i++] = (0x1F);	//11111
    6ad8:	8a 8b       	std	Y+18, r24	; 0x12
	message[i++] = (0x1C);	//11100
    6ada:	9b 8b       	std	Y+19, r25	; 0x13
	message[i++] = (0x1C);	//11100
    6adc:	9c 8b       	std	Y+20, r25	; 0x14
	message[i++] = (0x00);	//00000
    6ade:	1d 8a       	std	Y+21, r1	; 0x15

	//Left battery 11
	message[i++] = (0x07);	//00111
    6ae0:	97 e0       	ldi	r25, 0x07	; 7
    6ae2:	9e 8b       	std	Y+22, r25	; 0x16
	message[i++] = (0x07);	//00111
    6ae4:	9f 8b       	std	Y+23, r25	; 0x17
	message[i++] = (0x07);	//00111
    6ae6:	98 8f       	std	Y+24, r25	; 0x18
	message[i++] = (0x07);	//00111
    6ae8:	99 8f       	std	Y+25, r25	; 0x19
	message[i++] = (0x07);	//00111
    6aea:	9a 8f       	std	Y+26, r25	; 0x1a
	message[i++] = (0x07);	//00111
    6aec:	9b 8f       	std	Y+27, r25	; 0x1b
	message[i++] = (0x07);	//00111
    6aee:	9c 8f       	std	Y+28, r25	; 0x1c
	message[i++] = (0x00);	//00000
    6af0:	1d 8e       	std	Y+29, r1	; 0x1d

	//Left Tank Full 12
	message[i++] = (0x10);	//10000
    6af2:	20 e1       	ldi	r18, 0x10	; 16
    6af4:	2e 8f       	std	Y+30, r18	; 0x1e
	message[i++] = (0x12);	//10010
    6af6:	92 e1       	ldi	r25, 0x12	; 18
    6af8:	9f 8f       	std	Y+31, r25	; 0x1f
	message[i++] = (0x17);	//10111
    6afa:	97 e1       	ldi	r25, 0x17	; 23
    6afc:	98 a3       	std	Y+32, r25	; 0x20
	message[i++] = (0x17);	//10111
    6afe:	99 a3       	std	Y+33, r25	; 0x21
	message[i++] = (0x17);	//10111
    6b00:	9a a3       	std	Y+34, r25	; 0x22
	message[i++] = (0x10);	//10000
    6b02:	2b a3       	std	Y+35, r18	; 0x23
	message[i++] = (0x1F);	//11111
    6b04:	8c a3       	std	Y+36, r24	; 0x24
	message[i++] = (0x00);	//00000
    6b06:	1d a2       	std	Y+37, r1	; 0x25

	//Right Tank Full
	message[i++] = (0x01);	//00001
    6b08:	91 e0       	ldi	r25, 0x01	; 1
    6b0a:	9e a3       	std	Y+38, r25	; 0x26
	message[i++] = (0x15);	//10101
    6b0c:	35 e1       	ldi	r19, 0x15	; 21
    6b0e:	3f a3       	std	Y+39, r19	; 0x27
	message[i++] = (0x1D);	//11101
    6b10:	3d e1       	ldi	r19, 0x1D	; 29
    6b12:	38 a7       	std	Y+40, r19	; 0x28
	message[i++] = (0x1D);	//11101
    6b14:	39 a7       	std	Y+41, r19	; 0x29
	message[i++] = (0x1D);	//11101
    6b16:	3a a7       	std	Y+42, r19	; 0x2a
	message[i++] = (0x01);	//00001
    6b18:	9b a7       	std	Y+43, r25	; 0x2b
	message[i++] = (0x1F);	//11111
    6b1a:	8c a7       	std	Y+44, r24	; 0x2c
	message[i++] = (0x00);	//00000
    6b1c:	1d a6       	std	Y+45, r1	; 0x2d

	///Left Tank Empty
	message[i++] = (0x10);	//10000
    6b1e:	2e a7       	std	Y+46, r18	; 0x2e
	message[i++] = (0x10);	//10000
    6b20:	2f a7       	std	Y+47, r18	; 0x2f
	message[i++] = (0x10);	//10000
    6b22:	28 ab       	std	Y+48, r18	; 0x30
	message[i++] = (0x10);	//10000
    6b24:	29 ab       	std	Y+49, r18	; 0x31
	message[i++] = (0x10);	//10000
    6b26:	2a ab       	std	Y+50, r18	; 0x32
	message[i++] = (0x10);	//10000
    6b28:	2b ab       	std	Y+51, r18	; 0x33
	message[i++] = (0x1F);	//11111
    6b2a:	8c ab       	std	Y+52, r24	; 0x34
	message[i++] = (0x00);	//00000
    6b2c:	1d aa       	std	Y+53, r1	; 0x35

	//Right Tank Empty
	message[i++] = (0x01);	//00001
    6b2e:	9e ab       	std	Y+54, r25	; 0x36
	message[i++] = (0x01);	//00001
    6b30:	9f ab       	std	Y+55, r25	; 0x37
	message[i++] = (0x01);	//00001
    6b32:	98 af       	std	Y+56, r25	; 0x38
	message[i++] = (0x01);	//00001
    6b34:	99 af       	std	Y+57, r25	; 0x39
	message[i++] = (0x01);	//00001
    6b36:	9a af       	std	Y+58, r25	; 0x3a
	message[i++] = (0x01);	//00001
    6b38:	9b af       	std	Y+59, r25	; 0x3b
	message[i++] = (0x1F);	//11111
    6b3a:	8c af       	std	Y+60, r24	; 0x3c
	message[i++] = (0x00);	//00000
    6b3c:	1d ae       	std	Y+61, r1	; 0x3d

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 61);
    6b3e:	2d e3       	ldi	r18, 0x3D	; 61
    6b40:	ae 01       	movw	r20, r28
    6b42:	4f 5f       	subi	r20, 0xFF	; 255
    6b44:	5f 4f       	sbci	r21, 0xFF	; 255
    6b46:	6c e3       	ldi	r22, 0x3C	; 60
    6b48:	86 ef       	ldi	r24, 0xF6	; 246
    6b4a:	91 e2       	ldi	r25, 0x21	; 33
    6b4c:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <TWI_MasterWrite>
    6b50:	c6 5a       	subi	r28, 0xA6	; 166
    6b52:	df 4f       	sbci	r29, 0xFF	; 255
    6b54:	cd bf       	out	0x3d, r28	; 61
    6b56:	de bf       	out	0x3e, r29	; 62
    6b58:	df 91       	pop	r29
    6b5a:	cf 91       	pop	r28
    6b5c:	08 95       	ret

00006b5e <print_info>:

//Print out RB800 information
void print_info(void)
{

	lcd_write_new(MACHINE_DETAIL);
    6b5e:	87 e3       	ldi	r24, 0x37	; 55
    6b60:	90 e2       	ldi	r25, 0x20	; 32
    6b62:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    6b66:	2f ef       	ldi	r18, 0xFF	; 255
    6b68:	87 ea       	ldi	r24, 0xA7	; 167
    6b6a:	91 e6       	ldi	r25, 0x61	; 97
    6b6c:	21 50       	subi	r18, 0x01	; 1
    6b6e:	80 40       	sbci	r24, 0x00	; 0
    6b70:	90 40       	sbci	r25, 0x00	; 0
    6b72:	e1 f7       	brne	.-8      	; 0x6b6c <print_info+0xe>
    6b74:	00 c0       	rjmp	.+0      	; 0x6b76 <print_info+0x18>
    6b76:	00 00       	nop
	_delay_ms(1000);

	if (battery_type == LEAD)
    6b78:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <battery_type>
    6b7c:	82 31       	cpi	r24, 0x12	; 18
    6b7e:	29 f4       	brne	.+10     	; 0x6b8a <print_info+0x2c>
		lcd_write_new_P(PSTR("BATTERY TYPE: LEAD"));
    6b80:	81 ea       	ldi	r24, 0xA1	; 161
    6b82:	96 e1       	ldi	r25, 0x16	; 22
    6b84:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    6b88:	0b c0       	rjmp	.+22     	; 0x6ba0 <print_info+0x42>
	else if (battery_type == AGM)
    6b8a:	83 32       	cpi	r24, 0x23	; 35
    6b8c:	29 f4       	brne	.+10     	; 0x6b98 <print_info+0x3a>
		lcd_write_new_P(PSTR("BATTERY TYPE: AGM"));
    6b8e:	8f e8       	ldi	r24, 0x8F	; 143
    6b90:	96 e1       	ldi	r25, 0x16	; 22
    6b92:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    6b96:	04 c0       	rjmp	.+8      	; 0x6ba0 <print_info+0x42>
	else
		lcd_write_new_P(PSTR("BATTERY TYPE: GEL"));
    6b98:	8d e7       	ldi	r24, 0x7D	; 125
    6b9a:	96 e1       	ldi	r25, 0x16	; 22
    6b9c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
	lcd_set_cursor(1, 0);
    6ba0:	60 e0       	ldi	r22, 0x00	; 0
    6ba2:	81 e0       	ldi	r24, 0x01	; 1
    6ba4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write(serial_num);
    6ba8:	83 e8       	ldi	r24, 0x83	; 131
    6baa:	91 e2       	ldi	r25, 0x21	; 33
    6bac:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    6bb0:	2f ef       	ldi	r18, 0xFF	; 255
    6bb2:	83 ed       	ldi	r24, 0xD3	; 211
    6bb4:	90 e3       	ldi	r25, 0x30	; 48
    6bb6:	21 50       	subi	r18, 0x01	; 1
    6bb8:	80 40       	sbci	r24, 0x00	; 0
    6bba:	90 40       	sbci	r25, 0x00	; 0
    6bbc:	e1 f7       	brne	.-8      	; 0x6bb6 <print_info+0x58>
    6bbe:	00 c0       	rjmp	.+0      	; 0x6bc0 <print_info+0x62>
    6bc0:	00 00       	nop
	_delay_ms(500);

	lcd_write_new(A1_PCB);
    6bc2:	8b e4       	ldi	r24, 0x4B	; 75
    6bc4:	90 e2       	ldi	r25, 0x20	; 32
    6bc6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
	lcd_set_cursor(1, 0);
    6bca:	60 e0       	ldi	r22, 0x00	; 0
    6bcc:	81 e0       	ldi	r24, 0x01	; 1
    6bce:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write(A1_FIRMWARE);
    6bd2:	80 e6       	ldi	r24, 0x60	; 96
    6bd4:	90 e2       	ldi	r25, 0x20	; 32
    6bd6:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    6bda:	2f ef       	ldi	r18, 0xFF	; 255
    6bdc:	83 ed       	ldi	r24, 0xD3	; 211
    6bde:	90 e3       	ldi	r25, 0x30	; 48
    6be0:	21 50       	subi	r18, 0x01	; 1
    6be2:	80 40       	sbci	r24, 0x00	; 0
    6be4:	90 40       	sbci	r25, 0x00	; 0
    6be6:	e1 f7       	brne	.-8      	; 0x6be0 <print_info+0x82>
    6be8:	00 c0       	rjmp	.+0      	; 0x6bea <print_info+0x8c>
    6bea:	00 00       	nop
	_delay_ms(500);

	lcd_write_new(A2_PCB);
    6bec:	85 e7       	ldi	r24, 0x75	; 117
    6bee:	90 e2       	ldi	r25, 0x20	; 32
    6bf0:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
	lcd_set_cursor(1, 0);
    6bf4:	60 e0       	ldi	r22, 0x00	; 0
    6bf6:	81 e0       	ldi	r24, 0x01	; 1
    6bf8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write(A2_FIRMWARE);
    6bfc:	8a e8       	ldi	r24, 0x8A	; 138
    6bfe:	90 e2       	ldi	r25, 0x20	; 32
    6c00:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
	if (!can_functioning)
    6c04:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    6c08:	81 11       	cpse	r24, r1
    6c0a:	0b c0       	rjmp	.+22     	; 0x6c22 <print_info+0xc4>
	{
		send_CAN_ACK();
    6c0c:	0e 94 3d 24 	call	0x487a	; 0x487a <send_CAN_ACK>
		ack_counter++;
    6c10:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    6c14:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    6c18:	01 96       	adiw	r24, 0x01	; 1
    6c1a:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <ack_counter>
    6c1e:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <ack_counter+0x1>
    6c22:	2f ef       	ldi	r18, 0xFF	; 255
    6c24:	83 ed       	ldi	r24, 0xD3	; 211
    6c26:	90 e3       	ldi	r25, 0x30	; 48
    6c28:	21 50       	subi	r18, 0x01	; 1
    6c2a:	80 40       	sbci	r24, 0x00	; 0
    6c2c:	90 40       	sbci	r25, 0x00	; 0
    6c2e:	e1 f7       	brne	.-8      	; 0x6c28 <print_info+0xca>
    6c30:	00 c0       	rjmp	.+0      	; 0x6c32 <print_info+0xd4>
    6c32:	00 00       	nop
	}
	_delay_ms(500);


	lcd_write_new(A3_PCB);
    6c34:	8f e9       	ldi	r24, 0x9F	; 159
    6c36:	90 e2       	ldi	r25, 0x20	; 32
    6c38:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
	lcd_set_cursor(1, 0);
    6c3c:	60 e0       	ldi	r22, 0x00	; 0
    6c3e:	81 e0       	ldi	r24, 0x01	; 1
    6c40:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write(A3_FIRMWARE);
    6c44:	84 eb       	ldi	r24, 0xB4	; 180
    6c46:	90 e2       	ldi	r25, 0x20	; 32
    6c48:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
	if (!can_functioning)
    6c4c:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    6c50:	81 11       	cpse	r24, r1
    6c52:	0b c0       	rjmp	.+22     	; 0x6c6a <print_info+0x10c>
	{
		send_CAN_ACK();
    6c54:	0e 94 3d 24 	call	0x487a	; 0x487a <send_CAN_ACK>
		ack_counter++;
    6c58:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    6c5c:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    6c60:	01 96       	adiw	r24, 0x01	; 1
    6c62:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <ack_counter>
    6c66:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <ack_counter+0x1>
    6c6a:	2f ef       	ldi	r18, 0xFF	; 255
    6c6c:	83 ed       	ldi	r24, 0xD3	; 211
    6c6e:	90 e3       	ldi	r25, 0x30	; 48
    6c70:	21 50       	subi	r18, 0x01	; 1
    6c72:	80 40       	sbci	r24, 0x00	; 0
    6c74:	90 40       	sbci	r25, 0x00	; 0
    6c76:	e1 f7       	brne	.-8      	; 0x6c70 <print_info+0x112>
    6c78:	00 c0       	rjmp	.+0      	; 0x6c7a <print_info+0x11c>
    6c7a:	00 00       	nop
	}
	_delay_ms(500);

	printing_info = FALSE;
    6c7c:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <printing_info>
	print_menu = TRUE;
    6c80:	81 e0       	ldi	r24, 0x01	; 1
    6c82:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    6c86:	08 95       	ret

00006c88 <initialize>:
	}
	return 0;
}

void initialize(void)
{
    6c88:	cf 93       	push	r28
	change_on_value = TRUE;
    6c8a:	c1 e0       	ldi	r28, 0x01	; 1
    6c8c:	c0 93 b1 22 	sts	0x22B1, r28	; 0x8022b1 <change_on_value>
	//For sending CAN data periodically
	periodic_send = FALSE;
    6c90:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <periodic_send>

	PORTA_DIRSET = (1 << LCD_LED);
    6c94:	80 e1       	ldi	r24, 0x10	; 16
    6c96:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTA_OUTSET = (1 << LCD_LED);
    6c9a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>

	initialize_32Mhz();
    6c9e:	0e 94 d5 5a 	call	0xb5aa	; 0xb5aa <initialize_32Mhz>
    6ca2:	2f ef       	ldi	r18, 0xFF	; 255
    6ca4:	83 ed       	ldi	r24, 0xD3	; 211
    6ca6:	90 e3       	ldi	r25, 0x30	; 48
    6ca8:	21 50       	subi	r18, 0x01	; 1
    6caa:	80 40       	sbci	r24, 0x00	; 0
    6cac:	90 40       	sbci	r25, 0x00	; 0
    6cae:	e1 f7       	brne	.-8      	; 0x6ca8 <initialize+0x20>
    6cb0:	00 c0       	rjmp	.+0      	; 0x6cb2 <initialize+0x2a>
    6cb2:	00 00       	nop
	//1 second delay to make sure power has settled
	//Without this delay EEPROM could get corrupted when initially reading
	_delay_ms(500); //	_delay_ms(2000);
	CQ_initialize();
    6cb4:	0e 94 bb 1b 	call	0x3776	; 0x3776 <CQ_initialize>

	//Initialize the TWI master module using the TWIE port
	TWI_MasterInit(&twiMaster,
    6cb8:	2b e9       	ldi	r18, 0x9B	; 155
    6cba:	40 e4       	ldi	r20, 0x40	; 64
    6cbc:	60 ea       	ldi	r22, 0xA0	; 160
    6cbe:	74 e0       	ldi	r23, 0x04	; 4
    6cc0:	86 ef       	ldi	r24, 0xF6	; 246
    6cc2:	91 e2       	ldi	r25, 0x21	; 33
    6cc4:	0e 94 8c 5f 	call	0xbf18	; 0xbf18 <TWI_MasterInit>
		&TWIE,
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING);
	horn_off = TRUE;
    6cc8:	c0 93 d2 21 	sts	0x21D2, r28	; 0x8021d2 <horn_off>
	initialize_SPI();
    6ccc:	0e 94 6c 5a 	call	0xb4d8	; 0xb4d8 <initialize_SPI>
	initialize_timers();
    6cd0:	0e 94 be 5a 	call	0xb57c	; 0xb57c <initialize_timers>
	initialize_runtime_reset_timer();
    6cd4:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <initialize_runtime_reset_timer>
	initialize_keypad_settings();
    6cd8:	0e 94 bc 28 	call	0x5178	; 0x5178 <initialize_keypad_settings>
	initialize_ADC();
    6cdc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <initialize_ADC>

	initialize_CAN();
    6ce0:	0e 94 50 19 	call	0x32a0	; 0x32a0 <initialize_CAN>

	initialize_RB_settings();
    6ce4:	0e 94 a0 3b 	call	0x7740	; 0x7740 <initialize_RB_settings>

	//Enable low level interrupts
	PMIC_CTRL = 0x07;
    6ce8:	87 e0       	ldi	r24, 0x07	; 7
    6cea:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//Enable global interrupts
	sei();
    6cee:	78 94       	sei
		L_ATO_ON
		L_P1_ON
		;
#endif

	initialize_Screen();
    6cf0:	0e 94 08 32 	call	0x6410	; 0x6410 <initialize_Screen>
	lcd_create_CGRAM();
    6cf4:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <lcd_create_CGRAM>
    6cf8:	2f ef       	ldi	r18, 0xFF	; 255
    6cfa:	81 ee       	ldi	r24, 0xE1	; 225
    6cfc:	94 e0       	ldi	r25, 0x04	; 4
    6cfe:	21 50       	subi	r18, 0x01	; 1
    6d00:	80 40       	sbci	r24, 0x00	; 0
    6d02:	90 40       	sbci	r25, 0x00	; 0
    6d04:	e1 f7       	brne	.-8      	; 0x6cfe <initialize+0x76>
    6d06:	00 c0       	rjmp	.+0      	; 0x6d08 <initialize+0x80>
    6d08:	00 00       	nop
	_delay_ms(50);

#ifndef  __SIM__
	send_reset_CAN();
    6d0a:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <send_reset_CAN>
#endif // ! __SIM__

	motor_info_sent = FALSE;
    6d0e:	10 92 a5 22 	sts	0x22A5, r1	; 0x8022a5 <motor_info_sent>
		send_motor_info();
		initialize_keypad();
		start_test_menu();
	}*/

	if (S_RV_LOW && S_SLO_LOW)
    6d12:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    6d16:	80 fd       	sbrc	r24, 0
    6d18:	08 c0       	rjmp	.+16     	; 0x6d2a <initialize+0xa2>
    6d1a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    6d1e:	85 fd       	sbrc	r24, 5
    6d20:	04 c0       	rjmp	.+8      	; 0x6d2a <initialize+0xa2>
	{
		//send_motor_info();
		initialize_keypad();
    6d22:	0e 94 98 25 	call	0x4b30	; 0x4b30 <initialize_keypad>
		start_s_menu();
    6d26:	0e 94 61 59 	call	0xb2c2	; 0xb2c2 <start_s_menu>
	}
	if (S_HL_LOW && S_HRN_LOW && S_RV_LOW)
    6d2a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    6d2e:	88 23       	and	r24, r24
    6d30:	64 f0       	brlt	.+24     	; 0x6d4a <initialize+0xc2>
    6d32:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    6d36:	81 fd       	sbrc	r24, 1
    6d38:	08 c0       	rjmp	.+16     	; 0x6d4a <initialize+0xc2>
    6d3a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    6d3e:	80 fd       	sbrc	r24, 0
    6d40:	04 c0       	rjmp	.+8      	; 0x6d4a <initialize+0xc2>
	{
		//send_motor_info();
		initialize_keypad();
    6d42:	0e 94 98 25 	call	0x4b30	; 0x4b30 <initialize_keypad>
		start_u_menu();
    6d46:	0e 94 e5 67 	call	0xcfca	; 0xcfca <start_u_menu>
	}
	//send_motor_info();
	initialize_keypad();
    6d4a:	0e 94 98 25 	call	0x4b30	; 0x4b30 <initialize_keypad>
    6d4e:	2f ef       	ldi	r18, 0xFF	; 255
    6d50:	81 ee       	ldi	r24, 0xE1	; 225
    6d52:	94 e0       	ldi	r25, 0x04	; 4
    6d54:	21 50       	subi	r18, 0x01	; 1
    6d56:	80 40       	sbci	r24, 0x00	; 0
    6d58:	90 40       	sbci	r25, 0x00	; 0
    6d5a:	e1 f7       	brne	.-8      	; 0x6d54 <initialize+0xcc>
    6d5c:	00 c0       	rjmp	.+0      	; 0x6d5e <initialize+0xd6>
    6d5e:	00 00       	nop
	_delay_ms(50);

	printing_info_counter = 0;
    6d60:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <printing_info_counter>
	printing_info = TRUE;
    6d64:	81 e0       	ldi	r24, 0x01	; 1
    6d66:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <printing_info>
	printed_info = FALSE;
    6d6a:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <printed_info>
    6d6e:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <printed_info+0x1>
	print_info();
    6d72:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <print_info>
}
    6d76:	cf 91       	pop	r28
    6d78:	08 95       	ret

00006d7a <main>:
		PORTR_OUTSET = 0xFF; _delay_ms(1); PORTR_OUTCLR = 0xFF; _delay_ms(1);
	}
#endif

	//Reset LCD and CAN controller
	PORTF_DIRSET = (1 << LCD_CAN_RST);
    6d7a:	82 e0       	ldi	r24, 0x02	; 2
    6d7c:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTF_OUTCLR = (1 << LCD_CAN_RST);
    6d80:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    6d84:	2f ef       	ldi	r18, 0xFF	; 255
    6d86:	39 ef       	ldi	r19, 0xF9	; 249
    6d88:	90 e0       	ldi	r25, 0x00	; 0
    6d8a:	21 50       	subi	r18, 0x01	; 1
    6d8c:	30 40       	sbci	r19, 0x00	; 0
    6d8e:	90 40       	sbci	r25, 0x00	; 0
    6d90:	e1 f7       	brne	.-8      	; 0x6d8a <main+0x10>
    6d92:	00 c0       	rjmp	.+0      	; 0x6d94 <main+0x1a>
    6d94:	00 00       	nop
	_delay_ms(10);
	PORTF_OUTSET = (1 << LCD_CAN_RST);
    6d96:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

	initialize();
    6d9a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <initialize>
			{
				write_minutes();
				update_minutes = false;
			}

			if (!(PORTK_IN & (1 << S_HRN)) && horn_off)
    6d9e:	08 e2       	ldi	r16, 0x28	; 40
    6da0:	17 e0       	ldi	r17, 0x07	; 7
			}
			else if ((PORTK_IN & (1 << S_HRN)) && !horn_off)
			{
				//horn=OFF;
				change_horn_state();
				lcd_update_pause = 3;
    6da2:	0f 2e       	mov	r0, r31
    6da4:	f3 e0       	ldi	r31, 0x03	; 3
    6da6:	af 2e       	mov	r10, r31
    6da8:	f0 2d       	mov	r31, r0
				//_delay_ms(50);
				update_A2_settings();
				periodic_send = FALSE;
				periodic_count = 0;
				//change_on_value =TRUE;
				horn_off = TRUE;
    6daa:	ff 24       	eor	r15, r15
    6dac:	f3 94       	inc	r15
				{
					lcd_set_cursor(0, 0);
					lcd_write_P(PSTR("E16 - CHARGE"));
					lcd_set_cursor(1, 0);
					lcd_write_P(PSTR("THE BATTERY!"));
					LCD_LED_TGL;
    6dae:	0f 2e       	mov	r0, r31
    6db0:	f7 e0       	ldi	r31, 0x07	; 7
    6db2:	4f 2e       	mov	r4, r31
    6db4:	f6 e0       	ldi	r31, 0x06	; 6
    6db6:	5f 2e       	mov	r5, r31
    6db8:	f0 2d       	mov	r31, r0
    6dba:	68 94       	set
    6dbc:	dd 24       	eor	r13, r13
    6dbe:	d4 f8       	bld	r13, 4
			{
				if (motors_status != MOTORS_OFF)
				{
					turn_off_motors();

					motors_status = MOTORS_OFF;
    6dc0:	0f 2e       	mov	r0, r31
    6dc2:	fa ea       	ldi	r31, 0xAA	; 170
    6dc4:	ef 2e       	mov	r14, r31
    6dc6:	f0 2d       	mov	r31, r0
					cli();
					eeprom_busy_wait();
    6dc8:	0f 2e       	mov	r0, r31
    6dca:	ff ec       	ldi	r31, 0xCF	; 207
    6dcc:	6f 2e       	mov	r6, r31
    6dce:	77 24       	eor	r7, r7
    6dd0:	73 94       	inc	r7
    6dd2:	f0 2d       	mov	r31, r0

			//If new auto flag is set store current settings to eeprom
			if (new_auto_flag)
			{
				change_auto_settings();
				L_ATO_ON;
    6dd4:	0f 2e       	mov	r0, r31
    6dd6:	f6 e2       	ldi	r31, 0x26	; 38
    6dd8:	8f 2e       	mov	r8, r31
    6dda:	f7 e0       	ldi	r31, 0x07	; 7
    6ddc:	9f 2e       	mov	r9, r31
    6dde:	f0 2d       	mov	r31, r0
    6de0:	68 94       	set
    6de2:	bb 24       	eor	r11, r11
    6de4:	b5 f8       	bld	r11, 5

				lcd_write_new_P(PSTR("AUTO MODE   "));
				lcd_set_cursor(1, 0);
				lcd_write_P(PSTR("CHANGED     "));
				lcd_update_pause = 2;
    6de6:	68 94       	set
    6de8:	cc 24       	eor	r12, r12
    6dea:	c1 f8       	bld	r12, 1
	initialize();

	IDLE_LOOP
	{
		//PORTF_OUTSET = (1 << 3);
		if (ack_counter >= 6 && !can_functioning && !printing_info)
    6dec:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    6df0:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    6df4:	06 97       	sbiw	r24, 0x06	; 6
    6df6:	08 f4       	brcc	.+2      	; 0x6dfa <main+0x80>
    6df8:	8e c0       	rjmp	.+284    	; 0x6f16 <main+0x19c>
    6dfa:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    6dfe:	81 11       	cpse	r24, r1
    6e00:	8a c0       	rjmp	.+276    	; 0x6f16 <main+0x19c>
    6e02:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <printing_info>
    6e06:	81 11       	cpse	r24, r1
    6e08:	86 c0       	rjmp	.+268    	; 0x6f16 <main+0x19c>
		{
			if (!A2_ack_received & !A3_ack_received)
    6e0a:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <A2_ack_received>
    6e0e:	80 91 5f 23 	lds	r24, 0x235F	; 0x80235f <A3_ack_received>
    6e12:	2f 2d       	mov	r18, r15
    6e14:	91 11       	cpse	r25, r1
    6e16:	20 e0       	ldi	r18, 0x00	; 0
    6e18:	22 23       	and	r18, r18
    6e1a:	d9 f0       	breq	.+54     	; 0x6e52 <main+0xd8>
    6e1c:	2f 2d       	mov	r18, r15
    6e1e:	81 11       	cpse	r24, r1
    6e20:	20 e0       	ldi	r18, 0x00	; 0
    6e22:	22 23       	and	r18, r18
    6e24:	b1 f0       	breq	.+44     	; 0x6e52 <main+0xd8>
			{
				if ((CanError & 0x01) == 0)
    6e26:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6e2a:	80 fd       	sbrc	r24, 0
    6e2c:	6b c0       	rjmp	.+214    	; 0x6f04 <main+0x18a>
				{
					lcd_write_new_P(PSTR("E04 - NO CAN COMM"));
    6e2e:	83 ea       	ldi	r24, 0xA3	; 163
    6e30:	98 e1       	ldi	r25, 0x18	; 24
    6e32:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    6e36:	60 e0       	ldi	r22, 0x00	; 0
    6e38:	8f 2d       	mov	r24, r15
    6e3a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("CHECK WIRING"));
    6e3e:	86 e9       	ldi	r24, 0x96	; 150
    6e40:	98 e1       	ldi	r25, 0x18	; 24
    6e42:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
					CanError |= 0x01;
    6e46:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6e4a:	81 60       	ori	r24, 0x01	; 1
    6e4c:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <CanError>
    6e50:	59 c0       	rjmp	.+178    	; 0x6f04 <main+0x18a>
				}
			}
			else if (!A2_ack_received)
    6e52:	91 11       	cpse	r25, r1
    6e54:	16 c0       	rjmp	.+44     	; 0x6e82 <main+0x108>
			{
				if (((CanError >> 1) & 0x01) == 0)
    6e56:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6e5a:	81 fd       	sbrc	r24, 1
    6e5c:	53 c0       	rjmp	.+166    	; 0x6f04 <main+0x18a>
				{
					lcd_write_new_P(PSTR("E04 - NO A2 CAN COMM"));
    6e5e:	81 e8       	ldi	r24, 0x81	; 129
    6e60:	98 e1       	ldi	r25, 0x18	; 24
    6e62:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    6e66:	60 e0       	ldi	r22, 0x00	; 0
    6e68:	8f 2d       	mov	r24, r15
    6e6a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("CHECK WIRING"));
    6e6e:	84 e7       	ldi	r24, 0x74	; 116
    6e70:	98 e1       	ldi	r25, 0x18	; 24
    6e72:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
					CanError |= (0x01 << 1);
    6e76:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6e7a:	82 60       	ori	r24, 0x02	; 2
    6e7c:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <CanError>
    6e80:	41 c0       	rjmp	.+130    	; 0x6f04 <main+0x18a>
				}
			}
			else if (!A3_ack_received)
    6e82:	81 11       	cpse	r24, r1
    6e84:	2a c0       	rjmp	.+84     	; 0x6eda <main+0x160>
			{
				if (((CanError >> 2) & 0x01) == 0)
    6e86:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6e8a:	82 fd       	sbrc	r24, 2
    6e8c:	3b c0       	rjmp	.+118    	; 0x6f04 <main+0x18a>
				{
					lcd_write_new_P(PSTR("E04 - NO A3 CAN COMM"));
    6e8e:	8f e5       	ldi	r24, 0x5F	; 95
    6e90:	98 e1       	ldi	r25, 0x18	; 24
    6e92:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    6e96:	60 e0       	ldi	r22, 0x00	; 0
    6e98:	8f 2d       	mov	r24, r15
    6e9a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("CHECK WIRING"));
    6e9e:	82 e5       	ldi	r24, 0x52	; 82
    6ea0:	98 e1       	ldi	r25, 0x18	; 24
    6ea2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    6ea6:	ef ef       	ldi	r30, 0xFF	; 255
    6ea8:	f3 ec       	ldi	r31, 0xC3	; 195
    6eaa:	29 e0       	ldi	r18, 0x09	; 9
    6eac:	e1 50       	subi	r30, 0x01	; 1
    6eae:	f0 40       	sbci	r31, 0x00	; 0
    6eb0:	20 40       	sbci	r18, 0x00	; 0
    6eb2:	e1 f7       	brne	.-8      	; 0x6eac <main+0x132>
    6eb4:	00 c0       	rjmp	.+0      	; 0x6eb6 <main+0x13c>
    6eb6:	00 00       	nop
					_delay_ms(100);
					send_emergency_off();
    6eb8:	0e 94 21 24 	call	0x4842	; 0x4842 <send_emergency_off>
    6ebc:	3f ef       	ldi	r19, 0xFF	; 255
    6ebe:	83 ec       	ldi	r24, 0xC3	; 195
    6ec0:	99 e0       	ldi	r25, 0x09	; 9
    6ec2:	31 50       	subi	r19, 0x01	; 1
    6ec4:	80 40       	sbci	r24, 0x00	; 0
    6ec6:	90 40       	sbci	r25, 0x00	; 0
    6ec8:	e1 f7       	brne	.-8      	; 0x6ec2 <main+0x148>
    6eca:	00 c0       	rjmp	.+0      	; 0x6ecc <main+0x152>
    6ecc:	00 00       	nop
					_delay_ms(100);
					CanError |= (0x01 << 2);
    6ece:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6ed2:	84 60       	ori	r24, 0x04	; 4
    6ed4:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <CanError>
    6ed8:	15 c0       	rjmp	.+42     	; 0x6f04 <main+0x18a>
				}
			}
			else
			{
				if (((CanError >> 3) & 0x01) == 0)
    6eda:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6ede:	83 fd       	sbrc	r24, 3
    6ee0:	11 c0       	rjmp	.+34     	; 0x6f04 <main+0x18a>
				{
					lcd_write_new_P(PSTR("E04 - NO CAN COMM"));
    6ee2:	80 e4       	ldi	r24, 0x40	; 64
    6ee4:	98 e1       	ldi	r25, 0x18	; 24
    6ee6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    6eea:	60 e0       	ldi	r22, 0x00	; 0
    6eec:	8f 2d       	mov	r24, r15
    6eee:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("CHECK WIRING"));
    6ef2:	83 e3       	ldi	r24, 0x33	; 51
    6ef4:	98 e1       	ldi	r25, 0x18	; 24
    6ef6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
					CanError |= (0x01 << 3);
    6efa:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6efe:	88 60       	ori	r24, 0x08	; 8
    6f00:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <CanError>
				}
			}
			//cli();
			//while(1){}
			if (!CQRx_queueIsEmpty())
    6f04:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    6f08:	81 11       	cpse	r24, r1
    6f0a:	70 cf       	rjmp	.-288    	; 0x6dec <main+0x72>
			{
				CQRx_dequeue();
    6f0c:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
				reset_CAN_error();
    6f10:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    6f14:	6b cf       	rjmp	.-298    	; 0x6dec <main+0x72>
			}
		}
		else
		{//
			if (CanError)
    6f16:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <CanError>
    6f1a:	88 23       	and	r24, r24
    6f1c:	21 f0       	breq	.+8      	; 0x6f26 <main+0x1ac>
			{
				print_menu = TRUE;
    6f1e:	f0 92 92 22 	sts	0x2292, r15	; 0x802292 <print_menu>
				CanError = 0;
    6f22:	10 92 b6 22 	sts	0x22B6, r1	; 0x8022b6 <CanError>
			}

			if (sd_card_unavailable)
    6f26:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <sd_card_unavailable>
    6f2a:	88 23       	and	r24, r24
    6f2c:	09 f4       	brne	.+2      	; 0x6f30 <main+0x1b6>
    6f2e:	41 c0       	rjmp	.+130    	; 0x6fb2 <main+0x238>
			{
				if (reset_timer < 5)
    6f30:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <reset_timer>
    6f34:	85 30       	cpi	r24, 0x05	; 5
    6f36:	70 f4       	brcc	.+28     	; 0x6f54 <main+0x1da>
				{
					lcd_write_new_P(PSTR("E19 - SD CARD"));
    6f38:	85 e2       	ldi	r24, 0x25	; 37
    6f3a:	98 e1       	ldi	r25, 0x18	; 24
    6f3c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    6f40:	60 e0       	ldi	r22, 0x00	; 0
    6f42:	81 e0       	ldi	r24, 0x01	; 1
    6f44:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("UNAVAILABLE"));
    6f48:	89 e1       	ldi	r24, 0x19	; 25
    6f4a:	98 e1       	ldi	r25, 0x18	; 24
    6f4c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>

					cli();
    6f50:	f8 94       	cli
    6f52:	ff cf       	rjmp	.-2      	; 0x6f52 <main+0x1d8>
					WHILE_TRUE();
					//lcd_update_pause = 5;
				}
				else
				{
					lcd_write_new_P(PSTR("E20 - SD CARD"));
    6f54:	8b e0       	ldi	r24, 0x0B	; 11
    6f56:	98 e1       	ldi	r25, 0x18	; 24
    6f58:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    6f5c:	60 e0       	ldi	r22, 0x00	; 0
    6f5e:	81 e0       	ldi	r24, 0x01	; 1
    6f60:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("FAIL"));
    6f64:	86 e0       	ldi	r24, 0x06	; 6
    6f66:	98 e1       	ldi	r25, 0x18	; 24
    6f68:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
					L_SLO_OFF;
    6f6c:	a5 e2       	ldi	r26, 0x25	; 37
    6f6e:	b6 e0       	ldi	r27, 0x06	; 6
    6f70:	80 e4       	ldi	r24, 0x40	; 64
    6f72:	8c 93       	st	X, r24
					L_HL_OFF;
    6f74:	41 e0       	ldi	r20, 0x01	; 1
    6f76:	4c 93       	st	X, r20
					L_EP_OFF;
    6f78:	25 ee       	ldi	r18, 0xE5	; 229
    6f7a:	36 e0       	ldi	r19, 0x06	; 6
    6f7c:	98 e0       	ldi	r25, 0x08	; 8
    6f7e:	f9 01       	movw	r30, r18
    6f80:	90 83       	st	Z, r25
					L_BR_OFF;
    6f82:	c5 e2       	ldi	r28, 0x25	; 37
    6f84:	d7 e0       	ldi	r29, 0x07	; 7
    6f86:	98 83       	st	Y, r25
					L_RV_OFF;
    6f88:	48 83       	st	Y, r20
					L_VAC_OFF;
    6f8a:	e5 e0       	ldi	r30, 0x05	; 5
    6f8c:	f7 e0       	ldi	r31, 0x07	; 7
    6f8e:	80 83       	st	Z, r24
					L_P1_OFF; L_P2_OFF; L_P3_OFF; L_P4_OFF; L_P5_OFF;
    6f90:	88 83       	st	Y, r24
    6f92:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    6f96:	60 e1       	ldi	r22, 0x10	; 16
    6f98:	6c 93       	st	X, r22
    6f9a:	54 e0       	ldi	r21, 0x04	; 4
    6f9c:	5c 93       	st	X, r21
    6f9e:	42 e0       	ldi	r20, 0x02	; 2
    6fa0:	4c 93       	st	X, r20
					L_D1_OFF; L_D2_OFF; L_D3_OFF; L_D4_OFF; L_D5_OFF;
    6fa2:	60 83       	st	Z, r22
    6fa4:	90 83       	st	Z, r25
    6fa6:	50 83       	st	Z, r21
    6fa8:	40 83       	st	Z, r20
    6faa:	f9 01       	movw	r30, r18
    6fac:	80 83       	st	Z, r24

					cli();
    6fae:	f8 94       	cli
    6fb0:	ff cf       	rjmp	.-2      	; 0x6fb0 <main+0x236>
					WHILE_TRUE();
					//lcd_update_pause = 15;
				}
			}
			if (back_safety_alert || pedal_switch_error || manual_switch_error)
    6fb2:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <back_safety_alert>
    6fb6:	81 11       	cpse	r24, r1
    6fb8:	08 c0       	rjmp	.+16     	; 0x6fca <main+0x250>
    6fba:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <pedal_switch_error>
    6fbe:	81 11       	cpse	r24, r1
    6fc0:	04 c0       	rjmp	.+8      	; 0x6fca <main+0x250>
    6fc2:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <manual_switch_error>
    6fc6:	88 23       	and	r24, r24
    6fc8:	49 f0       	breq	.+18     	; 0x6fdc <main+0x262>
			{
				if (!CQRx_queueIsEmpty())
    6fca:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    6fce:	81 11       	cpse	r24, r1
    6fd0:	0d cf       	rjmp	.-486    	; 0x6dec <main+0x72>
				{
					CQRx_dequeue();
    6fd2:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
					reset_CAN_error();
    6fd6:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    6fda:	08 cf       	rjmp	.-496    	; 0x6dec <main+0x72>
    6fdc:	c0 e0       	ldi	r28, 0x00	; 0
    6fde:	d0 e0       	ldi	r29, 0x00	; 0
			}

			//Check if any switches have been pressed
			for (int num = 0; num < NUM_SWITCHES; num++)
			{
				if (switch_pressed[num])
    6fe0:	fe 01       	movw	r30, r28
    6fe2:	eb 52       	subi	r30, 0x2B	; 43
    6fe4:	fd 4d       	sbci	r31, 0xDD	; 221
    6fe6:	80 81       	ld	r24, Z
    6fe8:	88 23       	and	r24, r24
    6fea:	09 f4       	brne	.+2      	; 0x6fee <main+0x274>
    6fec:	4d c0       	rjmp	.+154    	; 0x7088 <main+0x30e>
						printing_info = FALSE;
					}
					else*/
					//	lcd_update_pause = 3;
					//Clear switch_pressed
					switch_pressed[num] = FALSE;
    6fee:	fe 01       	movw	r30, r28
    6ff0:	eb 52       	subi	r30, 0x2B	; 43
    6ff2:	fd 4d       	sbci	r31, 0xDD	; 221
    6ff4:	10 82       	st	Z, r1
					//Perform action depending on switch
					if (!printing_info && !fuse_error && !brake_seat_switch_error && !bm_overcurrent_error)
    6ff6:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <printing_info>
    6ffa:	81 11       	cpse	r24, r1
    6ffc:	43 c0       	rjmp	.+134    	; 0x7084 <main+0x30a>
    6ffe:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <fuse_error>
    7002:	81 11       	cpse	r24, r1
    7004:	3f c0       	rjmp	.+126    	; 0x7084 <main+0x30a>
    7006:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <brake_seat_switch_error>
    700a:	81 11       	cpse	r24, r1
    700c:	3b c0       	rjmp	.+118    	; 0x7084 <main+0x30a>
    700e:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <bm_overcurrent_error>
    7012:	81 11       	cpse	r24, r1
    7014:	37 c0       	rjmp	.+110    	; 0x7084 <main+0x30a>
					{
						switch (num)
    7016:	cf 30       	cpi	r28, 0x0F	; 15
    7018:	d1 05       	cpc	r29, r1
    701a:	70 f5       	brcc	.+92     	; 0x7078 <main+0x2fe>
    701c:	fe 01       	movw	r30, r28
    701e:	e8 55       	subi	r30, 0x58	; 88
    7020:	fe 4f       	sbci	r31, 0xFE	; 254
    7022:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
						{
						case S_SLD_NUM: change_solenoid_valve_state();		break;
    7026:	0e 94 7e 30 	call	0x60fc	; 0x60fc <change_solenoid_valve_state>
    702a:	26 c0       	rjmp	.+76     	; 0x7078 <main+0x2fe>
						case S_HL_NUM: change_headlights_state();			break;
    702c:	0e 94 3e 30 	call	0x607c	; 0x607c <change_headlights_state>
    7030:	23 c0       	rjmp	.+70     	; 0x7078 <main+0x2fe>
						case S_PU_NUM: increase_water_pump_level();			break;
    7032:	0e 94 cb 2c 	call	0x5996	; 0x5996 <increase_water_pump_level>
    7036:	20 c0       	rjmp	.+64     	; 0x7078 <main+0x2fe>
						case S_SLO_NUM: change_speed();						break;
    7038:	0e 94 34 31 	call	0x6268	; 0x6268 <change_speed>
    703c:	1d c0       	rjmp	.+58     	; 0x7078 <main+0x2fe>
						case S_ECO_NUM: change_eco_mode();					break;
    703e:	0e 94 4c 31 	call	0x6298	; 0x6298 <change_eco_mode>
    7042:	1a c0       	rjmp	.+52     	; 0x7078 <main+0x2fe>
						case S_TR_NUM: change_transport_mode();				break;
    7044:	0e 94 32 2b 	call	0x5664	; 0x5664 <change_transport_mode>
    7048:	17 c0       	rjmp	.+46     	; 0x7078 <main+0x2fe>
						case S_EP_NUM: change_extra_pressure_state();		break;
    704a:	0e 94 b1 30 	call	0x6162	; 0x6162 <change_extra_pressure_state>
    704e:	14 c0       	rjmp	.+40     	; 0x7078 <main+0x2fe>
						case S_DU_NUM: increase_detergent_pump_level();		break;
    7050:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <increase_detergent_pump_level>
    7054:	11 c0       	rjmp	.+34     	; 0x7078 <main+0x2fe>
						case S_RV_NUM: change_forward_reverse_state();		break;
    7056:	0e 94 3c 2c 	call	0x5878	; 0x5878 <change_forward_reverse_state>
    705a:	0e c0       	rjmp	.+28     	; 0x7078 <main+0x2fe>
						case S_DD_NUM: decrease_detergent_pump_level();		break;
    705c:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <decrease_detergent_pump_level>
    7060:	0b c0       	rjmp	.+22     	; 0x7078 <main+0x2fe>
						case S_VAC_NUM: change_vacuum_state();				break;
    7062:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <change_vacuum_state>
    7066:	08 c0       	rjmp	.+16     	; 0x7078 <main+0x2fe>
						//case S_HRN_NUM: change_horn_state();				break;
						case S_BR_NUM: change_brush_state();				break;
    7068:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <change_brush_state>
    706c:	05 c0       	rjmp	.+10     	; 0x7078 <main+0x2fe>
						case S_ATO_NUM: change_auto_state();				break;
    706e:	0e 94 93 29 	call	0x5326	; 0x5326 <change_auto_state>
    7072:	02 c0       	rjmp	.+4      	; 0x7078 <main+0x2fe>
						case S_PD_NUM: decrease_water_pump_level();			break;
    7074:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <decrease_water_pump_level>

						default:  break;
						}

						//change_on_value =TRUE;
						update_A2_settings();
    7078:	0e 94 c5 1c 	call	0x398a	; 0x398a <update_A2_settings>
						periodic_send = FALSE;
    707c:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <periodic_send>
						periodic_count = 0;
    7080:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <periodic_count>
					}
					//Start the reset counter to return to menu screen
					start_input_reset();
    7084:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <start_input_reset>
				}
				continue;
			}

			//Check if any switches have been pressed
			for (int num = 0; num < NUM_SWITCHES; num++)
    7088:	21 96       	adiw	r28, 0x01	; 1
    708a:	cf 30       	cpi	r28, 0x0F	; 15
    708c:	d1 05       	cpc	r29, r1
    708e:	09 f0       	breq	.+2      	; 0x7092 <main+0x318>
    7090:	a7 cf       	rjmp	.-178    	; 0x6fe0 <main+0x266>
					start_input_reset();
				}
			}

			//If new auto flag is set store current settings to eeprom
			if (new_auto_flag)
    7092:	80 91 cb 22 	lds	r24, 0x22CB	; 0x8022cb <new_auto_flag>
    7096:	88 23       	and	r24, r24
    7098:	b1 f0       	breq	.+44     	; 0x70c6 <main+0x34c>
			{
				change_auto_settings();
    709a:	0e 94 8f 2c 	call	0x591e	; 0x591e <change_auto_settings>
				L_ATO_ON;
    709e:	f4 01       	movw	r30, r8
    70a0:	b0 82       	st	Z, r11

				lcd_write_new_P(PSTR("AUTO MODE   "));
    70a2:	89 ef       	ldi	r24, 0xF9	; 249
    70a4:	97 e1       	ldi	r25, 0x17	; 23
    70a6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    70aa:	60 e0       	ldi	r22, 0x00	; 0
    70ac:	8f 2d       	mov	r24, r15
    70ae:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHANGED     "));
    70b2:	8c ee       	ldi	r24, 0xEC	; 236
    70b4:	97 e1       	ldi	r25, 0x17	; 23
    70b6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
				lcd_update_pause = 2;
    70ba:	c0 92 58 21 	sts	0x2158, r12	; 0x802158 <lcd_update_pause>
				//Start the reset counter to return to menu screen
				start_input_reset();
    70be:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <start_input_reset>

				new_auto_flag = FALSE;
    70c2:	10 92 cb 22 	sts	0x22CB, r1	; 0x8022cb <new_auto_flag>
			}
			if (update_hour)
    70c6:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <update_hour>
    70ca:	88 23       	and	r24, r24
    70cc:	21 f0       	breq	.+8      	; 0x70d6 <main+0x35c>
			{
				write_hours();
    70ce:	0e 94 e3 5a 	call	0xb5c6	; 0xb5c6 <write_hours>
				update_hour = FALSE;
    70d2:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <update_hour>
			}
			//IVA002: Fix for EEPROM corruption
			if (update_minutes)
    70d6:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <update_minutes>
    70da:	88 23       	and	r24, r24
    70dc:	21 f0       	breq	.+8      	; 0x70e6 <main+0x36c>
			{
				write_minutes();
    70de:	0e 94 21 5b 	call	0xb642	; 0xb642 <write_minutes>
				update_minutes = false;
    70e2:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <update_minutes>
			}

			if (!(PORTK_IN & (1 << S_HRN)) && horn_off)
    70e6:	f8 01       	movw	r30, r16
    70e8:	80 81       	ld	r24, Z
    70ea:	81 fd       	sbrc	r24, 1
    70ec:	10 c0       	rjmp	.+32     	; 0x710e <main+0x394>
    70ee:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <horn_off>
    70f2:	88 23       	and	r24, r24
    70f4:	09 f4       	brne	.+2      	; 0x70f8 <main+0x37e>
    70f6:	66 c1       	rjmp	.+716    	; 0x73c4 <main+0x64a>
			{
				//horn=ON;
				change_horn_state();
    70f8:	0e 94 03 30 	call	0x6006	; 0x6006 <change_horn_state>
				//_delay_ms(50);
				update_A2_settings();
    70fc:	0e 94 c5 1c 	call	0x398a	; 0x398a <update_A2_settings>
				periodic_send = FALSE;
    7100:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <periodic_send>
				periodic_count = 0;
    7104:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <periodic_count>
				//change_on_value =TRUE;
				horn_off = FALSE;
    7108:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <horn_off>
    710c:	19 c0       	rjmp	.+50     	; 0x7140 <main+0x3c6>

			}
			else if ((PORTK_IN & (1 << S_HRN)) && !horn_off)
    710e:	f8 01       	movw	r30, r16
    7110:	80 81       	ld	r24, Z
    7112:	81 ff       	sbrs	r24, 1
    7114:	15 c0       	rjmp	.+42     	; 0x7140 <main+0x3c6>
    7116:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <horn_off>
    711a:	81 11       	cpse	r24, r1
    711c:	11 c0       	rjmp	.+34     	; 0x7140 <main+0x3c6>
			{
				//horn=OFF;
				change_horn_state();
    711e:	0e 94 03 30 	call	0x6006	; 0x6006 <change_horn_state>
				lcd_update_pause = 3;
    7122:	a0 92 58 21 	sts	0x2158, r10	; 0x802158 <lcd_update_pause>
				//_delay_ms(50);
				update_A2_settings();
    7126:	0e 94 c5 1c 	call	0x398a	; 0x398a <update_A2_settings>
				periodic_send = FALSE;
    712a:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <periodic_send>
				periodic_count = 0;
    712e:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <periodic_count>
				//change_on_value =TRUE;
				horn_off = TRUE;
    7132:	f0 92 d2 21 	sts	0x21D2, r15	; 0x8021d2 <horn_off>
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <main+0x3c6>
				}
			}*/

			while (!CQRx_queueIsEmpty())
			{
				CQRx_dequeue();
    7138:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
				reset_CAN_error();
    713c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
					lcd_write_P(PSTR("FAIL"));
					lcd_update_pause = 15;
				}
			}*/

			while (!CQRx_queueIsEmpty())
    7140:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    7144:	88 23       	and	r24, r24
    7146:	c1 f3       	breq	.-16     	; 0x7138 <main+0x3be>
			{
				CQRx_dequeue();
				reset_CAN_error();
			}

			if (printing_info)
    7148:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <printing_info>
    714c:	88 23       	and	r24, r24
    714e:	59 f0       	breq	.+22     	; 0x7166 <main+0x3ec>
			{
				if (printing_info_counter % 2 == 0 && lcd_update_pause == 0)
    7150:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <printing_info_counter>
    7154:	80 fd       	sbrc	r24, 0
    7156:	4a ce       	rjmp	.-876    	; 0x6dec <main+0x72>
    7158:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    715c:	81 11       	cpse	r24, r1
    715e:	46 ce       	rjmp	.-884    	; 0x6dec <main+0x72>
					print_info();
    7160:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <print_info>
    7164:	43 ce       	rjmp	.-890    	; 0x6dec <main+0x72>
				continue;
			}

			//If print menu flag is raised print the menu screen on the lcd screen
			if (print_menu)
    7166:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <print_menu>
    716a:	88 23       	and	r24, r24
    716c:	09 f4       	brne	.+2      	; 0x7170 <main+0x3f6>
    716e:	9b c0       	rjmp	.+310    	; 0x72a6 <main+0x52c>
			{
				if (top_error)
    7170:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    7174:	88 23       	and	r24, r24
    7176:	b1 f0       	breq	.+44     	; 0x71a4 <main+0x42a>
				{
					if (top_error == 0xA2)
    7178:	82 3a       	cpi	r24, 0xA2	; 162
    717a:	29 f4       	brne	.+10     	; 0x7186 <main+0x40c>
					{
						lcd_write_new_P(PSTR("E03 - A2 TOP ERROR"));
    717c:	89 ed       	ldi	r24, 0xD9	; 217
    717e:	97 e1       	ldi	r25, 0x17	; 23
    7180:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    7184:	06 c0       	rjmp	.+12     	; 0x7192 <main+0x418>
					}
					else if (top_error == 0xA3)
    7186:	83 3a       	cpi	r24, 0xA3	; 163
    7188:	21 f4       	brne	.+8      	; 0x7192 <main+0x418>
					{
						lcd_write_new_P(PSTR("E11 - A3 TOP ERROR"));
    718a:	86 ec       	ldi	r24, 0xC6	; 198
    718c:	97 e1       	ldi	r25, 0x17	; 23
    718e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					}
					lcd_set_cursor(1, 0);
    7192:	60 e0       	ldi	r22, 0x00	; 0
    7194:	8f 2d       	mov	r24, r15
    7196:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("TURN OFF KEY"));
    719a:	89 eb       	ldi	r24, 0xB9	; 185
    719c:	97 e1       	ldi	r25, 0x17	; 23
    719e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    71a2:	7f c0       	rjmp	.+254    	; 0x72a2 <main+0x528>
				}
				else if (bm_overcurrent_error)
    71a4:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <bm_overcurrent_error>
    71a8:	88 23       	and	r24, r24
    71aa:	69 f0       	breq	.+26     	; 0x71c6 <main+0x44c>
				{
					lcd_write_new_P(PSTR("E22 - BM OVERLOAD"));
    71ac:	87 ea       	ldi	r24, 0xA7	; 167
    71ae:	97 e1       	ldi	r25, 0x17	; 23
    71b0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    71b4:	60 e0       	ldi	r22, 0x00	; 0
    71b6:	8f 2d       	mov	r24, r15
    71b8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("TURN OFF KEY"));
    71bc:	8a e9       	ldi	r24, 0x9A	; 154
    71be:	97 e1       	ldi	r25, 0x17	; 23
    71c0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    71c4:	6e c0       	rjmp	.+220    	; 0x72a2 <main+0x528>
				}
				else if (fault_error)
    71c6:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <fault_error>
    71ca:	88 23       	and	r24, r24
    71cc:	69 f0       	breq	.+26     	; 0x71e8 <main+0x46e>
				{
					lcd_write_new_P(PSTR("E21 - 8701 FAULT"));
    71ce:	89 e8       	ldi	r24, 0x89	; 137
    71d0:	97 e1       	ldi	r25, 0x17	; 23
    71d2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    71d6:	60 e0       	ldi	r22, 0x00	; 0
    71d8:	8f 2d       	mov	r24, r15
    71da:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("TURN OFF KEY"));
    71de:	8c e7       	ldi	r24, 0x7C	; 124
    71e0:	97 e1       	ldi	r25, 0x17	; 23
    71e2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    71e6:	5d c0       	rjmp	.+186    	; 0x72a2 <main+0x528>
				}
				else if (fuse_error)
    71e8:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <fuse_error>
    71ec:	88 23       	and	r24, r24
    71ee:	69 f0       	breq	.+26     	; 0x720a <main+0x490>
				{
					lcd_write_new_P(PSTR("E01 - FUSE BLOWN"));
    71f0:	8b e6       	ldi	r24, 0x6B	; 107
    71f2:	97 e1       	ldi	r25, 0x17	; 23
    71f4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    71f8:	60 e0       	ldi	r22, 0x00	; 0
    71fa:	8f 2d       	mov	r24, r15
    71fc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("TURN OFF KEY"));
    7200:	8e e5       	ldi	r24, 0x5E	; 94
    7202:	97 e1       	ldi	r25, 0x17	; 23
    7204:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    7208:	4c c0       	rjmp	.+152    	; 0x72a2 <main+0x528>
				}
				else if (overvoltage_error)
    720a:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <overvoltage_error>
    720e:	88 23       	and	r24, r24
    7210:	69 f0       	breq	.+26     	; 0x722c <main+0x4b2>
				{
					lcd_write_new_P(PSTR("E13 - OVERVOLTAGE"));
    7212:	8c e4       	ldi	r24, 0x4C	; 76
    7214:	97 e1       	ldi	r25, 0x17	; 23
    7216:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    721a:	60 e0       	ldi	r22, 0x00	; 0
    721c:	8f 2d       	mov	r24, r15
    721e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("TURN OFF KEY"));
    7222:	8f e3       	ldi	r24, 0x3F	; 63
    7224:	97 e1       	ldi	r25, 0x17	; 23
    7226:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    722a:	3b c0       	rjmp	.+118    	; 0x72a2 <main+0x528>
				}
				else if (pedal_switch_error)
    722c:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <pedal_switch_error>
    7230:	88 23       	and	r24, r24
    7232:	69 f0       	breq	.+26     	; 0x724e <main+0x4d4>
				{
					lcd_write_new_P(PSTR("E10 - RELEASE"));
    7234:	81 e3       	ldi	r24, 0x31	; 49
    7236:	97 e1       	ldi	r25, 0x17	; 23
    7238:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    723c:	60 e0       	ldi	r22, 0x00	; 0
    723e:	8f 2d       	mov	r24, r15
    7240:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("ACCELERATOR PEDAL"));
    7244:	8f e1       	ldi	r24, 0x1F	; 31
    7246:	97 e1       	ldi	r25, 0x17	; 23
    7248:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    724c:	2a c0       	rjmp	.+84     	; 0x72a2 <main+0x528>
				}
				else if (manual_switch_error)
    724e:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <manual_switch_error>
    7252:	88 23       	and	r24, r24
    7254:	69 f0       	breq	.+26     	; 0x7270 <main+0x4f6>
				{
					lcd_write_new_P(PSTR("E15 -EMERGENCY DRIVE"));
    7256:	8a e0       	ldi	r24, 0x0A	; 10
    7258:	97 e1       	ldi	r25, 0x17	; 23
    725a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    725e:	60 e0       	ldi	r22, 0x00	; 0
    7260:	8f 2d       	mov	r24, r15
    7262:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("SW-OUT OF NEUTRAL"));
    7266:	88 ef       	ldi	r24, 0xF8	; 248
    7268:	96 e1       	ldi	r25, 0x16	; 22
    726a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    726e:	19 c0       	rjmp	.+50     	; 0x72a2 <main+0x528>
				}
				else if (brake_seat_switch_error)
    7270:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <brake_seat_switch_error>
    7274:	88 23       	and	r24, r24
    7276:	69 f0       	breq	.+26     	; 0x7292 <main+0x518>
				{
					lcd_write_new_P(PSTR("E14 - BRAKE/SEAT"));
    7278:	87 ee       	ldi	r24, 0xE7	; 231
    727a:	96 e1       	ldi	r25, 0x16	; 22
    727c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
					lcd_set_cursor(1, 0);
    7280:	60 e0       	ldi	r22, 0x00	; 0
    7282:	8f 2d       	mov	r24, r15
    7284:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("SWITCH OPEN"));
    7288:	8b ed       	ldi	r24, 0xDB	; 219
    728a:	96 e1       	ldi	r25, 0x16	; 22
    728c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    7290:	08 c0       	rjmp	.+16     	; 0x72a2 <main+0x528>
				}
				else if (lcd_update_pause == 0)
    7292:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    7296:	81 11       	cpse	r24, r1
    7298:	04 c0       	rjmp	.+8      	; 0x72a2 <main+0x528>
				{
					lcd_menu();
    729a:	0e 94 8d 33 	call	0x671a	; 0x671a <lcd_menu>
					request_battery_can();
    729e:	0e 94 0e 19 	call	0x321c	; 0x321c <request_battery_can>
				}
				print_menu = FALSE;
    72a2:	10 92 92 22 	sts	0x2292, r1	; 0x802292 <print_menu>
			}

			//If update menu flag is raised only print the battery and hour
			if (update_menu && lcd_update_pause == 0)
    72a6:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <update_menu>
    72aa:	88 23       	and	r24, r24
    72ac:	b1 f1       	breq	.+108    	; 0x731a <main+0x5a0>
    72ae:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    72b2:	81 11       	cpse	r24, r1
    72b4:	32 c0       	rjmp	.+100    	; 0x731a <main+0x5a0>
			{
				if (!pedal_switch_error && !manual_switch_error && !overvoltage_error && !top_error && !fuse_error && !brake_seat_switch_error && !fault_error && !bm_overcurrent_error)
    72b6:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <pedal_switch_error>
    72ba:	81 11       	cpse	r24, r1
    72bc:	1e c0       	rjmp	.+60     	; 0x72fa <main+0x580>
    72be:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <manual_switch_error>
    72c2:	81 11       	cpse	r24, r1
    72c4:	1a c0       	rjmp	.+52     	; 0x72fa <main+0x580>
    72c6:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <overvoltage_error>
    72ca:	81 11       	cpse	r24, r1
    72cc:	16 c0       	rjmp	.+44     	; 0x72fa <main+0x580>
    72ce:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    72d2:	81 11       	cpse	r24, r1
    72d4:	12 c0       	rjmp	.+36     	; 0x72fa <main+0x580>
    72d6:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <fuse_error>
    72da:	81 11       	cpse	r24, r1
    72dc:	0e c0       	rjmp	.+28     	; 0x72fa <main+0x580>
    72de:	80 91 c9 22 	lds	r24, 0x22C9	; 0x8022c9 <brake_seat_switch_error>
    72e2:	81 11       	cpse	r24, r1
    72e4:	0a c0       	rjmp	.+20     	; 0x72fa <main+0x580>
    72e6:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <fault_error>
    72ea:	81 11       	cpse	r24, r1
    72ec:	06 c0       	rjmp	.+12     	; 0x72fa <main+0x580>
    72ee:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <bm_overcurrent_error>
    72f2:	81 11       	cpse	r24, r1
    72f4:	02 c0       	rjmp	.+4      	; 0x72fa <main+0x580>
				{
					lcd_menu_update();
    72f6:	0e 94 67 34 	call	0x68ce	; 0x68ce <lcd_menu_update>
				}

				//while(a==1 || b==0)
				//{					
				request_battery_can();
    72fa:	0e 94 0e 19 	call	0x321c	; 0x321c <request_battery_can>
				if (periodic_send == TRUE)
    72fe:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <periodic_send>
    7302:	81 30       	cpi	r24, 0x01	; 1
    7304:	51 f4       	brne	.+20     	; 0x731a <main+0x5a0>
				{
					change_on_value = FALSE;
    7306:	10 92 b1 22 	sts	0x22B1, r1	; 0x8022b1 <change_on_value>
					periodic_send = FALSE;
    730a:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <periodic_send>
					periodic_count = 0;
    730e:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <periodic_count>
					update_A2_settings();
    7312:	0e 94 c5 1c 	call	0x398a	; 0x398a <update_A2_settings>
					update_menu = FALSE;
    7316:	10 92 a2 22 	sts	0x22A2, r1	; 0x8022a2 <update_menu>
			else
			{
						count++;
			}*/
			//If battery is low print battery low
			if (print_battery_low && battery_status != BATTERY_UNKNOWN && lcd_update_pause == 0)
    731a:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <print_battery_low>
    731e:	88 23       	and	r24, r24
    7320:	99 f0       	breq	.+38     	; 0x7348 <main+0x5ce>
    7322:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    7326:	88 23       	and	r24, r24
    7328:	79 f0       	breq	.+30     	; 0x7348 <main+0x5ce>
    732a:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    732e:	81 11       	cpse	r24, r1
    7330:	0b c0       	rjmp	.+22     	; 0x7348 <main+0x5ce>
			{
				lcd_set_cursor(0, 0);
    7332:	60 e0       	ldi	r22, 0x00	; 0
    7334:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("BATTERY LOW!"));
    7338:	8e ec       	ldi	r24, 0xCE	; 206
    733a:	96 e1       	ldi	r25, 0x16	; 22
    733c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
				LCD_LED_TGL;
    7340:	f2 01       	movw	r30, r4
    7342:	d0 82       	st	Z, r13
				print_battery_low = FALSE;
    7344:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <print_battery_low>
			}

			//If battery is too low to continue operating turn off motors and print charge battery
			if (print_battery_off && !print_menu && battery_status != BATTERY_UNKNOWN)
    7348:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <print_battery_off>
    734c:	88 23       	and	r24, r24
    734e:	09 f4       	brne	.+2      	; 0x7352 <main+0x5d8>
    7350:	4d cd       	rjmp	.-1382   	; 0x6dec <main+0x72>
    7352:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <print_menu>
    7356:	81 11       	cpse	r24, r1
    7358:	49 cd       	rjmp	.-1390   	; 0x6dec <main+0x72>
    735a:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    735e:	88 23       	and	r24, r24
    7360:	09 f4       	brne	.+2      	; 0x7364 <main+0x5ea>
    7362:	44 cd       	rjmp	.-1400   	; 0x6dec <main+0x72>
			{
				if (motors_status != MOTORS_OFF)
    7364:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    7368:	8a 3a       	cpi	r24, 0xAA	; 170
    736a:	a1 f0       	breq	.+40     	; 0x7394 <main+0x61a>
				{
					turn_off_motors();
    736c:	0e 94 cd 31 	call	0x639a	; 0x639a <turn_off_motors>

					motors_status = MOTORS_OFF;
    7370:	e0 92 7f 21 	sts	0x217F, r14	; 0x80217f <motors_status>
					cli();
    7374:	f8 94       	cli
					eeprom_busy_wait();
    7376:	f3 01       	movw	r30, r6
    7378:	80 81       	ld	r24, Z
    737a:	88 23       	and	r24, r24
    737c:	e4 f3       	brlt	.-8      	; 0x7376 <main+0x5fc>
					eeprom_update_byte((uint8_t *)EEP8_MOTORS_STATUS_ADDR, (uint8_t)MOTORS_OFF);
    737e:	6e 2d       	mov	r22, r14
    7380:	83 e2       	ldi	r24, 0x23	; 35
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
					sei();
    7388:	78 94       	sei
				}

				if (motors_status == MOTORS_OFF && lcd_update_pause == 0)
    738a:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    738e:	8a 3a       	cpi	r24, 0xAA	; 170
    7390:	09 f0       	breq	.+2      	; 0x7394 <main+0x61a>
    7392:	2c cd       	rjmp	.-1448   	; 0x6dec <main+0x72>
    7394:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    7398:	81 11       	cpse	r24, r1
    739a:	28 cd       	rjmp	.-1456   	; 0x6dec <main+0x72>
				{
					lcd_set_cursor(0, 0);
    739c:	60 e0       	ldi	r22, 0x00	; 0
    739e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("E16 - CHARGE"));
    73a2:	81 ec       	ldi	r24, 0xC1	; 193
    73a4:	96 e1       	ldi	r25, 0x16	; 22
    73a6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
					lcd_set_cursor(1, 0);
    73aa:	60 e0       	ldi	r22, 0x00	; 0
    73ac:	8f 2d       	mov	r24, r15
    73ae:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
					lcd_write_P(PSTR("THE BATTERY!"));
    73b2:	84 eb       	ldi	r24, 0xB4	; 180
    73b4:	96 e1       	ldi	r25, 0x16	; 22
    73b6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
					LCD_LED_TGL;
    73ba:	f2 01       	movw	r30, r4
    73bc:	d0 82       	st	Z, r13
					print_battery_off = FALSE;
    73be:	10 92 44 23 	sts	0x2344, r1	; 0x802344 <print_battery_off>
    73c2:	14 cd       	rjmp	.-1496   	; 0x6dec <main+0x72>
				periodic_count = 0;
				//change_on_value =TRUE;
				horn_off = FALSE;

			}
			else if ((PORTK_IN & (1 << S_HRN)) && !horn_off)
    73c4:	f8 01       	movw	r30, r16
    73c6:	80 81       	ld	r24, Z
    73c8:	81 ff       	sbrs	r24, 1
    73ca:	ba ce       	rjmp	.-652    	; 0x7140 <main+0x3c6>
    73cc:	a8 ce       	rjmp	.-688    	; 0x711e <main+0x3a4>

000073ce <__vector_46>:
//}
//

//TWIE Master Interrupt vector
ISR(TWIE_TWIM_vect)
{
    73ce:	1f 92       	push	r1
    73d0:	0f 92       	push	r0
    73d2:	0f b6       	in	r0, 0x3f	; 63
    73d4:	0f 92       	push	r0
    73d6:	11 24       	eor	r1, r1
    73d8:	08 b6       	in	r0, 0x38	; 56
    73da:	0f 92       	push	r0
    73dc:	18 be       	out	0x38, r1	; 56
    73de:	09 b6       	in	r0, 0x39	; 57
    73e0:	0f 92       	push	r0
    73e2:	19 be       	out	0x39, r1	; 57
    73e4:	0b b6       	in	r0, 0x3b	; 59
    73e6:	0f 92       	push	r0
    73e8:	1b be       	out	0x3b, r1	; 59
    73ea:	2f 93       	push	r18
    73ec:	3f 93       	push	r19
    73ee:	4f 93       	push	r20
    73f0:	5f 93       	push	r21
    73f2:	6f 93       	push	r22
    73f4:	7f 93       	push	r23
    73f6:	8f 93       	push	r24
    73f8:	9f 93       	push	r25
    73fa:	af 93       	push	r26
    73fc:	bf 93       	push	r27
    73fe:	ef 93       	push	r30
    7400:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
    7402:	86 ef       	ldi	r24, 0xF6	; 246
    7404:	91 e2       	ldi	r25, 0x21	; 33
    7406:	0e 94 a1 60 	call	0xc142	; 0xc142 <TWI_MasterInterruptHandler>
    740a:	ff 91       	pop	r31
    740c:	ef 91       	pop	r30
    740e:	bf 91       	pop	r27
    7410:	af 91       	pop	r26
    7412:	9f 91       	pop	r25
    7414:	8f 91       	pop	r24
    7416:	7f 91       	pop	r23
    7418:	6f 91       	pop	r22
    741a:	5f 91       	pop	r21
    741c:	4f 91       	pop	r20
    741e:	3f 91       	pop	r19
    7420:	2f 91       	pop	r18
    7422:	0f 90       	pop	r0
    7424:	0b be       	out	0x3b, r0	; 59
    7426:	0f 90       	pop	r0
    7428:	09 be       	out	0x39, r0	; 57
    742a:	0f 90       	pop	r0
    742c:	08 be       	out	0x38, r0	; 56
    742e:	0f 90       	pop	r0
    7430:	0f be       	out	0x3f, r0	; 63
    7432:	0f 90       	pop	r0
    7434:	1f 90       	pop	r1
    7436:	18 95       	reti

00007438 <set_to_default>:
}
}


void set_to_default(void)
{
    7438:	cf 93       	push	r28
    743a:	df 93       	push	r29
    743c:	1f 92       	push	r1
    743e:	cd b7       	in	r28, 0x3d	; 61
    7440:	de b7       	in	r29, 0x3e	; 62
	cli();
    7442:	f8 94       	cli
	eeprom_update_byte((uint8_t *)EEP8_VACUUM_SLOW_START, 12); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for vacuum motor
    7444:	6c e0       	ldi	r22, 0x0C	; 12
    7446:	89 e1       	ldi	r24, 0x19	; 25
    7448:	90 e0       	ldi	r25, 0x00	; 0
    744a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    744e:	ef ec       	ldi	r30, 0xCF	; 207
    7450:	f1 e0       	ldi	r31, 0x01	; 1
    7452:	80 81       	ld	r24, Z
    7454:	88 23       	and	r24, r24
    7456:	ec f3       	brlt	.-6      	; 0x7452 <set_to_default+0x1a>
	eeprom_update_byte((uint8_t *)EEP8_BRUSH_SLOW_START, 12); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for brush motor
    7458:	6c e0       	ldi	r22, 0x0C	; 12
    745a:	8a e1       	ldi	r24, 0x1A	; 26
    745c:	90 e0       	ldi	r25, 0x00	; 0
    745e:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    7462:	ef ec       	ldi	r30, 0xCF	; 207
    7464:	f1 e0       	ldi	r31, 0x01	; 1
    7466:	80 81       	ld	r24, Z
    7468:	88 23       	and	r24, r24
    746a:	ec f3       	brlt	.-6      	; 0x7466 <set_to_default+0x2e>
	eeprom_update_byte((uint8_t *)EEP8_PRE_SWP_SLOW_START, 12); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for preswp motor
    746c:	6c e0       	ldi	r22, 0x0C	; 12
    746e:	8b e1       	ldi	r24, 0x1B	; 27
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    7476:	ef ec       	ldi	r30, 0xCF	; 207
    7478:	f1 e0       	ldi	r31, 0x01	; 1
    747a:	80 81       	ld	r24, Z
    747c:	88 23       	and	r24, r24
    747e:	ec f3       	brlt	.-6      	; 0x747a <set_to_default+0x42>

	//Set default battery type
	eeprom_update_byte((uint8_t *)EEP8_BATTERY_TYPE, LEAD);	//Lead battery type is the default battery type. Other types: AGM, GEL
    7480:	62 e1       	ldi	r22, 0x12	; 18
    7482:	81 e2       	ldi	r24, 0x21	; 33
    7484:	90 e0       	ldi	r25, 0x00	; 0
    7486:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    748a:	ef ec       	ldi	r30, 0xCF	; 207
    748c:	f1 e0       	ldi	r31, 0x01	; 1
    748e:	80 81       	ld	r24, Z
    7490:	88 23       	and	r24, r24
    7492:	ec f3       	brlt	.-6      	; 0x748e <set_to_default+0x56>

	//Read in the drive motor settings
	vacuum_slow_start = eeprom_read_byte((const uint8_t *)EEP8_VACUUM_SLOW_START);
    7494:	89 e1       	ldi	r24, 0x19	; 25
    7496:	90 e0       	ldi	r25, 0x00	; 0
    7498:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    749c:	80 93 a3 22 	sts	0x22A3, r24	; 0x8022a3 <vacuum_slow_start>
	eeprom_busy_wait();
    74a0:	ef ec       	ldi	r30, 0xCF	; 207
    74a2:	f1 e0       	ldi	r31, 0x01	; 1
    74a4:	80 81       	ld	r24, Z
    74a6:	88 23       	and	r24, r24
    74a8:	ec f3       	brlt	.-6      	; 0x74a4 <set_to_default+0x6c>
	brush_slow_start = eeprom_read_byte((const uint8_t *)EEP8_BRUSH_SLOW_START);
    74aa:	8a e1       	ldi	r24, 0x1A	; 26
    74ac:	90 e0       	ldi	r25, 0x00	; 0
    74ae:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    74b2:	80 93 b7 22 	sts	0x22B7, r24	; 0x8022b7 <brush_slow_start>
	eeprom_busy_wait();
    74b6:	ef ec       	ldi	r30, 0xCF	; 207
    74b8:	f1 e0       	ldi	r31, 0x01	; 1
    74ba:	80 81       	ld	r24, Z
    74bc:	88 23       	and	r24, r24
    74be:	ec f3       	brlt	.-6      	; 0x74ba <set_to_default+0x82>
	pre_swp_slow_start = eeprom_read_byte((const uint8_t *)EEP8_PRE_SWP_SLOW_START);
    74c0:	8b e1       	ldi	r24, 0x1B	; 27
    74c2:	90 e0       	ldi	r25, 0x00	; 0
    74c4:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    74c8:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <pre_swp_slow_start>
	eeprom_busy_wait();
    74cc:	ef ec       	ldi	r30, 0xCF	; 207
    74ce:	f1 e0       	ldi	r31, 0x01	; 1
    74d0:	80 81       	ld	r24, Z
    74d2:	88 23       	and	r24, r24
    74d4:	ec f3       	brlt	.-6      	; 0x74d0 <set_to_default+0x98>

	//Read in the battery type
	battery_type = eeprom_read_byte((const uint8_t *)EEP8_BATTERY_TYPE);
    74d6:	81 e2       	ldi	r24, 0x21	; 33
    74d8:	90 e0       	ldi	r25, 0x00	; 0
    74da:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    74de:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <battery_type>
	eeprom_busy_wait();
    74e2:	ef ec       	ldi	r30, 0xCF	; 207
    74e4:	f1 e0       	ldi	r31, 0x01	; 1
    74e6:	80 81       	ld	r24, Z
    74e8:	88 23       	and	r24, r24
    74ea:	ec f3       	brlt	.-6      	; 0x74e6 <set_to_default+0xae>

	eeprom_read_block((void *)serial_num, (const void*)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    74ec:	40 e1       	ldi	r20, 0x10	; 16
    74ee:	50 e0       	ldi	r21, 0x00	; 0
    74f0:	60 e3       	ldi	r22, 0x30	; 48
    74f2:	70 e0       	ldi	r23, 0x00	; 0
    74f4:	83 e8       	ldi	r24, 0x83	; 131
    74f6:	91 e2       	ldi	r25, 0x21	; 33
    74f8:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
	eeprom_busy_wait();
    74fc:	ef ec       	ldi	r30, 0xCF	; 207
    74fe:	f1 e0       	ldi	r31, 0x01	; 1
    7500:	80 81       	ld	r24, Z
    7502:	88 23       	and	r24, r24
    7504:	ec f3       	brlt	.-6      	; 0x7500 <set_to_default+0xc8>
	if (serial_num[4] != '_')
    7506:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <serial_num+0x4>
    750a:	8f 35       	cpi	r24, 0x5F	; 95
    750c:	a1 f0       	breq	.+40     	; 0x7536 <set_to_default+0xfe>
	{
		serial_num[4] = '_';
    750e:	e3 e8       	ldi	r30, 0x83	; 131
    7510:	f1 e2       	ldi	r31, 0x21	; 33
    7512:	8f e5       	ldi	r24, 0x5F	; 95
    7514:	84 83       	std	Z+4, r24	; 0x04
		serial_num[7] = '_';
    7516:	87 83       	std	Z+7, r24	; 0x07
		serial_num[9] = '_';
    7518:	81 87       	std	Z+9, r24	; 0x09
		serial_num[14] = '_';
    751a:	86 87       	std	Z+14, r24	; 0x0e
		serial_num[SERIAL_NUM_LEN] = '\0';
    751c:	10 8a       	std	Z+16, r1	; 0x10
		eeprom_update_block((const void*)serial_num, (void *)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    751e:	40 e1       	ldi	r20, 0x10	; 16
    7520:	50 e0       	ldi	r21, 0x00	; 0
    7522:	60 e3       	ldi	r22, 0x30	; 48
    7524:	70 e0       	ldi	r23, 0x00	; 0
    7526:	cf 01       	movw	r24, r30
    7528:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
		eeprom_busy_wait();
    752c:	ef ec       	ldi	r30, 0xCF	; 207
    752e:	f1 e0       	ldi	r31, 0x01	; 1
    7530:	80 81       	ld	r24, Z
    7532:	88 23       	and	r24, r24
    7534:	ec f3       	brlt	.-6      	; 0x7530 <set_to_default+0xf8>
	}

	eeprom_read_block((void *)A1_serial_num, (const void*)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    7536:	4e e0       	ldi	r20, 0x0E	; 14
    7538:	50 e0       	ldi	r21, 0x00	; 0
    753a:	60 e7       	ldi	r22, 0x70	; 112
    753c:	70 e0       	ldi	r23, 0x00	; 0
    753e:	88 e9       	ldi	r24, 0x98	; 152
    7540:	91 e2       	ldi	r25, 0x21	; 33
    7542:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
	eeprom_busy_wait();
    7546:	ef ec       	ldi	r30, 0xCF	; 207
    7548:	f1 e0       	ldi	r31, 0x01	; 1
    754a:	80 81       	ld	r24, Z
    754c:	88 23       	and	r24, r24
    754e:	ec f3       	brlt	.-6      	; 0x754a <set_to_default+0x112>
	if (A1_serial_num[0] != 'R')
    7550:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <A1_serial_num>
    7554:	82 35       	cpi	r24, 0x52	; 82
    7556:	99 f0       	breq	.+38     	; 0x757e <set_to_default+0x146>
	{
		A1_serial_num[0] = 'R';
    7558:	e8 e9       	ldi	r30, 0x98	; 152
    755a:	f1 e2       	ldi	r31, 0x21	; 33
    755c:	82 e5       	ldi	r24, 0x52	; 82
    755e:	80 83       	st	Z, r24
		A1_serial_num[1] = 'V';
    7560:	86 e5       	ldi	r24, 0x56	; 86
    7562:	81 83       	std	Z+1, r24	; 0x01
		A1_serial_num[A1_SERIAL_NUM_LEN] = '\0'; //IVA001: Fixed incorrect array index
    7564:	16 86       	std	Z+14, r1	; 0x0e
		eeprom_update_block((const void*)A1_serial_num, (void *)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    7566:	4e e0       	ldi	r20, 0x0E	; 14
    7568:	50 e0       	ldi	r21, 0x00	; 0
    756a:	60 e7       	ldi	r22, 0x70	; 112
    756c:	70 e0       	ldi	r23, 0x00	; 0
    756e:	cf 01       	movw	r24, r30
    7570:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
		eeprom_busy_wait();
    7574:	ef ec       	ldi	r30, 0xCF	; 207
    7576:	f1 e0       	ldi	r31, 0x01	; 1
    7578:	80 81       	ld	r24, Z
    757a:	88 23       	and	r24, r24
    757c:	ec f3       	brlt	.-6      	; 0x7578 <set_to_default+0x140>
	}

	eeprom_busy_wait();
    757e:	ef ec       	ldi	r30, 0xCF	; 207
    7580:	f1 e0       	ldi	r31, 0x01	; 1
    7582:	80 81       	ld	r24, Z
    7584:	88 23       	and	r24, r24
    7586:	ec f3       	brlt	.-6      	; 0x7582 <set_to_default+0x14a>
	eeprom_update_byte((uint8_t *)EEP8_ACCELERATION, 30);
    7588:	6e e1       	ldi	r22, 0x1E	; 30
    758a:	84 e1       	ldi	r24, 0x14	; 20
    758c:	90 e0       	ldi	r25, 0x00	; 0
    758e:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    7592:	ef ec       	ldi	r30, 0xCF	; 207
    7594:	f1 e0       	ldi	r31, 0x01	; 1
    7596:	80 81       	ld	r24, Z
    7598:	88 23       	and	r24, r24
    759a:	ec f3       	brlt	.-6      	; 0x7596 <set_to_default+0x15e>
	eeprom_update_byte((uint8_t *)EEP8_DECELERATION, 8);
    759c:	68 e0       	ldi	r22, 0x08	; 8
    759e:	85 e1       	ldi	r24, 0x15	; 21
    75a0:	90 e0       	ldi	r25, 0x00	; 0
    75a2:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    75a6:	ef ec       	ldi	r30, 0xCF	; 207
    75a8:	f1 e0       	ldi	r31, 0x01	; 1
    75aa:	80 81       	ld	r24, Z
    75ac:	88 23       	and	r24, r24
    75ae:	ec f3       	brlt	.-6      	; 0x75aa <set_to_default+0x172>
	eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY, 12);
    75b0:	6c e0       	ldi	r22, 0x0C	; 12
    75b2:	80 e1       	ldi	r24, 0x10	; 16
    75b4:	90 e0       	ldi	r25, 0x00	; 0
    75b6:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    75ba:	ef ec       	ldi	r30, 0xCF	; 207
    75bc:	f1 e0       	ldi	r31, 0x01	; 1
    75be:	80 81       	ld	r24, Z
    75c0:	88 23       	and	r24, r24
    75c2:	ec f3       	brlt	.-6      	; 0x75be <set_to_default+0x186>
	eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED, 40);
    75c4:	68 e2       	ldi	r22, 0x28	; 40
    75c6:	81 e1       	ldi	r24, 0x11	; 17
    75c8:	90 e0       	ldi	r25, 0x00	; 0
    75ca:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    75ce:	ef ec       	ldi	r30, 0xCF	; 207
    75d0:	f1 e0       	ldi	r31, 0x01	; 1
    75d2:	80 81       	ld	r24, Z
    75d4:	88 23       	and	r24, r24
    75d6:	ec f3       	brlt	.-6      	; 0x75d2 <set_to_default+0x19a>
	eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED, 100);
    75d8:	64 e6       	ldi	r22, 0x64	; 100
    75da:	82 e1       	ldi	r24, 0x12	; 18
    75dc:	90 e0       	ldi	r25, 0x00	; 0
    75de:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    75e2:	ef ec       	ldi	r30, 0xCF	; 207
    75e4:	f1 e0       	ldi	r31, 0x01	; 1
    75e6:	80 81       	ld	r24, Z
    75e8:	88 23       	and	r24, r24
    75ea:	ec f3       	brlt	.-6      	; 0x75e6 <set_to_default+0x1ae>
	eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED, 60);
    75ec:	6c e3       	ldi	r22, 0x3C	; 60
    75ee:	83 e1       	ldi	r24, 0x13	; 19
    75f0:	90 e0       	ldi	r25, 0x00	; 0
    75f2:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    75f6:	ef ec       	ldi	r30, 0xCF	; 207
    75f8:	f1 e0       	ldi	r31, 0x01	; 1
    75fa:	80 81       	ld	r24, Z
    75fc:	88 23       	and	r24, r24
    75fe:	ec f3       	brlt	.-6      	; 0x75fa <set_to_default+0x1c2>
	eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING, 30);
    7600:	6e e1       	ldi	r22, 0x1E	; 30
    7602:	86 e1       	ldi	r24, 0x16	; 22
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    760a:	ef ec       	ldi	r30, 0xCF	; 207
    760c:	f1 e0       	ldi	r31, 0x01	; 1
    760e:	80 81       	ld	r24, Z
    7610:	88 23       	and	r24, r24
    7612:	ec f3       	brlt	.-6      	; 0x760e <set_to_default+0x1d6>
	eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT, 100);
    7614:	64 e6       	ldi	r22, 0x64	; 100
    7616:	87 e1       	ldi	r24, 0x17	; 23
    7618:	90 e0       	ldi	r25, 0x00	; 0
    761a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    761e:	ef ec       	ldi	r30, 0xCF	; 207
    7620:	f1 e0       	ldi	r31, 0x01	; 1
    7622:	80 81       	ld	r24, Z
    7624:	88 23       	and	r24, r24
    7626:	ec f3       	brlt	.-6      	; 0x7622 <set_to_default+0x1ea>
	eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME, 45);
    7628:	6d e2       	ldi	r22, 0x2D	; 45
    762a:	88 e1       	ldi	r24, 0x18	; 24
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	eeprom_busy_wait();
    7632:	ef ec       	ldi	r30, 0xCF	; 207
    7634:	f1 e0       	ldi	r31, 0x01	; 1
    7636:	80 81       	ld	r24, Z
    7638:	88 23       	and	r24, r24
    763a:	ec f3       	brlt	.-6      	; 0x7636 <set_to_default+0x1fe>

	acceleration = eeprom_read_byte((const uint8_t *)EEP8_ACCELERATION);
    763c:	84 e1       	ldi	r24, 0x14	; 20
    763e:	90 e0       	ldi	r25, 0x00	; 0
    7640:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7644:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <acceleration>
	eeprom_busy_wait();
    7648:	ef ec       	ldi	r30, 0xCF	; 207
    764a:	f1 e0       	ldi	r31, 0x01	; 1
    764c:	80 81       	ld	r24, Z
    764e:	88 23       	and	r24, r24
    7650:	ec f3       	brlt	.-6      	; 0x764c <set_to_default+0x214>
	deceleration = eeprom_read_byte((const uint8_t *)EEP8_DECELERATION);
    7652:	85 e1       	ldi	r24, 0x15	; 21
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    765a:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <deceleration>
	eeprom_busy_wait();
    765e:	ef ec       	ldi	r30, 0xCF	; 207
    7660:	f1 e0       	ldi	r31, 0x01	; 1
    7662:	80 81       	ld	r24, Z
    7664:	88 23       	and	r24, r24
    7666:	ec f3       	brlt	.-6      	; 0x7662 <set_to_default+0x22a>
	brake_delay = eeprom_read_byte((const uint8_t *)EEP8_BRAKE_DELAY);
    7668:	80 e1       	ldi	r24, 0x10	; 16
    766a:	90 e0       	ldi	r25, 0x00	; 0
    766c:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7670:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <brake_delay>
	eeprom_busy_wait();
    7674:	ef ec       	ldi	r30, 0xCF	; 207
    7676:	f1 e0       	ldi	r31, 0x01	; 1
    7678:	80 81       	ld	r24, Z
    767a:	88 23       	and	r24, r24
    767c:	ec f3       	brlt	.-6      	; 0x7678 <set_to_default+0x240>
	reverse_speed = eeprom_read_byte((const uint8_t *)EEP8_REVERSE_SPEED);
    767e:	81 e1       	ldi	r24, 0x11	; 17
    7680:	90 e0       	ldi	r25, 0x00	; 0
    7682:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7686:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <reverse_speed>
	eeprom_busy_wait();
    768a:	ef ec       	ldi	r30, 0xCF	; 207
    768c:	f1 e0       	ldi	r31, 0x01	; 1
    768e:	80 81       	ld	r24, Z
    7690:	88 23       	and	r24, r24
    7692:	ec f3       	brlt	.-6      	; 0x768e <set_to_default+0x256>
	fast_speed = eeprom_read_byte((const uint8_t *)EEP8_FAST_SPEED);
    7694:	82 e1       	ldi	r24, 0x12	; 18
    7696:	90 e0       	ldi	r25, 0x00	; 0
    7698:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    769c:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <fast_speed>
	eeprom_busy_wait();
    76a0:	ef ec       	ldi	r30, 0xCF	; 207
    76a2:	f1 e0       	ldi	r31, 0x01	; 1
    76a4:	80 81       	ld	r24, Z
    76a6:	88 23       	and	r24, r24
    76a8:	ec f3       	brlt	.-6      	; 0x76a4 <set_to_default+0x26c>
	slow_speed = eeprom_read_byte((const uint8_t *)EEP8_SLOW_SPEED);
    76aa:	83 e1       	ldi	r24, 0x13	; 19
    76ac:	90 e0       	ldi	r25, 0x00	; 0
    76ae:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    76b2:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <slow_speed>
	eeprom_busy_wait();
    76b6:	ef ec       	ldi	r30, 0xCF	; 207
    76b8:	f1 e0       	ldi	r31, 0x01	; 1
    76ba:	80 81       	ld	r24, Z
    76bc:	88 23       	and	r24, r24
    76be:	ec f3       	brlt	.-6      	; 0x76ba <set_to_default+0x282>
	current_rating = eeprom_read_byte((const uint8_t *)EEP8_CURRENT_RATING);
    76c0:	86 e1       	ldi	r24, 0x16	; 22
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    76c8:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <current_rating>
	eeprom_busy_wait();
    76cc:	ef ec       	ldi	r30, 0xCF	; 207
    76ce:	f1 e0       	ldi	r31, 0x01	; 1
    76d0:	80 81       	ld	r24, Z
    76d2:	88 23       	and	r24, r24
    76d4:	ec f3       	brlt	.-6      	; 0x76d0 <set_to_default+0x298>
	max_current = eeprom_read_byte((const uint8_t *)EEP8_MAX_CURRENT);
    76d6:	87 e1       	ldi	r24, 0x17	; 23
    76d8:	90 e0       	ldi	r25, 0x00	; 0
    76da:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    76de:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <max_current>
	eeprom_busy_wait();
    76e2:	ef ec       	ldi	r30, 0xCF	; 207
    76e4:	f1 e0       	ldi	r31, 0x01	; 1
    76e6:	80 81       	ld	r24, Z
    76e8:	88 23       	and	r24, r24
    76ea:	ec f3       	brlt	.-6      	; 0x76e6 <set_to_default+0x2ae>
	overload_time = eeprom_read_byte((const uint8_t *)EEP8_OVERLOAD_TIME);
    76ec:	88 e1       	ldi	r24, 0x18	; 24
    76ee:	90 e0       	ldi	r25, 0x00	; 0
    76f0:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    76f4:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <overload_time>
	eeprom_busy_wait();
    76f8:	ef ec       	ldi	r30, 0xCF	; 207
    76fa:	f1 e0       	ldi	r31, 0x01	; 1
    76fc:	80 81       	ld	r24, Z
    76fe:	88 23       	and	r24, r24
    7700:	ec f3       	brlt	.-6      	; 0x76fc <set_to_default+0x2c4>
    7702:	2f ef       	ldi	r18, 0xFF	; 255
    7704:	83 ec       	ldi	r24, 0xC3	; 195
    7706:	99 e0       	ldi	r25, 0x09	; 9
    7708:	21 50       	subi	r18, 0x01	; 1
    770a:	80 40       	sbci	r24, 0x00	; 0
    770c:	90 40       	sbci	r25, 0x00	; 0
    770e:	e1 f7       	brne	.-8      	; 0x7708 <set_to_default+0x2d0>
    7710:	00 c0       	rjmp	.+0      	; 0x7712 <set_to_default+0x2da>
    7712:	00 00       	nop
	_delay_ms(100);
	uint8_t message[1];
	transmit_CAN(RESET_DEFAULT_CAN, 1, 0, message);
    7714:	9e 01       	movw	r18, r28
    7716:	2f 5f       	subi	r18, 0xFF	; 255
    7718:	3f 4f       	sbci	r19, 0xFF	; 255
    771a:	40 e0       	ldi	r20, 0x00	; 0
    771c:	61 e0       	ldi	r22, 0x01	; 1
    771e:	85 ea       	ldi	r24, 0xA5	; 165
    7720:	90 e0       	ldi	r25, 0x00	; 0
    7722:	0e 94 22 1a 	call	0x3444	; 0x3444 <transmit_CAN>
    7726:	2f ef       	ldi	r18, 0xFF	; 255
    7728:	89 ef       	ldi	r24, 0xF9	; 249
    772a:	90 e0       	ldi	r25, 0x00	; 0
    772c:	21 50       	subi	r18, 0x01	; 1
    772e:	80 40       	sbci	r24, 0x00	; 0
    7730:	90 40       	sbci	r25, 0x00	; 0
    7732:	e1 f7       	brne	.-8      	; 0x772c <set_to_default+0x2f4>
    7734:	00 c0       	rjmp	.+0      	; 0x7736 <set_to_default+0x2fe>
    7736:	00 00       	nop
	_delay_ms(10);
    7738:	0f 90       	pop	r0
    773a:	df 91       	pop	r29
    773c:	cf 91       	pop	r28
    773e:	08 95       	ret

00007740 <initialize_RB_settings>:

#include "RB_settings.h"
#include "intercommunication.h"

void initialize_RB_settings(void)
{
    7740:	cf 93       	push	r28
    7742:	df 93       	push	r29
    7744:	cd b7       	in	r28, 0x3d	; 61
    7746:	de b7       	in	r29, 0x3e	; 62
    7748:	a0 97       	sbiw	r28, 0x20	; 32
    774a:	cd bf       	out	0x3d, r28	; 61
    774c:	de bf       	out	0x3e, r29	; 62
	//Check if the device settings have ever been set
	//Usually only needs to do this first time powering on
	eeprom_busy_wait();
    774e:	ef ec       	ldi	r30, 0xCF	; 207
    7750:	f1 e0       	ldi	r31, 0x01	; 1
    7752:	80 81       	ld	r24, Z
    7754:	88 23       	and	r24, r24
    7756:	ec f3       	brlt	.-6      	; 0x7752 <initialize_RB_settings+0x12>
	if (eeprom_read_byte((const uint8_t *)EEP8_DEVICE_SETTINGS_SET_ADDR) != DEVICE_SETTINGS_SET)
    7758:	80 e2       	ldi	r24, 0x20	; 32
    775a:	90 e0       	ldi	r25, 0x00	; 0
    775c:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7760:	8a 3a       	cpi	r24, 0xAA	; 170
    7762:	09 f4       	brne	.+2      	; 0x7766 <initialize_RB_settings+0x26>
    7764:	ce c0       	rjmp	.+412    	; 0x7902 <initialize_RB_settings+0x1c2>
	{
		set_to_default();
    7766:	0e 94 1c 3a 	call	0x7438	; 0x7438 <set_to_default>
		eeprom_update_byte((uint8_t *)EEP8_DEVICE_SETTINGS_SET_ADDR, DEVICE_SETTINGS_SET);
    776a:	6a ea       	ldi	r22, 0xAA	; 170
    776c:	80 e2       	ldi	r24, 0x20	; 32
    776e:	90 e0       	ldi	r25, 0x00	; 0
    7770:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    7774:	ef ec       	ldi	r30, 0xCF	; 207
    7776:	f1 e0       	ldi	r31, 0x01	; 1
    7778:	80 81       	ld	r24, Z
    777a:	88 23       	and	r24, r24
    777c:	ec f3       	brlt	.-6      	; 0x7778 <initialize_RB_settings+0x38>

		uint8_t temp[SERIAL_NUM_LEN + 1] = "0000_00_0_0000_0";
    777e:	81 e1       	ldi	r24, 0x11	; 17
    7780:	e9 ec       	ldi	r30, 0xC9	; 201
    7782:	f0 e2       	ldi	r31, 0x20	; 32
    7784:	de 01       	movw	r26, r28
    7786:	11 96       	adiw	r26, 0x01	; 1
    7788:	01 90       	ld	r0, Z+
    778a:	0d 92       	st	X+, r0
    778c:	8a 95       	dec	r24
    778e:	e1 f7       	brne	.-8      	; 0x7788 <initialize_RB_settings+0x48>
		eeprom_update_block((const void*)temp, (void *)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    7790:	40 e1       	ldi	r20, 0x10	; 16
    7792:	50 e0       	ldi	r21, 0x00	; 0
    7794:	60 e3       	ldi	r22, 0x30	; 48
    7796:	70 e0       	ldi	r23, 0x00	; 0
    7798:	ce 01       	movw	r24, r28
    779a:	01 96       	adiw	r24, 0x01	; 1
    779c:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
		eeprom_busy_wait();
    77a0:	ef ec       	ldi	r30, 0xCF	; 207
    77a2:	f1 e0       	ldi	r31, 0x01	; 1
    77a4:	80 81       	ld	r24, Z
    77a6:	88 23       	and	r24, r24
    77a8:	ec f3       	brlt	.-6      	; 0x77a4 <initialize_RB_settings+0x64>

		//Read in serial number
		eeprom_read_block((void *)serial_num, (const void*)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    77aa:	40 e1       	ldi	r20, 0x10	; 16
    77ac:	50 e0       	ldi	r21, 0x00	; 0
    77ae:	60 e3       	ldi	r22, 0x30	; 48
    77b0:	70 e0       	ldi	r23, 0x00	; 0
    77b2:	83 e8       	ldi	r24, 0x83	; 131
    77b4:	91 e2       	ldi	r25, 0x21	; 33
    77b6:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
		eeprom_busy_wait();
    77ba:	ef ec       	ldi	r30, 0xCF	; 207
    77bc:	f1 e0       	ldi	r31, 0x01	; 1
    77be:	80 81       	ld	r24, Z
    77c0:	88 23       	and	r24, r24
    77c2:	ec f3       	brlt	.-6      	; 0x77be <initialize_RB_settings+0x7e>
		serial_num[SERIAL_NUM_LEN] = '\0';
    77c4:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <serial_num+0x10>
		uint8_t temp1[A1_SERIAL_NUM_LEN + 1] = "RV000000000000";
    77c8:	8f e0       	ldi	r24, 0x0F	; 15
    77ca:	ea ed       	ldi	r30, 0xDA	; 218
    77cc:	f0 e2       	ldi	r31, 0x20	; 32
    77ce:	de 01       	movw	r26, r28
    77d0:	52 96       	adiw	r26, 0x12	; 18
    77d2:	01 90       	ld	r0, Z+
    77d4:	0d 92       	st	X+, r0
    77d6:	8a 95       	dec	r24
    77d8:	e1 f7       	brne	.-8      	; 0x77d2 <initialize_RB_settings+0x92>
		eeprom_update_block((const void*)temp1, (void *)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    77da:	4e e0       	ldi	r20, 0x0E	; 14
    77dc:	50 e0       	ldi	r21, 0x00	; 0
    77de:	60 e7       	ldi	r22, 0x70	; 112
    77e0:	70 e0       	ldi	r23, 0x00	; 0
    77e2:	ce 01       	movw	r24, r28
    77e4:	42 96       	adiw	r24, 0x12	; 18
    77e6:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
		eeprom_busy_wait();
    77ea:	ef ec       	ldi	r30, 0xCF	; 207
    77ec:	f1 e0       	ldi	r31, 0x01	; 1
    77ee:	80 81       	ld	r24, Z
    77f0:	88 23       	and	r24, r24
    77f2:	ec f3       	brlt	.-6      	; 0x77ee <initialize_RB_settings+0xae>

		//Read in A1 serial number
		eeprom_read_block((void *)A1_serial_num, (const void*)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    77f4:	4e e0       	ldi	r20, 0x0E	; 14
    77f6:	50 e0       	ldi	r21, 0x00	; 0
    77f8:	60 e7       	ldi	r22, 0x70	; 112
    77fa:	70 e0       	ldi	r23, 0x00	; 0
    77fc:	88 e9       	ldi	r24, 0x98	; 152
    77fe:	91 e2       	ldi	r25, 0x21	; 33
    7800:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
		eeprom_busy_wait();
    7804:	ef ec       	ldi	r30, 0xCF	; 207
    7806:	f1 e0       	ldi	r31, 0x01	; 1
    7808:	80 81       	ld	r24, Z
    780a:	88 23       	and	r24, r24
    780c:	ec f3       	brlt	.-6      	; 0x7808 <initialize_RB_settings+0xc8>
		A1_serial_num[A1_SERIAL_NUM_LEN] = '\0';
    780e:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <A1_serial_num+0xe>

		eeprom_busy_wait();
    7812:	ef ec       	ldi	r30, 0xCF	; 207
    7814:	f1 e0       	ldi	r31, 0x01	; 1
    7816:	80 81       	ld	r24, Z
    7818:	88 23       	and	r24, r24
    781a:	ec f3       	brlt	.-6      	; 0x7816 <initialize_RB_settings+0xd6>
		eeprom_update_byte((uint8_t *)EEP8_VACUUM_SLOW_START, 12); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for vacuum motor
    781c:	6c e0       	ldi	r22, 0x0C	; 12
    781e:	89 e1       	ldi	r24, 0x19	; 25
    7820:	90 e0       	ldi	r25, 0x00	; 0
    7822:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    7826:	ef ec       	ldi	r30, 0xCF	; 207
    7828:	f1 e0       	ldi	r31, 0x01	; 1
    782a:	80 81       	ld	r24, Z
    782c:	88 23       	and	r24, r24
    782e:	ec f3       	brlt	.-6      	; 0x782a <initialize_RB_settings+0xea>
		eeprom_update_byte((uint8_t *)EEP8_BRUSH_SLOW_START, 12); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for brush motor
    7830:	6c e0       	ldi	r22, 0x0C	; 12
    7832:	8a e1       	ldi	r24, 0x1A	; 26
    7834:	90 e0       	ldi	r25, 0x00	; 0
    7836:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    783a:	ef ec       	ldi	r30, 0xCF	; 207
    783c:	f1 e0       	ldi	r31, 0x01	; 1
    783e:	80 81       	ld	r24, Z
    7840:	88 23       	and	r24, r24
    7842:	ec f3       	brlt	.-6      	; 0x783e <initialize_RB_settings+0xfe>
		eeprom_update_byte((uint8_t *)EEP8_PRE_SWP_SLOW_START, 12); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for preswp motor
    7844:	6c e0       	ldi	r22, 0x0C	; 12
    7846:	8b e1       	ldi	r24, 0x1B	; 27
    7848:	90 e0       	ldi	r25, 0x00	; 0
    784a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    784e:	ef ec       	ldi	r30, 0xCF	; 207
    7850:	f1 e0       	ldi	r31, 0x01	; 1
    7852:	80 81       	ld	r24, Z
    7854:	88 23       	and	r24, r24
    7856:	ec f3       	brlt	.-6      	; 0x7852 <initialize_RB_settings+0x112>
		eeprom_update_byte((uint8_t *)EEP8_ACCELERATION, 30);
    7858:	6e e1       	ldi	r22, 0x1E	; 30
    785a:	84 e1       	ldi	r24, 0x14	; 20
    785c:	90 e0       	ldi	r25, 0x00	; 0
    785e:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    7862:	ef ec       	ldi	r30, 0xCF	; 207
    7864:	f1 e0       	ldi	r31, 0x01	; 1
    7866:	80 81       	ld	r24, Z
    7868:	88 23       	and	r24, r24
    786a:	ec f3       	brlt	.-6      	; 0x7866 <initialize_RB_settings+0x126>
		eeprom_update_byte((uint8_t *)EEP8_DECELERATION, 8);
    786c:	68 e0       	ldi	r22, 0x08	; 8
    786e:	85 e1       	ldi	r24, 0x15	; 21
    7870:	90 e0       	ldi	r25, 0x00	; 0
    7872:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    7876:	ef ec       	ldi	r30, 0xCF	; 207
    7878:	f1 e0       	ldi	r31, 0x01	; 1
    787a:	80 81       	ld	r24, Z
    787c:	88 23       	and	r24, r24
    787e:	ec f3       	brlt	.-6      	; 0x787a <initialize_RB_settings+0x13a>
		eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY, 12);
    7880:	6c e0       	ldi	r22, 0x0C	; 12
    7882:	80 e1       	ldi	r24, 0x10	; 16
    7884:	90 e0       	ldi	r25, 0x00	; 0
    7886:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    788a:	ef ec       	ldi	r30, 0xCF	; 207
    788c:	f1 e0       	ldi	r31, 0x01	; 1
    788e:	80 81       	ld	r24, Z
    7890:	88 23       	and	r24, r24
    7892:	ec f3       	brlt	.-6      	; 0x788e <initialize_RB_settings+0x14e>
		eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED, 40);
    7894:	68 e2       	ldi	r22, 0x28	; 40
    7896:	81 e1       	ldi	r24, 0x11	; 17
    7898:	90 e0       	ldi	r25, 0x00	; 0
    789a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    789e:	ef ec       	ldi	r30, 0xCF	; 207
    78a0:	f1 e0       	ldi	r31, 0x01	; 1
    78a2:	80 81       	ld	r24, Z
    78a4:	88 23       	and	r24, r24
    78a6:	ec f3       	brlt	.-6      	; 0x78a2 <initialize_RB_settings+0x162>
		eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED, 100);
    78a8:	64 e6       	ldi	r22, 0x64	; 100
    78aa:	82 e1       	ldi	r24, 0x12	; 18
    78ac:	90 e0       	ldi	r25, 0x00	; 0
    78ae:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    78b2:	ef ec       	ldi	r30, 0xCF	; 207
    78b4:	f1 e0       	ldi	r31, 0x01	; 1
    78b6:	80 81       	ld	r24, Z
    78b8:	88 23       	and	r24, r24
    78ba:	ec f3       	brlt	.-6      	; 0x78b6 <initialize_RB_settings+0x176>
		eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED, 60);
    78bc:	6c e3       	ldi	r22, 0x3C	; 60
    78be:	83 e1       	ldi	r24, 0x13	; 19
    78c0:	90 e0       	ldi	r25, 0x00	; 0
    78c2:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    78c6:	ef ec       	ldi	r30, 0xCF	; 207
    78c8:	f1 e0       	ldi	r31, 0x01	; 1
    78ca:	80 81       	ld	r24, Z
    78cc:	88 23       	and	r24, r24
    78ce:	ec f3       	brlt	.-6      	; 0x78ca <initialize_RB_settings+0x18a>
		eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING, 30);
    78d0:	6e e1       	ldi	r22, 0x1E	; 30
    78d2:	86 e1       	ldi	r24, 0x16	; 22
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    78da:	ef ec       	ldi	r30, 0xCF	; 207
    78dc:	f1 e0       	ldi	r31, 0x01	; 1
    78de:	80 81       	ld	r24, Z
    78e0:	88 23       	and	r24, r24
    78e2:	ec f3       	brlt	.-6      	; 0x78de <initialize_RB_settings+0x19e>
		eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT, 100);
    78e4:	64 e6       	ldi	r22, 0x64	; 100
    78e6:	87 e1       	ldi	r24, 0x17	; 23
    78e8:	90 e0       	ldi	r25, 0x00	; 0
    78ea:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		eeprom_busy_wait();
    78ee:	ef ec       	ldi	r30, 0xCF	; 207
    78f0:	f1 e0       	ldi	r31, 0x01	; 1
    78f2:	80 81       	ld	r24, Z
    78f4:	88 23       	and	r24, r24
    78f6:	ec f3       	brlt	.-6      	; 0x78f2 <initialize_RB_settings+0x1b2>
		eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME, 45);
    78f8:	6d e2       	ldi	r22, 0x2D	; 45
    78fa:	88 e1       	ldi	r24, 0x18	; 24
    78fc:	90 e0       	ldi	r25, 0x00	; 0
    78fe:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>

	}

	//Read in serial number
	eeprom_read_block((void *)serial_num, (const void*)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    7902:	40 e1       	ldi	r20, 0x10	; 16
    7904:	50 e0       	ldi	r21, 0x00	; 0
    7906:	60 e3       	ldi	r22, 0x30	; 48
    7908:	70 e0       	ldi	r23, 0x00	; 0
    790a:	83 e8       	ldi	r24, 0x83	; 131
    790c:	91 e2       	ldi	r25, 0x21	; 33
    790e:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
	eeprom_busy_wait();
    7912:	ef ec       	ldi	r30, 0xCF	; 207
    7914:	f1 e0       	ldi	r31, 0x01	; 1
    7916:	80 81       	ld	r24, Z
    7918:	88 23       	and	r24, r24
    791a:	ec f3       	brlt	.-6      	; 0x7916 <initialize_RB_settings+0x1d6>
	if (serial_num[0] < 0x30 || serial_num[0] > 0x39)
    791c:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <serial_num>
    7920:	80 53       	subi	r24, 0x30	; 48
    7922:	8a 30       	cpi	r24, 0x0A	; 10
    7924:	b0 f0       	brcs	.+44     	; 0x7952 <initialize_RB_settings+0x212>
	{
		uint8_t temp[SERIAL_NUM_LEN + 1] = "0000_00_0_0000_0";
    7926:	81 e1       	ldi	r24, 0x11	; 17
    7928:	e9 ec       	ldi	r30, 0xC9	; 201
    792a:	f0 e2       	ldi	r31, 0x20	; 32
    792c:	de 01       	movw	r26, r28
    792e:	11 96       	adiw	r26, 0x01	; 1
    7930:	01 90       	ld	r0, Z+
    7932:	0d 92       	st	X+, r0
    7934:	8a 95       	dec	r24
    7936:	e1 f7       	brne	.-8      	; 0x7930 <initialize_RB_settings+0x1f0>
		eeprom_update_block((const void*)temp, (void *)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    7938:	40 e1       	ldi	r20, 0x10	; 16
    793a:	50 e0       	ldi	r21, 0x00	; 0
    793c:	60 e3       	ldi	r22, 0x30	; 48
    793e:	70 e0       	ldi	r23, 0x00	; 0
    7940:	ce 01       	movw	r24, r28
    7942:	01 96       	adiw	r24, 0x01	; 1
    7944:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
		eeprom_busy_wait();
    7948:	ef ec       	ldi	r30, 0xCF	; 207
    794a:	f1 e0       	ldi	r31, 0x01	; 1
    794c:	80 81       	ld	r24, Z
    794e:	88 23       	and	r24, r24
    7950:	ec f3       	brlt	.-6      	; 0x794c <initialize_RB_settings+0x20c>
	}
	eeprom_read_block((void *)serial_num, (const void*)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    7952:	40 e1       	ldi	r20, 0x10	; 16
    7954:	50 e0       	ldi	r21, 0x00	; 0
    7956:	60 e3       	ldi	r22, 0x30	; 48
    7958:	70 e0       	ldi	r23, 0x00	; 0
    795a:	83 e8       	ldi	r24, 0x83	; 131
    795c:	91 e2       	ldi	r25, 0x21	; 33
    795e:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
	eeprom_busy_wait();
    7962:	ef ec       	ldi	r30, 0xCF	; 207
    7964:	f1 e0       	ldi	r31, 0x01	; 1
    7966:	80 81       	ld	r24, Z
    7968:	88 23       	and	r24, r24
    796a:	ec f3       	brlt	.-6      	; 0x7966 <initialize_RB_settings+0x226>
	serial_num[SERIAL_NUM_LEN] = '\0';
    796c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <serial_num+0x10>

	eeprom_read_block((void *)A1_serial_num, (const void*)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    7970:	4e e0       	ldi	r20, 0x0E	; 14
    7972:	50 e0       	ldi	r21, 0x00	; 0
    7974:	60 e7       	ldi	r22, 0x70	; 112
    7976:	70 e0       	ldi	r23, 0x00	; 0
    7978:	88 e9       	ldi	r24, 0x98	; 152
    797a:	91 e2       	ldi	r25, 0x21	; 33
    797c:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
	eeprom_busy_wait();
    7980:	ef ec       	ldi	r30, 0xCF	; 207
    7982:	f1 e0       	ldi	r31, 0x01	; 1
    7984:	80 81       	ld	r24, Z
    7986:	88 23       	and	r24, r24
    7988:	ec f3       	brlt	.-6      	; 0x7984 <initialize_RB_settings+0x244>
	if (A1_serial_num[0] != 0x52)//|| A1_serial_num[0] > 0x39)
    798a:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <A1_serial_num>
    798e:	82 35       	cpi	r24, 0x52	; 82
    7990:	b1 f0       	breq	.+44     	; 0x79be <initialize_RB_settings+0x27e>
	{
		uint8_t temp[A1_SERIAL_NUM_LEN + 1] = "RV000000000000";
    7992:	8f e0       	ldi	r24, 0x0F	; 15
    7994:	ea ed       	ldi	r30, 0xDA	; 218
    7996:	f0 e2       	ldi	r31, 0x20	; 32
    7998:	de 01       	movw	r26, r28
    799a:	11 96       	adiw	r26, 0x01	; 1
    799c:	01 90       	ld	r0, Z+
    799e:	0d 92       	st	X+, r0
    79a0:	8a 95       	dec	r24
    79a2:	e1 f7       	brne	.-8      	; 0x799c <initialize_RB_settings+0x25c>
		eeprom_update_block((const void*)temp, (void *)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    79a4:	4e e0       	ldi	r20, 0x0E	; 14
    79a6:	50 e0       	ldi	r21, 0x00	; 0
    79a8:	60 e7       	ldi	r22, 0x70	; 112
    79aa:	70 e0       	ldi	r23, 0x00	; 0
    79ac:	ce 01       	movw	r24, r28
    79ae:	01 96       	adiw	r24, 0x01	; 1
    79b0:	0e 94 d6 6e 	call	0xddac	; 0xddac <eeprom_update_block>
		eeprom_busy_wait();
    79b4:	ef ec       	ldi	r30, 0xCF	; 207
    79b6:	f1 e0       	ldi	r31, 0x01	; 1
    79b8:	80 81       	ld	r24, Z
    79ba:	88 23       	and	r24, r24
    79bc:	ec f3       	brlt	.-6      	; 0x79b8 <initialize_RB_settings+0x278>
	}
	eeprom_read_block((void *)A1_serial_num, (const void*)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    79be:	4e e0       	ldi	r20, 0x0E	; 14
    79c0:	50 e0       	ldi	r21, 0x00	; 0
    79c2:	60 e7       	ldi	r22, 0x70	; 112
    79c4:	70 e0       	ldi	r23, 0x00	; 0
    79c6:	88 e9       	ldi	r24, 0x98	; 152
    79c8:	91 e2       	ldi	r25, 0x21	; 33
    79ca:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
	eeprom_busy_wait();
    79ce:	ef ec       	ldi	r30, 0xCF	; 207
    79d0:	f1 e0       	ldi	r31, 0x01	; 1
    79d2:	80 81       	ld	r24, Z
    79d4:	88 23       	and	r24, r24
    79d6:	ec f3       	brlt	.-6      	; 0x79d2 <initialize_RB_settings+0x292>
	A1_serial_num[A1_SERIAL_NUM_LEN] = '\0';
    79d8:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <A1_serial_num+0xe>

	//Read in the drive motor settings
	vacuum_slow_start = eeprom_read_byte((const uint8_t *)EEP8_VACUUM_SLOW_START);
    79dc:	89 e1       	ldi	r24, 0x19	; 25
    79de:	90 e0       	ldi	r25, 0x00	; 0
    79e0:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    79e4:	80 93 a3 22 	sts	0x22A3, r24	; 0x8022a3 <vacuum_slow_start>
	eeprom_busy_wait();
    79e8:	ef ec       	ldi	r30, 0xCF	; 207
    79ea:	f1 e0       	ldi	r31, 0x01	; 1
    79ec:	80 81       	ld	r24, Z
    79ee:	88 23       	and	r24, r24
    79f0:	ec f3       	brlt	.-6      	; 0x79ec <initialize_RB_settings+0x2ac>
	brush_slow_start = eeprom_read_byte((const uint8_t *)EEP8_BRUSH_SLOW_START);
    79f2:	8a e1       	ldi	r24, 0x1A	; 26
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    79fa:	80 93 b7 22 	sts	0x22B7, r24	; 0x8022b7 <brush_slow_start>
	eeprom_busy_wait();
    79fe:	ef ec       	ldi	r30, 0xCF	; 207
    7a00:	f1 e0       	ldi	r31, 0x01	; 1
    7a02:	80 81       	ld	r24, Z
    7a04:	88 23       	and	r24, r24
    7a06:	ec f3       	brlt	.-6      	; 0x7a02 <initialize_RB_settings+0x2c2>
	pre_swp_slow_start = eeprom_read_byte((const uint8_t *)EEP8_PRE_SWP_SLOW_START);
    7a08:	8b e1       	ldi	r24, 0x1B	; 27
    7a0a:	90 e0       	ldi	r25, 0x00	; 0
    7a0c:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a10:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <pre_swp_slow_start>
	eeprom_busy_wait();
    7a14:	ef ec       	ldi	r30, 0xCF	; 207
    7a16:	f1 e0       	ldi	r31, 0x01	; 1
    7a18:	80 81       	ld	r24, Z
    7a1a:	88 23       	and	r24, r24
    7a1c:	ec f3       	brlt	.-6      	; 0x7a18 <initialize_RB_settings+0x2d8>

	acceleration = eeprom_read_byte((const uint8_t *)EEP8_ACCELERATION);
    7a1e:	84 e1       	ldi	r24, 0x14	; 20
    7a20:	90 e0       	ldi	r25, 0x00	; 0
    7a22:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a26:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <acceleration>
	eeprom_busy_wait();
    7a2a:	ef ec       	ldi	r30, 0xCF	; 207
    7a2c:	f1 e0       	ldi	r31, 0x01	; 1
    7a2e:	80 81       	ld	r24, Z
    7a30:	88 23       	and	r24, r24
    7a32:	ec f3       	brlt	.-6      	; 0x7a2e <initialize_RB_settings+0x2ee>
	deceleration = eeprom_read_byte((const uint8_t *)EEP8_DECELERATION);
    7a34:	85 e1       	ldi	r24, 0x15	; 21
    7a36:	90 e0       	ldi	r25, 0x00	; 0
    7a38:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a3c:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <deceleration>
	eeprom_busy_wait();
    7a40:	ef ec       	ldi	r30, 0xCF	; 207
    7a42:	f1 e0       	ldi	r31, 0x01	; 1
    7a44:	80 81       	ld	r24, Z
    7a46:	88 23       	and	r24, r24
    7a48:	ec f3       	brlt	.-6      	; 0x7a44 <initialize_RB_settings+0x304>
	brake_delay = eeprom_read_byte((const uint8_t *)EEP8_BRAKE_DELAY);
    7a4a:	80 e1       	ldi	r24, 0x10	; 16
    7a4c:	90 e0       	ldi	r25, 0x00	; 0
    7a4e:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a52:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <brake_delay>
	eeprom_busy_wait();
    7a56:	ef ec       	ldi	r30, 0xCF	; 207
    7a58:	f1 e0       	ldi	r31, 0x01	; 1
    7a5a:	80 81       	ld	r24, Z
    7a5c:	88 23       	and	r24, r24
    7a5e:	ec f3       	brlt	.-6      	; 0x7a5a <initialize_RB_settings+0x31a>
	reverse_speed = eeprom_read_byte((const uint8_t *)EEP8_REVERSE_SPEED);
    7a60:	81 e1       	ldi	r24, 0x11	; 17
    7a62:	90 e0       	ldi	r25, 0x00	; 0
    7a64:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a68:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <reverse_speed>
	eeprom_busy_wait();
    7a6c:	ef ec       	ldi	r30, 0xCF	; 207
    7a6e:	f1 e0       	ldi	r31, 0x01	; 1
    7a70:	80 81       	ld	r24, Z
    7a72:	88 23       	and	r24, r24
    7a74:	ec f3       	brlt	.-6      	; 0x7a70 <initialize_RB_settings+0x330>
	fast_speed = eeprom_read_byte((const uint8_t *)EEP8_FAST_SPEED);
    7a76:	82 e1       	ldi	r24, 0x12	; 18
    7a78:	90 e0       	ldi	r25, 0x00	; 0
    7a7a:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a7e:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <fast_speed>
	eeprom_busy_wait();
    7a82:	ef ec       	ldi	r30, 0xCF	; 207
    7a84:	f1 e0       	ldi	r31, 0x01	; 1
    7a86:	80 81       	ld	r24, Z
    7a88:	88 23       	and	r24, r24
    7a8a:	ec f3       	brlt	.-6      	; 0x7a86 <initialize_RB_settings+0x346>
	slow_speed = eeprom_read_byte((const uint8_t *)EEP8_SLOW_SPEED);
    7a8c:	83 e1       	ldi	r24, 0x13	; 19
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
    7a90:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7a94:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <slow_speed>
	eeprom_busy_wait();
    7a98:	ef ec       	ldi	r30, 0xCF	; 207
    7a9a:	f1 e0       	ldi	r31, 0x01	; 1
    7a9c:	80 81       	ld	r24, Z
    7a9e:	88 23       	and	r24, r24
    7aa0:	ec f3       	brlt	.-6      	; 0x7a9c <initialize_RB_settings+0x35c>
	current_rating = eeprom_read_byte((const uint8_t *)EEP8_CURRENT_RATING);
    7aa2:	86 e1       	ldi	r24, 0x16	; 22
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7aaa:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <current_rating>
	eeprom_busy_wait();
    7aae:	ef ec       	ldi	r30, 0xCF	; 207
    7ab0:	f1 e0       	ldi	r31, 0x01	; 1
    7ab2:	80 81       	ld	r24, Z
    7ab4:	88 23       	and	r24, r24
    7ab6:	ec f3       	brlt	.-6      	; 0x7ab2 <initialize_RB_settings+0x372>
	max_current = eeprom_read_byte((const uint8_t *)EEP8_MAX_CURRENT);
    7ab8:	87 e1       	ldi	r24, 0x17	; 23
    7aba:	90 e0       	ldi	r25, 0x00	; 0
    7abc:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7ac0:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <max_current>
	eeprom_busy_wait();
    7ac4:	ef ec       	ldi	r30, 0xCF	; 207
    7ac6:	f1 e0       	ldi	r31, 0x01	; 1
    7ac8:	80 81       	ld	r24, Z
    7aca:	88 23       	and	r24, r24
    7acc:	ec f3       	brlt	.-6      	; 0x7ac8 <initialize_RB_settings+0x388>
	overload_time = eeprom_read_byte((const uint8_t *)EEP8_OVERLOAD_TIME);
    7ace:	88 e1       	ldi	r24, 0x18	; 24
    7ad0:	90 e0       	ldi	r25, 0x00	; 0
    7ad2:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7ad6:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <overload_time>
	eeprom_busy_wait();
    7ada:	ef ec       	ldi	r30, 0xCF	; 207
    7adc:	f1 e0       	ldi	r31, 0x01	; 1
    7ade:	80 81       	ld	r24, Z
    7ae0:	88 23       	and	r24, r24
    7ae2:	ec f3       	brlt	.-6      	; 0x7ade <initialize_RB_settings+0x39e>

	//Read in the battery type
	battery_type = eeprom_read_byte((const uint8_t *)EEP8_BATTERY_TYPE);
    7ae4:	81 e2       	ldi	r24, 0x21	; 33
    7ae6:	90 e0       	ldi	r25, 0x00	; 0
    7ae8:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    7aec:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <battery_type>
	eeprom_busy_wait();
    7af0:	ef ec       	ldi	r30, 0xCF	; 207
    7af2:	f1 e0       	ldi	r31, 0x01	; 1
    7af4:	80 81       	ld	r24, Z
    7af6:	88 23       	and	r24, r24
    7af8:	ec f3       	brlt	.-6      	; 0x7af4 <initialize_RB_settings+0x3b4>
}
    7afa:	a0 96       	adiw	r28, 0x20	; 32
    7afc:	cd bf       	out	0x3d, r28	; 61
    7afe:	de bf       	out	0x3e, r29	; 62
    7b00:	df 91       	pop	r29
    7b02:	cf 91       	pop	r28
    7b04:	08 95       	ret

00007b06 <menu_next>:
char run_time_min_arr[3];
uint8_t cursor;
char temp[21];

void menu_next(void)
{
    7b06:	ef 92       	push	r14
    7b08:	ff 92       	push	r15
    7b0a:	0f 93       	push	r16
    7b0c:	1f 93       	push	r17
    7b0e:	cf 93       	push	r28
    7b10:	df 93       	push	r29
	switch (current_menu)
    7b12:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    7b16:	8e 2f       	mov	r24, r30
    7b18:	90 e0       	ldi	r25, 0x00	; 0
    7b1a:	82 3d       	cpi	r24, 0xD2	; 210
    7b1c:	91 05       	cpc	r25, r1
    7b1e:	10 f0       	brcs	.+4      	; 0x7b24 <menu_next+0x1e>
    7b20:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>
    7b24:	fc 01       	movw	r30, r24
    7b26:	e9 54       	subi	r30, 0x49	; 73
    7b28:	fe 4f       	sbci	r31, 0xFE	; 254
    7b2a:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
		//Any button press will move pre-menu to the motor menu
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    7b2e:	81 e0       	ldi	r24, 0x01	; 1
    7b30:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    7b34:	87 ec       	ldi	r24, 0xC7	; 199
    7b36:	99 e2       	ldi	r25, 0x29	; 41
    7b38:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    7b3c:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		/******************************************************************************************************************************/

		//In the motor menu users can adjust motor values
	case MOTOR_MENU:
		current_menu = ACCELERATION_MENU;
    7b40:	80 e1       	ldi	r24, 0x10	; 16
    7b42:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ACCELERATION"));
    7b46:	8a eb       	ldi	r24, 0xBA	; 186
    7b48:	99 e2       	ldi	r25, 0x29	; 41
    7b4a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    7b4e:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

		//Time in seconds to zero acceleration to max acceleration
	case ACCELERATION_MENU:
		current_menu = ACCELERATION_VAL_MENU;
    7b52:	80 e2       	ldi	r24, 0x20	; 32
    7b54:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = acceleration;
    7b58:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <acceleration>
    7b5c:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    7b60:	8d ec       	ldi	r24, 0xCD	; 205
    7b62:	98 9f       	mul	r25, r24
    7b64:	81 2d       	mov	r24, r1
    7b66:	11 24       	eor	r1, r1
    7b68:	86 95       	lsr	r24
    7b6a:	86 95       	lsr	r24
    7b6c:	86 95       	lsr	r24
    7b6e:	38 2f       	mov	r19, r24
    7b70:	33 0f       	add	r19, r19
    7b72:	23 2f       	mov	r18, r19
    7b74:	22 0f       	add	r18, r18
    7b76:	22 0f       	add	r18, r18
    7b78:	23 0f       	add	r18, r19
    7b7a:	92 1b       	sub	r25, r18
    7b7c:	1f 92       	push	r1
    7b7e:	9f 93       	push	r25
    7b80:	1f 92       	push	r1
    7b82:	8f 93       	push	r24
    7b84:	89 ee       	ldi	r24, 0xE9	; 233
    7b86:	90 e2       	ldi	r25, 0x20	; 32
    7b88:	9f 93       	push	r25
    7b8a:	8f 93       	push	r24
    7b8c:	83 ed       	ldi	r24, 0xD3	; 211
    7b8e:	97 e2       	ldi	r25, 0x27	; 39
    7b90:	9f 93       	push	r25
    7b92:	8f 93       	push	r24
    7b94:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7b98:	83 ed       	ldi	r24, 0xD3	; 211
    7b9a:	97 e2       	ldi	r25, 0x27	; 39
    7b9c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7ba0:	2d b7       	in	r18, 0x3d	; 61
    7ba2:	3e b7       	in	r19, 0x3e	; 62
    7ba4:	28 5f       	subi	r18, 0xF8	; 248
    7ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba8:	2d bf       	out	0x3d, r18	; 61
    7baa:	3e bf       	out	0x3e, r19	; 62
    7bac:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Time in seconds from max acceleration to zero acceleration
	case DECELERATION_MENU:
		current_menu = DECELERATION_VAL_MENU;
    7bb0:	81 e2       	ldi	r24, 0x21	; 33
    7bb2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = deceleration;
    7bb6:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <deceleration>
    7bba:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    7bbe:	8d ec       	ldi	r24, 0xCD	; 205
    7bc0:	98 9f       	mul	r25, r24
    7bc2:	81 2d       	mov	r24, r1
    7bc4:	11 24       	eor	r1, r1
    7bc6:	86 95       	lsr	r24
    7bc8:	86 95       	lsr	r24
    7bca:	86 95       	lsr	r24
    7bcc:	38 2f       	mov	r19, r24
    7bce:	33 0f       	add	r19, r19
    7bd0:	23 2f       	mov	r18, r19
    7bd2:	22 0f       	add	r18, r18
    7bd4:	22 0f       	add	r18, r18
    7bd6:	23 0f       	add	r18, r19
    7bd8:	92 1b       	sub	r25, r18
    7bda:	1f 92       	push	r1
    7bdc:	9f 93       	push	r25
    7bde:	1f 92       	push	r1
    7be0:	8f 93       	push	r24
    7be2:	89 ee       	ldi	r24, 0xE9	; 233
    7be4:	90 e2       	ldi	r25, 0x20	; 32
    7be6:	9f 93       	push	r25
    7be8:	8f 93       	push	r24
    7bea:	83 ed       	ldi	r24, 0xD3	; 211
    7bec:	97 e2       	ldi	r25, 0x27	; 39
    7bee:	9f 93       	push	r25
    7bf0:	8f 93       	push	r24
    7bf2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7bf6:	83 ed       	ldi	r24, 0xD3	; 211
    7bf8:	97 e2       	ldi	r25, 0x27	; 39
    7bfa:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7bfe:	8d b7       	in	r24, 0x3d	; 61
    7c00:	9e b7       	in	r25, 0x3e	; 62
    7c02:	08 96       	adiw	r24, 0x08	; 8
    7c04:	8d bf       	out	0x3d, r24	; 61
    7c06:	9e bf       	out	0x3e, r25	; 62
    7c08:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Time in seconds from pressing brake pedal to braking
	case BRAKE_DELAY_MENU:
		current_menu = BRAKE_DELAY_VAL_MENU;
    7c0c:	82 e2       	ldi	r24, 0x22	; 34
    7c0e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = brake_delay;
    7c12:	90 91 80 21 	lds	r25, 0x2180	; 0x802180 <brake_delay>
    7c16:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    7c1a:	8d ec       	ldi	r24, 0xCD	; 205
    7c1c:	98 9f       	mul	r25, r24
    7c1e:	81 2d       	mov	r24, r1
    7c20:	11 24       	eor	r1, r1
    7c22:	86 95       	lsr	r24
    7c24:	86 95       	lsr	r24
    7c26:	86 95       	lsr	r24
    7c28:	38 2f       	mov	r19, r24
    7c2a:	33 0f       	add	r19, r19
    7c2c:	23 2f       	mov	r18, r19
    7c2e:	22 0f       	add	r18, r18
    7c30:	22 0f       	add	r18, r18
    7c32:	23 0f       	add	r18, r19
    7c34:	92 1b       	sub	r25, r18
    7c36:	1f 92       	push	r1
    7c38:	9f 93       	push	r25
    7c3a:	1f 92       	push	r1
    7c3c:	8f 93       	push	r24
    7c3e:	89 ee       	ldi	r24, 0xE9	; 233
    7c40:	90 e2       	ldi	r25, 0x20	; 32
    7c42:	9f 93       	push	r25
    7c44:	8f 93       	push	r24
    7c46:	83 ed       	ldi	r24, 0xD3	; 211
    7c48:	97 e2       	ldi	r25, 0x27	; 39
    7c4a:	9f 93       	push	r25
    7c4c:	8f 93       	push	r24
    7c4e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7c52:	83 ed       	ldi	r24, 0xD3	; 211
    7c54:	97 e2       	ldi	r25, 0x27	; 39
    7c56:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7c5a:	2d b7       	in	r18, 0x3d	; 61
    7c5c:	3e b7       	in	r19, 0x3e	; 62
    7c5e:	28 5f       	subi	r18, 0xF8	; 248
    7c60:	3f 4f       	sbci	r19, 0xFF	; 255
    7c62:	2d bf       	out	0x3d, r18	; 61
    7c64:	3e bf       	out	0x3e, r19	; 62
    7c66:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Two forward speed options available: slow and fast
	case FORWARD_SPEED_MENU:
		current_menu = SLOW_SPEED_MENU;
    7c6a:	84 e1       	ldi	r24, 0x14	; 20
    7c6c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    7c70:	8f ea       	ldi	r24, 0xAF	; 175
    7c72:	99 e2       	ldi	r25, 0x29	; 41
    7c74:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    7c78:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

		//% of max speed when in slow mode (tortoise)
	case SLOW_SPEED_MENU:
		current_menu = SLOW_SPEED_VAL_MENU;
    7c7c:	84 e2       	ldi	r24, 0x24	; 36
    7c7e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = slow_speed;
    7c82:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <slow_speed>
    7c86:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    7c8a:	1f 92       	push	r1
    7c8c:	8f 93       	push	r24
    7c8e:	87 ef       	ldi	r24, 0xF7	; 247
    7c90:	90 e2       	ldi	r25, 0x20	; 32
    7c92:	9f 93       	push	r25
    7c94:	8f 93       	push	r24
    7c96:	83 ed       	ldi	r24, 0xD3	; 211
    7c98:	97 e2       	ldi	r25, 0x27	; 39
    7c9a:	9f 93       	push	r25
    7c9c:	8f 93       	push	r24
    7c9e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7ca2:	83 ed       	ldi	r24, 0xD3	; 211
    7ca4:	97 e2       	ldi	r25, 0x27	; 39
    7ca6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7caa:	0f 90       	pop	r0
    7cac:	0f 90       	pop	r0
    7cae:	0f 90       	pop	r0
    7cb0:	0f 90       	pop	r0
    7cb2:	0f 90       	pop	r0
    7cb4:	0f 90       	pop	r0
    7cb6:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//% of max speed when in fast mode (hare)
	case FAST_SPEED_MENU:
		current_menu = FAST_SPEED_VAL_MENU;
    7cba:	85 e2       	ldi	r24, 0x25	; 37
    7cbc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = fast_speed;
    7cc0:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <fast_speed>
    7cc4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    7cc8:	1f 92       	push	r1
    7cca:	8f 93       	push	r24
    7ccc:	87 ef       	ldi	r24, 0xF7	; 247
    7cce:	90 e2       	ldi	r25, 0x20	; 32
    7cd0:	9f 93       	push	r25
    7cd2:	8f 93       	push	r24
    7cd4:	83 ed       	ldi	r24, 0xD3	; 211
    7cd6:	97 e2       	ldi	r25, 0x27	; 39
    7cd8:	9f 93       	push	r25
    7cda:	8f 93       	push	r24
    7cdc:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7ce0:	83 ed       	ldi	r24, 0xD3	; 211
    7ce2:	97 e2       	ldi	r25, 0x27	; 39
    7ce4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7ce8:	0f 90       	pop	r0
    7cea:	0f 90       	pop	r0
    7cec:	0f 90       	pop	r0
    7cee:	0f 90       	pop	r0
    7cf0:	0f 90       	pop	r0
    7cf2:	0f 90       	pop	r0
    7cf4:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

		//% of max speed allowed when in reverse
	case REVERSE_SPEED_MENU:
		current_menu = REVERSE_SPEED_VAL_MENU;
    7cf8:	83 e2       	ldi	r24, 0x23	; 35
    7cfa:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = reverse_speed;
    7cfe:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <reverse_speed>
    7d02:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    7d06:	1f 92       	push	r1
    7d08:	8f 93       	push	r24
    7d0a:	87 ef       	ldi	r24, 0xF7	; 247
    7d0c:	90 e2       	ldi	r25, 0x20	; 32
    7d0e:	9f 93       	push	r25
    7d10:	8f 93       	push	r24
    7d12:	83 ed       	ldi	r24, 0xD3	; 211
    7d14:	97 e2       	ldi	r25, 0x27	; 39
    7d16:	9f 93       	push	r25
    7d18:	8f 93       	push	r24
    7d1a:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7d1e:	83 ed       	ldi	r24, 0xD3	; 211
    7d20:	97 e2       	ldi	r25, 0x27	; 39
    7d22:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7d26:	0f 90       	pop	r0
    7d28:	0f 90       	pop	r0
    7d2a:	0f 90       	pop	r0
    7d2c:	0f 90       	pop	r0
    7d2e:	0f 90       	pop	r0
    7d30:	0f 90       	pop	r0
    7d32:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Rated continuous current in amps
	case CURRENT_RATING_MENU:
		current_menu = CURRENT_RATING_VAL_MENU;
    7d36:	86 e2       	ldi	r24, 0x26	; 38
    7d38:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = current_rating;
    7d3c:	80 91 eb 21 	lds	r24, 0x21EB	; 0x8021eb <current_rating>
    7d40:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d AMPS", current_value);
    7d44:	1f 92       	push	r1
    7d46:	8f 93       	push	r24
    7d48:	89 e0       	ldi	r24, 0x09	; 9
    7d4a:	91 e2       	ldi	r25, 0x21	; 33
    7d4c:	9f 93       	push	r25
    7d4e:	8f 93       	push	r24
    7d50:	83 ed       	ldi	r24, 0xD3	; 211
    7d52:	97 e2       	ldi	r25, 0x27	; 39
    7d54:	9f 93       	push	r25
    7d56:	8f 93       	push	r24
    7d58:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7d5c:	83 ed       	ldi	r24, 0xD3	; 211
    7d5e:	97 e2       	ldi	r25, 0x27	; 39
    7d60:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7d64:	0f 90       	pop	r0
    7d66:	0f 90       	pop	r0
    7d68:	0f 90       	pop	r0
    7d6a:	0f 90       	pop	r0
    7d6c:	0f 90       	pop	r0
    7d6e:	0f 90       	pop	r0
    7d70:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Max continuous current in amps
	case MAX_CURRENT_MENU:
		current_menu = MAX_CURRENT_VAL_MENU;
    7d74:	87 e2       	ldi	r24, 0x27	; 39
    7d76:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = max_current;
    7d7a:	80 91 95 22 	lds	r24, 0x2295	; 0x802295 <max_current>
    7d7e:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d AMPS", current_value);
    7d82:	1f 92       	push	r1
    7d84:	8f 93       	push	r24
    7d86:	89 e0       	ldi	r24, 0x09	; 9
    7d88:	91 e2       	ldi	r25, 0x21	; 33
    7d8a:	9f 93       	push	r25
    7d8c:	8f 93       	push	r24
    7d8e:	83 ed       	ldi	r24, 0xD3	; 211
    7d90:	97 e2       	ldi	r25, 0x27	; 39
    7d92:	9f 93       	push	r25
    7d94:	8f 93       	push	r24
    7d96:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7d9a:	83 ed       	ldi	r24, 0xD3	; 211
    7d9c:	97 e2       	ldi	r25, 0x27	; 39
    7d9e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7da2:	0f 90       	pop	r0
    7da4:	0f 90       	pop	r0
    7da6:	0f 90       	pop	r0
    7da8:	0f 90       	pop	r0
    7daa:	0f 90       	pop	r0
    7dac:	0f 90       	pop	r0
    7dae:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Number seconds to allow motor to run above rated current before shutting off
	case OVERLOAD_TIME_MENU:
		current_menu = OVERLOAD_TIME_VAL_MENU;
    7db2:	88 e2       	ldi	r24, 0x28	; 40
    7db4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = overload_time;
    7db8:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <overload_time>
    7dbc:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d SECONDS", current_value);
    7dc0:	1f 92       	push	r1
    7dc2:	8f 93       	push	r24
    7dc4:	8c ee       	ldi	r24, 0xEC	; 236
    7dc6:	90 e2       	ldi	r25, 0x20	; 32
    7dc8:	9f 93       	push	r25
    7dca:	8f 93       	push	r24
    7dcc:	83 ed       	ldi	r24, 0xD3	; 211
    7dce:	97 e2       	ldi	r25, 0x27	; 39
    7dd0:	9f 93       	push	r25
    7dd2:	8f 93       	push	r24
    7dd4:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7dd8:	83 ed       	ldi	r24, 0xD3	; 211
    7dda:	97 e2       	ldi	r25, 0x27	; 39
    7ddc:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    7de0:	0f 90       	pop	r0
    7de2:	0f 90       	pop	r0
    7de4:	0f 90       	pop	r0
    7de6:	0f 90       	pop	r0
    7de8:	0f 90       	pop	r0
    7dea:	0f 90       	pop	r0
    7dec:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = POT_CALIBRATION_MENU;
    7df0:	82 e8       	ldi	r24, 0x82	; 130
    7df2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    7df6:	81 ea       	ldi	r24, 0xA1	; 161
    7df8:	99 e2       	ldi	r25, 0x29	; 41
    7dfa:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    7dfe:	60 e0       	ldi	r22, 0x00	; 0
    7e00:	81 e0       	ldi	r24, 0x01	; 1
    7e02:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CALIBRATION"));
    7e06:	85 e9       	ldi	r24, 0x95	; 149
    7e08:	99 e2       	ldi	r25, 0x29	; 41
    7e0a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    7e0e:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Choose the type of pot being used
	case POT_TYPE_MENU:
		current_menu = POT_TYPE_VAL_MENU;
    7e12:	83 e8       	ldi	r24, 0x83	; 131
    7e14:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("NOT YET IMPLEMENTED"));
    7e18:	81 e8       	ldi	r24, 0x81	; 129
    7e1a:	99 e2       	ldi	r25, 0x29	; 41
    7e1c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    7e20:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>
	case POT_TYPE_VAL_MENU:
		break;

		//Display current calibration values, press next to recalibrate pot
	case POT_CALIBRATION_MENU:
		current_menu = POT_CALIBRATION_VAL_MENU;
    7e24:	84 e8       	ldi	r24, 0x84	; 132
    7e26:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    7e2a:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    7e2e:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    7e32:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    7e36:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    7e3a:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    7e3e:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    7e42:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    7e46:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    7e4a:	9f 01       	movw	r18, r30
    7e4c:	36 95       	lsr	r19
    7e4e:	27 95       	ror	r18
    7e50:	36 95       	lsr	r19
    7e52:	27 95       	ror	r18
    7e54:	36 95       	lsr	r19
    7e56:	27 95       	ror	r18
    7e58:	a5 ec       	ldi	r26, 0xC5	; 197
    7e5a:	b0 e2       	ldi	r27, 0x20	; 32
    7e5c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    7e60:	92 95       	swap	r25
    7e62:	82 95       	swap	r24
    7e64:	8f 70       	andi	r24, 0x0F	; 15
    7e66:	89 27       	eor	r24, r25
    7e68:	9f 70       	andi	r25, 0x0F	; 15
    7e6a:	89 27       	eor	r24, r25
    7e6c:	0f 2e       	mov	r0, r31
    7e6e:	f8 ee       	ldi	r31, 0xE8	; 232
    7e70:	ef 2e       	mov	r14, r31
    7e72:	f3 e0       	ldi	r31, 0x03	; 3
    7e74:	ff 2e       	mov	r15, r31
    7e76:	f0 2d       	mov	r31, r0
    7e78:	8e 9d       	mul	r24, r14
    7e7a:	90 01       	movw	r18, r0
    7e7c:	8f 9d       	mul	r24, r15
    7e7e:	30 0d       	add	r19, r0
    7e80:	9e 9d       	mul	r25, r14
    7e82:	30 0d       	add	r19, r0
    7e84:	11 24       	eor	r1, r1
    7e86:	e2 1b       	sub	r30, r18
    7e88:	f3 0b       	sbc	r31, r19
    7e8a:	ff 93       	push	r31
    7e8c:	ef 93       	push	r30
    7e8e:	98 01       	movw	r18, r16
    7e90:	36 95       	lsr	r19
    7e92:	27 95       	ror	r18
    7e94:	36 95       	lsr	r19
    7e96:	27 95       	ror	r18
    7e98:	36 95       	lsr	r19
    7e9a:	27 95       	ror	r18
    7e9c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    7ea0:	92 95       	swap	r25
    7ea2:	82 95       	swap	r24
    7ea4:	8f 70       	andi	r24, 0x0F	; 15
    7ea6:	89 27       	eor	r24, r25
    7ea8:	9f 70       	andi	r25, 0x0F	; 15
    7eaa:	89 27       	eor	r24, r25
    7eac:	9f 93       	push	r25
    7eae:	8f 93       	push	r24
    7eb0:	9a 01       	movw	r18, r20
    7eb2:	36 95       	lsr	r19
    7eb4:	27 95       	ror	r18
    7eb6:	36 95       	lsr	r19
    7eb8:	27 95       	ror	r18
    7eba:	36 95       	lsr	r19
    7ebc:	27 95       	ror	r18
    7ebe:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    7ec2:	92 95       	swap	r25
    7ec4:	82 95       	swap	r24
    7ec6:	8f 70       	andi	r24, 0x0F	; 15
    7ec8:	89 27       	eor	r24, r25
    7eca:	9f 70       	andi	r25, 0x0F	; 15
    7ecc:	89 27       	eor	r24, r25
    7ece:	8e 9d       	mul	r24, r14
    7ed0:	90 01       	movw	r18, r0
    7ed2:	8f 9d       	mul	r24, r15
    7ed4:	30 0d       	add	r19, r0
    7ed6:	9e 9d       	mul	r25, r14
    7ed8:	30 0d       	add	r19, r0
    7eda:	11 24       	eor	r1, r1
    7edc:	42 1b       	sub	r20, r18
    7ede:	53 0b       	sbc	r21, r19
    7ee0:	5f 93       	push	r21
    7ee2:	4f 93       	push	r20
    7ee4:	9e 01       	movw	r18, r28
    7ee6:	36 95       	lsr	r19
    7ee8:	27 95       	ror	r18
    7eea:	36 95       	lsr	r19
    7eec:	27 95       	ror	r18
    7eee:	36 95       	lsr	r19
    7ef0:	27 95       	ror	r18
    7ef2:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    7ef6:	92 95       	swap	r25
    7ef8:	82 95       	swap	r24
    7efa:	8f 70       	andi	r24, 0x0F	; 15
    7efc:	89 27       	eor	r24, r25
    7efe:	9f 70       	andi	r25, 0x0F	; 15
    7f00:	89 27       	eor	r24, r25
    7f02:	9f 93       	push	r25
    7f04:	8f 93       	push	r24
    7f06:	86 e0       	ldi	r24, 0x06	; 6
    7f08:	90 e2       	ldi	r25, 0x20	; 32
    7f0a:	9f 93       	push	r25
    7f0c:	8f 93       	push	r24
    7f0e:	83 ed       	ldi	r24, 0xD3	; 211
    7f10:	97 e2       	ldi	r25, 0x27	; 39
    7f12:	9f 93       	push	r25
    7f14:	8f 93       	push	r24
    7f16:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    7f1a:	83 ed       	ldi	r24, 0xD3	; 211
    7f1c:	97 e2       	ldi	r25, 0x27	; 39
    7f1e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    7f22:	60 e0       	ldi	r22, 0x00	; 0
    7f24:	81 e0       	ldi	r24, 0x01	; 1
    7f26:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    7f2a:	8d e6       	ldi	r24, 0x6D	; 109
    7f2c:	99 e2       	ldi	r25, 0x29	; 41
    7f2e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    7f32:	8d b7       	in	r24, 0x3d	; 61
    7f34:	9e b7       	in	r25, 0x3e	; 62
    7f36:	0c 96       	adiw	r24, 0x0c	; 12
    7f38:	8d bf       	out	0x3d, r24	; 61
    7f3a:	9e bf       	out	0x3e, r25	; 62
    7f3c:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

	case POT_CALIBRATION_VAL_MENU:
		current_menu = POT_RECALIBRATION_MENU;
    7f40:	85 e8       	ldi	r24, 0x85	; 133
    7f42:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESS PEDAL UNTIL"));
    7f46:	8b e5       	ldi	r24, 0x5B	; 91
    7f48:	99 e2       	ldi	r25, 0x29	; 41
    7f4a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    7f4e:	60 e0       	ldi	r22, 0x00	; 0
    7f50:	81 e0       	ldi	r24, 0x01	; 1
    7f52:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("PEDAL SWITCH CLOSES"));
    7f56:	87 e4       	ldi	r24, 0x47	; 71
    7f58:	99 e2       	ldi	r25, 0x29	; 41
    7f5a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_LOW;
    7f5e:	8a ea       	ldi	r24, 0xAA	; 170
    7f60:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    7f64:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
		break;
    7f68:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		/*--------------------------------------------------------------------------------*/

		//Enter vacuum settings menu
	case VACUUM_SETTINGS_MENU:
		current_menu = VACUUM_SLOW_START_MENU;
    7f6c:	8b e1       	ldi	r24, 0x1B	; 27
    7f6e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM SLOW START"));
    7f72:	85 e3       	ldi	r24, 0x35	; 53
    7f74:	99 e2       	ldi	r25, 0x29	; 41
    7f76:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    7f7a:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Choose rampup time for vacuum on
	case VACUUM_SLOW_START_MENU:
		current_menu = VACUUM_SLOW_START_VAL_MENU;
    7f7e:	89 e2       	ldi	r24, 0x29	; 41
    7f80:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = vacuum_slow_start;
    7f84:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <vacuum_slow_start>
    7f88:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		if (vacuum_slow_start == FALSE)
    7f8c:	90 91 a3 22 	lds	r25, 0x22A3	; 0x8022a3 <vacuum_slow_start>
    7f90:	91 11       	cpse	r25, r1
    7f92:	06 c0       	rjmp	.+12     	; 0x7fa0 <menu_next+0x49a>
			lcd_write_new_P(PSTR("OFF"));
    7f94:	81 e3       	ldi	r24, 0x31	; 49
    7f96:	99 e2       	ldi	r25, 0x29	; 41
    7f98:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    7f9c:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>
		else
		{
			sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    7fa0:	2a ef       	ldi	r18, 0xFA	; 250
    7fa2:	82 9f       	mul	r24, r18
    7fa4:	c0 01       	movw	r24, r0
    7fa6:	11 24       	eor	r1, r1
    7fa8:	9f 93       	push	r25
    7faa:	8f 93       	push	r24
    7fac:	81 e1       	ldi	r24, 0x11	; 17
    7fae:	91 e2       	ldi	r25, 0x21	; 33
    7fb0:	9f 93       	push	r25
    7fb2:	8f 93       	push	r24
    7fb4:	83 ed       	ldi	r24, 0xD3	; 211
    7fb6:	97 e2       	ldi	r25, 0x27	; 39
    7fb8:	9f 93       	push	r25
    7fba:	8f 93       	push	r24
    7fbc:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    7fc0:	83 ed       	ldi	r24, 0xD3	; 211
    7fc2:	97 e2       	ldi	r25, 0x27	; 39
    7fc4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    7fc8:	0f 90       	pop	r0
    7fca:	0f 90       	pop	r0
    7fcc:	0f 90       	pop	r0
    7fce:	0f 90       	pop	r0
    7fd0:	0f 90       	pop	r0
    7fd2:	0f 90       	pop	r0
    7fd4:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>
		}
		break;

		//Enter brush settings menu
	case BRUSH_SETTINGS_MENU:
		current_menu = BRUSH_SLOW_START_MENU;
    7fd8:	8d e1       	ldi	r24, 0x1D	; 29
    7fda:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH SLOW START"));
    7fde:	80 e2       	ldi	r24, 0x20	; 32
    7fe0:	99 e2       	ldi	r25, 0x29	; 41
    7fe2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    7fe6:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Choose rampup time for brush on
	case BRUSH_SLOW_START_MENU:
		current_menu = BRUSH_SLOW_START_VAL_MENU;
    7fea:	8a e2       	ldi	r24, 0x2A	; 42
    7fec:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = brush_slow_start;
    7ff0:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <brush_slow_start>
    7ff4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		if (brush_slow_start == FALSE)
    7ff8:	90 91 b7 22 	lds	r25, 0x22B7	; 0x8022b7 <brush_slow_start>
    7ffc:	91 11       	cpse	r25, r1
    7ffe:	06 c0       	rjmp	.+12     	; 0x800c <menu_next+0x506>
			lcd_write_new_P(PSTR("OFF"));
    8000:	8c e1       	ldi	r24, 0x1C	; 28
    8002:	99 e2       	ldi	r25, 0x29	; 41
    8004:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8008:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>
		else
		{
			sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    800c:	3a ef       	ldi	r19, 0xFA	; 250
    800e:	83 9f       	mul	r24, r19
    8010:	c0 01       	movw	r24, r0
    8012:	11 24       	eor	r1, r1
    8014:	9f 93       	push	r25
    8016:	8f 93       	push	r24
    8018:	81 e1       	ldi	r24, 0x11	; 17
    801a:	91 e2       	ldi	r25, 0x21	; 33
    801c:	9f 93       	push	r25
    801e:	8f 93       	push	r24
    8020:	83 ed       	ldi	r24, 0xD3	; 211
    8022:	97 e2       	ldi	r25, 0x27	; 39
    8024:	9f 93       	push	r25
    8026:	8f 93       	push	r24
    8028:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    802c:	83 ed       	ldi	r24, 0xD3	; 211
    802e:	97 e2       	ldi	r25, 0x27	; 39
    8030:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    8034:	0f 90       	pop	r0
    8036:	0f 90       	pop	r0
    8038:	0f 90       	pop	r0
    803a:	0f 90       	pop	r0
    803c:	0f 90       	pop	r0
    803e:	0f 90       	pop	r0
    8040:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>
		}
		break;

		//Enter brush settings menu
	case PRE_SWP_SETTINGS_MENU:
		current_menu = PRE_SWP_SLOW_START_MENU;
    8044:	8f e1       	ldi	r24, 0x1F	; 31
    8046:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRE-SWEEP SLOW START"));
    804a:	87 e0       	ldi	r24, 0x07	; 7
    804c:	99 e2       	ldi	r25, 0x29	; 41
    804e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8052:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <menu_next+0x1550>

		//Choose rampup time for brush on
	case PRE_SWP_SLOW_START_MENU:
		current_menu = PRE_SWP_SLOW_START_VAL_MENU;
    8056:	8b e2       	ldi	r24, 0x2B	; 43
    8058:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = pre_swp_slow_start;
    805c:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <pre_swp_slow_start>
    8060:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		if (pre_swp_slow_start == FALSE)
    8064:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <pre_swp_slow_start>
    8068:	91 11       	cpse	r25, r1
    806a:	05 c0       	rjmp	.+10     	; 0x8076 <menu_next+0x570>
			lcd_write_new_P(PSTR("OFF"));
    806c:	83 e0       	ldi	r24, 0x03	; 3
    806e:	99 e2       	ldi	r25, 0x29	; 41
    8070:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8074:	f0 c7       	rjmp	.+4064   	; 0x9056 <menu_next+0x1550>
		else
		{
			sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    8076:	2a ef       	ldi	r18, 0xFA	; 250
    8078:	82 9f       	mul	r24, r18
    807a:	c0 01       	movw	r24, r0
    807c:	11 24       	eor	r1, r1
    807e:	9f 93       	push	r25
    8080:	8f 93       	push	r24
    8082:	81 e1       	ldi	r24, 0x11	; 17
    8084:	91 e2       	ldi	r25, 0x21	; 33
    8086:	9f 93       	push	r25
    8088:	8f 93       	push	r24
    808a:	83 ed       	ldi	r24, 0xD3	; 211
    808c:	97 e2       	ldi	r25, 0x27	; 39
    808e:	9f 93       	push	r25
    8090:	8f 93       	push	r24
    8092:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    8096:	83 ed       	ldi	r24, 0xD3	; 211
    8098:	97 e2       	ldi	r25, 0x27	; 39
    809a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    809e:	0f 90       	pop	r0
    80a0:	0f 90       	pop	r0
    80a2:	0f 90       	pop	r0
    80a4:	0f 90       	pop	r0
    80a6:	0f 90       	pop	r0
    80a8:	0f 90       	pop	r0
    80aa:	d5 c7       	rjmp	.+4010   	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

		//This part of the menu allows the actual value to be changed
	case ACCELERATION_VAL_MENU:
		acceleration = current_value;
    80ac:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    80b0:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <acceleration>
		//update_DM_settings();
		update_DM_accel();
    80b4:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <update_DM_accel>
    80b8:	3f ef       	ldi	r19, 0xFF	; 255
    80ba:	83 ec       	ldi	r24, 0xC3	; 195
    80bc:	99 e0       	ldi	r25, 0x09	; 9
    80be:	31 50       	subi	r19, 0x01	; 1
    80c0:	80 40       	sbci	r24, 0x00	; 0
    80c2:	90 40       	sbci	r25, 0x00	; 0
    80c4:	e1 f7       	brne	.-8      	; 0x80be <menu_next+0x5b8>
    80c6:	00 c0       	rjmp	.+0      	; 0x80c8 <menu_next+0x5c2>
    80c8:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_ACCELERATION, current_value);
    80ca:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    80ce:	84 e1       	ldi	r24, 0x14	; 20
    80d0:	90 e0       	ldi	r25, 0x00	; 0
    80d2:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("ACCELERATION SET"));
    80d6:	82 ef       	ldi	r24, 0xF2	; 242
    80d8:	98 e2       	ldi	r25, 0x28	; 40
    80da:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    80de:	2f ef       	ldi	r18, 0xFF	; 255
    80e0:	3f e4       	ldi	r19, 0x4F	; 79
    80e2:	83 ec       	ldi	r24, 0xC3	; 195
    80e4:	21 50       	subi	r18, 0x01	; 1
    80e6:	30 40       	sbci	r19, 0x00	; 0
    80e8:	80 40       	sbci	r24, 0x00	; 0
    80ea:	e1 f7       	brne	.-8      	; 0x80e4 <menu_next+0x5de>
    80ec:	00 c0       	rjmp	.+0      	; 0x80ee <menu_next+0x5e8>
    80ee:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    80f0:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = ACCELERATION_MENU;
    80f4:	80 e1       	ldi	r24, 0x10	; 16
    80f6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ACCELERATION"));
    80fa:	85 ee       	ldi	r24, 0xE5	; 229
    80fc:	98 e2       	ldi	r25, 0x28	; 40
    80fe:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8102:	a9 c7       	rjmp	.+3922   	; 0x9056 <menu_next+0x1550>

	case DECELERATION_VAL_MENU:
		deceleration = current_value;
    8104:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8108:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <deceleration>
		//update_DM_settings();
		update_DM_deaccel();
    810c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <update_DM_deaccel>
    8110:	9f ef       	ldi	r25, 0xFF	; 255
    8112:	23 ec       	ldi	r18, 0xC3	; 195
    8114:	39 e0       	ldi	r19, 0x09	; 9
    8116:	91 50       	subi	r25, 0x01	; 1
    8118:	20 40       	sbci	r18, 0x00	; 0
    811a:	30 40       	sbci	r19, 0x00	; 0
    811c:	e1 f7       	brne	.-8      	; 0x8116 <menu_next+0x610>
    811e:	00 c0       	rjmp	.+0      	; 0x8120 <menu_next+0x61a>
    8120:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_DECELERATION, current_value);
    8122:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    8126:	85 e1       	ldi	r24, 0x15	; 21
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("DECELERATION SET"));
    812e:	84 ed       	ldi	r24, 0xD4	; 212
    8130:	98 e2       	ldi	r25, 0x28	; 40
    8132:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8136:	8f ef       	ldi	r24, 0xFF	; 255
    8138:	9f e4       	ldi	r25, 0x4F	; 79
    813a:	23 ec       	ldi	r18, 0xC3	; 195
    813c:	81 50       	subi	r24, 0x01	; 1
    813e:	90 40       	sbci	r25, 0x00	; 0
    8140:	20 40       	sbci	r18, 0x00	; 0
    8142:	e1 f7       	brne	.-8      	; 0x813c <menu_next+0x636>
    8144:	00 c0       	rjmp	.+0      	; 0x8146 <menu_next+0x640>
    8146:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8148:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = DECELERATION_MENU;
    814c:	81 e1       	ldi	r24, 0x11	; 17
    814e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DECELERATION"));
    8152:	87 ec       	ldi	r24, 0xC7	; 199
    8154:	98 e2       	ldi	r25, 0x28	; 40
    8156:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    815a:	7d c7       	rjmp	.+3834   	; 0x9056 <menu_next+0x1550>

	case BRAKE_DELAY_VAL_MENU:
		brake_delay = current_value;
    815c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8160:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <brake_delay>
		//update_DM_settings();
		update_DM_braekdelay();
    8164:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <update_DM_braekdelay>
    8168:	3f ef       	ldi	r19, 0xFF	; 255
    816a:	83 ec       	ldi	r24, 0xC3	; 195
    816c:	99 e0       	ldi	r25, 0x09	; 9
    816e:	31 50       	subi	r19, 0x01	; 1
    8170:	80 40       	sbci	r24, 0x00	; 0
    8172:	90 40       	sbci	r25, 0x00	; 0
    8174:	e1 f7       	brne	.-8      	; 0x816e <menu_next+0x668>
    8176:	00 c0       	rjmp	.+0      	; 0x8178 <menu_next+0x672>
    8178:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY, current_value);
    817a:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    817e:	80 e1       	ldi	r24, 0x10	; 16
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("BRAKE DELAY SET"));
    8186:	87 eb       	ldi	r24, 0xB7	; 183
    8188:	98 e2       	ldi	r25, 0x28	; 40
    818a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    818e:	2f ef       	ldi	r18, 0xFF	; 255
    8190:	3f e4       	ldi	r19, 0x4F	; 79
    8192:	83 ec       	ldi	r24, 0xC3	; 195
    8194:	21 50       	subi	r18, 0x01	; 1
    8196:	30 40       	sbci	r19, 0x00	; 0
    8198:	80 40       	sbci	r24, 0x00	; 0
    819a:	e1 f7       	brne	.-8      	; 0x8194 <menu_next+0x68e>
    819c:	00 c0       	rjmp	.+0      	; 0x819e <menu_next+0x698>
    819e:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    81a0:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = BRAKE_DELAY_MENU;
    81a4:	82 e1       	ldi	r24, 0x12	; 18
    81a6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRAKE DELAY"));
    81aa:	8b ea       	ldi	r24, 0xAB	; 171
    81ac:	98 e2       	ldi	r25, 0x28	; 40
    81ae:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    81b2:	51 c7       	rjmp	.+3746   	; 0x9056 <menu_next+0x1550>

	case REVERSE_SPEED_VAL_MENU:
		reverse_speed = current_value;
    81b4:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    81b8:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <reverse_speed>
		update_DM_reverse_speed();
    81bc:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <update_DM_reverse_speed>
    81c0:	9f ef       	ldi	r25, 0xFF	; 255
    81c2:	23 ec       	ldi	r18, 0xC3	; 195
    81c4:	39 e0       	ldi	r19, 0x09	; 9
    81c6:	91 50       	subi	r25, 0x01	; 1
    81c8:	20 40       	sbci	r18, 0x00	; 0
    81ca:	30 40       	sbci	r19, 0x00	; 0
    81cc:	e1 f7       	brne	.-8      	; 0x81c6 <menu_next+0x6c0>
    81ce:	00 c0       	rjmp	.+0      	; 0x81d0 <menu_next+0x6ca>
    81d0:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED, current_value);
    81d2:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    81d6:	81 e1       	ldi	r24, 0x11	; 17
    81d8:	90 e0       	ldi	r25, 0x00	; 0
    81da:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("REVERSE SPEED SET"));
    81de:	89 e9       	ldi	r24, 0x99	; 153
    81e0:	98 e2       	ldi	r25, 0x28	; 40
    81e2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    81e6:	8f ef       	ldi	r24, 0xFF	; 255
    81e8:	9f e4       	ldi	r25, 0x4F	; 79
    81ea:	23 ec       	ldi	r18, 0xC3	; 195
    81ec:	81 50       	subi	r24, 0x01	; 1
    81ee:	90 40       	sbci	r25, 0x00	; 0
    81f0:	20 40       	sbci	r18, 0x00	; 0
    81f2:	e1 f7       	brne	.-8      	; 0x81ec <menu_next+0x6e6>
    81f4:	00 c0       	rjmp	.+0      	; 0x81f6 <menu_next+0x6f0>
    81f6:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    81f8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = REVERSE_SPEED_MENU;
    81fc:	83 e1       	ldi	r24, 0x13	; 19
    81fe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    8202:	8b e8       	ldi	r24, 0x8B	; 139
    8204:	98 e2       	ldi	r25, 0x28	; 40
    8206:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    820a:	25 c7       	rjmp	.+3658   	; 0x9056 <menu_next+0x1550>

	case SLOW_SPEED_VAL_MENU:
		slow_speed = current_value;
    820c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8210:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <slow_speed>
		update_DM_slow_speed();
    8214:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <update_DM_slow_speed>
    8218:	3f ef       	ldi	r19, 0xFF	; 255
    821a:	83 ec       	ldi	r24, 0xC3	; 195
    821c:	99 e0       	ldi	r25, 0x09	; 9
    821e:	31 50       	subi	r19, 0x01	; 1
    8220:	80 40       	sbci	r24, 0x00	; 0
    8222:	90 40       	sbci	r25, 0x00	; 0
    8224:	e1 f7       	brne	.-8      	; 0x821e <menu_next+0x718>
    8226:	00 c0       	rjmp	.+0      	; 0x8228 <menu_next+0x722>
    8228:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED, current_value);
    822a:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    822e:	83 e1       	ldi	r24, 0x13	; 19
    8230:	90 e0       	ldi	r25, 0x00	; 0
    8232:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("SLOW SPEED SET"));
    8236:	8c e7       	ldi	r24, 0x7C	; 124
    8238:	98 e2       	ldi	r25, 0x28	; 40
    823a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    823e:	2f ef       	ldi	r18, 0xFF	; 255
    8240:	3f e4       	ldi	r19, 0x4F	; 79
    8242:	83 ec       	ldi	r24, 0xC3	; 195
    8244:	21 50       	subi	r18, 0x01	; 1
    8246:	30 40       	sbci	r19, 0x00	; 0
    8248:	80 40       	sbci	r24, 0x00	; 0
    824a:	e1 f7       	brne	.-8      	; 0x8244 <menu_next+0x73e>
    824c:	00 c0       	rjmp	.+0      	; 0x824e <menu_next+0x748>
    824e:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8250:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = SLOW_SPEED_MENU;
    8254:	84 e1       	ldi	r24, 0x14	; 20
    8256:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    825a:	81 e7       	ldi	r24, 0x71	; 113
    825c:	98 e2       	ldi	r25, 0x28	; 40
    825e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8262:	f9 c6       	rjmp	.+3570   	; 0x9056 <menu_next+0x1550>

	case FAST_SPEED_VAL_MENU:
		fast_speed = current_value;
    8264:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8268:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <fast_speed>
		update_DM_fast_speed();
    826c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <update_DM_fast_speed>
    8270:	9f ef       	ldi	r25, 0xFF	; 255
    8272:	23 ec       	ldi	r18, 0xC3	; 195
    8274:	39 e0       	ldi	r19, 0x09	; 9
    8276:	91 50       	subi	r25, 0x01	; 1
    8278:	20 40       	sbci	r18, 0x00	; 0
    827a:	30 40       	sbci	r19, 0x00	; 0
    827c:	e1 f7       	brne	.-8      	; 0x8276 <menu_next+0x770>
    827e:	00 c0       	rjmp	.+0      	; 0x8280 <menu_next+0x77a>
    8280:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED, current_value);
    8282:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    8286:	82 e1       	ldi	r24, 0x12	; 18
    8288:	90 e0       	ldi	r25, 0x00	; 0
    828a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("FAST SPEED SET"));
    828e:	82 e6       	ldi	r24, 0x62	; 98
    8290:	98 e2       	ldi	r25, 0x28	; 40
    8292:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8296:	8f ef       	ldi	r24, 0xFF	; 255
    8298:	9f e4       	ldi	r25, 0x4F	; 79
    829a:	23 ec       	ldi	r18, 0xC3	; 195
    829c:	81 50       	subi	r24, 0x01	; 1
    829e:	90 40       	sbci	r25, 0x00	; 0
    82a0:	20 40       	sbci	r18, 0x00	; 0
    82a2:	e1 f7       	brne	.-8      	; 0x829c <menu_next+0x796>
    82a4:	00 c0       	rjmp	.+0      	; 0x82a6 <menu_next+0x7a0>
    82a6:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    82a8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = FAST_SPEED_MENU;
    82ac:	85 e1       	ldi	r24, 0x15	; 21
    82ae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FAST SPEED"));
    82b2:	87 e5       	ldi	r24, 0x57	; 87
    82b4:	98 e2       	ldi	r25, 0x28	; 40
    82b6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    82ba:	cd c6       	rjmp	.+3482   	; 0x9056 <menu_next+0x1550>

	case CURRENT_RATING_VAL_MENU:
		current_rating = current_value;
    82bc:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    82c0:	80 93 eb 21 	sts	0x21EB, r24	; 0x8021eb <current_rating>
		update_DM_CURRENT_RATING();
    82c4:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <update_DM_CURRENT_RATING>
    82c8:	3f ef       	ldi	r19, 0xFF	; 255
    82ca:	83 ec       	ldi	r24, 0xC3	; 195
    82cc:	99 e0       	ldi	r25, 0x09	; 9
    82ce:	31 50       	subi	r19, 0x01	; 1
    82d0:	80 40       	sbci	r24, 0x00	; 0
    82d2:	90 40       	sbci	r25, 0x00	; 0
    82d4:	e1 f7       	brne	.-8      	; 0x82ce <menu_next+0x7c8>
    82d6:	00 c0       	rjmp	.+0      	; 0x82d8 <menu_next+0x7d2>
    82d8:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING, current_value);
    82da:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    82de:	86 e1       	ldi	r24, 0x16	; 22
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("CURRENT RATING SET"));
    82e6:	84 e4       	ldi	r24, 0x44	; 68
    82e8:	98 e2       	ldi	r25, 0x28	; 40
    82ea:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    82ee:	2f ef       	ldi	r18, 0xFF	; 255
    82f0:	3f e4       	ldi	r19, 0x4F	; 79
    82f2:	83 ec       	ldi	r24, 0xC3	; 195
    82f4:	21 50       	subi	r18, 0x01	; 1
    82f6:	30 40       	sbci	r19, 0x00	; 0
    82f8:	80 40       	sbci	r24, 0x00	; 0
    82fa:	e1 f7       	brne	.-8      	; 0x82f4 <menu_next+0x7ee>
    82fc:	00 c0       	rjmp	.+0      	; 0x82fe <menu_next+0x7f8>
    82fe:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8300:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = CURRENT_RATING_MENU;
    8304:	86 e1       	ldi	r24, 0x16	; 22
    8306:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CURRENT RATING"));
    830a:	85 e3       	ldi	r24, 0x35	; 53
    830c:	98 e2       	ldi	r25, 0x28	; 40
    830e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8312:	a1 c6       	rjmp	.+3394   	; 0x9056 <menu_next+0x1550>

	case MAX_CURRENT_VAL_MENU:
		max_current = current_value;
    8314:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8318:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <max_current>
		update_DM_MAX_CURRENT();
    831c:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <update_DM_MAX_CURRENT>
    8320:	9f ef       	ldi	r25, 0xFF	; 255
    8322:	23 ec       	ldi	r18, 0xC3	; 195
    8324:	39 e0       	ldi	r19, 0x09	; 9
    8326:	91 50       	subi	r25, 0x01	; 1
    8328:	20 40       	sbci	r18, 0x00	; 0
    832a:	30 40       	sbci	r19, 0x00	; 0
    832c:	e1 f7       	brne	.-8      	; 0x8326 <menu_next+0x820>
    832e:	00 c0       	rjmp	.+0      	; 0x8330 <menu_next+0x82a>
    8330:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING, current_value);
    8332:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    8336:	86 e1       	ldi	r24, 0x16	; 22
    8338:	90 e0       	ldi	r25, 0x00	; 0
    833a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("MAX CURRENT SET"));
    833e:	85 e2       	ldi	r24, 0x25	; 37
    8340:	98 e2       	ldi	r25, 0x28	; 40
    8342:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8346:	8f ef       	ldi	r24, 0xFF	; 255
    8348:	9f e4       	ldi	r25, 0x4F	; 79
    834a:	23 ec       	ldi	r18, 0xC3	; 195
    834c:	81 50       	subi	r24, 0x01	; 1
    834e:	90 40       	sbci	r25, 0x00	; 0
    8350:	20 40       	sbci	r18, 0x00	; 0
    8352:	e1 f7       	brne	.-8      	; 0x834c <menu_next+0x846>
    8354:	00 c0       	rjmp	.+0      	; 0x8356 <menu_next+0x850>
    8356:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8358:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = MAX_CURRENT_MENU;
    835c:	87 e1       	ldi	r24, 0x17	; 23
    835e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MAX CURRENT"));
    8362:	89 e1       	ldi	r24, 0x19	; 25
    8364:	98 e2       	ldi	r25, 0x28	; 40
    8366:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    836a:	75 c6       	rjmp	.+3306   	; 0x9056 <menu_next+0x1550>

	case OVERLOAD_TIME_VAL_MENU:
		overload_time = current_value;
    836c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8370:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <overload_time>
		update_DM_OVER_LOAD_TIME();
    8374:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <update_DM_OVER_LOAD_TIME>
    8378:	3f ef       	ldi	r19, 0xFF	; 255
    837a:	83 ec       	ldi	r24, 0xC3	; 195
    837c:	99 e0       	ldi	r25, 0x09	; 9
    837e:	31 50       	subi	r19, 0x01	; 1
    8380:	80 40       	sbci	r24, 0x00	; 0
    8382:	90 40       	sbci	r25, 0x00	; 0
    8384:	e1 f7       	brne	.-8      	; 0x837e <menu_next+0x878>
    8386:	00 c0       	rjmp	.+0      	; 0x8388 <menu_next+0x882>
    8388:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME, current_value);
    838a:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    838e:	88 e1       	ldi	r24, 0x18	; 24
    8390:	90 e0       	ldi	r25, 0x00	; 0
    8392:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("OVERLOAD TIME SET"));
    8396:	87 e0       	ldi	r24, 0x07	; 7
    8398:	98 e2       	ldi	r25, 0x28	; 40
    839a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    839e:	2f ef       	ldi	r18, 0xFF	; 255
    83a0:	3f e4       	ldi	r19, 0x4F	; 79
    83a2:	83 ec       	ldi	r24, 0xC3	; 195
    83a4:	21 50       	subi	r18, 0x01	; 1
    83a6:	30 40       	sbci	r19, 0x00	; 0
    83a8:	80 40       	sbci	r24, 0x00	; 0
    83aa:	e1 f7       	brne	.-8      	; 0x83a4 <menu_next+0x89e>
    83ac:	00 c0       	rjmp	.+0      	; 0x83ae <menu_next+0x8a8>
    83ae:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    83b0:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = OVERLOAD_TIME_MENU;
    83b4:	88 e1       	ldi	r24, 0x18	; 24
    83b6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("OVERLOAD TIME"));
    83ba:	89 ef       	ldi	r24, 0xF9	; 249
    83bc:	97 e2       	ldi	r25, 0x27	; 39
    83be:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    83c2:	49 c6       	rjmp	.+3218   	; 0x9056 <menu_next+0x1550>

	case VACUUM_SLOW_START_VAL_MENU:
		vacuum_slow_start = current_value;
    83c4:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    83c8:	80 93 a3 22 	sts	0x22A3, r24	; 0x8022a3 <vacuum_slow_start>
		update_A2_vaccum_slow_start();
    83cc:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <update_A2_vaccum_slow_start>
    83d0:	9f ef       	ldi	r25, 0xFF	; 255
    83d2:	23 ec       	ldi	r18, 0xC3	; 195
    83d4:	39 e0       	ldi	r19, 0x09	; 9
    83d6:	91 50       	subi	r25, 0x01	; 1
    83d8:	20 40       	sbci	r18, 0x00	; 0
    83da:	30 40       	sbci	r19, 0x00	; 0
    83dc:	e1 f7       	brne	.-8      	; 0x83d6 <menu_next+0x8d0>
    83de:	00 c0       	rjmp	.+0      	; 0x83e0 <menu_next+0x8da>
    83e0:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_VACUUM_SLOW_START, current_value);
    83e2:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    83e6:	89 e1       	ldi	r24, 0x19	; 25
    83e8:	90 e0       	ldi	r25, 0x00	; 0
    83ea:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("VACUUM SLOW START"));
    83ee:	87 ee       	ldi	r24, 0xE7	; 231
    83f0:	97 e2       	ldi	r25, 0x27	; 39
    83f2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    83f6:	60 e0       	ldi	r22, 0x00	; 0
    83f8:	81 e0       	ldi	r24, 0x01	; 1
    83fa:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SET"));
    83fe:	83 ee       	ldi	r24, 0xE3	; 227
    8400:	97 e2       	ldi	r25, 0x27	; 39
    8402:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    8406:	8f ef       	ldi	r24, 0xFF	; 255
    8408:	9f e4       	ldi	r25, 0x4F	; 79
    840a:	23 ec       	ldi	r18, 0xC3	; 195
    840c:	81 50       	subi	r24, 0x01	; 1
    840e:	90 40       	sbci	r25, 0x00	; 0
    8410:	20 40       	sbci	r18, 0x00	; 0
    8412:	e1 f7       	brne	.-8      	; 0x840c <menu_next+0x906>
    8414:	00 c0       	rjmp	.+0      	; 0x8416 <menu_next+0x910>
    8416:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8418:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = VACUUM_SLOW_START_MENU;
    841c:	8b e1       	ldi	r24, 0x1B	; 27
    841e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM SLOW START"));
    8422:	81 ed       	ldi	r24, 0xD1	; 209
    8424:	97 e2       	ldi	r25, 0x27	; 39
    8426:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    842a:	15 c6       	rjmp	.+3114   	; 0x9056 <menu_next+0x1550>

	case BRUSH_SLOW_START_VAL_MENU:
		brush_slow_start = current_value;
    842c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8430:	80 93 b7 22 	sts	0x22B7, r24	; 0x8022b7 <brush_slow_start>
		update_A2_brush_slow_start();
    8434:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <update_A2_brush_slow_start>
    8438:	3f ef       	ldi	r19, 0xFF	; 255
    843a:	83 ec       	ldi	r24, 0xC3	; 195
    843c:	99 e0       	ldi	r25, 0x09	; 9
    843e:	31 50       	subi	r19, 0x01	; 1
    8440:	80 40       	sbci	r24, 0x00	; 0
    8442:	90 40       	sbci	r25, 0x00	; 0
    8444:	e1 f7       	brne	.-8      	; 0x843e <menu_next+0x938>
    8446:	00 c0       	rjmp	.+0      	; 0x8448 <menu_next+0x942>
    8448:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_BRUSH_SLOW_START, current_value);
    844a:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    844e:	8a e1       	ldi	r24, 0x1A	; 26
    8450:	90 e0       	ldi	r25, 0x00	; 0
    8452:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("BRUSH SLOW START"));
    8456:	80 ec       	ldi	r24, 0xC0	; 192
    8458:	97 e2       	ldi	r25, 0x27	; 39
    845a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    845e:	60 e0       	ldi	r22, 0x00	; 0
    8460:	81 e0       	ldi	r24, 0x01	; 1
    8462:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SET"));
    8466:	8c eb       	ldi	r24, 0xBC	; 188
    8468:	97 e2       	ldi	r25, 0x27	; 39
    846a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    846e:	2f ef       	ldi	r18, 0xFF	; 255
    8470:	3f e4       	ldi	r19, 0x4F	; 79
    8472:	83 ec       	ldi	r24, 0xC3	; 195
    8474:	21 50       	subi	r18, 0x01	; 1
    8476:	30 40       	sbci	r19, 0x00	; 0
    8478:	80 40       	sbci	r24, 0x00	; 0
    847a:	e1 f7       	brne	.-8      	; 0x8474 <menu_next+0x96e>
    847c:	00 c0       	rjmp	.+0      	; 0x847e <menu_next+0x978>
    847e:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8480:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = BRUSH_SLOW_START_MENU;
    8484:	8d e1       	ldi	r24, 0x1D	; 29
    8486:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH SLOW START"));
    848a:	8b ea       	ldi	r24, 0xAB	; 171
    848c:	97 e2       	ldi	r25, 0x27	; 39
    848e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8492:	e1 c5       	rjmp	.+3010   	; 0x9056 <menu_next+0x1550>

	case PRE_SWP_SLOW_START_VAL_MENU:
		pre_swp_slow_start = current_value;
    8494:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    8498:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <pre_swp_slow_start>
		update_A2_presweep_slow_start();
    849c:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <update_A2_presweep_slow_start>
    84a0:	9f ef       	ldi	r25, 0xFF	; 255
    84a2:	23 ec       	ldi	r18, 0xC3	; 195
    84a4:	39 e0       	ldi	r19, 0x09	; 9
    84a6:	91 50       	subi	r25, 0x01	; 1
    84a8:	20 40       	sbci	r18, 0x00	; 0
    84aa:	30 40       	sbci	r19, 0x00	; 0
    84ac:	e1 f7       	brne	.-8      	; 0x84a6 <menu_next+0x9a0>
    84ae:	00 c0       	rjmp	.+0      	; 0x84b0 <menu_next+0x9aa>
    84b0:	00 00       	nop
		_delay_ms(100);
		eeprom_update_byte((uint8_t *)EEP8_PRE_SWP_SLOW_START, current_value);
    84b2:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <current_value>
    84b6:	8b e1       	ldi	r24, 0x1B	; 27
    84b8:	90 e0       	ldi	r25, 0x00	; 0
    84ba:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		lcd_write_new_P(PSTR("PRE-SWEEP SLOW START"));
    84be:	86 e9       	ldi	r24, 0x96	; 150
    84c0:	97 e2       	ldi	r25, 0x27	; 39
    84c2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    84c6:	60 e0       	ldi	r22, 0x00	; 0
    84c8:	81 e0       	ldi	r24, 0x01	; 1
    84ca:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SET"));
    84ce:	82 e9       	ldi	r24, 0x92	; 146
    84d0:	97 e2       	ldi	r25, 0x27	; 39
    84d2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    84d6:	8f ef       	ldi	r24, 0xFF	; 255
    84d8:	9f e4       	ldi	r25, 0x4F	; 79
    84da:	23 ec       	ldi	r18, 0xC3	; 195
    84dc:	81 50       	subi	r24, 0x01	; 1
    84de:	90 40       	sbci	r25, 0x00	; 0
    84e0:	20 40       	sbci	r18, 0x00	; 0
    84e2:	e1 f7       	brne	.-8      	; 0x84dc <menu_next+0x9d6>
    84e4:	00 c0       	rjmp	.+0      	; 0x84e6 <menu_next+0x9e0>
    84e6:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    84e8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = PRE_SWP_SLOW_START_MENU;
    84ec:	8f e1       	ldi	r24, 0x1F	; 31
    84ee:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRE-SWEEP SLOW START"));
    84f2:	8d e7       	ldi	r24, 0x7D	; 125
    84f4:	97 e2       	ldi	r25, 0x27	; 39
    84f6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    84fa:	ad c5       	rjmp	.+2906   	; 0x9056 <menu_next+0x1550>


		/******************************************************************************************************************************/
		//Three battery types are available to accurately determine battery capacity	
	case BATTERY_MENU:
		if (battery_type == LEAD)
    84fc:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <battery_type>
    8500:	82 31       	cpi	r24, 0x12	; 18
    8502:	41 f4       	brne	.+16     	; 0x8514 <menu_next+0xa0e>
		{
			current_menu = LEAD_MENU;
    8504:	80 e3       	ldi	r24, 0x30	; 48
    8506:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("BATTERY: LEAD"));
    850a:	8f e6       	ldi	r24, 0x6F	; 111
    850c:	97 e2       	ldi	r25, 0x27	; 39
    850e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8512:	a1 c5       	rjmp	.+2882   	; 0x9056 <menu_next+0x1550>
		}
		else if (battery_type == AGM)
    8514:	83 32       	cpi	r24, 0x23	; 35
    8516:	41 f4       	brne	.+16     	; 0x8528 <menu_next+0xa22>
		{
			current_menu = AGM_MENU;
    8518:	81 e3       	ldi	r24, 0x31	; 49
    851a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("BATTERY: AGM"));
    851e:	82 e6       	ldi	r24, 0x62	; 98
    8520:	97 e2       	ldi	r25, 0x27	; 39
    8522:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8526:	97 c5       	rjmp	.+2862   	; 0x9056 <menu_next+0x1550>
		}
		else
		{
			current_menu = GEL_MENU;
    8528:	82 e3       	ldi	r24, 0x32	; 50
    852a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("BATTERY: GEL"));
    852e:	85 e5       	ldi	r24, 0x55	; 85
    8530:	97 e2       	ldi	r25, 0x27	; 39
    8532:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8536:	8f c5       	rjmp	.+2846   	; 0x9056 <menu_next+0x1550>
		/*-------------------------------------------------------------------------------*/

		//This part of the menu allows the battery type to be set

	case LEAD_MENU:
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_TYPE, LEAD);
    8538:	62 e1       	ldi	r22, 0x12	; 18
    853a:	81 e2       	ldi	r24, 0x21	; 33
    853c:	90 e0       	ldi	r25, 0x00	; 0
    853e:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		battery_type = LEAD;
    8542:	82 e1       	ldi	r24, 0x12	; 18
    8544:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <battery_type>
		lcd_write_new_P(PSTR("BATTERY TYPE SET"));
    8548:	84 e4       	ldi	r24, 0x44	; 68
    854a:	97 e2       	ldi	r25, 0x27	; 39
    854c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8550:	3f ef       	ldi	r19, 0xFF	; 255
    8552:	8f e4       	ldi	r24, 0x4F	; 79
    8554:	93 ec       	ldi	r25, 0xC3	; 195
    8556:	31 50       	subi	r19, 0x01	; 1
    8558:	80 40       	sbci	r24, 0x00	; 0
    855a:	90 40       	sbci	r25, 0x00	; 0
    855c:	e1 f7       	brne	.-8      	; 0x8556 <menu_next+0xa50>
    855e:	00 c0       	rjmp	.+0      	; 0x8560 <menu_next+0xa5a>
    8560:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8562:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = BATTERY_MENU;
    8566:	82 e0       	ldi	r24, 0x02	; 2
    8568:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    856c:	87 e3       	ldi	r24, 0x37	; 55
    856e:	97 e2       	ldi	r25, 0x27	; 39
    8570:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8574:	70 c5       	rjmp	.+2784   	; 0x9056 <menu_next+0x1550>

	case AGM_MENU:
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_TYPE, AGM);
    8576:	63 e2       	ldi	r22, 0x23	; 35
    8578:	81 e2       	ldi	r24, 0x21	; 33
    857a:	90 e0       	ldi	r25, 0x00	; 0
    857c:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		battery_type = AGM;
    8580:	83 e2       	ldi	r24, 0x23	; 35
    8582:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <battery_type>
		lcd_write_new_P(PSTR("BATTERY TYPE SET"));
    8586:	86 e2       	ldi	r24, 0x26	; 38
    8588:	97 e2       	ldi	r25, 0x27	; 39
    858a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    858e:	2f ef       	ldi	r18, 0xFF	; 255
    8590:	3f e4       	ldi	r19, 0x4F	; 79
    8592:	83 ec       	ldi	r24, 0xC3	; 195
    8594:	21 50       	subi	r18, 0x01	; 1
    8596:	30 40       	sbci	r19, 0x00	; 0
    8598:	80 40       	sbci	r24, 0x00	; 0
    859a:	e1 f7       	brne	.-8      	; 0x8594 <menu_next+0xa8e>
    859c:	00 c0       	rjmp	.+0      	; 0x859e <menu_next+0xa98>
    859e:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    85a0:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = BATTERY_MENU;
    85a4:	82 e0       	ldi	r24, 0x02	; 2
    85a6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    85aa:	89 e1       	ldi	r24, 0x19	; 25
    85ac:	97 e2       	ldi	r25, 0x27	; 39
    85ae:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    85b2:	51 c5       	rjmp	.+2722   	; 0x9056 <menu_next+0x1550>

	case GEL_MENU:
		eeprom_update_byte((uint8_t *)EEP8_BATTERY_TYPE, GEL);
    85b4:	64 e3       	ldi	r22, 0x34	; 52
    85b6:	81 e2       	ldi	r24, 0x21	; 33
    85b8:	90 e0       	ldi	r25, 0x00	; 0
    85ba:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
		battery_type = GEL;
    85be:	84 e3       	ldi	r24, 0x34	; 52
    85c0:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <battery_type>
		lcd_write_new_P(PSTR("BATTERY TYPE SET"));
    85c4:	88 e0       	ldi	r24, 0x08	; 8
    85c6:	97 e2       	ldi	r25, 0x27	; 39
    85c8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    85cc:	9f ef       	ldi	r25, 0xFF	; 255
    85ce:	2f e4       	ldi	r18, 0x4F	; 79
    85d0:	33 ec       	ldi	r19, 0xC3	; 195
    85d2:	91 50       	subi	r25, 0x01	; 1
    85d4:	20 40       	sbci	r18, 0x00	; 0
    85d6:	30 40       	sbci	r19, 0x00	; 0
    85d8:	e1 f7       	brne	.-8      	; 0x85d2 <menu_next+0xacc>
    85da:	00 c0       	rjmp	.+0      	; 0x85dc <menu_next+0xad6>
    85dc:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    85de:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = BATTERY_MENU;
    85e2:	82 e0       	ldi	r24, 0x02	; 2
    85e4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    85e8:	8b ef       	ldi	r24, 0xFB	; 251
    85ea:	96 e2       	ldi	r25, 0x26	; 38
    85ec:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    85f0:	32 c5       	rjmp	.+2660   	; 0x9056 <menu_next+0x1550>

		/******************************************************************************************************************************/
		//The serial number is 16 digits long and can be changed through the menu
	case SET_SERIAL_NUM_MENU:
		current_menu = SET_RB800_SERIAL_NUM_MENU;
    85f2:	88 e9       	ldi	r24, 0x98	; 152
    85f4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET RB800 SERIAL NUM"));
    85f8:	86 ee       	ldi	r24, 0xE6	; 230
    85fa:	96 e2       	ldi	r25, 0x26	; 38
    85fc:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8600:	2a c5       	rjmp	.+2644   	; 0x9056 <menu_next+0x1550>

	case SET_RB800_SERIAL_NUM_MENU:
		current_menu = SET_RB800_SERIAL_NUM_VAL_MENU;
    8602:	89 e9       	ldi	r24, 0x99	; 153
    8604:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET RB800 SERIAL NUM"));
    8608:	81 ed       	ldi	r24, 0xD1	; 209
    860a:	96 e2       	ldi	r25, 0x26	; 38
    860c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_clear_screen();
    8610:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <lcd_clear_screen>
		strncpy((char *)serial_num_temp, (const char*)serial_num, SERIAL_NUM_LEN + 1);
    8614:	41 e1       	ldi	r20, 0x11	; 17
    8616:	50 e0       	ldi	r21, 0x00	; 0
    8618:	63 e8       	ldi	r22, 0x83	; 131
    861a:	71 e2       	ldi	r23, 0x21	; 33
    861c:	8c eb       	ldi	r24, 0xBC	; 188
    861e:	97 e2       	ldi	r25, 0x27	; 39
    8620:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
		lcd_set_cursor(0, 2);
    8624:	62 e0       	ldi	r22, 0x02	; 2
    8626:	80 e0       	ldi	r24, 0x00	; 0
    8628:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write((char *)serial_num_temp);
    862c:	8c eb       	ldi	r24, 0xBC	; 188
    862e:	97 e2       	ldi	r25, 0x27	; 39
    8630:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		lcd_set_cursor(0, 2);
    8634:	62 e0       	ldi	r22, 0x02	; 2
    8636:	80 e0       	ldi	r24, 0x00	; 0
    8638:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_cursor_on();
    863c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
		cursor = 2;
    8640:	82 e0       	ldi	r24, 0x02	; 2
    8642:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
		break;
    8646:	07 c5       	rjmp	.+2574   	; 0x9056 <menu_next+0x1550>

	case SET_A1_SERIAL_NUM_MENU:
		current_menu = SET_A1_SERIAL_NUM_VAL_MENU;
    8648:	83 e9       	ldi	r24, 0x93	; 147
    864a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A1 SERIAL NUM"));
    864e:	8f eb       	ldi	r24, 0xBF	; 191
    8650:	96 e2       	ldi	r25, 0x26	; 38
    8652:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		strncpy((char *)serial_num_temp, (const char*)A1_serial_num, A1_SERIAL_NUM_LEN + 1);
    8656:	4f e0       	ldi	r20, 0x0F	; 15
    8658:	50 e0       	ldi	r21, 0x00	; 0
    865a:	68 e9       	ldi	r22, 0x98	; 152
    865c:	71 e2       	ldi	r23, 0x21	; 33
    865e:	8c eb       	ldi	r24, 0xBC	; 188
    8660:	97 e2       	ldi	r25, 0x27	; 39
    8662:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
		lcd_write_new((char *)serial_num_temp);
    8666:	8c eb       	ldi	r24, 0xBC	; 188
    8668:	97 e2       	ldi	r25, 0x27	; 39
    866a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, 2);
    866e:	62 e0       	ldi	r22, 0x02	; 2
    8670:	80 e0       	ldi	r24, 0x00	; 0
    8672:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_cursor_on();
    8676:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
		cursor = 2;
    867a:	82 e0       	ldi	r24, 0x02	; 2
    867c:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
		break;
    8680:	ea c4       	rjmp	.+2516   	; 0x9056 <menu_next+0x1550>

	case SET_A2_SERIAL_NUM_MENU:
		current_menu = SET_A2_SERIAL_NUM_VAL_MENU;
    8682:	85 e9       	ldi	r24, 0x95	; 149
    8684:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A2 SERIAL NUM"));
    8688:	8d ea       	ldi	r24, 0xAD	; 173
    868a:	96 e2       	ldi	r25, 0x26	; 38
    868c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		strncpy((char *)serial_num_temp, (const char*)A2_serial_num, A1_SERIAL_NUM_LEN + 1);
    8690:	4f e0       	ldi	r20, 0x0F	; 15
    8692:	50 e0       	ldi	r21, 0x00	; 0
    8694:	66 e4       	ldi	r22, 0x46	; 70
    8696:	71 e2       	ldi	r23, 0x21	; 33
    8698:	8c eb       	ldi	r24, 0xBC	; 188
    869a:	97 e2       	ldi	r25, 0x27	; 39
    869c:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
		lcd_write_new((char *)serial_num_temp);
    86a0:	8c eb       	ldi	r24, 0xBC	; 188
    86a2:	97 e2       	ldi	r25, 0x27	; 39
    86a4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, 2);
    86a8:	62 e0       	ldi	r22, 0x02	; 2
    86aa:	80 e0       	ldi	r24, 0x00	; 0
    86ac:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_cursor_on();
    86b0:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
		cursor = 2;
    86b4:	82 e0       	ldi	r24, 0x02	; 2
    86b6:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
		break;
    86ba:	cd c4       	rjmp	.+2458   	; 0x9056 <menu_next+0x1550>

	case SET_A3_SERIAL_NUM_MENU:
		current_menu = SET_A3_SERIAL_NUM_VAL_MENU;
    86bc:	87 e9       	ldi	r24, 0x97	; 151
    86be:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A3 SERIAL NUM"));
    86c2:	8b e9       	ldi	r24, 0x9B	; 155
    86c4:	96 e2       	ldi	r25, 0x26	; 38
    86c6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		strncpy((char *)serial_num_temp, (const char*)A3_serial_num, A1_SERIAL_NUM_LEN + 1);
    86ca:	4f e0       	ldi	r20, 0x0F	; 15
    86cc:	50 e0       	ldi	r21, 0x00	; 0
    86ce:	6a eb       	ldi	r22, 0xBA	; 186
    86d0:	71 e2       	ldi	r23, 0x21	; 33
    86d2:	8c eb       	ldi	r24, 0xBC	; 188
    86d4:	97 e2       	ldi	r25, 0x27	; 39
    86d6:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
		lcd_write_new((char *)serial_num_temp);
    86da:	8c eb       	ldi	r24, 0xBC	; 188
    86dc:	97 e2       	ldi	r25, 0x27	; 39
    86de:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, 2);
    86e2:	62 e0       	ldi	r22, 0x02	; 2
    86e4:	80 e0       	ldi	r24, 0x00	; 0
    86e6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_cursor_on();
    86ea:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
		cursor = 2;
    86ee:	82 e0       	ldi	r24, 0x02	; 2
    86f0:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
		break;
    86f4:	b0 c4       	rjmp	.+2400   	; 0x9056 <menu_next+0x1550>
		/*-------------------------------------------------------------------------------*/

		//This part of the menu displays the serial number and allows the number to be changed

	case SET_RB800_SERIAL_NUM_VAL_MENU:
		if (cursor == (SERIAL_NUM_LEN - 1) + 2)
    86f6:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    86fa:	81 31       	cpi	r24, 0x11	; 17
    86fc:	09 f0       	breq	.+2      	; 0x8700 <menu_next+0xbfa>
    86fe:	5a c0       	rjmp	.+180    	; 0x87b4 <menu_next+0xcae>
		{
			if (!admin_mode)
    8700:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    8704:	88 23       	and	r24, r24
    8706:	09 f4       	brne	.+2      	; 0x870a <menu_next+0xc04>
    8708:	a6 c4       	rjmp	.+2380   	; 0x9056 <menu_next+0x1550>
    870a:	0f 2e       	mov	r0, r31
    870c:	fc ec       	ldi	r31, 0xCC	; 204
    870e:	ef 2e       	mov	r14, r31
    8710:	f7 e2       	ldi	r31, 0x27	; 39
    8712:	ff 2e       	mov	r15, r31
    8714:	f0 2d       	mov	r31, r0
    8716:	cc eb       	ldi	r28, 0xBC	; 188
    8718:	d7 e2       	ldi	r29, 0x27	; 39
				break;
			for (uint8_t i = 0; i < SERIAL_NUM_LEN; i++)
			{
				eeprom_update_byte((uint8_t *)EEPxx_SERIAL_NUM + i, serial_num_temp[i]);
    871a:	0f e2       	ldi	r16, 0x2F	; 47
    871c:	10 e0       	ldi	r17, 0x00	; 0
    871e:	0c 5b       	subi	r16, 0xBC	; 188
    8720:	17 42       	sbci	r17, 0x27	; 39
    8722:	69 91       	ld	r22, Y+
    8724:	c8 01       	movw	r24, r16
    8726:	8c 0f       	add	r24, r28
    8728:	9d 1f       	adc	r25, r29
    872a:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	case SET_RB800_SERIAL_NUM_VAL_MENU:
		if (cursor == (SERIAL_NUM_LEN - 1) + 2)
		{
			if (!admin_mode)
				break;
			for (uint8_t i = 0; i < SERIAL_NUM_LEN; i++)
    872e:	ec 16       	cp	r14, r28
    8730:	fd 06       	cpc	r15, r29
    8732:	b9 f7       	brne	.-18     	; 0x8722 <menu_next+0xc1c>
			{
				eeprom_update_byte((uint8_t *)EEPxx_SERIAL_NUM + i, serial_num_temp[i]);
			}
			lcd_write_new_P(PSTR("SERIAL NUMBER"));
    8734:	8d e8       	ldi	r24, 0x8D	; 141
    8736:	96 e2       	ldi	r25, 0x26	; 38
    8738:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    873c:	60 e0       	ldi	r22, 0x00	; 0
    873e:	81 e0       	ldi	r24, 0x01	; 1
    8740:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("CHANGED"));
    8744:	85 e8       	ldi	r24, 0x85	; 133
    8746:	96 e2       	ldi	r25, 0x26	; 38
    8748:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    874c:	8f ef       	ldi	r24, 0xFF	; 255
    874e:	9f e4       	ldi	r25, 0x4F	; 79
    8750:	23 ec       	ldi	r18, 0xC3	; 195
    8752:	81 50       	subi	r24, 0x01	; 1
    8754:	90 40       	sbci	r25, 0x00	; 0
    8756:	20 40       	sbci	r18, 0x00	; 0
    8758:	e1 f7       	brne	.-8      	; 0x8752 <menu_next+0xc4c>
    875a:	00 c0       	rjmp	.+0      	; 0x875c <menu_next+0xc56>
    875c:	00 00       	nop
			_delay_ms(2000);
			clear_switch_pressed();
    875e:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			eeprom_read_block((void *)serial_num, (const void*)EEPxx_SERIAL_NUM, SERIAL_NUM_LEN);
    8762:	40 e1       	ldi	r20, 0x10	; 16
    8764:	50 e0       	ldi	r21, 0x00	; 0
    8766:	60 e3       	ldi	r22, 0x30	; 48
    8768:	70 e0       	ldi	r23, 0x00	; 0
    876a:	83 e8       	ldi	r24, 0x83	; 131
    876c:	91 e2       	ldi	r25, 0x21	; 33
    876e:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
			serial_num[SERIAL_NUM_LEN] = '\0';
    8772:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <serial_num+0x10>
			current_menu = SET_RB800_SERIAL_NUM_VAL_MENU;
    8776:	89 e9       	ldi	r24, 0x99	; 153
    8778:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_clear_screen();
    877c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <lcd_clear_screen>
			strncpy((char *)serial_num_temp, (const char*)serial_num, SERIAL_NUM_LEN + 1); //IVA001: fixed memory corruption typo
    8780:	41 e1       	ldi	r20, 0x11	; 17
    8782:	50 e0       	ldi	r21, 0x00	; 0
    8784:	63 e8       	ldi	r22, 0x83	; 131
    8786:	71 e2       	ldi	r23, 0x21	; 33
    8788:	8c eb       	ldi	r24, 0xBC	; 188
    878a:	97 e2       	ldi	r25, 0x27	; 39
    878c:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
			lcd_set_cursor(0, 2);
    8790:	62 e0       	ldi	r22, 0x02	; 2
    8792:	80 e0       	ldi	r24, 0x00	; 0
    8794:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write((char *)serial_num_temp);
    8798:	8c eb       	ldi	r24, 0xBC	; 188
    879a:	97 e2       	ldi	r25, 0x27	; 39
    879c:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
			lcd_set_cursor(0, 2);
    87a0:	62 e0       	ldi	r22, 0x02	; 2
    87a2:	80 e0       	ldi	r24, 0x00	; 0
    87a4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_cursor_on();
    87a8:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
			cursor = 2;
    87ac:	82 e0       	ldi	r24, 0x02	; 2
    87ae:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
    87b2:	51 c4       	rjmp	.+2210   	; 0x9056 <menu_next+0x1550>
		}
		else
		{
			cursor++;
    87b4:	91 e0       	ldi	r25, 0x01	; 1
    87b6:	98 0f       	add	r25, r24
			switch (cursor)
    87b8:	99 30       	cpi	r25, 0x09	; 9
    87ba:	59 f0       	breq	.+22     	; 0x87d2 <menu_next+0xccc>
    87bc:	18 f4       	brcc	.+6      	; 0x87c4 <menu_next+0xcbe>
    87be:	96 30       	cpi	r25, 0x06	; 6
    87c0:	29 f4       	brne	.+10     	; 0x87cc <menu_next+0xcc6>
    87c2:	07 c0       	rjmp	.+14     	; 0x87d2 <menu_next+0xccc>
    87c4:	9b 30       	cpi	r25, 0x0B	; 11
    87c6:	29 f0       	breq	.+10     	; 0x87d2 <menu_next+0xccc>
    87c8:	90 31       	cpi	r25, 0x10	; 16
    87ca:	19 f0       	breq	.+6      	; 0x87d2 <menu_next+0xccc>
			lcd_cursor_on();
			cursor = 2;
		}
		else
		{
			cursor++;
    87cc:	90 93 ee 27 	sts	0x27EE, r25	; 0x8027ee <cursor>
    87d0:	03 c0       	rjmp	.+6      	; 0x87d8 <menu_next+0xcd2>
			{
			case 6:
			case 9:
			case 11:
			case 16:
				cursor++;
    87d2:	8e 5f       	subi	r24, 0xFE	; 254
    87d4:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
				break;
			default:
				break;
			}
			lcd_set_cursor(0, cursor);
    87d8:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    87dc:	80 e0       	ldi	r24, 0x00	; 0
    87de:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    87e2:	39 c4       	rjmp	.+2162   	; 0x9056 <menu_next+0x1550>
		}
		break;

	case SET_A1_SERIAL_NUM_VAL_MENU:
		if (cursor == (A1_SERIAL_NUM_LEN - 1))
    87e4:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    87e8:	6d 30       	cpi	r22, 0x0D	; 13
    87ea:	09 f0       	breq	.+2      	; 0x87ee <menu_next+0xce8>
    87ec:	54 c0       	rjmp	.+168    	; 0x8896 <menu_next+0xd90>
		{
			if (!admin_mode)
    87ee:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    87f2:	88 23       	and	r24, r24
    87f4:	09 f4       	brne	.+2      	; 0x87f8 <menu_next+0xcf2>
    87f6:	2f c4       	rjmp	.+2142   	; 0x9056 <menu_next+0x1550>
    87f8:	0f 2e       	mov	r0, r31
    87fa:	fa ec       	ldi	r31, 0xCA	; 202
    87fc:	ef 2e       	mov	r14, r31
    87fe:	f7 e2       	ldi	r31, 0x27	; 39
    8800:	ff 2e       	mov	r15, r31
    8802:	f0 2d       	mov	r31, r0
    8804:	cc eb       	ldi	r28, 0xBC	; 188
    8806:	d7 e2       	ldi	r29, 0x27	; 39
				break;
			for (uint8_t i = 0; i < A1_SERIAL_NUM_LEN; i++)
			{
				eeprom_update_byte((uint8_t *)EEPxx_A1_SERIAL_NUM + i, serial_num_temp[i]);
    8808:	0f e6       	ldi	r16, 0x6F	; 111
    880a:	10 e0       	ldi	r17, 0x00	; 0
    880c:	0c 5b       	subi	r16, 0xBC	; 188
    880e:	17 42       	sbci	r17, 0x27	; 39
    8810:	69 91       	ld	r22, Y+
    8812:	c8 01       	movw	r24, r16
    8814:	8c 0f       	add	r24, r28
    8816:	9d 1f       	adc	r25, r29
    8818:	0e 94 e6 6e 	call	0xddcc	; 0xddcc <eeprom_update_byte>
	case SET_A1_SERIAL_NUM_VAL_MENU:
		if (cursor == (A1_SERIAL_NUM_LEN - 1))
		{
			if (!admin_mode)
				break;
			for (uint8_t i = 0; i < A1_SERIAL_NUM_LEN; i++)
    881c:	ec 16       	cp	r14, r28
    881e:	fd 06       	cpc	r15, r29
    8820:	b9 f7       	brne	.-18     	; 0x8810 <menu_next+0xd0a>
			{
				eeprom_update_byte((uint8_t *)EEPxx_A1_SERIAL_NUM + i, serial_num_temp[i]);
			}
			lcd_write_new_P(PSTR("SERIAL NUMBER"));
    8822:	87 e7       	ldi	r24, 0x77	; 119
    8824:	96 e2       	ldi	r25, 0x26	; 38
    8826:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    882a:	60 e0       	ldi	r22, 0x00	; 0
    882c:	81 e0       	ldi	r24, 0x01	; 1
    882e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("CHANGED"));
    8832:	8f e6       	ldi	r24, 0x6F	; 111
    8834:	96 e2       	ldi	r25, 0x26	; 38
    8836:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    883a:	3f ef       	ldi	r19, 0xFF	; 255
    883c:	8f e4       	ldi	r24, 0x4F	; 79
    883e:	93 ec       	ldi	r25, 0xC3	; 195
    8840:	31 50       	subi	r19, 0x01	; 1
    8842:	80 40       	sbci	r24, 0x00	; 0
    8844:	90 40       	sbci	r25, 0x00	; 0
    8846:	e1 f7       	brne	.-8      	; 0x8840 <menu_next+0xd3a>
    8848:	00 c0       	rjmp	.+0      	; 0x884a <menu_next+0xd44>
    884a:	00 00       	nop
			_delay_ms(2000);
			clear_switch_pressed();
    884c:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			eeprom_read_block((void *)A1_serial_num, (const void*)EEPxx_A1_SERIAL_NUM, A1_SERIAL_NUM_LEN);
    8850:	4e e0       	ldi	r20, 0x0E	; 14
    8852:	50 e0       	ldi	r21, 0x00	; 0
    8854:	60 e7       	ldi	r22, 0x70	; 112
    8856:	70 e0       	ldi	r23, 0x00	; 0
    8858:	88 e9       	ldi	r24, 0x98	; 152
    885a:	91 e2       	ldi	r25, 0x21	; 33
    885c:	0e 94 b5 6e 	call	0xdd6a	; 0xdd6a <eeprom_read_block>
			A1_serial_num[A1_SERIAL_NUM_LEN] = '\0';
    8860:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <A1_serial_num+0xe>
			current_menu = SET_A1_SERIAL_NUM_VAL_MENU;
    8864:	83 e9       	ldi	r24, 0x93	; 147
    8866:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			strncpy((char *)serial_num_temp, (const char*)A1_serial_num, SERIAL_NUM_LEN + 1);
    886a:	41 e1       	ldi	r20, 0x11	; 17
    886c:	50 e0       	ldi	r21, 0x00	; 0
    886e:	68 e9       	ldi	r22, 0x98	; 152
    8870:	71 e2       	ldi	r23, 0x21	; 33
    8872:	8c eb       	ldi	r24, 0xBC	; 188
    8874:	97 e2       	ldi	r25, 0x27	; 39
    8876:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
			lcd_write_new((char *)serial_num_temp);
    887a:	8c eb       	ldi	r24, 0xBC	; 188
    887c:	97 e2       	ldi	r25, 0x27	; 39
    887e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(0, 2);
    8882:	62 e0       	ldi	r22, 0x02	; 2
    8884:	80 e0       	ldi	r24, 0x00	; 0
    8886:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_cursor_on();
    888a:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
			cursor = 2;
    888e:	82 e0       	ldi	r24, 0x02	; 2
    8890:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
    8894:	e0 c3       	rjmp	.+1984   	; 0x9056 <menu_next+0x1550>
		}
		else
		{
			cursor++;
    8896:	6f 5f       	subi	r22, 0xFF	; 255
    8898:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
					cursor++;
					break;
				default:
					break;
			}*/
			lcd_set_cursor(0, cursor);
    889c:	80 e0       	ldi	r24, 0x00	; 0
    889e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    88a2:	d9 c3       	rjmp	.+1970   	; 0x9056 <menu_next+0x1550>
		}
		break;

	case SET_A2_SERIAL_NUM_VAL_MENU:
		if (cursor == (A1_SERIAL_NUM_LEN - 1))
    88a4:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    88a8:	6d 30       	cpi	r22, 0x0D	; 13
    88aa:	09 f0       	breq	.+2      	; 0x88ae <menu_next+0xda8>
    88ac:	51 c0       	rjmp	.+162    	; 0x8950 <menu_next+0xe4a>
		{
			if (!admin_mode)
    88ae:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    88b2:	88 23       	and	r24, r24
    88b4:	09 f4       	brne	.+2      	; 0x88b8 <menu_next+0xdb2>
    88b6:	cf c3       	rjmp	.+1950   	; 0x9056 <menu_next+0x1550>
				break;
			send_serial_num(A2_CAN, serial_num_temp);
    88b8:	6c eb       	ldi	r22, 0xBC	; 188
    88ba:	77 e2       	ldi	r23, 0x27	; 39
    88bc:	82 ea       	ldi	r24, 0xA2	; 162
    88be:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <send_serial_num>
			request_A2_serial_num();
    88c2:	0e 94 d7 24 	call	0x49ae	; 0x49ae <request_A2_serial_num>
			lcd_write_new_P(PSTR("SERIAL NUMBER"));
    88c6:	81 e6       	ldi	r24, 0x61	; 97
    88c8:	96 e2       	ldi	r25, 0x26	; 38
    88ca:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    88ce:	60 e0       	ldi	r22, 0x00	; 0
    88d0:	81 e0       	ldi	r24, 0x01	; 1
    88d2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("CHANGED"));
    88d6:	89 e5       	ldi	r24, 0x59	; 89
    88d8:	96 e2       	ldi	r25, 0x26	; 38
    88da:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			cursor = 2;
    88de:	82 e0       	ldi	r24, 0x02	; 2
    88e0:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
			while (cursor < 20)
			{
				if (!CQRx_queueIsEmpty())
    88e4:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    88e8:	81 11       	cpse	r24, r1
    88ea:	05 c0       	rjmp	.+10     	; 0x88f6 <menu_next+0xdf0>
				{
					CQRx_dequeue();
    88ec:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
					reset_CAN_error();
    88f0:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    88f4:	0e c0       	rjmp	.+28     	; 0x8912 <menu_next+0xe0c>
    88f6:	2f ef       	ldi	r18, 0xFF	; 255
    88f8:	33 ec       	ldi	r19, 0xC3	; 195
    88fa:	89 e0       	ldi	r24, 0x09	; 9
    88fc:	21 50       	subi	r18, 0x01	; 1
    88fe:	30 40       	sbci	r19, 0x00	; 0
    8900:	80 40       	sbci	r24, 0x00	; 0
    8902:	e1 f7       	brne	.-8      	; 0x88fc <menu_next+0xdf6>
    8904:	00 c0       	rjmp	.+0      	; 0x8906 <menu_next+0xe00>
    8906:	00 00       	nop
				}
				else
				{
					_delay_ms(100);
					cursor++;
    8908:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    890c:	8f 5f       	subi	r24, 0xFF	; 255
    890e:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
			request_A2_serial_num();
			lcd_write_new_P(PSTR("SERIAL NUMBER"));
			lcd_set_cursor(1, 0);
			lcd_write_P(PSTR("CHANGED"));
			cursor = 2;
			while (cursor < 20)
    8912:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    8916:	84 31       	cpi	r24, 0x14	; 20
    8918:	28 f3       	brcs	.-54     	; 0x88e4 <menu_next+0xdde>
				{
					_delay_ms(100);
					cursor++;
				}
			}
			clear_switch_pressed();
    891a:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			current_menu = SET_A2_SERIAL_NUM_VAL_MENU;
    891e:	85 e9       	ldi	r24, 0x95	; 149
    8920:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			strncpy((char *)serial_num_temp, (const char*)A2_serial_num, A1_SERIAL_NUM_LEN + 1);
    8924:	4f e0       	ldi	r20, 0x0F	; 15
    8926:	50 e0       	ldi	r21, 0x00	; 0
    8928:	66 e4       	ldi	r22, 0x46	; 70
    892a:	71 e2       	ldi	r23, 0x21	; 33
    892c:	8c eb       	ldi	r24, 0xBC	; 188
    892e:	97 e2       	ldi	r25, 0x27	; 39
    8930:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
			lcd_write_new((char *)serial_num_temp);
    8934:	8c eb       	ldi	r24, 0xBC	; 188
    8936:	97 e2       	ldi	r25, 0x27	; 39
    8938:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(0, 2);
    893c:	62 e0       	ldi	r22, 0x02	; 2
    893e:	80 e0       	ldi	r24, 0x00	; 0
    8940:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_cursor_on();
    8944:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
			cursor = 2;
    8948:	82 e0       	ldi	r24, 0x02	; 2
    894a:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
    894e:	83 c3       	rjmp	.+1798   	; 0x9056 <menu_next+0x1550>
		}
		else
		{
			cursor++;
    8950:	6f 5f       	subi	r22, 0xFF	; 255
    8952:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
					cursor++;
					break;
				default:
					break;
			}*/
			lcd_set_cursor(0, cursor);
    8956:	80 e0       	ldi	r24, 0x00	; 0
    8958:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    895c:	7c c3       	rjmp	.+1784   	; 0x9056 <menu_next+0x1550>
		}
		break;

	case SET_A3_SERIAL_NUM_VAL_MENU:
		if (cursor == (A1_SERIAL_NUM_LEN - 1))
    895e:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    8962:	6d 30       	cpi	r22, 0x0D	; 13
    8964:	09 f0       	breq	.+2      	; 0x8968 <menu_next+0xe62>
    8966:	5a c0       	rjmp	.+180    	; 0x8a1c <menu_next+0xf16>
		{
			if (!admin_mode)
    8968:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    896c:	88 23       	and	r24, r24
    896e:	09 f4       	brne	.+2      	; 0x8972 <menu_next+0xe6c>
    8970:	72 c3       	rjmp	.+1764   	; 0x9056 <menu_next+0x1550>
				break;
			send_serial_num(A3_CAN, serial_num_temp);
    8972:	6c eb       	ldi	r22, 0xBC	; 188
    8974:	77 e2       	ldi	r23, 0x27	; 39
    8976:	83 ea       	ldi	r24, 0xA3	; 163
    8978:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <send_serial_num>
    897c:	9f ef       	ldi	r25, 0xFF	; 255
    897e:	21 ee       	ldi	r18, 0xE1	; 225
    8980:	34 e0       	ldi	r19, 0x04	; 4
    8982:	91 50       	subi	r25, 0x01	; 1
    8984:	20 40       	sbci	r18, 0x00	; 0
    8986:	30 40       	sbci	r19, 0x00	; 0
    8988:	e1 f7       	brne	.-8      	; 0x8982 <menu_next+0xe7c>
    898a:	00 c0       	rjmp	.+0      	; 0x898c <menu_next+0xe86>
    898c:	00 00       	nop
			_delay_ms(50);
			request_A3_serial_num();
    898e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <request_A3_serial_num>
			lcd_write_new_P(PSTR("SERIAL NUMBER"));
    8992:	8b e4       	ldi	r24, 0x4B	; 75
    8994:	96 e2       	ldi	r25, 0x26	; 38
    8996:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_set_cursor(1, 0);
    899a:	60 e0       	ldi	r22, 0x00	; 0
    899c:	81 e0       	ldi	r24, 0x01	; 1
    899e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("CHANGED"));
    89a2:	83 e4       	ldi	r24, 0x43	; 67
    89a4:	96 e2       	ldi	r25, 0x26	; 38
    89a6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			cursor = 2;
    89aa:	82 e0       	ldi	r24, 0x02	; 2
    89ac:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
			while (cursor < 20)
			{
				if (!CQRx_queueIsEmpty())
    89b0:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    89b4:	81 11       	cpse	r24, r1
    89b6:	05 c0       	rjmp	.+10     	; 0x89c2 <menu_next+0xebc>
				{
					CQRx_dequeue();
    89b8:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
					reset_CAN_error();
    89bc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    89c0:	0e c0       	rjmp	.+28     	; 0x89de <menu_next+0xed8>
    89c2:	8f ef       	ldi	r24, 0xFF	; 255
    89c4:	93 ec       	ldi	r25, 0xC3	; 195
    89c6:	29 e0       	ldi	r18, 0x09	; 9
    89c8:	81 50       	subi	r24, 0x01	; 1
    89ca:	90 40       	sbci	r25, 0x00	; 0
    89cc:	20 40       	sbci	r18, 0x00	; 0
    89ce:	e1 f7       	brne	.-8      	; 0x89c8 <menu_next+0xec2>
    89d0:	00 c0       	rjmp	.+0      	; 0x89d2 <menu_next+0xecc>
    89d2:	00 00       	nop
				}
				else
				{
					_delay_ms(100);
					cursor++;
    89d4:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    89d8:	8f 5f       	subi	r24, 0xFF	; 255
    89da:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
			request_A3_serial_num();
			lcd_write_new_P(PSTR("SERIAL NUMBER"));
			lcd_set_cursor(1, 0);
			lcd_write_P(PSTR("CHANGED"));
			cursor = 2;
			while (cursor < 20)
    89de:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    89e2:	84 31       	cpi	r24, 0x14	; 20
    89e4:	28 f3       	brcs	.-54     	; 0x89b0 <menu_next+0xeaa>
				{
					_delay_ms(100);
					cursor++;
				}
			}
			clear_switch_pressed();
    89e6:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
			current_menu = SET_A3_SERIAL_NUM_VAL_MENU;
    89ea:	87 e9       	ldi	r24, 0x97	; 151
    89ec:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			strncpy((char *)serial_num_temp, (const char*)A3_serial_num, A1_SERIAL_NUM_LEN + 1);
    89f0:	4f e0       	ldi	r20, 0x0F	; 15
    89f2:	50 e0       	ldi	r21, 0x00	; 0
    89f4:	6a eb       	ldi	r22, 0xBA	; 186
    89f6:	71 e2       	ldi	r23, 0x21	; 33
    89f8:	8c eb       	ldi	r24, 0xBC	; 188
    89fa:	97 e2       	ldi	r25, 0x27	; 39
    89fc:	0e 94 c9 6b 	call	0xd792	; 0xd792 <strncpy>
			lcd_write_new((char *)serial_num_temp);
    8a00:	8c eb       	ldi	r24, 0xBC	; 188
    8a02:	97 e2       	ldi	r25, 0x27	; 39
    8a04:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(0, 2);
    8a08:	62 e0       	ldi	r22, 0x02	; 2
    8a0a:	80 e0       	ldi	r24, 0x00	; 0
    8a0c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_cursor_on();
    8a10:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
			cursor = 2;
    8a14:	82 e0       	ldi	r24, 0x02	; 2
    8a16:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
    8a1a:	1d c3       	rjmp	.+1594   	; 0x9056 <menu_next+0x1550>
		}
		else
		{
			cursor++;
    8a1c:	6f 5f       	subi	r22, 0xFF	; 255
    8a1e:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
					cursor++;
					break;
				default:
					break;
			}*/
			lcd_set_cursor(0, cursor);
    8a22:	80 e0       	ldi	r24, 0x00	; 0
    8a24:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    8a28:	16 c3       	rjmp	.+1580   	; 0x9056 <menu_next+0x1550>

		/******************************************************************************************************************************/
		//The run time shows the number of hours and minutes the RB800 has been running
		//It can be changed in case of board failure
	case RUN_TIME_MENU:
		current_menu = RUN_TIME_VAL_MENU;
    8a2a:	81 e7       	ldi	r24, 0x71	; 113
    8a2c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		run_time_hour = hours;
    8a30:	40 91 40 23 	lds	r20, 0x2340	; 0x802340 <hours>
    8a34:	50 91 41 23 	lds	r21, 0x2341	; 0x802341 <hours+0x1>
		run_time_min = minutes;
    8a38:	10 91 02 23 	lds	r17, 0x2302	; 0x802302 <minutes>
    8a3c:	e2 ed       	ldi	r30, 0xD2	; 210
    8a3e:	f7 e2       	ldi	r31, 0x27	; 39
    8a40:	cd ec       	ldi	r28, 0xCD	; 205
    8a42:	d7 e2       	ldi	r29, 0x27	; 39
		for (int8_t i = 4; i >= 0; i--)
		{
			run_time_hour_arr[i] = (run_time_hour % 10) + ASCII_NUM;
    8a44:	9a 01       	movw	r18, r20
    8a46:	ad ec       	ldi	r26, 0xCD	; 205
    8a48:	bc ec       	ldi	r27, 0xCC	; 204
    8a4a:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    8a4e:	96 95       	lsr	r25
    8a50:	87 95       	ror	r24
    8a52:	96 95       	lsr	r25
    8a54:	87 95       	ror	r24
    8a56:	96 95       	lsr	r25
    8a58:	87 95       	ror	r24
    8a5a:	9c 01       	movw	r18, r24
    8a5c:	22 0f       	add	r18, r18
    8a5e:	33 1f       	adc	r19, r19
    8a60:	88 0f       	add	r24, r24
    8a62:	99 1f       	adc	r25, r25
    8a64:	88 0f       	add	r24, r24
    8a66:	99 1f       	adc	r25, r25
    8a68:	88 0f       	add	r24, r24
    8a6a:	99 1f       	adc	r25, r25
    8a6c:	82 0f       	add	r24, r18
    8a6e:	93 1f       	adc	r25, r19
    8a70:	9a 01       	movw	r18, r20
    8a72:	28 1b       	sub	r18, r24
    8a74:	39 0b       	sbc	r19, r25
    8a76:	c9 01       	movw	r24, r18
    8a78:	80 5d       	subi	r24, 0xD0	; 208
    8a7a:	82 93       	st	-Z, r24
			run_time_hour /= 10;
    8a7c:	9a 01       	movw	r18, r20
    8a7e:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    8a82:	ac 01       	movw	r20, r24
    8a84:	56 95       	lsr	r21
    8a86:	47 95       	ror	r20
    8a88:	56 95       	lsr	r21
    8a8a:	47 95       	ror	r20
    8a8c:	56 95       	lsr	r21
    8a8e:	47 95       	ror	r20
		//It can be changed in case of board failure
	case RUN_TIME_MENU:
		current_menu = RUN_TIME_VAL_MENU;
		run_time_hour = hours;
		run_time_min = minutes;
		for (int8_t i = 4; i >= 0; i--)
    8a90:	ec 17       	cp	r30, r28
    8a92:	fd 07       	cpc	r31, r29
    8a94:	b9 f6       	brne	.-82     	; 0x8a44 <menu_next+0xf3e>
    8a96:	40 93 ec 27 	sts	0x27EC, r20	; 0x8027ec <run_time_hour>
    8a9a:	50 93 ed 27 	sts	0x27ED, r21	; 0x8027ed <run_time_hour+0x1>
		{
			run_time_hour_arr[i] = (run_time_hour % 10) + ASCII_NUM;
			run_time_hour /= 10;
		}
		run_time_hour_arr[5] = '\0';
    8a9e:	ad ec       	ldi	r26, 0xCD	; 205
    8aa0:	b7 e2       	ldi	r27, 0x27	; 39
    8aa2:	15 96       	adiw	r26, 0x05	; 5
    8aa4:	1c 92       	st	X, r1
    8aa6:	15 97       	sbiw	r26, 0x05	; 5
		for (int8_t i = 1; i >= 0; i--)
		{
			run_time_min_arr[i] = (run_time_min % 10) + ASCII_NUM;
    8aa8:	e9 ee       	ldi	r30, 0xE9	; 233
    8aaa:	f7 e2       	ldi	r31, 0x27	; 39
    8aac:	9d ec       	ldi	r25, 0xCD	; 205
    8aae:	19 9f       	mul	r17, r25
    8ab0:	81 2d       	mov	r24, r1
    8ab2:	11 24       	eor	r1, r1
    8ab4:	86 95       	lsr	r24
    8ab6:	86 95       	lsr	r24
    8ab8:	86 95       	lsr	r24
    8aba:	38 2f       	mov	r19, r24
    8abc:	33 0f       	add	r19, r19
    8abe:	23 2f       	mov	r18, r19
    8ac0:	22 0f       	add	r18, r18
    8ac2:	22 0f       	add	r18, r18
    8ac4:	23 0f       	add	r18, r19
    8ac6:	31 2f       	mov	r19, r17
    8ac8:	32 1b       	sub	r19, r18
    8aca:	23 2f       	mov	r18, r19
    8acc:	20 5d       	subi	r18, 0xD0	; 208
    8ace:	21 83       	std	Z+1, r18	; 0x01
    8ad0:	89 9f       	mul	r24, r25
    8ad2:	91 2d       	mov	r25, r1
    8ad4:	11 24       	eor	r1, r1
    8ad6:	96 95       	lsr	r25
    8ad8:	96 95       	lsr	r25
    8ada:	96 95       	lsr	r25
    8adc:	99 0f       	add	r25, r25
    8ade:	29 2f       	mov	r18, r25
    8ae0:	22 0f       	add	r18, r18
    8ae2:	22 0f       	add	r18, r18
    8ae4:	92 0f       	add	r25, r18
    8ae6:	89 1b       	sub	r24, r25
    8ae8:	80 5d       	subi	r24, 0xD0	; 208
    8aea:	80 83       	st	Z, r24
    8aec:	89 e2       	ldi	r24, 0x29	; 41
    8aee:	18 9f       	mul	r17, r24
    8af0:	11 2d       	mov	r17, r1
    8af2:	11 24       	eor	r1, r1
    8af4:	12 95       	swap	r17
    8af6:	1f 70       	andi	r17, 0x0F	; 15
    8af8:	10 93 e8 27 	sts	0x27E8, r17	; 0x8027e8 <run_time_min>
			run_time_min /= 10;
		}
		run_time_min_arr[2] = '\0';
    8afc:	12 82       	std	Z+2, r1	; 0x02
		sprintf(temp, "%s:%s", run_time_hour_arr, run_time_min_arr);
    8afe:	ff 93       	push	r31
    8b00:	ef 93       	push	r30
    8b02:	bf 93       	push	r27
    8b04:	af 93       	push	r26
    8b06:	81 e2       	ldi	r24, 0x21	; 33
    8b08:	91 e2       	ldi	r25, 0x21	; 33
    8b0a:	9f 93       	push	r25
    8b0c:	8f 93       	push	r24
    8b0e:	83 ed       	ldi	r24, 0xD3	; 211
    8b10:	97 e2       	ldi	r25, 0x27	; 39
    8b12:	9f 93       	push	r25
    8b14:	8f 93       	push	r24
    8b16:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    8b1a:	83 ed       	ldi	r24, 0xD3	; 211
    8b1c:	97 e2       	ldi	r25, 0x27	; 39
    8b1e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    8b22:	60 e0       	ldi	r22, 0x00	; 0
    8b24:	81 e0       	ldi	r24, 0x01	; 1
    8b26:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("HOURS:MINUTES"));
    8b2a:	85 e3       	ldi	r24, 0x35	; 53
    8b2c:	96 e2       	ldi	r25, 0x26	; 38
    8b2e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		lcd_set_cursor(0, 0);
    8b32:	60 e0       	ldi	r22, 0x00	; 0
    8b34:	80 e0       	ldi	r24, 0x00	; 0
    8b36:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_cursor_on();
    8b3a:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
		cursor = 0;
    8b3e:	10 92 ee 27 	sts	0x27EE, r1	; 0x8027ee <cursor>
		break;
    8b42:	8d b7       	in	r24, 0x3d	; 61
    8b44:	9e b7       	in	r25, 0x3e	; 62
    8b46:	08 96       	adiw	r24, 0x08	; 8
    8b48:	8d bf       	out	0x3d, r24	; 61
    8b4a:	9e bf       	out	0x3e, r25	; 62
    8b4c:	84 c2       	rjmp	.+1288   	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/
		//This part of the menu displays the run time and allows it to be changed
	case RUN_TIME_VAL_MENU:
		if (cursor < 6)
    8b4e:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    8b52:	86 30       	cpi	r24, 0x06	; 6
    8b54:	80 f4       	brcc	.+32     	; 0x8b76 <menu_next+0x1070>
		{
			cursor++;
    8b56:	61 e0       	ldi	r22, 0x01	; 1
    8b58:	68 0f       	add	r22, r24
    8b5a:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
			if (cursor < 5)
    8b5e:	65 30       	cpi	r22, 0x05	; 5
    8b60:	20 f4       	brcc	.+8      	; 0x8b6a <menu_next+0x1064>
				lcd_set_cursor(0, cursor);
    8b62:	80 e0       	ldi	r24, 0x00	; 0
    8b64:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    8b68:	76 c2       	rjmp	.+1260   	; 0x9056 <menu_next+0x1550>
			else
				lcd_set_cursor(0, cursor + 1);
    8b6a:	62 e0       	ldi	r22, 0x02	; 2
    8b6c:	68 0f       	add	r22, r24
    8b6e:	80 e0       	ldi	r24, 0x00	; 0
    8b70:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    8b74:	70 c2       	rjmp	.+1248   	; 0x9056 <menu_next+0x1550>
		}
		else
		{
			if (!admin_mode)
    8b76:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    8b7a:	88 23       	and	r24, r24
    8b7c:	09 f4       	brne	.+2      	; 0x8b80 <menu_next+0x107a>
    8b7e:	6b c2       	rjmp	.+1238   	; 0x9056 <menu_next+0x1550>
				break;
			run_time_hour = 0;
			run_time_hour += (run_time_hour_arr[0] - ASCII_NUM) * 10000;
    8b80:	ed ec       	ldi	r30, 0xCD	; 205
    8b82:	f7 e2       	ldi	r31, 0x27	; 39
			run_time_hour += (run_time_hour_arr[1] - ASCII_NUM) * 1000;
			run_time_hour += (run_time_hour_arr[2] - ASCII_NUM) * 100;
			run_time_hour += (run_time_hour_arr[3] - ASCII_NUM) * 10;
			run_time_hour += (run_time_hour_arr[4] - ASCII_NUM) * 1;
    8b84:	20 81       	ld	r18, Z
    8b86:	30 e0       	ldi	r19, 0x00	; 0
    8b88:	20 53       	subi	r18, 0x30	; 48
    8b8a:	31 09       	sbc	r19, r1
    8b8c:	80 e1       	ldi	r24, 0x10	; 16
    8b8e:	97 e2       	ldi	r25, 0x27	; 39
    8b90:	28 9f       	mul	r18, r24
    8b92:	a0 01       	movw	r20, r0
    8b94:	29 9f       	mul	r18, r25
    8b96:	50 0d       	add	r21, r0
    8b98:	38 9f       	mul	r19, r24
    8b9a:	50 0d       	add	r21, r0
    8b9c:	11 24       	eor	r1, r1
    8b9e:	94 81       	ldd	r25, Z+4	; 0x04
    8ba0:	89 2f       	mov	r24, r25
    8ba2:	90 e0       	ldi	r25, 0x00	; 0
    8ba4:	c0 97       	sbiw	r24, 0x30	; 48
    8ba6:	84 0f       	add	r24, r20
    8ba8:	95 1f       	adc	r25, r21
    8baa:	21 81       	ldd	r18, Z+1	; 0x01
    8bac:	30 e0       	ldi	r19, 0x00	; 0
    8bae:	20 53       	subi	r18, 0x30	; 48
    8bb0:	31 09       	sbc	r19, r1
    8bb2:	68 ee       	ldi	r22, 0xE8	; 232
    8bb4:	73 e0       	ldi	r23, 0x03	; 3
    8bb6:	26 9f       	mul	r18, r22
    8bb8:	a0 01       	movw	r20, r0
    8bba:	27 9f       	mul	r18, r23
    8bbc:	50 0d       	add	r21, r0
    8bbe:	36 9f       	mul	r19, r22
    8bc0:	50 0d       	add	r21, r0
    8bc2:	11 24       	eor	r1, r1
    8bc4:	84 0f       	add	r24, r20
    8bc6:	95 1f       	adc	r25, r21
    8bc8:	22 81       	ldd	r18, Z+2	; 0x02
    8bca:	30 e0       	ldi	r19, 0x00	; 0
    8bcc:	20 53       	subi	r18, 0x30	; 48
    8bce:	31 09       	sbc	r19, r1
    8bd0:	64 e6       	ldi	r22, 0x64	; 100
    8bd2:	62 9f       	mul	r22, r18
    8bd4:	a0 01       	movw	r20, r0
    8bd6:	63 9f       	mul	r22, r19
    8bd8:	50 0d       	add	r21, r0
    8bda:	11 24       	eor	r1, r1
    8bdc:	84 0f       	add	r24, r20
    8bde:	95 1f       	adc	r25, r21
    8be0:	23 81       	ldd	r18, Z+3	; 0x03
    8be2:	30 e0       	ldi	r19, 0x00	; 0
    8be4:	20 53       	subi	r18, 0x30	; 48
    8be6:	31 09       	sbc	r19, r1
    8be8:	a9 01       	movw	r20, r18
    8bea:	44 0f       	add	r20, r20
    8bec:	55 1f       	adc	r21, r21
    8bee:	22 0f       	add	r18, r18
    8bf0:	33 1f       	adc	r19, r19
    8bf2:	22 0f       	add	r18, r18
    8bf4:	33 1f       	adc	r19, r19
    8bf6:	22 0f       	add	r18, r18
    8bf8:	33 1f       	adc	r19, r19
    8bfa:	24 0f       	add	r18, r20
    8bfc:	35 1f       	adc	r19, r21
    8bfe:	82 0f       	add	r24, r18
    8c00:	93 1f       	adc	r25, r19
    8c02:	80 93 ec 27 	sts	0x27EC, r24	; 0x8027ec <run_time_hour>
    8c06:	90 93 ed 27 	sts	0x27ED, r25	; 0x8027ed <run_time_hour+0x1>
			hours = run_time_hour;
    8c0a:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <hours>
    8c0e:	90 93 41 23 	sts	0x2341, r25	; 0x802341 <hours+0x1>

			run_time_min = 0;
			run_time_min += (run_time_min_arr[0] - ASCII_NUM) * 10;
    8c12:	e9 ee       	ldi	r30, 0xE9	; 233
    8c14:	f7 e2       	ldi	r31, 0x27	; 39
			run_time_min += (run_time_min_arr[1] - ASCII_NUM) * 1;
    8c16:	80 81       	ld	r24, Z
    8c18:	88 0f       	add	r24, r24
    8c1a:	80 56       	subi	r24, 0x60	; 96
    8c1c:	98 2f       	mov	r25, r24
    8c1e:	99 0f       	add	r25, r25
    8c20:	99 0f       	add	r25, r25
    8c22:	98 0f       	add	r25, r24
    8c24:	81 81       	ldd	r24, Z+1	; 0x01
    8c26:	80 53       	subi	r24, 0x30	; 48
    8c28:	89 0f       	add	r24, r25
    8c2a:	80 93 e8 27 	sts	0x27E8, r24	; 0x8027e8 <run_time_min>
			minutes = run_time_min;
    8c2e:	80 93 02 23 	sts	0x2302, r24	; 0x802302 <minutes>

			cli();
    8c32:	f8 94       	cli
			write_hours();
    8c34:	0e 94 e3 5a 	call	0xb5c6	; 0xb5c6 <write_hours>
			write_minutes();
    8c38:	0e 94 21 5b 	call	0xb642	; 0xb642 <write_minutes>
			sei();
    8c3c:	78 94       	sei

			lcd_write_new_P(PSTR("RUN TIME CHANGED"));
    8c3e:	84 e2       	ldi	r24, 0x24	; 36
    8c40:	96 e2       	ldi	r25, 0x26	; 38
    8c42:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    8c46:	9f ef       	ldi	r25, 0xFF	; 255
    8c48:	2f e4       	ldi	r18, 0x4F	; 79
    8c4a:	33 ec       	ldi	r19, 0xC3	; 195
    8c4c:	91 50       	subi	r25, 0x01	; 1
    8c4e:	20 40       	sbci	r18, 0x00	; 0
    8c50:	30 40       	sbci	r19, 0x00	; 0
    8c52:	e1 f7       	brne	.-8      	; 0x8c4c <menu_next+0x1146>
    8c54:	00 c0       	rjmp	.+0      	; 0x8c56 <menu_next+0x1150>
    8c56:	00 00       	nop
			_delay_ms(2000);
			clear_switch_pressed();
    8c58:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>

			current_menu = RUN_TIME_VAL_MENU;
    8c5c:	81 e7       	ldi	r24, 0x71	; 113
    8c5e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			run_time_hour = hours;
    8c62:	40 91 40 23 	lds	r20, 0x2340	; 0x802340 <hours>
    8c66:	50 91 41 23 	lds	r21, 0x2341	; 0x802341 <hours+0x1>
			run_time_min = minutes;
    8c6a:	10 91 02 23 	lds	r17, 0x2302	; 0x802302 <minutes>
    8c6e:	e2 ed       	ldi	r30, 0xD2	; 210
    8c70:	f7 e2       	ldi	r31, 0x27	; 39
    8c72:	cd ec       	ldi	r28, 0xCD	; 205
    8c74:	d7 e2       	ldi	r29, 0x27	; 39
			for (int8_t i = 4; i >= 0; i--)
			{
				run_time_hour_arr[i] = (run_time_hour % 10) + ASCII_NUM;
    8c76:	9a 01       	movw	r18, r20
    8c78:	ad ec       	ldi	r26, 0xCD	; 205
    8c7a:	bc ec       	ldi	r27, 0xCC	; 204
    8c7c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    8c80:	96 95       	lsr	r25
    8c82:	87 95       	ror	r24
    8c84:	96 95       	lsr	r25
    8c86:	87 95       	ror	r24
    8c88:	96 95       	lsr	r25
    8c8a:	87 95       	ror	r24
    8c8c:	9c 01       	movw	r18, r24
    8c8e:	22 0f       	add	r18, r18
    8c90:	33 1f       	adc	r19, r19
    8c92:	88 0f       	add	r24, r24
    8c94:	99 1f       	adc	r25, r25
    8c96:	88 0f       	add	r24, r24
    8c98:	99 1f       	adc	r25, r25
    8c9a:	88 0f       	add	r24, r24
    8c9c:	99 1f       	adc	r25, r25
    8c9e:	82 0f       	add	r24, r18
    8ca0:	93 1f       	adc	r25, r19
    8ca2:	9a 01       	movw	r18, r20
    8ca4:	28 1b       	sub	r18, r24
    8ca6:	39 0b       	sbc	r19, r25
    8ca8:	c9 01       	movw	r24, r18
    8caa:	80 5d       	subi	r24, 0xD0	; 208
    8cac:	82 93       	st	-Z, r24
				run_time_hour /= 10;
    8cae:	9a 01       	movw	r18, r20
    8cb0:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    8cb4:	ac 01       	movw	r20, r24
    8cb6:	56 95       	lsr	r21
    8cb8:	47 95       	ror	r20
    8cba:	56 95       	lsr	r21
    8cbc:	47 95       	ror	r20
    8cbe:	56 95       	lsr	r21
    8cc0:	47 95       	ror	r20
			clear_switch_pressed();

			current_menu = RUN_TIME_VAL_MENU;
			run_time_hour = hours;
			run_time_min = minutes;
			for (int8_t i = 4; i >= 0; i--)
    8cc2:	ec 17       	cp	r30, r28
    8cc4:	fd 07       	cpc	r31, r29
    8cc6:	b9 f6       	brne	.-82     	; 0x8c76 <menu_next+0x1170>
    8cc8:	40 93 ec 27 	sts	0x27EC, r20	; 0x8027ec <run_time_hour>
    8ccc:	50 93 ed 27 	sts	0x27ED, r21	; 0x8027ed <run_time_hour+0x1>
			{
				run_time_hour_arr[i] = (run_time_hour % 10) + ASCII_NUM;
				run_time_hour /= 10;
			}
			run_time_hour_arr[5] = '\0';
    8cd0:	ad ec       	ldi	r26, 0xCD	; 205
    8cd2:	b7 e2       	ldi	r27, 0x27	; 39
    8cd4:	15 96       	adiw	r26, 0x05	; 5
    8cd6:	1c 92       	st	X, r1
    8cd8:	15 97       	sbiw	r26, 0x05	; 5
			for (int8_t i = 1; i >= 0; i--)
			{
				run_time_min_arr[i] = (run_time_min % 10) + ASCII_NUM;
    8cda:	e9 ee       	ldi	r30, 0xE9	; 233
    8cdc:	f7 e2       	ldi	r31, 0x27	; 39
    8cde:	9d ec       	ldi	r25, 0xCD	; 205
    8ce0:	19 9f       	mul	r17, r25
    8ce2:	81 2d       	mov	r24, r1
    8ce4:	11 24       	eor	r1, r1
    8ce6:	86 95       	lsr	r24
    8ce8:	86 95       	lsr	r24
    8cea:	86 95       	lsr	r24
    8cec:	38 2f       	mov	r19, r24
    8cee:	33 0f       	add	r19, r19
    8cf0:	23 2f       	mov	r18, r19
    8cf2:	22 0f       	add	r18, r18
    8cf4:	22 0f       	add	r18, r18
    8cf6:	23 0f       	add	r18, r19
    8cf8:	31 2f       	mov	r19, r17
    8cfa:	32 1b       	sub	r19, r18
    8cfc:	23 2f       	mov	r18, r19
    8cfe:	20 5d       	subi	r18, 0xD0	; 208
    8d00:	21 83       	std	Z+1, r18	; 0x01
    8d02:	89 9f       	mul	r24, r25
    8d04:	91 2d       	mov	r25, r1
    8d06:	11 24       	eor	r1, r1
    8d08:	96 95       	lsr	r25
    8d0a:	96 95       	lsr	r25
    8d0c:	96 95       	lsr	r25
    8d0e:	99 0f       	add	r25, r25
    8d10:	29 2f       	mov	r18, r25
    8d12:	22 0f       	add	r18, r18
    8d14:	22 0f       	add	r18, r18
    8d16:	92 0f       	add	r25, r18
    8d18:	89 1b       	sub	r24, r25
    8d1a:	80 5d       	subi	r24, 0xD0	; 208
    8d1c:	80 83       	st	Z, r24
    8d1e:	89 e2       	ldi	r24, 0x29	; 41
    8d20:	18 9f       	mul	r17, r24
    8d22:	11 2d       	mov	r17, r1
    8d24:	11 24       	eor	r1, r1
    8d26:	12 95       	swap	r17
    8d28:	1f 70       	andi	r17, 0x0F	; 15
    8d2a:	10 93 e8 27 	sts	0x27E8, r17	; 0x8027e8 <run_time_min>
				run_time_min /= 10;
			}
			run_time_min_arr[2] = '\0';
    8d2e:	12 82       	std	Z+2, r1	; 0x02
			sprintf(temp, "%s:%s", run_time_hour_arr, run_time_min_arr);
    8d30:	ff 93       	push	r31
    8d32:	ef 93       	push	r30
    8d34:	bf 93       	push	r27
    8d36:	af 93       	push	r26
    8d38:	81 e2       	ldi	r24, 0x21	; 33
    8d3a:	91 e2       	ldi	r25, 0x21	; 33
    8d3c:	9f 93       	push	r25
    8d3e:	8f 93       	push	r24
    8d40:	83 ed       	ldi	r24, 0xD3	; 211
    8d42:	97 e2       	ldi	r25, 0x27	; 39
    8d44:	9f 93       	push	r25
    8d46:	8f 93       	push	r24
    8d48:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    8d4c:	83 ed       	ldi	r24, 0xD3	; 211
    8d4e:	97 e2       	ldi	r25, 0x27	; 39
    8d50:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(1, 0);
    8d54:	60 e0       	ldi	r22, 0x00	; 0
    8d56:	81 e0       	ldi	r24, 0x01	; 1
    8d58:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("HOURS:MINUTES"));
    8d5c:	86 e1       	ldi	r24, 0x16	; 22
    8d5e:	96 e2       	ldi	r25, 0x26	; 38
    8d60:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_set_cursor(0, 0);
    8d64:	60 e0       	ldi	r22, 0x00	; 0
    8d66:	80 e0       	ldi	r24, 0x00	; 0
    8d68:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_cursor_on();
    8d6c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <lcd_cursor_on>
			cursor = 0;
    8d70:	10 92 ee 27 	sts	0x27EE, r1	; 0x8027ee <cursor>
    8d74:	8d b7       	in	r24, 0x3d	; 61
    8d76:	9e b7       	in	r25, 0x3e	; 62
    8d78:	08 96       	adiw	r24, 0x08	; 8
    8d7a:	8d bf       	out	0x3d, r24	; 61
    8d7c:	9e bf       	out	0x3e, r25	; 62
    8d7e:	6b c1       	rjmp	.+726    	; 0x9056 <menu_next+0x1550>
		break;

		/******************************************************************************************************************************/

	case STATISTICS_MENU:
		current_menu = BRUSH_STAT_MENU;
    8d80:	81 eb       	ldi	r24, 0xB1	; 177
    8d82:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));
    8d86:	85 e0       	ldi	r24, 0x05	; 5
    8d88:	96 e2       	ldi	r25, 0x26	; 38
    8d8a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8d8e:	63 c1       	rjmp	.+710    	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

	case BRUSH_STAT_MENU:
		current_menu = BRUSH_HOURS_MENU;
    8d90:	86 eb       	ldi	r24, 0xB6	; 182
    8d92:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH HOURS"));
    8d96:	89 ef       	ldi	r24, 0xF9	; 249
    8d98:	95 e2       	ldi	r25, 0x25	; 37
    8d9a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8d9e:	60 e0       	ldi	r22, 0x00	; 0
    8da0:	81 e0       	ldi	r24, 0x01	; 1
    8da2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush_hours);
    8da6:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <brush_hours+0x1>
    8daa:	8f 93       	push	r24
    8dac:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <brush_hours>
    8db0:	8f 93       	push	r24
    8db2:	87 e2       	ldi	r24, 0x27	; 39
    8db4:	91 e2       	ldi	r25, 0x21	; 33
    8db6:	9f 93       	push	r25
    8db8:	8f 93       	push	r24
    8dba:	83 ed       	ldi	r24, 0xD3	; 211
    8dbc:	97 e2       	ldi	r25, 0x27	; 39
    8dbe:	9f 93       	push	r25
    8dc0:	8f 93       	push	r24
    8dc2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    8dc6:	83 ed       	ldi	r24, 0xD3	; 211
    8dc8:	97 e2       	ldi	r25, 0x27	; 39
    8dca:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    8dce:	0f 90       	pop	r0
    8dd0:	0f 90       	pop	r0
    8dd2:	0f 90       	pop	r0
    8dd4:	0f 90       	pop	r0
    8dd6:	0f 90       	pop	r0
    8dd8:	0f 90       	pop	r0
    8dda:	3d c1       	rjmp	.+634    	; 0x9056 <menu_next+0x1550>

	case VACUUM_STAT_MENU:
		current_menu = VACUUM_HOURS_MENU;
    8ddc:	8b eb       	ldi	r24, 0xBB	; 187
    8dde:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM HOURS"));
    8de2:	8c ee       	ldi	r24, 0xEC	; 236
    8de4:	95 e2       	ldi	r25, 0x25	; 37
    8de6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8dea:	60 e0       	ldi	r22, 0x00	; 0
    8dec:	81 e0       	ldi	r24, 0x01	; 1
    8dee:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", vacuum_hours);
    8df2:	80 91 fa 22 	lds	r24, 0x22FA	; 0x8022fa <vacuum_hours+0x1>
    8df6:	8f 93       	push	r24
    8df8:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <vacuum_hours>
    8dfc:	8f 93       	push	r24
    8dfe:	87 e2       	ldi	r24, 0x27	; 39
    8e00:	91 e2       	ldi	r25, 0x21	; 33
    8e02:	9f 93       	push	r25
    8e04:	8f 93       	push	r24
    8e06:	83 ed       	ldi	r24, 0xD3	; 211
    8e08:	97 e2       	ldi	r25, 0x27	; 39
    8e0a:	9f 93       	push	r25
    8e0c:	8f 93       	push	r24
    8e0e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    8e12:	83 ed       	ldi	r24, 0xD3	; 211
    8e14:	97 e2       	ldi	r25, 0x27	; 39
    8e16:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    8e1a:	0f 90       	pop	r0
    8e1c:	0f 90       	pop	r0
    8e1e:	0f 90       	pop	r0
    8e20:	0f 90       	pop	r0
    8e22:	0f 90       	pop	r0
    8e24:	0f 90       	pop	r0
    8e26:	17 c1       	rjmp	.+558    	; 0x9056 <menu_next+0x1550>

	case PRESWEEP_STAT_MENU:
		current_menu = PRESWEEP_HOURS_MENU;
    8e28:	8e eb       	ldi	r24, 0xBE	; 190
    8e2a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP HOURS"));
    8e2e:	8d ed       	ldi	r24, 0xDD	; 221
    8e30:	95 e2       	ldi	r25, 0x25	; 37
    8e32:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8e36:	60 e0       	ldi	r22, 0x00	; 0
    8e38:	81 e0       	ldi	r24, 0x01	; 1
    8e3a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", presweep_hours);
    8e3e:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <presweep_hours+0x1>
    8e42:	8f 93       	push	r24
    8e44:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <presweep_hours>
    8e48:	8f 93       	push	r24
    8e4a:	87 e2       	ldi	r24, 0x27	; 39
    8e4c:	91 e2       	ldi	r25, 0x21	; 33
    8e4e:	9f 93       	push	r25
    8e50:	8f 93       	push	r24
    8e52:	83 ed       	ldi	r24, 0xD3	; 211
    8e54:	97 e2       	ldi	r25, 0x27	; 39
    8e56:	9f 93       	push	r25
    8e58:	8f 93       	push	r24
    8e5a:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    8e5e:	83 ed       	ldi	r24, 0xD3	; 211
    8e60:	97 e2       	ldi	r25, 0x27	; 39
    8e62:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    8e66:	0f 90       	pop	r0
    8e68:	0f 90       	pop	r0
    8e6a:	0f 90       	pop	r0
    8e6c:	0f 90       	pop	r0
    8e6e:	0f 90       	pop	r0
    8e70:	0f 90       	pop	r0
    8e72:	f1 c0       	rjmp	.+482    	; 0x9056 <menu_next+0x1550>

	case WATER_PUMP_STAT_MENU:
		current_menu = WATER_PUMP_HOURS_MENU;
    8e74:	81 ec       	ldi	r24, 0xC1	; 193
    8e76:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("WATER PUMP HOURS"));
    8e7a:	8c ec       	ldi	r24, 0xCC	; 204
    8e7c:	95 e2       	ldi	r25, 0x25	; 37
    8e7e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8e82:	60 e0       	ldi	r22, 0x00	; 0
    8e84:	81 e0       	ldi	r24, 0x01	; 1
    8e86:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", water_pump_hours);
    8e8a:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <water_pump_hours+0x1>
    8e8e:	8f 93       	push	r24
    8e90:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <water_pump_hours>
    8e94:	8f 93       	push	r24
    8e96:	87 e2       	ldi	r24, 0x27	; 39
    8e98:	91 e2       	ldi	r25, 0x21	; 33
    8e9a:	9f 93       	push	r25
    8e9c:	8f 93       	push	r24
    8e9e:	83 ed       	ldi	r24, 0xD3	; 211
    8ea0:	97 e2       	ldi	r25, 0x27	; 39
    8ea2:	9f 93       	push	r25
    8ea4:	8f 93       	push	r24
    8ea6:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    8eaa:	83 ed       	ldi	r24, 0xD3	; 211
    8eac:	97 e2       	ldi	r25, 0x27	; 39
    8eae:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    8eb2:	0f 90       	pop	r0
    8eb4:	0f 90       	pop	r0
    8eb6:	0f 90       	pop	r0
    8eb8:	0f 90       	pop	r0
    8eba:	0f 90       	pop	r0
    8ebc:	0f 90       	pop	r0
    8ebe:	cb c0       	rjmp	.+406    	; 0x9056 <menu_next+0x1550>

	case DETERGENT_PUMP_STAT_MENU:
		current_menu = DETERGENT_PUMP_HOURS_MENU;
    8ec0:	82 ec       	ldi	r24, 0xC2	; 194
    8ec2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DETERGENT PUMP HOURS"));
    8ec6:	87 eb       	ldi	r24, 0xB7	; 183
    8ec8:	95 e2       	ldi	r25, 0x25	; 37
    8eca:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8ece:	60 e0       	ldi	r22, 0x00	; 0
    8ed0:	81 e0       	ldi	r24, 0x01	; 1
    8ed2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", detergent_pump_hours);
    8ed6:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <detergent_pump_hours+0x1>
    8eda:	8f 93       	push	r24
    8edc:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <detergent_pump_hours>
    8ee0:	8f 93       	push	r24
    8ee2:	87 e2       	ldi	r24, 0x27	; 39
    8ee4:	91 e2       	ldi	r25, 0x21	; 33
    8ee6:	9f 93       	push	r25
    8ee8:	8f 93       	push	r24
    8eea:	83 ed       	ldi	r24, 0xD3	; 211
    8eec:	97 e2       	ldi	r25, 0x27	; 39
    8eee:	9f 93       	push	r25
    8ef0:	8f 93       	push	r24
    8ef2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    8ef6:	83 ed       	ldi	r24, 0xD3	; 211
    8ef8:	97 e2       	ldi	r25, 0x27	; 39
    8efa:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    8efe:	0f 90       	pop	r0
    8f00:	0f 90       	pop	r0
    8f02:	0f 90       	pop	r0
    8f04:	0f 90       	pop	r0
    8f06:	0f 90       	pop	r0
    8f08:	0f 90       	pop	r0
    8f0a:	a5 c0       	rjmp	.+330    	; 0x9056 <menu_next+0x1550>

		/******************************************************************************************************************************/

	case DEFAULT_MENU:
		current_menu = DEFAULT_CONFIRM_MENU;
    8f0c:	80 e5       	ldi	r24, 0x50	; 80
    8f0e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CONFIRM RESET"));
    8f12:	89 ea       	ldi	r24, 0xA9	; 169
    8f14:	95 e2       	ldi	r25, 0x25	; 37
    8f16:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8f1a:	60 e0       	ldi	r22, 0x00	; 0
    8f1c:	81 e0       	ldi	r24, 0x01	; 1
    8f1e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("DOWN TO CONFIRM"));
    8f22:	89 e9       	ldi	r24, 0x99	; 153
    8f24:	95 e2       	ldi	r25, 0x25	; 37
    8f26:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    8f2a:	95 c0       	rjmp	.+298    	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

	case DEFAULT_CONFIRM_MENU:
		lcd_write_new_P(PSTR("RESET OPERATION"));
    8f2c:	89 e8       	ldi	r24, 0x89	; 137
    8f2e:	95 e2       	ldi	r25, 0x25	; 37
    8f30:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8f34:	60 e0       	ldi	r22, 0x00	; 0
    8f36:	81 e0       	ldi	r24, 0x01	; 1
    8f38:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    8f3c:	8f e7       	ldi	r24, 0x7F	; 127
    8f3e:	95 e2       	ldi	r25, 0x25	; 37
    8f40:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    8f44:	9f ef       	ldi	r25, 0xFF	; 255
    8f46:	2f e4       	ldi	r18, 0x4F	; 79
    8f48:	33 ec       	ldi	r19, 0xC3	; 195
    8f4a:	91 50       	subi	r25, 0x01	; 1
    8f4c:	20 40       	sbci	r18, 0x00	; 0
    8f4e:	30 40       	sbci	r19, 0x00	; 0
    8f50:	e1 f7       	brne	.-8      	; 0x8f4a <menu_next+0x1444>
    8f52:	00 c0       	rjmp	.+0      	; 0x8f54 <menu_next+0x144e>
    8f54:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8f56:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = DEFAULT_MENU;
    8f5a:	84 e0       	ldi	r24, 0x04	; 4
    8f5c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RESET TO DEFAULT"));
    8f60:	8e e6       	ldi	r24, 0x6E	; 110
    8f62:	95 e2       	ldi	r25, 0x25	; 37
    8f64:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8f68:	76 c0       	rjmp	.+236    	; 0x9056 <menu_next+0x1550>

		/******************************************************************************************************************************/

	case CLEAR_SD_CARD_MENU:
		current_menu = CLEAR_SD_CARD_CONFIRM_MENU;
    8f6a:	81 ed       	ldi	r24, 0xD1	; 209
    8f6c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CONFIRM CLEAR"));
    8f70:	80 e6       	ldi	r24, 0x60	; 96
    8f72:	95 e2       	ldi	r25, 0x25	; 37
    8f74:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8f78:	60 e0       	ldi	r22, 0x00	; 0
    8f7a:	81 e0       	ldi	r24, 0x01	; 1
    8f7c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("DOWN TO CONFIRM"));
    8f80:	80 e5       	ldi	r24, 0x50	; 80
    8f82:	95 e2       	ldi	r25, 0x25	; 37
    8f84:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    8f88:	66 c0       	rjmp	.+204    	; 0x9056 <menu_next+0x1550>

	case CLEAR_SD_CARD_CONFIRM_MENU:
		lcd_write_new_P(PSTR("CLEAR OPERATION"));
    8f8a:	80 e4       	ldi	r24, 0x40	; 64
    8f8c:	95 e2       	ldi	r25, 0x25	; 37
    8f8e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8f92:	60 e0       	ldi	r22, 0x00	; 0
    8f94:	81 e0       	ldi	r24, 0x01	; 1
    8f96:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    8f9a:	86 e3       	ldi	r24, 0x36	; 54
    8f9c:	95 e2       	ldi	r25, 0x25	; 37
    8f9e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    8fa2:	8f ef       	ldi	r24, 0xFF	; 255
    8fa4:	9f e4       	ldi	r25, 0x4F	; 79
    8fa6:	23 ec       	ldi	r18, 0xC3	; 195
    8fa8:	81 50       	subi	r24, 0x01	; 1
    8faa:	90 40       	sbci	r25, 0x00	; 0
    8fac:	20 40       	sbci	r18, 0x00	; 0
    8fae:	e1 f7       	brne	.-8      	; 0x8fa8 <menu_next+0x14a2>
    8fb0:	00 c0       	rjmp	.+0      	; 0x8fb2 <menu_next+0x14ac>
    8fb2:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    8fb4:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = CLEAR_SD_CARD_MENU;
    8fb8:	80 ed       	ldi	r24, 0xD0	; 208
    8fba:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CLEAR SD CARD"));
    8fbe:	88 e2       	ldi	r24, 0x28	; 40
    8fc0:	95 e2       	ldi	r25, 0x25	; 37
    8fc2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8fc6:	47 c0       	rjmp	.+142    	; 0x9056 <menu_next+0x1550>

		/******************************************************************************************************************************/

	case ABOUT_MENU:
		current_menu = RB800_MENU;
    8fc8:	8a ea       	ldi	r24, 0xAA	; 170
    8fca:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT RB800"));
    8fce:	8c e1       	ldi	r24, 0x1C	; 28
    8fd0:	95 e2       	ldi	r25, 0x25	; 37
    8fd2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    8fd6:	3f c0       	rjmp	.+126    	; 0x9056 <menu_next+0x1550>

		/*-------------------------------------------------------------------------------*/

	case RB800_MENU:
		current_menu = RB800_SERIAL_NUM_MENU;
    8fd8:	88 e6       	ldi	r24, 0x68	; 104
    8fda:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RB800 SERIAL NUM"));
    8fde:	8b e0       	ldi	r24, 0x0B	; 11
    8fe0:	95 e2       	ldi	r25, 0x25	; 37
    8fe2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    8fe6:	60 e0       	ldi	r22, 0x00	; 0
    8fe8:	81 e0       	ldi	r24, 0x01	; 1
    8fea:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(serial_num);
    8fee:	83 e8       	ldi	r24, 0x83	; 131
    8ff0:	91 e2       	ldi	r25, 0x21	; 33
    8ff2:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    8ff6:	2f c0       	rjmp	.+94     	; 0x9056 <menu_next+0x1550>

	case A1_MENU:
		current_menu = A1_SERIAL_NUM_MENU;
    8ff8:	82 e6       	ldi	r24, 0x62	; 98
    8ffa:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A1 SERIAL NUM"));
    8ffe:	8d ef       	ldi	r24, 0xFD	; 253
    9000:	94 e2       	ldi	r25, 0x24	; 36
    9002:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9006:	60 e0       	ldi	r22, 0x00	; 0
    9008:	81 e0       	ldi	r24, 0x01	; 1
    900a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A1_serial_num);
    900e:	88 e9       	ldi	r24, 0x98	; 152
    9010:	91 e2       	ldi	r25, 0x21	; 33
    9012:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    9016:	1f c0       	rjmp	.+62     	; 0x9056 <menu_next+0x1550>

	case A2_MENU:
		current_menu = A2_SERIAL_NUM_MENU;
    9018:	84 e6       	ldi	r24, 0x64	; 100
    901a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A2 SERIAL NUM"));
    901e:	8f ee       	ldi	r24, 0xEF	; 239
    9020:	94 e2       	ldi	r25, 0x24	; 36
    9022:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9026:	60 e0       	ldi	r22, 0x00	; 0
    9028:	81 e0       	ldi	r24, 0x01	; 1
    902a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A2_serial_num);
    902e:	86 e4       	ldi	r24, 0x46	; 70
    9030:	91 e2       	ldi	r25, 0x21	; 33
    9032:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    9036:	0f c0       	rjmp	.+30     	; 0x9056 <menu_next+0x1550>

	case A3_MENU:
		current_menu = A3_SERIAL_NUM_MENU;
    9038:	86 e6       	ldi	r24, 0x66	; 102
    903a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A3 SERIAL NUM"));
    903e:	81 ee       	ldi	r24, 0xE1	; 225
    9040:	94 e2       	ldi	r25, 0x24	; 36
    9042:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9046:	60 e0       	ldi	r22, 0x00	; 0
    9048:	81 e0       	ldi	r24, 0x01	; 1
    904a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A3_serial_num);
    904e:	8a eb       	ldi	r24, 0xBA	; 186
    9050:	91 e2       	ldi	r25, 0x21	; 33
    9052:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>

		/******************************************************************************************************************************/

	default: break;
	}
}
    9056:	df 91       	pop	r29
    9058:	cf 91       	pop	r28
    905a:	1f 91       	pop	r17
    905c:	0f 91       	pop	r16
    905e:	ff 90       	pop	r15
    9060:	ef 90       	pop	r14
    9062:	08 95       	ret

00009064 <menu_back>:

void menu_back(void)
{
    9064:	ef 92       	push	r14
    9066:	ff 92       	push	r15
    9068:	0f 93       	push	r16
    906a:	1f 93       	push	r17
    906c:	cf 93       	push	r28
    906e:	df 93       	push	r29
	switch (current_menu)
    9070:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    9074:	8e 2f       	mov	r24, r30
    9076:	90 e0       	ldi	r25, 0x00	; 0
    9078:	82 3d       	cpi	r24, 0xD2	; 210
    907a:	91 05       	cpc	r25, r1
    907c:	08 f0       	brcs	.+2      	; 0x9080 <menu_back+0x1c>
    907e:	ed c3       	rjmp	.+2010   	; 0x985a <menu_back+0x7f6>
    9080:	fc 01       	movw	r30, r24
    9082:	e7 57       	subi	r30, 0x77	; 119
    9084:	fd 4f       	sbci	r31, 0xFD	; 253
    9086:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    908a:	81 e0       	ldi	r24, 0x01	; 1
    908c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9090:	82 ed       	ldi	r24, 0xD2	; 210
    9092:	94 e2       	ldi	r25, 0x24	; 36
    9094:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9098:	e0 c3       	rjmp	.+1984   	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case ACCELERATION_MENU:
		current_menu = MOTOR_MENU;
    909a:	81 e0       	ldi	r24, 0x01	; 1
    909c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    90a0:	83 ec       	ldi	r24, 0xC3	; 195
    90a2:	94 e2       	ldi	r25, 0x24	; 36
    90a4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    90a8:	d8 c3       	rjmp	.+1968   	; 0x985a <menu_back+0x7f6>

	case DECELERATION_MENU:
		current_menu = MOTOR_MENU;
    90aa:	81 e0       	ldi	r24, 0x01	; 1
    90ac:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    90b0:	84 eb       	ldi	r24, 0xB4	; 180
    90b2:	94 e2       	ldi	r25, 0x24	; 36
    90b4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    90b8:	d0 c3       	rjmp	.+1952   	; 0x985a <menu_back+0x7f6>

	case BRAKE_DELAY_MENU:
		current_menu = MOTOR_MENU;
    90ba:	81 e0       	ldi	r24, 0x01	; 1
    90bc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    90c0:	85 ea       	ldi	r24, 0xA5	; 165
    90c2:	94 e2       	ldi	r25, 0x24	; 36
    90c4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    90c8:	c8 c3       	rjmp	.+1936   	; 0x985a <menu_back+0x7f6>

	case FORWARD_SPEED_MENU:
		current_menu = MOTOR_MENU;
    90ca:	81 e0       	ldi	r24, 0x01	; 1
    90cc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    90d0:	86 e9       	ldi	r24, 0x96	; 150
    90d2:	94 e2       	ldi	r25, 0x24	; 36
    90d4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    90d8:	c0 c3       	rjmp	.+1920   	; 0x985a <menu_back+0x7f6>

	case SLOW_SPEED_MENU:
		current_menu = FORWARD_SPEED_MENU;
    90da:	89 e1       	ldi	r24, 0x19	; 25
    90dc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    90e0:	88 e8       	ldi	r24, 0x88	; 136
    90e2:	94 e2       	ldi	r25, 0x24	; 36
    90e4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    90e8:	b8 c3       	rjmp	.+1904   	; 0x985a <menu_back+0x7f6>

	case FAST_SPEED_MENU:
		current_menu = FORWARD_SPEED_MENU;
    90ea:	89 e1       	ldi	r24, 0x19	; 25
    90ec:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    90f0:	8a e7       	ldi	r24, 0x7A	; 122
    90f2:	94 e2       	ldi	r25, 0x24	; 36
    90f4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    90f8:	b0 c3       	rjmp	.+1888   	; 0x985a <menu_back+0x7f6>

	case REVERSE_SPEED_MENU:
		current_menu = MOTOR_MENU;
    90fa:	81 e0       	ldi	r24, 0x01	; 1
    90fc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9100:	8b e6       	ldi	r24, 0x6B	; 107
    9102:	94 e2       	ldi	r25, 0x24	; 36
    9104:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9108:	a8 c3       	rjmp	.+1872   	; 0x985a <menu_back+0x7f6>

	case CURRENT_RATING_MENU:
		current_menu = MOTOR_MENU;
    910a:	81 e0       	ldi	r24, 0x01	; 1
    910c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9110:	8c e5       	ldi	r24, 0x5C	; 92
    9112:	94 e2       	ldi	r25, 0x24	; 36
    9114:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9118:	a0 c3       	rjmp	.+1856   	; 0x985a <menu_back+0x7f6>

	case MAX_CURRENT_MENU:
		current_menu = MOTOR_MENU;
    911a:	81 e0       	ldi	r24, 0x01	; 1
    911c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9120:	8d e4       	ldi	r24, 0x4D	; 77
    9122:	94 e2       	ldi	r25, 0x24	; 36
    9124:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9128:	98 c3       	rjmp	.+1840   	; 0x985a <menu_back+0x7f6>

	case OVERLOAD_TIME_MENU:
		current_menu = MOTOR_MENU;
    912a:	81 e0       	ldi	r24, 0x01	; 1
    912c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9130:	8e e3       	ldi	r24, 0x3E	; 62
    9132:	94 e2       	ldi	r25, 0x24	; 36
    9134:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9138:	90 c3       	rjmp	.+1824   	; 0x985a <menu_back+0x7f6>

		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = MOTOR_MENU;
    913a:	81 e0       	ldi	r24, 0x01	; 1
    913c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9140:	8f e2       	ldi	r24, 0x2F	; 47
    9142:	94 e2       	ldi	r25, 0x24	; 36
    9144:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9148:	88 c3       	rjmp	.+1808   	; 0x985a <menu_back+0x7f6>

		//Choose the type of pot being used
	case POT_TYPE_MENU:
		current_menu = POTENTIOMETER_MENU;
    914a:	80 e8       	ldi	r24, 0x80	; 128
    914c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    9150:	81 e2       	ldi	r24, 0x21	; 33
    9152:	94 e2       	ldi	r25, 0x24	; 36
    9154:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9158:	60 e0       	ldi	r22, 0x00	; 0
    915a:	81 e0       	ldi	r24, 0x01	; 1
    915c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    9160:	88 e1       	ldi	r24, 0x18	; 24
    9162:	94 e2       	ldi	r25, 0x24	; 36
    9164:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    9168:	78 c3       	rjmp	.+1776   	; 0x985a <menu_back+0x7f6>

	case POT_TYPE_VAL_MENU:
		current_menu = POT_TYPE_MENU;
    916a:	81 e8       	ldi	r24, 0x81	; 129
    916c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER TYPE"));
    9170:	85 e0       	ldi	r24, 0x05	; 5
    9172:	94 e2       	ldi	r25, 0x24	; 36
    9174:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9178:	70 c3       	rjmp	.+1760   	; 0x985a <menu_back+0x7f6>

	case POT_CALIBRATION_MENU:
		current_menu = POTENTIOMETER_MENU;
    917a:	80 e8       	ldi	r24, 0x80	; 128
    917c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    9180:	87 ef       	ldi	r24, 0xF7	; 247
    9182:	93 e2       	ldi	r25, 0x23	; 35
    9184:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9188:	60 e0       	ldi	r22, 0x00	; 0
    918a:	81 e0       	ldi	r24, 0x01	; 1
    918c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    9190:	8e ee       	ldi	r24, 0xEE	; 238
    9192:	93 e2       	ldi	r25, 0x23	; 35
    9194:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    9198:	60 c3       	rjmp	.+1728   	; 0x985a <menu_back+0x7f6>

	case POT_CALIBRATION_VAL_MENU:
		current_menu = POT_CALIBRATION_MENU;
    919a:	82 e8       	ldi	r24, 0x82	; 130
    919c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    91a0:	80 ee       	ldi	r24, 0xE0	; 224
    91a2:	93 e2       	ldi	r25, 0x23	; 35
    91a4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    91a8:	60 e0       	ldi	r22, 0x00	; 0
    91aa:	81 e0       	ldi	r24, 0x01	; 1
    91ac:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CALIBRATION"));
    91b0:	84 ed       	ldi	r24, 0xD4	; 212
    91b2:	93 e2       	ldi	r25, 0x23	; 35
    91b4:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    91b8:	50 c3       	rjmp	.+1696   	; 0x985a <menu_back+0x7f6>


	case POT_RECALIBRATION_MENU:
		lcd_write_new_P(PSTR("RECALIBRATION"));
    91ba:	86 ec       	ldi	r24, 0xC6	; 198
    91bc:	93 e2       	ldi	r25, 0x23	; 35
    91be:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    91c2:	60 e0       	ldi	r22, 0x00	; 0
    91c4:	81 e0       	ldi	r24, 0x01	; 1
    91c6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    91ca:	8c eb       	ldi	r24, 0xBC	; 188
    91cc:	93 e2       	ldi	r25, 0x23	; 35
    91ce:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_CANCELLED;
    91d2:	8d ed       	ldi	r24, 0xDD	; 221
    91d4:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    91d8:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    91dc:	2f ef       	ldi	r18, 0xFF	; 255
    91de:	8f e4       	ldi	r24, 0x4F	; 79
    91e0:	93 ec       	ldi	r25, 0xC3	; 195
    91e2:	21 50       	subi	r18, 0x01	; 1
    91e4:	80 40       	sbci	r24, 0x00	; 0
    91e6:	90 40       	sbci	r25, 0x00	; 0
    91e8:	e1 f7       	brne	.-8      	; 0x91e2 <menu_back+0x17e>
    91ea:	00 c0       	rjmp	.+0      	; 0x91ec <menu_back+0x188>
    91ec:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    91ee:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = POT_CALIBRATION_VAL_MENU;
    91f2:	84 e8       	ldi	r24, 0x84	; 132
    91f4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    91f8:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    91fc:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    9200:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    9204:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    9208:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    920c:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    9210:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    9214:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    9218:	9f 01       	movw	r18, r30
    921a:	36 95       	lsr	r19
    921c:	27 95       	ror	r18
    921e:	36 95       	lsr	r19
    9220:	27 95       	ror	r18
    9222:	36 95       	lsr	r19
    9224:	27 95       	ror	r18
    9226:	a5 ec       	ldi	r26, 0xC5	; 197
    9228:	b0 e2       	ldi	r27, 0x20	; 32
    922a:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    922e:	92 95       	swap	r25
    9230:	82 95       	swap	r24
    9232:	8f 70       	andi	r24, 0x0F	; 15
    9234:	89 27       	eor	r24, r25
    9236:	9f 70       	andi	r25, 0x0F	; 15
    9238:	89 27       	eor	r24, r25
    923a:	0f 2e       	mov	r0, r31
    923c:	f8 ee       	ldi	r31, 0xE8	; 232
    923e:	ef 2e       	mov	r14, r31
    9240:	f3 e0       	ldi	r31, 0x03	; 3
    9242:	ff 2e       	mov	r15, r31
    9244:	f0 2d       	mov	r31, r0
    9246:	8e 9d       	mul	r24, r14
    9248:	90 01       	movw	r18, r0
    924a:	8f 9d       	mul	r24, r15
    924c:	30 0d       	add	r19, r0
    924e:	9e 9d       	mul	r25, r14
    9250:	30 0d       	add	r19, r0
    9252:	11 24       	eor	r1, r1
    9254:	e2 1b       	sub	r30, r18
    9256:	f3 0b       	sbc	r31, r19
    9258:	ff 93       	push	r31
    925a:	ef 93       	push	r30
    925c:	98 01       	movw	r18, r16
    925e:	36 95       	lsr	r19
    9260:	27 95       	ror	r18
    9262:	36 95       	lsr	r19
    9264:	27 95       	ror	r18
    9266:	36 95       	lsr	r19
    9268:	27 95       	ror	r18
    926a:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    926e:	92 95       	swap	r25
    9270:	82 95       	swap	r24
    9272:	8f 70       	andi	r24, 0x0F	; 15
    9274:	89 27       	eor	r24, r25
    9276:	9f 70       	andi	r25, 0x0F	; 15
    9278:	89 27       	eor	r24, r25
    927a:	9f 93       	push	r25
    927c:	8f 93       	push	r24
    927e:	9a 01       	movw	r18, r20
    9280:	36 95       	lsr	r19
    9282:	27 95       	ror	r18
    9284:	36 95       	lsr	r19
    9286:	27 95       	ror	r18
    9288:	36 95       	lsr	r19
    928a:	27 95       	ror	r18
    928c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    9290:	92 95       	swap	r25
    9292:	82 95       	swap	r24
    9294:	8f 70       	andi	r24, 0x0F	; 15
    9296:	89 27       	eor	r24, r25
    9298:	9f 70       	andi	r25, 0x0F	; 15
    929a:	89 27       	eor	r24, r25
    929c:	8e 9d       	mul	r24, r14
    929e:	90 01       	movw	r18, r0
    92a0:	8f 9d       	mul	r24, r15
    92a2:	30 0d       	add	r19, r0
    92a4:	9e 9d       	mul	r25, r14
    92a6:	30 0d       	add	r19, r0
    92a8:	11 24       	eor	r1, r1
    92aa:	42 1b       	sub	r20, r18
    92ac:	53 0b       	sbc	r21, r19
    92ae:	5f 93       	push	r21
    92b0:	4f 93       	push	r20
    92b2:	9e 01       	movw	r18, r28
    92b4:	36 95       	lsr	r19
    92b6:	27 95       	ror	r18
    92b8:	36 95       	lsr	r19
    92ba:	27 95       	ror	r18
    92bc:	36 95       	lsr	r19
    92be:	27 95       	ror	r18
    92c0:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    92c4:	92 95       	swap	r25
    92c6:	82 95       	swap	r24
    92c8:	8f 70       	andi	r24, 0x0F	; 15
    92ca:	89 27       	eor	r24, r25
    92cc:	9f 70       	andi	r25, 0x0F	; 15
    92ce:	89 27       	eor	r24, r25
    92d0:	9f 93       	push	r25
    92d2:	8f 93       	push	r24
    92d4:	86 e0       	ldi	r24, 0x06	; 6
    92d6:	90 e2       	ldi	r25, 0x20	; 32
    92d8:	9f 93       	push	r25
    92da:	8f 93       	push	r24
    92dc:	83 ed       	ldi	r24, 0xD3	; 211
    92de:	97 e2       	ldi	r25, 0x27	; 39
    92e0:	9f 93       	push	r25
    92e2:	8f 93       	push	r24
    92e4:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    92e8:	83 ed       	ldi	r24, 0xD3	; 211
    92ea:	97 e2       	ldi	r25, 0x27	; 39
    92ec:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    92f0:	60 e0       	ldi	r22, 0x00	; 0
    92f2:	81 e0       	ldi	r24, 0x01	; 1
    92f4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    92f8:	88 ea       	ldi	r24, 0xA8	; 168
    92fa:	93 e2       	ldi	r25, 0x23	; 35
    92fc:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    9300:	8d b7       	in	r24, 0x3d	; 61
    9302:	9e b7       	in	r25, 0x3e	; 62
    9304:	0c 96       	adiw	r24, 0x0c	; 12
    9306:	8d bf       	out	0x3d, r24	; 61
    9308:	9e bf       	out	0x3e, r25	; 62
    930a:	a7 c2       	rjmp	.+1358   	; 0x985a <menu_back+0x7f6>

		/*--------------------------------------------------------------------------------*/

	case VACUUM_SETTINGS_MENU:
		current_menu = MOTOR_MENU;
    930c:	81 e0       	ldi	r24, 0x01	; 1
    930e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9312:	89 e9       	ldi	r24, 0x99	; 153
    9314:	93 e2       	ldi	r25, 0x23	; 35
    9316:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    931a:	9f c2       	rjmp	.+1342   	; 0x985a <menu_back+0x7f6>

	case VACUUM_SLOW_START_MENU:
		current_menu = VACUUM_SETTINGS_MENU;
    931c:	8a e1       	ldi	r24, 0x1A	; 26
    931e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM SETTINGS"));
    9322:	89 e8       	ldi	r24, 0x89	; 137
    9324:	93 e2       	ldi	r25, 0x23	; 35
    9326:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    932a:	97 c2       	rjmp	.+1326   	; 0x985a <menu_back+0x7f6>

	case BRUSH_SETTINGS_MENU:
		current_menu = MOTOR_MENU;
    932c:	81 e0       	ldi	r24, 0x01	; 1
    932e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9332:	8a e7       	ldi	r24, 0x7A	; 122
    9334:	93 e2       	ldi	r25, 0x23	; 35
    9336:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    933a:	8f c2       	rjmp	.+1310   	; 0x985a <menu_back+0x7f6>

	case BRUSH_SLOW_START_MENU:
		current_menu = BRUSH_SETTINGS_MENU;
    933c:	8c e1       	ldi	r24, 0x1C	; 28
    933e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH SETTINGS"));
    9342:	8b e6       	ldi	r24, 0x6B	; 107
    9344:	93 e2       	ldi	r25, 0x23	; 35
    9346:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    934a:	87 c2       	rjmp	.+1294   	; 0x985a <menu_back+0x7f6>

	case PRE_SWP_SETTINGS_MENU:
		current_menu = MOTOR_MENU;
    934c:	81 e0       	ldi	r24, 0x01	; 1
    934e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9352:	8c e5       	ldi	r24, 0x5C	; 92
    9354:	93 e2       	ldi	r25, 0x23	; 35
    9356:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    935a:	7f c2       	rjmp	.+1278   	; 0x985a <menu_back+0x7f6>

	case PRE_SWP_SLOW_START_MENU:
		current_menu = PRE_SWP_SETTINGS_MENU;
    935c:	8e e1       	ldi	r24, 0x1E	; 30
    935e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRE-SWEEP SETTINGS"));
    9362:	89 e4       	ldi	r24, 0x49	; 73
    9364:	93 e2       	ldi	r25, 0x23	; 35
    9366:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    936a:	77 c2       	rjmp	.+1262   	; 0x985a <menu_back+0x7f6>

		/*-------------------------------------------------------------------------------*/

	case ACCELERATION_VAL_MENU:
		current_menu = ACCELERATION_MENU;
    936c:	80 e1       	ldi	r24, 0x10	; 16
    936e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ACCELERATION"));
    9372:	8c e3       	ldi	r24, 0x3C	; 60
    9374:	93 e2       	ldi	r25, 0x23	; 35
    9376:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    937a:	6f c2       	rjmp	.+1246   	; 0x985a <menu_back+0x7f6>

	case DECELERATION_VAL_MENU:
		current_menu = DECELERATION_MENU;
    937c:	81 e1       	ldi	r24, 0x11	; 17
    937e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DECELERATION"));
    9382:	8f e2       	ldi	r24, 0x2F	; 47
    9384:	93 e2       	ldi	r25, 0x23	; 35
    9386:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    938a:	67 c2       	rjmp	.+1230   	; 0x985a <menu_back+0x7f6>

	case BRAKE_DELAY_VAL_MENU:
		current_menu = BRAKE_DELAY_MENU;
    938c:	82 e1       	ldi	r24, 0x12	; 18
    938e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRAKE DELAY"));
    9392:	83 e2       	ldi	r24, 0x23	; 35
    9394:	93 e2       	ldi	r25, 0x23	; 35
    9396:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    939a:	5f c2       	rjmp	.+1214   	; 0x985a <menu_back+0x7f6>

	case REVERSE_SPEED_VAL_MENU:
		current_menu = REVERSE_SPEED_MENU;
    939c:	83 e1       	ldi	r24, 0x13	; 19
    939e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    93a2:	85 e1       	ldi	r24, 0x15	; 21
    93a4:	93 e2       	ldi	r25, 0x23	; 35
    93a6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    93aa:	57 c2       	rjmp	.+1198   	; 0x985a <menu_back+0x7f6>

	case SLOW_SPEED_VAL_MENU:
		current_menu = SLOW_SPEED_MENU;
    93ac:	84 e1       	ldi	r24, 0x14	; 20
    93ae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    93b2:	8a e0       	ldi	r24, 0x0A	; 10
    93b4:	93 e2       	ldi	r25, 0x23	; 35
    93b6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    93ba:	4f c2       	rjmp	.+1182   	; 0x985a <menu_back+0x7f6>

	case FAST_SPEED_VAL_MENU:
		current_menu = FAST_SPEED_MENU;
    93bc:	85 e1       	ldi	r24, 0x15	; 21
    93be:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FAST SPEED"));
    93c2:	8f ef       	ldi	r24, 0xFF	; 255
    93c4:	92 e2       	ldi	r25, 0x22	; 34
    93c6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    93ca:	47 c2       	rjmp	.+1166   	; 0x985a <menu_back+0x7f6>

	case CURRENT_RATING_VAL_MENU:
		current_menu = CURRENT_RATING_MENU;
    93cc:	86 e1       	ldi	r24, 0x16	; 22
    93ce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CURRENT RATING"));
    93d2:	80 ef       	ldi	r24, 0xF0	; 240
    93d4:	92 e2       	ldi	r25, 0x22	; 34
    93d6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    93da:	3f c2       	rjmp	.+1150   	; 0x985a <menu_back+0x7f6>

	case MAX_CURRENT_VAL_MENU:
		current_menu = MAX_CURRENT_MENU;
    93dc:	87 e1       	ldi	r24, 0x17	; 23
    93de:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MAX CURRENT"));
    93e2:	84 ee       	ldi	r24, 0xE4	; 228
    93e4:	92 e2       	ldi	r25, 0x22	; 34
    93e6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    93ea:	37 c2       	rjmp	.+1134   	; 0x985a <menu_back+0x7f6>

	case OVERLOAD_TIME_VAL_MENU:
		current_menu = OVERLOAD_TIME_MENU;
    93ec:	88 e1       	ldi	r24, 0x18	; 24
    93ee:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("OVERLOAD TIME"));
    93f2:	86 ed       	ldi	r24, 0xD6	; 214
    93f4:	92 e2       	ldi	r25, 0x22	; 34
    93f6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    93fa:	2f c2       	rjmp	.+1118   	; 0x985a <menu_back+0x7f6>

	case VACUUM_SLOW_START_VAL_MENU:
		current_menu = VACUUM_SLOW_START_MENU;
    93fc:	8b e1       	ldi	r24, 0x1B	; 27
    93fe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM SLOW START"));
    9402:	84 ec       	ldi	r24, 0xC4	; 196
    9404:	92 e2       	ldi	r25, 0x22	; 34
    9406:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    940a:	27 c2       	rjmp	.+1102   	; 0x985a <menu_back+0x7f6>

	case BRUSH_SLOW_START_VAL_MENU:
		current_menu = BRUSH_SLOW_START_MENU;
    940c:	8d e1       	ldi	r24, 0x1D	; 29
    940e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH SLOW START"));
    9412:	83 eb       	ldi	r24, 0xB3	; 179
    9414:	92 e2       	ldi	r25, 0x22	; 34
    9416:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    941a:	1f c2       	rjmp	.+1086   	; 0x985a <menu_back+0x7f6>

	case PRE_SWP_SLOW_START_VAL_MENU:
		current_menu = PRE_SWP_SLOW_START_MENU;
    941c:	8f e1       	ldi	r24, 0x1F	; 31
    941e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRE-SWEEP SLOW START"));
    9422:	8e e9       	ldi	r24, 0x9E	; 158
    9424:	92 e2       	ldi	r25, 0x22	; 34
    9426:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    942a:	17 c2       	rjmp	.+1070   	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case LEAD_MENU:
		current_menu = BATTERY_MENU;
    942c:	82 e0       	ldi	r24, 0x02	; 2
    942e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    9432:	81 e9       	ldi	r24, 0x91	; 145
    9434:	92 e2       	ldi	r25, 0x22	; 34
    9436:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    943a:	0f c2       	rjmp	.+1054   	; 0x985a <menu_back+0x7f6>

	case AGM_MENU:
		current_menu = BATTERY_MENU;
    943c:	82 e0       	ldi	r24, 0x02	; 2
    943e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    9442:	84 e8       	ldi	r24, 0x84	; 132
    9444:	92 e2       	ldi	r25, 0x22	; 34
    9446:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    944a:	07 c2       	rjmp	.+1038   	; 0x985a <menu_back+0x7f6>

	case GEL_MENU:
		current_menu = BATTERY_MENU;
    944c:	82 e0       	ldi	r24, 0x02	; 2
    944e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    9452:	87 e7       	ldi	r24, 0x77	; 119
    9454:	92 e2       	ldi	r25, 0x22	; 34
    9456:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    945a:	ff c1       	rjmp	.+1022   	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case BRUSH_STAT_MENU:
		current_menu = STATISTICS_MENU;
    945c:	80 eb       	ldi	r24, 0xB0	; 176
    945e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    9462:	8c e6       	ldi	r24, 0x6C	; 108
    9464:	92 e2       	ldi	r25, 0x22	; 34
    9466:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    946a:	f7 c1       	rjmp	.+1006   	; 0x985a <menu_back+0x7f6>

	case VACUUM_STAT_MENU:
		current_menu = STATISTICS_MENU;
    946c:	80 eb       	ldi	r24, 0xB0	; 176
    946e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    9472:	81 e6       	ldi	r24, 0x61	; 97
    9474:	92 e2       	ldi	r25, 0x22	; 34
    9476:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    947a:	ef c1       	rjmp	.+990    	; 0x985a <menu_back+0x7f6>

	case PRESWEEP_STAT_MENU:
		current_menu = STATISTICS_MENU;
    947c:	80 eb       	ldi	r24, 0xB0	; 176
    947e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    9482:	86 e5       	ldi	r24, 0x56	; 86
    9484:	92 e2       	ldi	r25, 0x22	; 34
    9486:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    948a:	e7 c1       	rjmp	.+974    	; 0x985a <menu_back+0x7f6>

	case WATER_PUMP_STAT_MENU:
		current_menu = STATISTICS_MENU;
    948c:	80 eb       	ldi	r24, 0xB0	; 176
    948e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    9492:	8b e4       	ldi	r24, 0x4B	; 75
    9494:	92 e2       	ldi	r25, 0x22	; 34
    9496:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    949a:	df c1       	rjmp	.+958    	; 0x985a <menu_back+0x7f6>

	case DETERGENT_PUMP_STAT_MENU:
		current_menu = STATISTICS_MENU;
    949c:	80 eb       	ldi	r24, 0xB0	; 176
    949e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    94a2:	80 e4       	ldi	r24, 0x40	; 64
    94a4:	92 e2       	ldi	r25, 0x22	; 34
    94a6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    94aa:	d7 c1       	rjmp	.+942    	; 0x985a <menu_back+0x7f6>

	case ECO_HOURS_MENU:
		current_menu = STATISTICS_MENU;
    94ac:	80 eb       	ldi	r24, 0xB0	; 176
    94ae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    94b2:	85 e3       	ldi	r24, 0x35	; 53
    94b4:	92 e2       	ldi	r25, 0x22	; 34
    94b6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    94ba:	cf c1       	rjmp	.+926    	; 0x985a <menu_back+0x7f6>

	case WATER_PUMP_HOURS_MENU:
		current_menu = WATER_PUMP_STAT_MENU;
    94bc:	84 eb       	ldi	r24, 0xB4	; 180
    94be:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("WATER PUMP"));
    94c2:	8a e2       	ldi	r24, 0x2A	; 42
    94c4:	92 e2       	ldi	r25, 0x22	; 34
    94c6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    94ca:	60 e0       	ldi	r22, 0x00	; 0
    94cc:	81 e0       	ldi	r24, 0x01	; 1
    94ce:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("STATISTICS"));
    94d2:	8f e1       	ldi	r24, 0x1F	; 31
    94d4:	92 e2       	ldi	r25, 0x22	; 34
    94d6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    94da:	bf c1       	rjmp	.+894    	; 0x985a <menu_back+0x7f6>

	case DETERGENT_PUMP_HOURS_MENU:
		current_menu = DETERGENT_PUMP_STAT_MENU;
    94dc:	85 eb       	ldi	r24, 0xB5	; 181
    94de:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DETERGENT PUMP"));
    94e2:	80 e1       	ldi	r24, 0x10	; 16
    94e4:	92 e2       	ldi	r25, 0x22	; 34
    94e6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    94ea:	60 e0       	ldi	r22, 0x00	; 0
    94ec:	81 e0       	ldi	r24, 0x01	; 1
    94ee:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("STATISTICS"));
    94f2:	85 e0       	ldi	r24, 0x05	; 5
    94f4:	92 e2       	ldi	r25, 0x22	; 34
    94f6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    94fa:	af c1       	rjmp	.+862    	; 0x985a <menu_back+0x7f6>


		/*-------------------------------------------------------------------------------*/

	case BRUSH_HOURS_MENU:
		current_menu = BRUSH_STAT_MENU;
    94fc:	81 eb       	ldi	r24, 0xB1	; 177
    94fe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));
    9502:	84 ef       	ldi	r24, 0xF4	; 244
    9504:	91 e2       	ldi	r25, 0x21	; 33
    9506:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    950a:	a7 c1       	rjmp	.+846    	; 0x985a <menu_back+0x7f6>

	case BRUSH1_AVERAGE_CURRENT_MENU:
		current_menu = BRUSH_STAT_MENU;
    950c:	81 eb       	ldi	r24, 0xB1	; 177
    950e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));
    9512:	83 ee       	ldi	r24, 0xE3	; 227
    9514:	91 e2       	ldi	r25, 0x21	; 33
    9516:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    951a:	9f c1       	rjmp	.+830    	; 0x985a <menu_back+0x7f6>

	case BRUSH1_MAX_CURRENT_MENU:
		current_menu = BRUSH_STAT_MENU;
    951c:	81 eb       	ldi	r24, 0xB1	; 177
    951e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));
    9522:	82 ed       	ldi	r24, 0xD2	; 210
    9524:	91 e2       	ldi	r25, 0x21	; 33
    9526:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    952a:	97 c1       	rjmp	.+814    	; 0x985a <menu_back+0x7f6>

	case BRUSH2_AVERAGE_CURRENT_MENU:
		current_menu = BRUSH_STAT_MENU;
    952c:	81 eb       	ldi	r24, 0xB1	; 177
    952e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));
    9532:	81 ec       	ldi	r24, 0xC1	; 193
    9534:	91 e2       	ldi	r25, 0x21	; 33
    9536:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    953a:	8f c1       	rjmp	.+798    	; 0x985a <menu_back+0x7f6>

	case BRUSH2_MAX_CURRENT_MENU:
		current_menu = BRUSH_STAT_MENU;
    953c:	81 eb       	ldi	r24, 0xB1	; 177
    953e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));;
    9542:	80 eb       	ldi	r24, 0xB0	; 176
    9544:	91 e2       	ldi	r25, 0x21	; 33
    9546:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    954a:	87 c1       	rjmp	.+782    	; 0x985a <menu_back+0x7f6>

		/*-------------------------------------------------------------------------------*/

	case VACUUM_HOURS_MENU:
		current_menu = VACUUM_STAT_MENU;
    954c:	82 eb       	ldi	r24, 0xB2	; 178
    954e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM STATISTICS"));
    9552:	8e e9       	ldi	r24, 0x9E	; 158
    9554:	91 e2       	ldi	r25, 0x21	; 33
    9556:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    955a:	7f c1       	rjmp	.+766    	; 0x985a <menu_back+0x7f6>

	case VACUUM_AVERAGE_CURRENT_MENU:
		current_menu = VACUUM_STAT_MENU;
    955c:	82 eb       	ldi	r24, 0xB2	; 178
    955e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM STATISTICS"));
    9562:	8c e8       	ldi	r24, 0x8C	; 140
    9564:	91 e2       	ldi	r25, 0x21	; 33
    9566:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    956a:	77 c1       	rjmp	.+750    	; 0x985a <menu_back+0x7f6>

	case VACUUM_MAX_CURRENT_MENU:
		current_menu = VACUUM_STAT_MENU;
    956c:	82 eb       	ldi	r24, 0xB2	; 178
    956e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM STATISTICS"));
    9572:	8a e7       	ldi	r24, 0x7A	; 122
    9574:	91 e2       	ldi	r25, 0x21	; 33
    9576:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    957a:	6f c1       	rjmp	.+734    	; 0x985a <menu_back+0x7f6>

		/*-------------------------------------------------------------------------------*/

	case PRESWEEP_HOURS_MENU:
		current_menu = PRESWEEP_STAT_MENU;
    957c:	83 eb       	ldi	r24, 0xB3	; 179
    957e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP STATISTICS"));
    9582:	86 e6       	ldi	r24, 0x66	; 102
    9584:	91 e2       	ldi	r25, 0x21	; 33
    9586:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    958a:	67 c1       	rjmp	.+718    	; 0x985a <menu_back+0x7f6>

	case PRESWEEP_AVERAGE_CURRENT_MENU:
		current_menu = PRESWEEP_STAT_MENU;
    958c:	83 eb       	ldi	r24, 0xB3	; 179
    958e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP STATISTICS"));
    9592:	82 e5       	ldi	r24, 0x52	; 82
    9594:	91 e2       	ldi	r25, 0x21	; 33
    9596:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    959a:	5f c1       	rjmp	.+702    	; 0x985a <menu_back+0x7f6>

	case PRESWEEP_MAX_CURRENT_MENU:
		current_menu = PRESWEEP_STAT_MENU;
    959c:	83 eb       	ldi	r24, 0xB3	; 179
    959e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP STATISTICS"));
    95a2:	8e e3       	ldi	r24, 0x3E	; 62
    95a4:	91 e2       	ldi	r25, 0x21	; 33
    95a6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    95aa:	57 c1       	rjmp	.+686    	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case DEFAULT_CONFIRM_MENU:
		lcd_write_new_P(PSTR("RESET OPERATION"));
    95ac:	8e e2       	ldi	r24, 0x2E	; 46
    95ae:	91 e2       	ldi	r25, 0x21	; 33
    95b0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    95b4:	60 e0       	ldi	r22, 0x00	; 0
    95b6:	81 e0       	ldi	r24, 0x01	; 1
    95b8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    95bc:	84 e2       	ldi	r24, 0x24	; 36
    95be:	91 e2       	ldi	r25, 0x21	; 33
    95c0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    95c4:	9f ef       	ldi	r25, 0xFF	; 255
    95c6:	2f e4       	ldi	r18, 0x4F	; 79
    95c8:	83 ec       	ldi	r24, 0xC3	; 195
    95ca:	91 50       	subi	r25, 0x01	; 1
    95cc:	20 40       	sbci	r18, 0x00	; 0
    95ce:	80 40       	sbci	r24, 0x00	; 0
    95d0:	e1 f7       	brne	.-8      	; 0x95ca <menu_back+0x566>
    95d2:	00 c0       	rjmp	.+0      	; 0x95d4 <menu_back+0x570>
    95d4:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    95d6:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = DEFAULT_MENU;
    95da:	84 e0       	ldi	r24, 0x04	; 4
    95dc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RESET TO DEFAULT"));
    95e0:	83 e1       	ldi	r24, 0x13	; 19
    95e2:	91 e2       	ldi	r25, 0x21	; 33
    95e4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    95e8:	38 c1       	rjmp	.+624    	; 0x985a <menu_back+0x7f6>

	case CLEAR_SD_CARD_MENU:
		break;

	case CLEAR_SD_CARD_CONFIRM_MENU:
		lcd_write_new_P(PSTR("CLEAR OPERATION"));
    95ea:	83 e0       	ldi	r24, 0x03	; 3
    95ec:	91 e2       	ldi	r25, 0x21	; 33
    95ee:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    95f2:	60 e0       	ldi	r22, 0x00	; 0
    95f4:	81 e0       	ldi	r24, 0x01	; 1
    95f6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    95fa:	89 ef       	ldi	r24, 0xF9	; 249
    95fc:	90 e2       	ldi	r25, 0x20	; 32
    95fe:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    9602:	9f ef       	ldi	r25, 0xFF	; 255
    9604:	2f e4       	ldi	r18, 0x4F	; 79
    9606:	83 ec       	ldi	r24, 0xC3	; 195
    9608:	91 50       	subi	r25, 0x01	; 1
    960a:	20 40       	sbci	r18, 0x00	; 0
    960c:	80 40       	sbci	r24, 0x00	; 0
    960e:	e1 f7       	brne	.-8      	; 0x9608 <menu_back+0x5a4>
    9610:	00 c0       	rjmp	.+0      	; 0x9612 <menu_back+0x5ae>
    9612:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    9614:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = CLEAR_SD_CARD_MENU;
    9618:	80 ed       	ldi	r24, 0xD0	; 208
    961a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CLEAR SD CARD"));
    961e:	8b ee       	ldi	r24, 0xEB	; 235
    9620:	90 e2       	ldi	r25, 0x20	; 32
    9622:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9626:	19 c1       	rjmp	.+562    	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case SET_RB800_SERIAL_NUM_MENU:
		current_menu = SET_SERIAL_NUM_MENU;
    9628:	80 e9       	ldi	r24, 0x90	; 144
    962a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET SERIAL NUM"));
    962e:	8c ed       	ldi	r24, 0xDC	; 220
    9630:	90 e2       	ldi	r25, 0x20	; 32
    9632:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_cursor_off();
    9636:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
		break;
    963a:	0f c1       	rjmp	.+542    	; 0x985a <menu_back+0x7f6>
	case SET_A1_SERIAL_NUM_MENU:
		current_menu = SET_SERIAL_NUM_MENU;
    963c:	80 e9       	ldi	r24, 0x90	; 144
    963e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET SERIAL NUM"));
    9642:	8d ec       	ldi	r24, 0xCD	; 205
    9644:	90 e2       	ldi	r25, 0x20	; 32
    9646:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_cursor_off();
    964a:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
		break;
    964e:	05 c1       	rjmp	.+522    	; 0x985a <menu_back+0x7f6>
	case SET_A2_SERIAL_NUM_MENU:
		current_menu = SET_SERIAL_NUM_MENU;
    9650:	80 e9       	ldi	r24, 0x90	; 144
    9652:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET SERIAL NUM"));
    9656:	8e eb       	ldi	r24, 0xBE	; 190
    9658:	90 e2       	ldi	r25, 0x20	; 32
    965a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_cursor_off();
    965e:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
		break;
    9662:	fb c0       	rjmp	.+502    	; 0x985a <menu_back+0x7f6>
	case SET_A3_SERIAL_NUM_MENU:
		current_menu = SET_SERIAL_NUM_MENU;
    9664:	80 e9       	ldi	r24, 0x90	; 144
    9666:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET SERIAL NUM"));
    966a:	8f ea       	ldi	r24, 0xAF	; 175
    966c:	90 e2       	ldi	r25, 0x20	; 32
    966e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_cursor_off();
    9672:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
		break;
    9676:	f1 c0       	rjmp	.+482    	; 0x985a <menu_back+0x7f6>
			lcd_set_cursor(0, cursor);
		}
		break;*/

	case SET_RB800_SERIAL_NUM_VAL_MENU:
		if (cursor == 2)
    9678:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    967c:	82 30       	cpi	r24, 0x02	; 2
    967e:	51 f4       	brne	.+20     	; 0x9694 <menu_back+0x630>
		{
			current_menu = SET_RB800_SERIAL_NUM_MENU;
    9680:	88 e9       	ldi	r24, 0x98	; 152
    9682:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("SET RB800 SERIAL NUM"));
    9686:	8a e9       	ldi	r24, 0x9A	; 154
    9688:	90 e2       	ldi	r25, 0x20	; 32
    968a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_cursor_off();
    968e:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
    9692:	e3 c0       	rjmp	.+454    	; 0x985a <menu_back+0x7f6>
		}
		else
		{
			cursor--;
    9694:	9f ef       	ldi	r25, 0xFF	; 255
    9696:	98 0f       	add	r25, r24
			switch (cursor)
    9698:	99 30       	cpi	r25, 0x09	; 9
    969a:	59 f0       	breq	.+22     	; 0x96b2 <menu_back+0x64e>
    969c:	18 f4       	brcc	.+6      	; 0x96a4 <menu_back+0x640>
    969e:	96 30       	cpi	r25, 0x06	; 6
    96a0:	29 f4       	brne	.+10     	; 0x96ac <menu_back+0x648>
    96a2:	07 c0       	rjmp	.+14     	; 0x96b2 <menu_back+0x64e>
    96a4:	9b 30       	cpi	r25, 0x0B	; 11
    96a6:	29 f0       	breq	.+10     	; 0x96b2 <menu_back+0x64e>
    96a8:	90 31       	cpi	r25, 0x10	; 16
    96aa:	19 f0       	breq	.+6      	; 0x96b2 <menu_back+0x64e>
			lcd_write_new_P(PSTR("SET RB800 SERIAL NUM"));
			lcd_cursor_off();
		}
		else
		{
			cursor--;
    96ac:	90 93 ee 27 	sts	0x27EE, r25	; 0x8027ee <cursor>
    96b0:	03 c0       	rjmp	.+6      	; 0x96b8 <menu_back+0x654>
			{
			case 6:
			case 9:
			case 11:
			case 16:
				cursor--;
    96b2:	82 50       	subi	r24, 0x02	; 2
    96b4:	80 93 ee 27 	sts	0x27EE, r24	; 0x8027ee <cursor>
				break;

			default:
				break;
			}
			lcd_set_cursor(0, cursor);
    96b8:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    96bc:	80 e0       	ldi	r24, 0x00	; 0
    96be:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    96c2:	cb c0       	rjmp	.+406    	; 0x985a <menu_back+0x7f6>
		}
		break;

	case SET_A1_SERIAL_NUM_VAL_MENU:
		if (cursor == 2)
    96c4:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    96c8:	62 30       	cpi	r22, 0x02	; 2
    96ca:	51 f4       	brne	.+20     	; 0x96e0 <menu_back+0x67c>
		{
			current_menu = SET_A1_SERIAL_NUM_MENU;
    96cc:	82 e9       	ldi	r24, 0x92	; 146
    96ce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("SET A1 SERIAL NUM"));
    96d2:	88 e8       	ldi	r24, 0x88	; 136
    96d4:	90 e2       	ldi	r25, 0x20	; 32
    96d6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_cursor_off();
    96da:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
    96de:	bd c0       	rjmp	.+378    	; 0x985a <menu_back+0x7f6>
		}
		else
		{
			cursor--;
    96e0:	61 50       	subi	r22, 0x01	; 1
    96e2:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
					break;

				default:
					break;
			}*/
			lcd_set_cursor(0, cursor);
    96e6:	80 e0       	ldi	r24, 0x00	; 0
    96e8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    96ec:	b6 c0       	rjmp	.+364    	; 0x985a <menu_back+0x7f6>
		}
		break;

	case SET_A2_SERIAL_NUM_VAL_MENU:
		if (cursor == 2)
    96ee:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    96f2:	62 30       	cpi	r22, 0x02	; 2
    96f4:	51 f4       	brne	.+20     	; 0x970a <menu_back+0x6a6>
		{
			current_menu = SET_A2_SERIAL_NUM_MENU;
    96f6:	84 e9       	ldi	r24, 0x94	; 148
    96f8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("SET A2 SERIAL NUM"));
    96fc:	86 e7       	ldi	r24, 0x76	; 118
    96fe:	90 e2       	ldi	r25, 0x20	; 32
    9700:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_cursor_off();
    9704:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
    9708:	a8 c0       	rjmp	.+336    	; 0x985a <menu_back+0x7f6>
		}
		else
		{
			cursor--;
    970a:	61 50       	subi	r22, 0x01	; 1
    970c:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
					break;

				default:
					break;
			}*/
			lcd_set_cursor(0, cursor);
    9710:	80 e0       	ldi	r24, 0x00	; 0
    9712:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    9716:	a1 c0       	rjmp	.+322    	; 0x985a <menu_back+0x7f6>
		}
		break;

	case SET_A3_SERIAL_NUM_VAL_MENU:
		if (cursor == 2)
    9718:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    971c:	62 30       	cpi	r22, 0x02	; 2
    971e:	51 f4       	brne	.+20     	; 0x9734 <menu_back+0x6d0>
		{
			current_menu = SET_A3_SERIAL_NUM_MENU;
    9720:	86 e9       	ldi	r24, 0x96	; 150
    9722:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("SET A3 SERIAL NUM"));
    9726:	84 e6       	ldi	r24, 0x64	; 100
    9728:	90 e2       	ldi	r25, 0x20	; 32
    972a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_cursor_off();
    972e:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
    9732:	93 c0       	rjmp	.+294    	; 0x985a <menu_back+0x7f6>
		}
		else
		{
			cursor--;
    9734:	61 50       	subi	r22, 0x01	; 1
    9736:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
					break;

				default:
					break;
			}*/
			lcd_set_cursor(0, cursor);
    973a:	80 e0       	ldi	r24, 0x00	; 0
    973c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    9740:	8c c0       	rjmp	.+280    	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case RUN_TIME_VAL_MENU:
		if (cursor == 0)
    9742:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    9746:	81 11       	cpse	r24, r1
    9748:	0a c0       	rjmp	.+20     	; 0x975e <menu_back+0x6fa>
		{
			current_menu = RUN_TIME_MENU;
    974a:	80 e7       	ldi	r24, 0x70	; 112
    974c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
			lcd_write_new_P(PSTR("RUN TIME"));
    9750:	8b e5       	ldi	r24, 0x5B	; 91
    9752:	90 e2       	ldi	r25, 0x20	; 32
    9754:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
			lcd_cursor_off();
    9758:	0e 94 75 33 	call	0x66ea	; 0x66ea <lcd_cursor_off>
    975c:	7e c0       	rjmp	.+252    	; 0x985a <menu_back+0x7f6>
		}
		else
		{
			cursor--;
    975e:	6f ef       	ldi	r22, 0xFF	; 255
    9760:	68 0f       	add	r22, r24
    9762:	60 93 ee 27 	sts	0x27EE, r22	; 0x8027ee <cursor>
			if (cursor < 5)
    9766:	65 30       	cpi	r22, 0x05	; 5
    9768:	20 f4       	brcc	.+8      	; 0x9772 <menu_back+0x70e>
			{
				lcd_set_cursor(0, cursor);
    976a:	80 e0       	ldi	r24, 0x00	; 0
    976c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    9770:	74 c0       	rjmp	.+232    	; 0x985a <menu_back+0x7f6>
			}
			else
			{
				lcd_set_cursor(0, cursor + 1);
    9772:	68 2f       	mov	r22, r24
    9774:	80 e0       	ldi	r24, 0x00	; 0
    9776:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    977a:	6f c0       	rjmp	.+222    	; 0x985a <menu_back+0x7f6>
		break;

		/*-------------------------------------------------------------------------------*/

	case RB800_MENU:
		current_menu = ABOUT_MENU;
    977c:	83 e0       	ldi	r24, 0x03	; 3
    977e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    9782:	85 e5       	ldi	r24, 0x55	; 85
    9784:	90 e2       	ldi	r25, 0x20	; 32
    9786:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    978a:	67 c0       	rjmp	.+206    	; 0x985a <menu_back+0x7f6>

	case A1_MENU:
		current_menu = ABOUT_MENU;
    978c:	83 e0       	ldi	r24, 0x03	; 3
    978e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    9792:	8f e4       	ldi	r24, 0x4F	; 79
    9794:	90 e2       	ldi	r25, 0x20	; 32
    9796:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    979a:	5f c0       	rjmp	.+190    	; 0x985a <menu_back+0x7f6>

	case A2_MENU:
		current_menu = ABOUT_MENU;
    979c:	83 e0       	ldi	r24, 0x03	; 3
    979e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    97a2:	89 e4       	ldi	r24, 0x49	; 73
    97a4:	90 e2       	ldi	r25, 0x20	; 32
    97a6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    97aa:	57 c0       	rjmp	.+174    	; 0x985a <menu_back+0x7f6>

	case A3_MENU:
		current_menu = ABOUT_MENU;
    97ac:	83 e0       	ldi	r24, 0x03	; 3
    97ae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    97b2:	83 e4       	ldi	r24, 0x43	; 67
    97b4:	90 e2       	ldi	r25, 0x20	; 32
    97b6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    97ba:	4f c0       	rjmp	.+158    	; 0x985a <menu_back+0x7f6>

		/*-------------------------------------------------------------------------------*/

	case RB800_SERIAL_NUM_MENU:
		current_menu = RB800_MENU;
    97bc:	8a ea       	ldi	r24, 0xAA	; 170
    97be:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT RB800"));
    97c2:	87 e3       	ldi	r24, 0x37	; 55
    97c4:	90 e2       	ldi	r25, 0x20	; 32
    97c6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    97ca:	47 c0       	rjmp	.+142    	; 0x985a <menu_back+0x7f6>

	case A1_SERIAL_NUM_MENU:
		current_menu = A1_MENU;
    97cc:	81 ea       	ldi	r24, 0xA1	; 161
    97ce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    97d2:	8e e2       	ldi	r24, 0x2E	; 46
    97d4:	90 e2       	ldi	r25, 0x20	; 32
    97d6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    97da:	3f c0       	rjmp	.+126    	; 0x985a <menu_back+0x7f6>

	case A1_PCB_MENU:
		current_menu = A1_MENU;
    97dc:	81 ea       	ldi	r24, 0xA1	; 161
    97de:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    97e2:	85 e2       	ldi	r24, 0x25	; 37
    97e4:	90 e2       	ldi	r25, 0x20	; 32
    97e6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    97ea:	37 c0       	rjmp	.+110    	; 0x985a <menu_back+0x7f6>

	case A1_FIRMWARE_MENU:
		current_menu = A1_MENU;
    97ec:	81 ea       	ldi	r24, 0xA1	; 161
    97ee:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    97f2:	8c e1       	ldi	r24, 0x1C	; 28
    97f4:	90 e2       	ldi	r25, 0x20	; 32
    97f6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    97fa:	2f c0       	rjmp	.+94     	; 0x985a <menu_back+0x7f6>

	case A2_SERIAL_NUM_MENU:
		current_menu = A2_MENU;
    97fc:	82 ea       	ldi	r24, 0xA2	; 162
    97fe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    9802:	83 e1       	ldi	r24, 0x13	; 19
    9804:	90 e2       	ldi	r25, 0x20	; 32
    9806:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    980a:	27 c0       	rjmp	.+78     	; 0x985a <menu_back+0x7f6>

	case A2_PCB_MENU:
		current_menu = A2_MENU;
    980c:	82 ea       	ldi	r24, 0xA2	; 162
    980e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    9812:	8a e0       	ldi	r24, 0x0A	; 10
    9814:	90 e2       	ldi	r25, 0x20	; 32
    9816:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    981a:	1f c0       	rjmp	.+62     	; 0x985a <menu_back+0x7f6>

	case A2_FIRMWARE_MENU:
		current_menu = A2_MENU;
    981c:	82 ea       	ldi	r24, 0xA2	; 162
    981e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    9822:	81 e0       	ldi	r24, 0x01	; 1
    9824:	90 e2       	ldi	r25, 0x20	; 32
    9826:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    982a:	17 c0       	rjmp	.+46     	; 0x985a <menu_back+0x7f6>

	case A3_SERIAL_NUM_MENU:
		current_menu = A3_MENU;
    982c:	83 ea       	ldi	r24, 0xA3	; 163
    982e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    9832:	88 ef       	ldi	r24, 0xF8	; 248
    9834:	9f e1       	ldi	r25, 0x1F	; 31
    9836:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    983a:	0f c0       	rjmp	.+30     	; 0x985a <menu_back+0x7f6>

	case A3_PCB_MENU:
		current_menu = A3_MENU;
    983c:	83 ea       	ldi	r24, 0xA3	; 163
    983e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    9842:	8f ee       	ldi	r24, 0xEF	; 239
    9844:	9f e1       	ldi	r25, 0x1F	; 31
    9846:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    984a:	07 c0       	rjmp	.+14     	; 0x985a <menu_back+0x7f6>

	case A3_FIRMWARE_MENU:
		current_menu = A3_MENU;
    984c:	83 ea       	ldi	r24, 0xA3	; 163
    984e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    9852:	86 ee       	ldi	r24, 0xE6	; 230
    9854:	9f e1       	ldi	r25, 0x1F	; 31
    9856:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>

		/******************************************************************************************************************************/
	default: break;
	}

}
    985a:	df 91       	pop	r29
    985c:	cf 91       	pop	r28
    985e:	1f 91       	pop	r17
    9860:	0f 91       	pop	r16
    9862:	ff 90       	pop	r15
    9864:	ef 90       	pop	r14
    9866:	08 95       	ret

00009868 <menu_up>:

void menu_up(void)
{
    9868:	ef 92       	push	r14
    986a:	ff 92       	push	r15
    986c:	0f 93       	push	r16
    986e:	1f 93       	push	r17
    9870:	cf 93       	push	r28
    9872:	df 93       	push	r29
	switch (current_menu)
    9874:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    9878:	8e 2f       	mov	r24, r30
    987a:	90 e0       	ldi	r25, 0x00	; 0
    987c:	82 3d       	cpi	r24, 0xD2	; 210
    987e:	91 05       	cpc	r25, r1
    9880:	08 f0       	brcs	.+2      	; 0x9884 <menu_up+0x1c>
    9882:	3a c6       	rjmp	.+3188   	; 0xa4f8 <menu_up+0xc90>
    9884:	fc 01       	movw	r30, r24
    9886:	e5 5a       	subi	r30, 0xA5	; 165
    9888:	fc 4f       	sbci	r31, 0xFC	; 252
    988a:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    988e:	81 e0       	ldi	r24, 0x01	; 1
    9890:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9894:	87 ed       	ldi	r24, 0xD7	; 215
    9896:	9f e1       	ldi	r25, 0x1F	; 31
    9898:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    989c:	2d c6       	rjmp	.+3162   	; 0xa4f8 <menu_up+0xc90>

	case ACCELERATION_MENU:
		break;

	case DECELERATION_MENU:
		current_menu = ACCELERATION_MENU;
    989e:	80 e1       	ldi	r24, 0x10	; 16
    98a0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ACCELERATION"));
    98a4:	8a ec       	ldi	r24, 0xCA	; 202
    98a6:	9f e1       	ldi	r25, 0x1F	; 31
    98a8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    98ac:	25 c6       	rjmp	.+3146   	; 0xa4f8 <menu_up+0xc90>

	case BRAKE_DELAY_MENU:
		current_menu = DECELERATION_MENU;
    98ae:	81 e1       	ldi	r24, 0x11	; 17
    98b0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DECELERATION"));
    98b4:	8d eb       	ldi	r24, 0xBD	; 189
    98b6:	9f e1       	ldi	r25, 0x1F	; 31
    98b8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    98bc:	1d c6       	rjmp	.+3130   	; 0xa4f8 <menu_up+0xc90>

	case FORWARD_SPEED_MENU:
		current_menu = BRAKE_DELAY_MENU;
    98be:	82 e1       	ldi	r24, 0x12	; 18
    98c0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRAKE DELAY"));
    98c4:	81 eb       	ldi	r24, 0xB1	; 177
    98c6:	9f e1       	ldi	r25, 0x1F	; 31
    98c8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    98cc:	15 c6       	rjmp	.+3114   	; 0xa4f8 <menu_up+0xc90>

	case SLOW_SPEED_MENU:
		break;

	case FAST_SPEED_MENU:
		current_menu = SLOW_SPEED_MENU;
    98ce:	84 e1       	ldi	r24, 0x14	; 20
    98d0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    98d4:	86 ea       	ldi	r24, 0xA6	; 166
    98d6:	9f e1       	ldi	r25, 0x1F	; 31
    98d8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    98dc:	0d c6       	rjmp	.+3098   	; 0xa4f8 <menu_up+0xc90>

	case REVERSE_SPEED_MENU:
		current_menu = FORWARD_SPEED_MENU;
    98de:	89 e1       	ldi	r24, 0x19	; 25
    98e0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    98e4:	88 e9       	ldi	r24, 0x98	; 152
    98e6:	9f e1       	ldi	r25, 0x1F	; 31
    98e8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    98ec:	05 c6       	rjmp	.+3082   	; 0xa4f8 <menu_up+0xc90>

	case CURRENT_RATING_MENU:
		current_menu = REVERSE_SPEED_MENU;
    98ee:	83 e1       	ldi	r24, 0x13	; 19
    98f0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    98f4:	8a e8       	ldi	r24, 0x8A	; 138
    98f6:	9f e1       	ldi	r25, 0x1F	; 31
    98f8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    98fc:	fd c5       	rjmp	.+3066   	; 0xa4f8 <menu_up+0xc90>

	case MAX_CURRENT_MENU:
		current_menu = CURRENT_RATING_MENU;
    98fe:	86 e1       	ldi	r24, 0x16	; 22
    9900:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CURRENT RATING"));
    9904:	8b e7       	ldi	r24, 0x7B	; 123
    9906:	9f e1       	ldi	r25, 0x1F	; 31
    9908:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    990c:	f5 c5       	rjmp	.+3050   	; 0xa4f8 <menu_up+0xc90>

	case OVERLOAD_TIME_MENU:
		current_menu = MAX_CURRENT_MENU;
    990e:	87 e1       	ldi	r24, 0x17	; 23
    9910:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MAX CURRENT"));
    9914:	8f e6       	ldi	r24, 0x6F	; 111
    9916:	9f e1       	ldi	r25, 0x1F	; 31
    9918:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    991c:	ed c5       	rjmp	.+3034   	; 0xa4f8 <menu_up+0xc90>

		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = OVERLOAD_TIME_MENU;
    991e:	88 e1       	ldi	r24, 0x18	; 24
    9920:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("OVERLOAD TIME"));
    9924:	81 e6       	ldi	r24, 0x61	; 97
    9926:	9f e1       	ldi	r25, 0x1F	; 31
    9928:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    992c:	e5 c5       	rjmp	.+3018   	; 0xa4f8 <menu_up+0xc90>

	case POT_CALIBRATION_VAL_MENU:
		break;

	case POT_RECALIBRATION_MENU:
		lcd_write_new_P(PSTR("RECALIBRATION"));
    992e:	83 e5       	ldi	r24, 0x53	; 83
    9930:	9f e1       	ldi	r25, 0x1F	; 31
    9932:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9936:	60 e0       	ldi	r22, 0x00	; 0
    9938:	81 e0       	ldi	r24, 0x01	; 1
    993a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    993e:	89 e4       	ldi	r24, 0x49	; 73
    9940:	9f e1       	ldi	r25, 0x1F	; 31
    9942:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_CANCELLED;
    9946:	8d ed       	ldi	r24, 0xDD	; 221
    9948:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    994c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    9950:	2f ef       	ldi	r18, 0xFF	; 255
    9952:	8f e4       	ldi	r24, 0x4F	; 79
    9954:	93 ec       	ldi	r25, 0xC3	; 195
    9956:	21 50       	subi	r18, 0x01	; 1
    9958:	80 40       	sbci	r24, 0x00	; 0
    995a:	90 40       	sbci	r25, 0x00	; 0
    995c:	e1 f7       	brne	.-8      	; 0x9956 <menu_up+0xee>
    995e:	00 c0       	rjmp	.+0      	; 0x9960 <menu_up+0xf8>
    9960:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    9962:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = POT_CALIBRATION_VAL_MENU;
    9966:	84 e8       	ldi	r24, 0x84	; 132
    9968:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    996c:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    9970:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    9974:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    9978:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    997c:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    9980:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    9984:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    9988:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    998c:	9f 01       	movw	r18, r30
    998e:	36 95       	lsr	r19
    9990:	27 95       	ror	r18
    9992:	36 95       	lsr	r19
    9994:	27 95       	ror	r18
    9996:	36 95       	lsr	r19
    9998:	27 95       	ror	r18
    999a:	a5 ec       	ldi	r26, 0xC5	; 197
    999c:	b0 e2       	ldi	r27, 0x20	; 32
    999e:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    99a2:	92 95       	swap	r25
    99a4:	82 95       	swap	r24
    99a6:	8f 70       	andi	r24, 0x0F	; 15
    99a8:	89 27       	eor	r24, r25
    99aa:	9f 70       	andi	r25, 0x0F	; 15
    99ac:	89 27       	eor	r24, r25
    99ae:	0f 2e       	mov	r0, r31
    99b0:	f8 ee       	ldi	r31, 0xE8	; 232
    99b2:	ef 2e       	mov	r14, r31
    99b4:	f3 e0       	ldi	r31, 0x03	; 3
    99b6:	ff 2e       	mov	r15, r31
    99b8:	f0 2d       	mov	r31, r0
    99ba:	8e 9d       	mul	r24, r14
    99bc:	90 01       	movw	r18, r0
    99be:	8f 9d       	mul	r24, r15
    99c0:	30 0d       	add	r19, r0
    99c2:	9e 9d       	mul	r25, r14
    99c4:	30 0d       	add	r19, r0
    99c6:	11 24       	eor	r1, r1
    99c8:	e2 1b       	sub	r30, r18
    99ca:	f3 0b       	sbc	r31, r19
    99cc:	ff 93       	push	r31
    99ce:	ef 93       	push	r30
    99d0:	98 01       	movw	r18, r16
    99d2:	36 95       	lsr	r19
    99d4:	27 95       	ror	r18
    99d6:	36 95       	lsr	r19
    99d8:	27 95       	ror	r18
    99da:	36 95       	lsr	r19
    99dc:	27 95       	ror	r18
    99de:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    99e2:	92 95       	swap	r25
    99e4:	82 95       	swap	r24
    99e6:	8f 70       	andi	r24, 0x0F	; 15
    99e8:	89 27       	eor	r24, r25
    99ea:	9f 70       	andi	r25, 0x0F	; 15
    99ec:	89 27       	eor	r24, r25
    99ee:	9f 93       	push	r25
    99f0:	8f 93       	push	r24
    99f2:	9a 01       	movw	r18, r20
    99f4:	36 95       	lsr	r19
    99f6:	27 95       	ror	r18
    99f8:	36 95       	lsr	r19
    99fa:	27 95       	ror	r18
    99fc:	36 95       	lsr	r19
    99fe:	27 95       	ror	r18
    9a00:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    9a04:	92 95       	swap	r25
    9a06:	82 95       	swap	r24
    9a08:	8f 70       	andi	r24, 0x0F	; 15
    9a0a:	89 27       	eor	r24, r25
    9a0c:	9f 70       	andi	r25, 0x0F	; 15
    9a0e:	89 27       	eor	r24, r25
    9a10:	8e 9d       	mul	r24, r14
    9a12:	90 01       	movw	r18, r0
    9a14:	8f 9d       	mul	r24, r15
    9a16:	30 0d       	add	r19, r0
    9a18:	9e 9d       	mul	r25, r14
    9a1a:	30 0d       	add	r19, r0
    9a1c:	11 24       	eor	r1, r1
    9a1e:	42 1b       	sub	r20, r18
    9a20:	53 0b       	sbc	r21, r19
    9a22:	5f 93       	push	r21
    9a24:	4f 93       	push	r20
    9a26:	9e 01       	movw	r18, r28
    9a28:	36 95       	lsr	r19
    9a2a:	27 95       	ror	r18
    9a2c:	36 95       	lsr	r19
    9a2e:	27 95       	ror	r18
    9a30:	36 95       	lsr	r19
    9a32:	27 95       	ror	r18
    9a34:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    9a38:	92 95       	swap	r25
    9a3a:	82 95       	swap	r24
    9a3c:	8f 70       	andi	r24, 0x0F	; 15
    9a3e:	89 27       	eor	r24, r25
    9a40:	9f 70       	andi	r25, 0x0F	; 15
    9a42:	89 27       	eor	r24, r25
    9a44:	9f 93       	push	r25
    9a46:	8f 93       	push	r24
    9a48:	86 e0       	ldi	r24, 0x06	; 6
    9a4a:	90 e2       	ldi	r25, 0x20	; 32
    9a4c:	9f 93       	push	r25
    9a4e:	8f 93       	push	r24
    9a50:	83 ed       	ldi	r24, 0xD3	; 211
    9a52:	97 e2       	ldi	r25, 0x27	; 39
    9a54:	9f 93       	push	r25
    9a56:	8f 93       	push	r24
    9a58:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9a5c:	83 ed       	ldi	r24, 0xD3	; 211
    9a5e:	97 e2       	ldi	r25, 0x27	; 39
    9a60:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    9a64:	60 e0       	ldi	r22, 0x00	; 0
    9a66:	81 e0       	ldi	r24, 0x01	; 1
    9a68:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    9a6c:	85 e3       	ldi	r24, 0x35	; 53
    9a6e:	9f e1       	ldi	r25, 0x1F	; 31
    9a70:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    9a74:	8d b7       	in	r24, 0x3d	; 61
    9a76:	9e b7       	in	r25, 0x3e	; 62
    9a78:	0c 96       	adiw	r24, 0x0c	; 12
    9a7a:	8d bf       	out	0x3d, r24	; 61
    9a7c:	9e bf       	out	0x3e, r25	; 62
    9a7e:	3c c5       	rjmp	.+2680   	; 0xa4f8 <menu_up+0xc90>

		/*--------------------------------------------------------------------------------*/

	case VACUUM_SETTINGS_MENU:
		current_menu = POTENTIOMETER_MENU;
    9a80:	80 e8       	ldi	r24, 0x80	; 128
    9a82:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    9a86:	87 e2       	ldi	r24, 0x27	; 39
    9a88:	9f e1       	ldi	r25, 0x1F	; 31
    9a8a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    9a8e:	60 e0       	ldi	r22, 0x00	; 0
    9a90:	81 e0       	ldi	r24, 0x01	; 1
    9a92:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    9a96:	8e e1       	ldi	r24, 0x1E	; 30
    9a98:	9f e1       	ldi	r25, 0x1F	; 31
    9a9a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    9a9e:	2c c5       	rjmp	.+2648   	; 0xa4f8 <menu_up+0xc90>

	case VACUUM_SLOW_START_MENU:
		break;

	case BRUSH_SETTINGS_MENU:
		current_menu = VACUUM_SETTINGS_MENU;
    9aa0:	8a e1       	ldi	r24, 0x1A	; 26
    9aa2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM SETTINGS"));
    9aa6:	8e e0       	ldi	r24, 0x0E	; 14
    9aa8:	9f e1       	ldi	r25, 0x1F	; 31
    9aaa:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9aae:	24 c5       	rjmp	.+2632   	; 0xa4f8 <menu_up+0xc90>

	case BRUSH_SLOW_START_MENU:
		break;

	case PRE_SWP_SETTINGS_MENU:
		current_menu = BRUSH_SETTINGS_MENU;
    9ab0:	8c e1       	ldi	r24, 0x1C	; 28
    9ab2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH SETTINGS"));
    9ab6:	8f ef       	ldi	r24, 0xFF	; 255
    9ab8:	9e e1       	ldi	r25, 0x1E	; 30
    9aba:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9abe:	1c c5       	rjmp	.+2616   	; 0xa4f8 <menu_up+0xc90>
		break;

		/*-------------------------------------------------------------------------------*/

	case ACCELERATION_VAL_MENU:
		if (current_value < MAX_ACCELERATION)
    9ac0:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9ac4:	82 33       	cpi	r24, 0x32	; 50
    9ac6:	18 f4       	brcc	.+6      	; 0x9ace <menu_up+0x266>
			current_value++;
    9ac8:	8f 5f       	subi	r24, 0xFF	; 255
    9aca:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    9ace:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <current_value>
    9ad2:	8d ec       	ldi	r24, 0xCD	; 205
    9ad4:	98 9f       	mul	r25, r24
    9ad6:	81 2d       	mov	r24, r1
    9ad8:	11 24       	eor	r1, r1
    9ada:	86 95       	lsr	r24
    9adc:	86 95       	lsr	r24
    9ade:	86 95       	lsr	r24
    9ae0:	38 2f       	mov	r19, r24
    9ae2:	33 0f       	add	r19, r19
    9ae4:	23 2f       	mov	r18, r19
    9ae6:	22 0f       	add	r18, r18
    9ae8:	22 0f       	add	r18, r18
    9aea:	23 0f       	add	r18, r19
    9aec:	92 1b       	sub	r25, r18
    9aee:	1f 92       	push	r1
    9af0:	9f 93       	push	r25
    9af2:	1f 92       	push	r1
    9af4:	8f 93       	push	r24
    9af6:	89 ee       	ldi	r24, 0xE9	; 233
    9af8:	90 e2       	ldi	r25, 0x20	; 32
    9afa:	9f 93       	push	r25
    9afc:	8f 93       	push	r24
    9afe:	83 ed       	ldi	r24, 0xD3	; 211
    9b00:	97 e2       	ldi	r25, 0x27	; 39
    9b02:	9f 93       	push	r25
    9b04:	8f 93       	push	r24
    9b06:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9b0a:	83 ed       	ldi	r24, 0xD3	; 211
    9b0c:	97 e2       	ldi	r25, 0x27	; 39
    9b0e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9b12:	8d b7       	in	r24, 0x3d	; 61
    9b14:	9e b7       	in	r25, 0x3e	; 62
    9b16:	08 96       	adiw	r24, 0x08	; 8
    9b18:	8d bf       	out	0x3d, r24	; 61
    9b1a:	9e bf       	out	0x3e, r25	; 62
    9b1c:	ed c4       	rjmp	.+2522   	; 0xa4f8 <menu_up+0xc90>

	case DECELERATION_VAL_MENU:
		if (current_value < MAX_DECELERATION)
    9b1e:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9b22:	82 33       	cpi	r24, 0x32	; 50
    9b24:	18 f4       	brcc	.+6      	; 0x9b2c <menu_up+0x2c4>
			current_value++;
    9b26:	8f 5f       	subi	r24, 0xFF	; 255
    9b28:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    9b2c:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <current_value>
    9b30:	8d ec       	ldi	r24, 0xCD	; 205
    9b32:	98 9f       	mul	r25, r24
    9b34:	81 2d       	mov	r24, r1
    9b36:	11 24       	eor	r1, r1
    9b38:	86 95       	lsr	r24
    9b3a:	86 95       	lsr	r24
    9b3c:	86 95       	lsr	r24
    9b3e:	38 2f       	mov	r19, r24
    9b40:	33 0f       	add	r19, r19
    9b42:	23 2f       	mov	r18, r19
    9b44:	22 0f       	add	r18, r18
    9b46:	22 0f       	add	r18, r18
    9b48:	23 0f       	add	r18, r19
    9b4a:	92 1b       	sub	r25, r18
    9b4c:	1f 92       	push	r1
    9b4e:	9f 93       	push	r25
    9b50:	1f 92       	push	r1
    9b52:	8f 93       	push	r24
    9b54:	89 ee       	ldi	r24, 0xE9	; 233
    9b56:	90 e2       	ldi	r25, 0x20	; 32
    9b58:	9f 93       	push	r25
    9b5a:	8f 93       	push	r24
    9b5c:	83 ed       	ldi	r24, 0xD3	; 211
    9b5e:	97 e2       	ldi	r25, 0x27	; 39
    9b60:	9f 93       	push	r25
    9b62:	8f 93       	push	r24
    9b64:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9b68:	83 ed       	ldi	r24, 0xD3	; 211
    9b6a:	97 e2       	ldi	r25, 0x27	; 39
    9b6c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9b70:	8d b7       	in	r24, 0x3d	; 61
    9b72:	9e b7       	in	r25, 0x3e	; 62
    9b74:	08 96       	adiw	r24, 0x08	; 8
    9b76:	8d bf       	out	0x3d, r24	; 61
    9b78:	9e bf       	out	0x3e, r25	; 62
    9b7a:	be c4       	rjmp	.+2428   	; 0xa4f8 <menu_up+0xc90>

	case BRAKE_DELAY_VAL_MENU:
		if (current_value < MAX_BRAKE_DELAY)
    9b7c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9b80:	84 36       	cpi	r24, 0x64	; 100
    9b82:	18 f4       	brcc	.+6      	; 0x9b8a <menu_up+0x322>
			current_value++;
    9b84:	8f 5f       	subi	r24, 0xFF	; 255
    9b86:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    9b8a:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <current_value>
    9b8e:	8d ec       	ldi	r24, 0xCD	; 205
    9b90:	98 9f       	mul	r25, r24
    9b92:	81 2d       	mov	r24, r1
    9b94:	11 24       	eor	r1, r1
    9b96:	86 95       	lsr	r24
    9b98:	86 95       	lsr	r24
    9b9a:	86 95       	lsr	r24
    9b9c:	38 2f       	mov	r19, r24
    9b9e:	33 0f       	add	r19, r19
    9ba0:	23 2f       	mov	r18, r19
    9ba2:	22 0f       	add	r18, r18
    9ba4:	22 0f       	add	r18, r18
    9ba6:	23 0f       	add	r18, r19
    9ba8:	92 1b       	sub	r25, r18
    9baa:	1f 92       	push	r1
    9bac:	9f 93       	push	r25
    9bae:	1f 92       	push	r1
    9bb0:	8f 93       	push	r24
    9bb2:	89 ee       	ldi	r24, 0xE9	; 233
    9bb4:	90 e2       	ldi	r25, 0x20	; 32
    9bb6:	9f 93       	push	r25
    9bb8:	8f 93       	push	r24
    9bba:	83 ed       	ldi	r24, 0xD3	; 211
    9bbc:	97 e2       	ldi	r25, 0x27	; 39
    9bbe:	9f 93       	push	r25
    9bc0:	8f 93       	push	r24
    9bc2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9bc6:	83 ed       	ldi	r24, 0xD3	; 211
    9bc8:	97 e2       	ldi	r25, 0x27	; 39
    9bca:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9bce:	8d b7       	in	r24, 0x3d	; 61
    9bd0:	9e b7       	in	r25, 0x3e	; 62
    9bd2:	08 96       	adiw	r24, 0x08	; 8
    9bd4:	8d bf       	out	0x3d, r24	; 61
    9bd6:	9e bf       	out	0x3e, r25	; 62
    9bd8:	8f c4       	rjmp	.+2334   	; 0xa4f8 <menu_up+0xc90>

	case REVERSE_SPEED_VAL_MENU:
		if (current_value < MAX_REVERSE)
    9bda:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9bde:	80 35       	cpi	r24, 0x50	; 80
    9be0:	18 f4       	brcc	.+6      	; 0x9be8 <menu_up+0x380>
			current_value++;
    9be2:	8f 5f       	subi	r24, 0xFF	; 255
    9be4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    9be8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9bec:	1f 92       	push	r1
    9bee:	8f 93       	push	r24
    9bf0:	87 ef       	ldi	r24, 0xF7	; 247
    9bf2:	90 e2       	ldi	r25, 0x20	; 32
    9bf4:	9f 93       	push	r25
    9bf6:	8f 93       	push	r24
    9bf8:	83 ed       	ldi	r24, 0xD3	; 211
    9bfa:	97 e2       	ldi	r25, 0x27	; 39
    9bfc:	9f 93       	push	r25
    9bfe:	8f 93       	push	r24
    9c00:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9c04:	83 ed       	ldi	r24, 0xD3	; 211
    9c06:	97 e2       	ldi	r25, 0x27	; 39
    9c08:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9c0c:	0f 90       	pop	r0
    9c0e:	0f 90       	pop	r0
    9c10:	0f 90       	pop	r0
    9c12:	0f 90       	pop	r0
    9c14:	0f 90       	pop	r0
    9c16:	0f 90       	pop	r0
    9c18:	6f c4       	rjmp	.+2270   	; 0xa4f8 <menu_up+0xc90>

	case SLOW_SPEED_VAL_MENU:
		if (current_value < MAX_SLOW)
    9c1a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9c1e:	80 35       	cpi	r24, 0x50	; 80
    9c20:	18 f4       	brcc	.+6      	; 0x9c28 <menu_up+0x3c0>
			current_value++;
    9c22:	8f 5f       	subi	r24, 0xFF	; 255
    9c24:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    9c28:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9c2c:	1f 92       	push	r1
    9c2e:	8f 93       	push	r24
    9c30:	87 ef       	ldi	r24, 0xF7	; 247
    9c32:	90 e2       	ldi	r25, 0x20	; 32
    9c34:	9f 93       	push	r25
    9c36:	8f 93       	push	r24
    9c38:	83 ed       	ldi	r24, 0xD3	; 211
    9c3a:	97 e2       	ldi	r25, 0x27	; 39
    9c3c:	9f 93       	push	r25
    9c3e:	8f 93       	push	r24
    9c40:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9c44:	83 ed       	ldi	r24, 0xD3	; 211
    9c46:	97 e2       	ldi	r25, 0x27	; 39
    9c48:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9c4c:	0f 90       	pop	r0
    9c4e:	0f 90       	pop	r0
    9c50:	0f 90       	pop	r0
    9c52:	0f 90       	pop	r0
    9c54:	0f 90       	pop	r0
    9c56:	0f 90       	pop	r0
    9c58:	4f c4       	rjmp	.+2206   	; 0xa4f8 <menu_up+0xc90>

	case FAST_SPEED_VAL_MENU:
		if (current_value < MAX_FAST)
    9c5a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9c5e:	84 36       	cpi	r24, 0x64	; 100
    9c60:	18 f4       	brcc	.+6      	; 0x9c68 <menu_up+0x400>
			current_value++;
    9c62:	8f 5f       	subi	r24, 0xFF	; 255
    9c64:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    9c68:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9c6c:	1f 92       	push	r1
    9c6e:	8f 93       	push	r24
    9c70:	87 ef       	ldi	r24, 0xF7	; 247
    9c72:	90 e2       	ldi	r25, 0x20	; 32
    9c74:	9f 93       	push	r25
    9c76:	8f 93       	push	r24
    9c78:	83 ed       	ldi	r24, 0xD3	; 211
    9c7a:	97 e2       	ldi	r25, 0x27	; 39
    9c7c:	9f 93       	push	r25
    9c7e:	8f 93       	push	r24
    9c80:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9c84:	83 ed       	ldi	r24, 0xD3	; 211
    9c86:	97 e2       	ldi	r25, 0x27	; 39
    9c88:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9c8c:	0f 90       	pop	r0
    9c8e:	0f 90       	pop	r0
    9c90:	0f 90       	pop	r0
    9c92:	0f 90       	pop	r0
    9c94:	0f 90       	pop	r0
    9c96:	0f 90       	pop	r0
    9c98:	2f c4       	rjmp	.+2142   	; 0xa4f8 <menu_up+0xc90>

	case CURRENT_RATING_VAL_MENU:
		if (current_value < MAX_CURRENT_RATING)
    9c9a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9c9e:	88 32       	cpi	r24, 0x28	; 40
    9ca0:	18 f4       	brcc	.+6      	; 0x9ca8 <menu_up+0x440>
			current_value++;
    9ca2:	8f 5f       	subi	r24, 0xFF	; 255
    9ca4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d AMPS", current_value);
    9ca8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9cac:	1f 92       	push	r1
    9cae:	8f 93       	push	r24
    9cb0:	89 e0       	ldi	r24, 0x09	; 9
    9cb2:	91 e2       	ldi	r25, 0x21	; 33
    9cb4:	9f 93       	push	r25
    9cb6:	8f 93       	push	r24
    9cb8:	83 ed       	ldi	r24, 0xD3	; 211
    9cba:	97 e2       	ldi	r25, 0x27	; 39
    9cbc:	9f 93       	push	r25
    9cbe:	8f 93       	push	r24
    9cc0:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9cc4:	83 ed       	ldi	r24, 0xD3	; 211
    9cc6:	97 e2       	ldi	r25, 0x27	; 39
    9cc8:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9ccc:	0f 90       	pop	r0
    9cce:	0f 90       	pop	r0
    9cd0:	0f 90       	pop	r0
    9cd2:	0f 90       	pop	r0
    9cd4:	0f 90       	pop	r0
    9cd6:	0f 90       	pop	r0
    9cd8:	0f c4       	rjmp	.+2078   	; 0xa4f8 <menu_up+0xc90>

	case MAX_CURRENT_VAL_MENU:
		if (current_value < MAX_MAX_CURRENT)
    9cda:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9cde:	84 36       	cpi	r24, 0x64	; 100
    9ce0:	18 f4       	brcc	.+6      	; 0x9ce8 <menu_up+0x480>
			current_value++;
    9ce2:	8f 5f       	subi	r24, 0xFF	; 255
    9ce4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d AMPS", current_value);
    9ce8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9cec:	1f 92       	push	r1
    9cee:	8f 93       	push	r24
    9cf0:	89 e0       	ldi	r24, 0x09	; 9
    9cf2:	91 e2       	ldi	r25, 0x21	; 33
    9cf4:	9f 93       	push	r25
    9cf6:	8f 93       	push	r24
    9cf8:	83 ed       	ldi	r24, 0xD3	; 211
    9cfa:	97 e2       	ldi	r25, 0x27	; 39
    9cfc:	9f 93       	push	r25
    9cfe:	8f 93       	push	r24
    9d00:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9d04:	83 ed       	ldi	r24, 0xD3	; 211
    9d06:	97 e2       	ldi	r25, 0x27	; 39
    9d08:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9d0c:	0f 90       	pop	r0
    9d0e:	0f 90       	pop	r0
    9d10:	0f 90       	pop	r0
    9d12:	0f 90       	pop	r0
    9d14:	0f 90       	pop	r0
    9d16:	0f 90       	pop	r0
    9d18:	ef c3       	rjmp	.+2014   	; 0xa4f8 <menu_up+0xc90>

	case OVERLOAD_TIME_VAL_MENU:
		if (current_value < MAX_OVERLOAD_TIME)
    9d1a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9d1e:	8c 33       	cpi	r24, 0x3C	; 60
    9d20:	18 f4       	brcc	.+6      	; 0x9d28 <menu_up+0x4c0>
			current_value++;
    9d22:	8f 5f       	subi	r24, 0xFF	; 255
    9d24:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d SECONDS", current_value);
    9d28:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9d2c:	1f 92       	push	r1
    9d2e:	8f 93       	push	r24
    9d30:	8c ee       	ldi	r24, 0xEC	; 236
    9d32:	90 e2       	ldi	r25, 0x20	; 32
    9d34:	9f 93       	push	r25
    9d36:	8f 93       	push	r24
    9d38:	83 ed       	ldi	r24, 0xD3	; 211
    9d3a:	97 e2       	ldi	r25, 0x27	; 39
    9d3c:	9f 93       	push	r25
    9d3e:	8f 93       	push	r24
    9d40:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9d44:	83 ed       	ldi	r24, 0xD3	; 211
    9d46:	97 e2       	ldi	r25, 0x27	; 39
    9d48:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9d4c:	0f 90       	pop	r0
    9d4e:	0f 90       	pop	r0
    9d50:	0f 90       	pop	r0
    9d52:	0f 90       	pop	r0
    9d54:	0f 90       	pop	r0
    9d56:	0f 90       	pop	r0
    9d58:	cf c3       	rjmp	.+1950   	; 0xa4f8 <menu_up+0xc90>

	case VACUUM_SLOW_START_VAL_MENU:
		if (current_value < MAX_VACUUM_RAMPUP_TIME)
    9d5a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9d5e:	8c 30       	cpi	r24, 0x0C	; 12
    9d60:	18 f4       	brcc	.+6      	; 0x9d68 <menu_up+0x500>
			current_value++;
    9d62:	8f 5f       	subi	r24, 0xFF	; 255
    9d64:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    9d68:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9d6c:	2a ef       	ldi	r18, 0xFA	; 250
    9d6e:	82 9f       	mul	r24, r18
    9d70:	c0 01       	movw	r24, r0
    9d72:	11 24       	eor	r1, r1
    9d74:	9f 93       	push	r25
    9d76:	8f 93       	push	r24
    9d78:	81 e1       	ldi	r24, 0x11	; 17
    9d7a:	91 e2       	ldi	r25, 0x21	; 33
    9d7c:	9f 93       	push	r25
    9d7e:	8f 93       	push	r24
    9d80:	83 ed       	ldi	r24, 0xD3	; 211
    9d82:	97 e2       	ldi	r25, 0x27	; 39
    9d84:	9f 93       	push	r25
    9d86:	8f 93       	push	r24
    9d88:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9d8c:	83 ed       	ldi	r24, 0xD3	; 211
    9d8e:	97 e2       	ldi	r25, 0x27	; 39
    9d90:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9d94:	0f 90       	pop	r0
    9d96:	0f 90       	pop	r0
    9d98:	0f 90       	pop	r0
    9d9a:	0f 90       	pop	r0
    9d9c:	0f 90       	pop	r0
    9d9e:	0f 90       	pop	r0
    9da0:	ab c3       	rjmp	.+1878   	; 0xa4f8 <menu_up+0xc90>

	case BRUSH_SLOW_START_VAL_MENU:
		if (current_value < MAX_BRUSH_RAMPUP_TIME)
    9da2:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9da6:	8c 30       	cpi	r24, 0x0C	; 12
    9da8:	18 f4       	brcc	.+6      	; 0x9db0 <menu_up+0x548>
			current_value++;
    9daa:	8f 5f       	subi	r24, 0xFF	; 255
    9dac:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    9db0:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9db4:	2a ef       	ldi	r18, 0xFA	; 250
    9db6:	82 9f       	mul	r24, r18
    9db8:	c0 01       	movw	r24, r0
    9dba:	11 24       	eor	r1, r1
    9dbc:	9f 93       	push	r25
    9dbe:	8f 93       	push	r24
    9dc0:	81 e1       	ldi	r24, 0x11	; 17
    9dc2:	91 e2       	ldi	r25, 0x21	; 33
    9dc4:	9f 93       	push	r25
    9dc6:	8f 93       	push	r24
    9dc8:	83 ed       	ldi	r24, 0xD3	; 211
    9dca:	97 e2       	ldi	r25, 0x27	; 39
    9dcc:	9f 93       	push	r25
    9dce:	8f 93       	push	r24
    9dd0:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9dd4:	83 ed       	ldi	r24, 0xD3	; 211
    9dd6:	97 e2       	ldi	r25, 0x27	; 39
    9dd8:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9ddc:	0f 90       	pop	r0
    9dde:	0f 90       	pop	r0
    9de0:	0f 90       	pop	r0
    9de2:	0f 90       	pop	r0
    9de4:	0f 90       	pop	r0
    9de6:	0f 90       	pop	r0
    9de8:	87 c3       	rjmp	.+1806   	; 0xa4f8 <menu_up+0xc90>

	case PRE_SWP_SLOW_START_VAL_MENU:
		if (current_value < MAX_PRE_SWP_RAMPUP_TIME)
    9dea:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9dee:	8c 30       	cpi	r24, 0x0C	; 12
    9df0:	18 f4       	brcc	.+6      	; 0x9df8 <menu_up+0x590>
			current_value++;
    9df2:	8f 5f       	subi	r24, 0xFF	; 255
    9df4:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    9df8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    9dfc:	2a ef       	ldi	r18, 0xFA	; 250
    9dfe:	82 9f       	mul	r24, r18
    9e00:	c0 01       	movw	r24, r0
    9e02:	11 24       	eor	r1, r1
    9e04:	9f 93       	push	r25
    9e06:	8f 93       	push	r24
    9e08:	81 e1       	ldi	r24, 0x11	; 17
    9e0a:	91 e2       	ldi	r25, 0x21	; 33
    9e0c:	9f 93       	push	r25
    9e0e:	8f 93       	push	r24
    9e10:	83 ed       	ldi	r24, 0xD3	; 211
    9e12:	97 e2       	ldi	r25, 0x27	; 39
    9e14:	9f 93       	push	r25
    9e16:	8f 93       	push	r24
    9e18:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    9e1c:	83 ed       	ldi	r24, 0xD3	; 211
    9e1e:	97 e2       	ldi	r25, 0x27	; 39
    9e20:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    9e24:	0f 90       	pop	r0
    9e26:	0f 90       	pop	r0
    9e28:	0f 90       	pop	r0
    9e2a:	0f 90       	pop	r0
    9e2c:	0f 90       	pop	r0
    9e2e:	0f 90       	pop	r0
    9e30:	63 c3       	rjmp	.+1734   	; 0xa4f8 <menu_up+0xc90>

		/******************************************************************************************************************************/

	case BATTERY_MENU:
		current_menu = MOTOR_MENU;
    9e32:	81 e0       	ldi	r24, 0x01	; 1
    9e34:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    9e38:	80 ef       	ldi	r24, 0xF0	; 240
    9e3a:	9e e1       	ldi	r25, 0x1E	; 30
    9e3c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9e40:	5b c3       	rjmp	.+1718   	; 0xa4f8 <menu_up+0xc90>

	case LEAD_MENU:
		break;

	case AGM_MENU:
		current_menu = LEAD_MENU;
    9e42:	80 e3       	ldi	r24, 0x30	; 48
    9e44:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY: LEAD"));
    9e48:	82 ee       	ldi	r24, 0xE2	; 226
    9e4a:	9e e1       	ldi	r25, 0x1E	; 30
    9e4c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9e50:	53 c3       	rjmp	.+1702   	; 0xa4f8 <menu_up+0xc90>

	case GEL_MENU:
		current_menu = AGM_MENU;
    9e52:	81 e3       	ldi	r24, 0x31	; 49
    9e54:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY: AGM"));
    9e58:	85 ed       	ldi	r24, 0xD5	; 213
    9e5a:	9e e1       	ldi	r25, 0x1E	; 30
    9e5c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9e60:	4b c3       	rjmp	.+1686   	; 0xa4f8 <menu_up+0xc90>

		/******************************************************************************************************************************/

	case SET_SERIAL_NUM_MENU:
		current_menu = BATTERY_MENU;
    9e62:	82 e0       	ldi	r24, 0x02	; 2
    9e64:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    9e68:	88 ec       	ldi	r24, 0xC8	; 200
    9e6a:	9e e1       	ldi	r25, 0x1E	; 30
    9e6c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9e70:	43 c3       	rjmp	.+1670   	; 0xa4f8 <menu_up+0xc90>

	case SET_RB800_SERIAL_NUM_MENU:
		break;

	case SET_A1_SERIAL_NUM_MENU:
		current_menu = SET_RB800_SERIAL_NUM_MENU;
    9e72:	88 e9       	ldi	r24, 0x98	; 152
    9e74:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET RB800 SERIAL NUM"));
    9e78:	83 eb       	ldi	r24, 0xB3	; 179
    9e7a:	9e e1       	ldi	r25, 0x1E	; 30
    9e7c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9e80:	3b c3       	rjmp	.+1654   	; 0xa4f8 <menu_up+0xc90>

	case SET_A2_SERIAL_NUM_MENU:
		current_menu = SET_A1_SERIAL_NUM_MENU;
    9e82:	82 e9       	ldi	r24, 0x92	; 146
    9e84:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A1 SERIAL NUM"));
    9e88:	81 ea       	ldi	r24, 0xA1	; 161
    9e8a:	9e e1       	ldi	r25, 0x1E	; 30
    9e8c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9e90:	33 c3       	rjmp	.+1638   	; 0xa4f8 <menu_up+0xc90>

	case SET_A3_SERIAL_NUM_MENU:
		current_menu = SET_A2_SERIAL_NUM_MENU;
    9e92:	84 e9       	ldi	r24, 0x94	; 148
    9e94:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A2 SERIAL NUM"));
    9e98:	8f e8       	ldi	r24, 0x8F	; 143
    9e9a:	9e e1       	ldi	r25, 0x1E	; 30
    9e9c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9ea0:	2b c3       	rjmp	.+1622   	; 0xa4f8 <menu_up+0xc90>

		/*-------------------------------------------------------------------------------*/

	case SET_RB800_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    9ea2:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    9ea6:	88 23       	and	r24, r24
    9ea8:	09 f4       	brne	.+2      	; 0x9eac <menu_up+0x644>
    9eaa:	26 c3       	rjmp	.+1612   	; 0xa4f8 <menu_up+0xc90>
			break;
		if (serial_num_temp[cursor - 2] != '9')// -2 IS TO START THE ARRAY FROM 0th position(cursor value will be 2)
    9eac:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    9eb0:	90 e0       	ldi	r25, 0x00	; 0
    9eb2:	02 97       	sbiw	r24, 0x02	; 2
    9eb4:	fc 01       	movw	r30, r24
    9eb6:	e4 54       	subi	r30, 0x44	; 68
    9eb8:	f8 4d       	sbci	r31, 0xD8	; 216
    9eba:	20 81       	ld	r18, Z
    9ebc:	29 33       	cpi	r18, 0x39	; 57
    9ebe:	29 f0       	breq	.+10     	; 0x9eca <menu_up+0x662>
			serial_num_temp[cursor - 2]++;
    9ec0:	fc 01       	movw	r30, r24
    9ec2:	e4 54       	subi	r30, 0x44	; 68
    9ec4:	f8 4d       	sbci	r31, 0xD8	; 216
    9ec6:	2f 5f       	subi	r18, 0xFF	; 255
    9ec8:	20 83       	st	Z, r18
		lcd_set_cursor(0, 2);
    9eca:	62 e0       	ldi	r22, 0x02	; 2
    9ecc:	80 e0       	ldi	r24, 0x00	; 0
    9ece:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(serial_num_temp);
    9ed2:	8c eb       	ldi	r24, 0xBC	; 188
    9ed4:	97 e2       	ldi	r25, 0x27	; 39
    9ed6:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		lcd_set_cursor(0, cursor);
    9eda:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    9ede:	80 e0       	ldi	r24, 0x00	; 0
    9ee0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    9ee4:	09 c3       	rjmp	.+1554   	; 0xa4f8 <menu_up+0xc90>

	case SET_A1_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    9ee6:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    9eea:	88 23       	and	r24, r24
    9eec:	09 f4       	brne	.+2      	; 0x9ef0 <menu_up+0x688>
    9eee:	04 c3       	rjmp	.+1544   	; 0xa4f8 <menu_up+0xc90>
			break;
		if (serial_num_temp[cursor] != '9')
    9ef0:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    9ef4:	90 e0       	ldi	r25, 0x00	; 0
    9ef6:	fc 01       	movw	r30, r24
    9ef8:	e4 54       	subi	r30, 0x44	; 68
    9efa:	f8 4d       	sbci	r31, 0xD8	; 216
    9efc:	20 81       	ld	r18, Z
    9efe:	29 33       	cpi	r18, 0x39	; 57
    9f00:	29 f0       	breq	.+10     	; 0x9f0c <menu_up+0x6a4>
			serial_num_temp[cursor]++;
    9f02:	fc 01       	movw	r30, r24
    9f04:	e4 54       	subi	r30, 0x44	; 68
    9f06:	f8 4d       	sbci	r31, 0xD8	; 216
    9f08:	2f 5f       	subi	r18, 0xFF	; 255
    9f0a:	20 83       	st	Z, r18
		lcd_write_new(serial_num_temp);
    9f0c:	8c eb       	ldi	r24, 0xBC	; 188
    9f0e:	97 e2       	ldi	r25, 0x27	; 39
    9f10:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, cursor);
    9f14:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    9f18:	80 e0       	ldi	r24, 0x00	; 0
    9f1a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    9f1e:	ec c2       	rjmp	.+1496   	; 0xa4f8 <menu_up+0xc90>

	case SET_A2_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    9f20:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    9f24:	88 23       	and	r24, r24
    9f26:	09 f4       	brne	.+2      	; 0x9f2a <menu_up+0x6c2>
    9f28:	e7 c2       	rjmp	.+1486   	; 0xa4f8 <menu_up+0xc90>
			break;
		if (serial_num_temp[cursor] != '9')
    9f2a:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    9f2e:	90 e0       	ldi	r25, 0x00	; 0
    9f30:	fc 01       	movw	r30, r24
    9f32:	e4 54       	subi	r30, 0x44	; 68
    9f34:	f8 4d       	sbci	r31, 0xD8	; 216
    9f36:	20 81       	ld	r18, Z
    9f38:	29 33       	cpi	r18, 0x39	; 57
    9f3a:	29 f0       	breq	.+10     	; 0x9f46 <menu_up+0x6de>
			serial_num_temp[cursor]++;
    9f3c:	fc 01       	movw	r30, r24
    9f3e:	e4 54       	subi	r30, 0x44	; 68
    9f40:	f8 4d       	sbci	r31, 0xD8	; 216
    9f42:	2f 5f       	subi	r18, 0xFF	; 255
    9f44:	20 83       	st	Z, r18
		lcd_write_new(serial_num_temp);
    9f46:	8c eb       	ldi	r24, 0xBC	; 188
    9f48:	97 e2       	ldi	r25, 0x27	; 39
    9f4a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, cursor);
    9f4e:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    9f52:	80 e0       	ldi	r24, 0x00	; 0
    9f54:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    9f58:	cf c2       	rjmp	.+1438   	; 0xa4f8 <menu_up+0xc90>

	case SET_A3_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    9f5a:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    9f5e:	88 23       	and	r24, r24
    9f60:	09 f4       	brne	.+2      	; 0x9f64 <menu_up+0x6fc>
    9f62:	ca c2       	rjmp	.+1428   	; 0xa4f8 <menu_up+0xc90>
			break;
		if (serial_num_temp[cursor] != '9')
    9f64:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    9f68:	90 e0       	ldi	r25, 0x00	; 0
    9f6a:	fc 01       	movw	r30, r24
    9f6c:	e4 54       	subi	r30, 0x44	; 68
    9f6e:	f8 4d       	sbci	r31, 0xD8	; 216
    9f70:	20 81       	ld	r18, Z
    9f72:	29 33       	cpi	r18, 0x39	; 57
    9f74:	29 f0       	breq	.+10     	; 0x9f80 <menu_up+0x718>
			serial_num_temp[cursor]++;
    9f76:	fc 01       	movw	r30, r24
    9f78:	e4 54       	subi	r30, 0x44	; 68
    9f7a:	f8 4d       	sbci	r31, 0xD8	; 216
    9f7c:	2f 5f       	subi	r18, 0xFF	; 255
    9f7e:	20 83       	st	Z, r18
		lcd_write_new(serial_num_temp);
    9f80:	8c eb       	ldi	r24, 0xBC	; 188
    9f82:	97 e2       	ldi	r25, 0x27	; 39
    9f84:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, cursor);
    9f88:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    9f8c:	80 e0       	ldi	r24, 0x00	; 0
    9f8e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    9f92:	b2 c2       	rjmp	.+1380   	; 0xa4f8 <menu_up+0xc90>

		/******************************************************************************************************************************/

	case RUN_TIME_MENU:
		current_menu = SET_SERIAL_NUM_MENU;
    9f94:	80 e9       	ldi	r24, 0x90	; 144
    9f96:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET SERIAL NUM"));
    9f9a:	80 e8       	ldi	r24, 0x80	; 128
    9f9c:	9e e1       	ldi	r25, 0x1E	; 30
    9f9e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    9fa2:	aa c2       	rjmp	.+1364   	; 0xa4f8 <menu_up+0xc90>

		/*-------------------------------------------------------------------------------*/

	case RUN_TIME_VAL_MENU:
		if (!admin_mode)
    9fa4:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    9fa8:	88 23       	and	r24, r24
    9faa:	09 f4       	brne	.+2      	; 0x9fae <menu_up+0x746>
    9fac:	a5 c2       	rjmp	.+1354   	; 0xa4f8 <menu_up+0xc90>
			break;
		if (cursor < 5)
    9fae:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    9fb2:	85 30       	cpi	r24, 0x05	; 5
    9fb4:	e8 f5       	brcc	.+122    	; 0xa030 <menu_up+0x7c8>
		{
			if (cursor == 0 && run_time_hour_arr[0] == '5')
    9fb6:	81 11       	cpse	r24, r1
    9fb8:	05 c0       	rjmp	.+10     	; 0x9fc4 <menu_up+0x75c>
    9fba:	90 91 cd 27 	lds	r25, 0x27CD	; 0x8027cd <run_time_hour_arr>
    9fbe:	95 33       	cpi	r25, 0x35	; 53
    9fc0:	09 f4       	brne	.+2      	; 0x9fc4 <menu_up+0x75c>
    9fc2:	9a c2       	rjmp	.+1332   	; 0xa4f8 <menu_up+0xc90>
			{
				break;
			}
			if (run_time_hour_arr[cursor] == '9')
    9fc4:	90 e0       	ldi	r25, 0x00	; 0
    9fc6:	fc 01       	movw	r30, r24
    9fc8:	e3 53       	subi	r30, 0x33	; 51
    9fca:	f8 4d       	sbci	r31, 0xD8	; 216
    9fcc:	20 81       	ld	r18, Z
    9fce:	29 33       	cpi	r18, 0x39	; 57
    9fd0:	09 f4       	brne	.+2      	; 0x9fd4 <menu_up+0x76c>
    9fd2:	92 c2       	rjmp	.+1316   	; 0xa4f8 <menu_up+0xc90>
			{
				break;
			}
			run_time_hour_arr[cursor]++;
    9fd4:	4d ec       	ldi	r20, 0xCD	; 205
    9fd6:	57 e2       	ldi	r21, 0x27	; 39
    9fd8:	fc 01       	movw	r30, r24
    9fda:	e3 53       	subi	r30, 0x33	; 51
    9fdc:	f8 4d       	sbci	r31, 0xD8	; 216
    9fde:	2f 5f       	subi	r18, 0xFF	; 255
    9fe0:	20 83       	st	Z, r18
			sprintf(temp, "%s:%s", run_time_hour_arr, run_time_min_arr);
    9fe2:	89 ee       	ldi	r24, 0xE9	; 233
    9fe4:	97 e2       	ldi	r25, 0x27	; 39
    9fe6:	9f 93       	push	r25
    9fe8:	8f 93       	push	r24
    9fea:	5f 93       	push	r21
    9fec:	4f 93       	push	r20
    9fee:	81 e2       	ldi	r24, 0x21	; 33
    9ff0:	91 e2       	ldi	r25, 0x21	; 33
    9ff2:	9f 93       	push	r25
    9ff4:	8f 93       	push	r24
    9ff6:	83 ed       	ldi	r24, 0xD3	; 211
    9ff8:	97 e2       	ldi	r25, 0x27	; 39
    9ffa:	9f 93       	push	r25
    9ffc:	8f 93       	push	r24
    9ffe:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    a002:	83 ed       	ldi	r24, 0xD3	; 211
    a004:	97 e2       	ldi	r25, 0x27	; 39
    a006:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(1, 0);
    a00a:	60 e0       	ldi	r22, 0x00	; 0
    a00c:	81 e0       	ldi	r24, 0x01	; 1
    a00e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("HOURS:MINUTES"));
    a012:	82 e7       	ldi	r24, 0x72	; 114
    a014:	9e e1       	ldi	r25, 0x1E	; 30
    a016:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_set_cursor(0, cursor);
    a01a:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    a01e:	80 e0       	ldi	r24, 0x00	; 0
    a020:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    a024:	8d b7       	in	r24, 0x3d	; 61
    a026:	9e b7       	in	r25, 0x3e	; 62
    a028:	08 96       	adiw	r24, 0x08	; 8
    a02a:	8d bf       	out	0x3d, r24	; 61
    a02c:	9e bf       	out	0x3e, r25	; 62
    a02e:	64 c2       	rjmp	.+1224   	; 0xa4f8 <menu_up+0xc90>
		}
		else
		{
			if (cursor == 5 && run_time_min_arr[0] == '5')
    a030:	85 30       	cpi	r24, 0x05	; 5
    a032:	29 f4       	brne	.+10     	; 0xa03e <menu_up+0x7d6>
    a034:	90 91 e9 27 	lds	r25, 0x27E9	; 0x8027e9 <run_time_min_arr>
    a038:	95 33       	cpi	r25, 0x35	; 53
    a03a:	09 f4       	brne	.+2      	; 0xa03e <menu_up+0x7d6>
    a03c:	5d c2       	rjmp	.+1210   	; 0xa4f8 <menu_up+0xc90>
			{
				break;
			}
			if (run_time_min_arr[cursor - 5] == '9')
    a03e:	90 e0       	ldi	r25, 0x00	; 0
    a040:	05 97       	sbiw	r24, 0x05	; 5
    a042:	fc 01       	movw	r30, r24
    a044:	e7 51       	subi	r30, 0x17	; 23
    a046:	f8 4d       	sbci	r31, 0xD8	; 216
    a048:	20 81       	ld	r18, Z
    a04a:	29 33       	cpi	r18, 0x39	; 57
    a04c:	09 f4       	brne	.+2      	; 0xa050 <menu_up+0x7e8>
    a04e:	54 c2       	rjmp	.+1192   	; 0xa4f8 <menu_up+0xc90>
			{
				break;
			}
			run_time_min_arr[cursor - 5]++;
    a050:	49 ee       	ldi	r20, 0xE9	; 233
    a052:	57 e2       	ldi	r21, 0x27	; 39
    a054:	fc 01       	movw	r30, r24
    a056:	e7 51       	subi	r30, 0x17	; 23
    a058:	f8 4d       	sbci	r31, 0xD8	; 216
    a05a:	2f 5f       	subi	r18, 0xFF	; 255
    a05c:	20 83       	st	Z, r18
			sprintf(temp, "%s:%s", run_time_hour_arr, run_time_min_arr);
    a05e:	5f 93       	push	r21
    a060:	4f 93       	push	r20
    a062:	8d ec       	ldi	r24, 0xCD	; 205
    a064:	97 e2       	ldi	r25, 0x27	; 39
    a066:	9f 93       	push	r25
    a068:	8f 93       	push	r24
    a06a:	81 e2       	ldi	r24, 0x21	; 33
    a06c:	91 e2       	ldi	r25, 0x21	; 33
    a06e:	9f 93       	push	r25
    a070:	8f 93       	push	r24
    a072:	83 ed       	ldi	r24, 0xD3	; 211
    a074:	97 e2       	ldi	r25, 0x27	; 39
    a076:	9f 93       	push	r25
    a078:	8f 93       	push	r24
    a07a:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    a07e:	83 ed       	ldi	r24, 0xD3	; 211
    a080:	97 e2       	ldi	r25, 0x27	; 39
    a082:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(1, 0);
    a086:	60 e0       	ldi	r22, 0x00	; 0
    a088:	81 e0       	ldi	r24, 0x01	; 1
    a08a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("HOURS:MINUTES"));
    a08e:	84 e6       	ldi	r24, 0x64	; 100
    a090:	9e e1       	ldi	r25, 0x1E	; 30
    a092:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_set_cursor(0, cursor + 1);
    a096:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    a09a:	6f 5f       	subi	r22, 0xFF	; 255
    a09c:	80 e0       	ldi	r24, 0x00	; 0
    a09e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    a0a2:	8d b7       	in	r24, 0x3d	; 61
    a0a4:	9e b7       	in	r25, 0x3e	; 62
    a0a6:	08 96       	adiw	r24, 0x08	; 8
    a0a8:	8d bf       	out	0x3d, r24	; 61
    a0aa:	9e bf       	out	0x3e, r25	; 62
    a0ac:	25 c2       	rjmp	.+1098   	; 0xa4f8 <menu_up+0xc90>
		break;

		/******************************************************************************************************************************/

	case STATISTICS_MENU:
		current_menu = RUN_TIME_MENU;
    a0ae:	80 e7       	ldi	r24, 0x70	; 112
    a0b0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RUN TIME"));
    a0b4:	8b e5       	ldi	r24, 0x5B	; 91
    a0b6:	9e e1       	ldi	r25, 0x1E	; 30
    a0b8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a0bc:	1d c2       	rjmp	.+1082   	; 0xa4f8 <menu_up+0xc90>

	case BRUSH_STAT_MENU:
		break;

	case VACUUM_STAT_MENU:
		current_menu = BRUSH_STAT_MENU;
    a0be:	81 eb       	ldi	r24, 0xB1	; 177
    a0c0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH STATISTICS"));
    a0c4:	8a e4       	ldi	r24, 0x4A	; 74
    a0c6:	9e e1       	ldi	r25, 0x1E	; 30
    a0c8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a0cc:	15 c2       	rjmp	.+1066   	; 0xa4f8 <menu_up+0xc90>

	case PRESWEEP_STAT_MENU:
		current_menu = VACUUM_STAT_MENU;
    a0ce:	82 eb       	ldi	r24, 0xB2	; 178
    a0d0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM STATISTICS"));
    a0d4:	88 e3       	ldi	r24, 0x38	; 56
    a0d6:	9e e1       	ldi	r25, 0x1E	; 30
    a0d8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a0dc:	0d c2       	rjmp	.+1050   	; 0xa4f8 <menu_up+0xc90>

	case WATER_PUMP_STAT_MENU:
		current_menu = PRESWEEP_STAT_MENU;
    a0de:	83 eb       	ldi	r24, 0xB3	; 179
    a0e0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP STATISTICS"));
    a0e4:	84 e2       	ldi	r24, 0x24	; 36
    a0e6:	9e e1       	ldi	r25, 0x1E	; 30
    a0e8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a0ec:	05 c2       	rjmp	.+1034   	; 0xa4f8 <menu_up+0xc90>

	case DETERGENT_PUMP_STAT_MENU:
		current_menu = WATER_PUMP_STAT_MENU;
    a0ee:	84 eb       	ldi	r24, 0xB4	; 180
    a0f0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("WATER PUMP"));
    a0f4:	89 e1       	ldi	r24, 0x19	; 25
    a0f6:	9e e1       	ldi	r25, 0x1E	; 30
    a0f8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a0fc:	60 e0       	ldi	r22, 0x00	; 0
    a0fe:	81 e0       	ldi	r24, 0x01	; 1
    a100:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("STATISTICS"));
    a104:	8e e0       	ldi	r24, 0x0E	; 14
    a106:	9e e1       	ldi	r25, 0x1E	; 30
    a108:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    a10c:	f5 c1       	rjmp	.+1002   	; 0xa4f8 <menu_up+0xc90>

	case ECO_HOURS_MENU:
		current_menu = DETERGENT_PUMP_STAT_MENU;
    a10e:	85 eb       	ldi	r24, 0xB5	; 181
    a110:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DETERGENT PUMP"));
    a114:	8f ef       	ldi	r24, 0xFF	; 255
    a116:	9d e1       	ldi	r25, 0x1D	; 29
    a118:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a11c:	60 e0       	ldi	r22, 0x00	; 0
    a11e:	81 e0       	ldi	r24, 0x01	; 1
    a120:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("STATISTICS"));
    a124:	84 ef       	ldi	r24, 0xF4	; 244
    a126:	9d e1       	ldi	r25, 0x1D	; 29
    a128:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    a12c:	e5 c1       	rjmp	.+970    	; 0xa4f8 <menu_up+0xc90>

	case BRUSH_HOURS_MENU:
		break;

	case BRUSH1_AVERAGE_CURRENT_MENU:
		current_menu = BRUSH_HOURS_MENU;
    a12e:	86 eb       	ldi	r24, 0xB6	; 182
    a130:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH HOURS"));
    a134:	88 ee       	ldi	r24, 0xE8	; 232
    a136:	9d e1       	ldi	r25, 0x1D	; 29
    a138:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a13c:	60 e0       	ldi	r22, 0x00	; 0
    a13e:	81 e0       	ldi	r24, 0x01	; 1
    a140:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush_hours);
    a144:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <brush_hours+0x1>
    a148:	8f 93       	push	r24
    a14a:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <brush_hours>
    a14e:	8f 93       	push	r24
    a150:	87 e2       	ldi	r24, 0x27	; 39
    a152:	91 e2       	ldi	r25, 0x21	; 33
    a154:	9f 93       	push	r25
    a156:	8f 93       	push	r24
    a158:	83 ed       	ldi	r24, 0xD3	; 211
    a15a:	97 e2       	ldi	r25, 0x27	; 39
    a15c:	9f 93       	push	r25
    a15e:	8f 93       	push	r24
    a160:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a164:	83 ed       	ldi	r24, 0xD3	; 211
    a166:	97 e2       	ldi	r25, 0x27	; 39
    a168:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a16c:	0f 90       	pop	r0
    a16e:	0f 90       	pop	r0
    a170:	0f 90       	pop	r0
    a172:	0f 90       	pop	r0
    a174:	0f 90       	pop	r0
    a176:	0f 90       	pop	r0
    a178:	bf c1       	rjmp	.+894    	; 0xa4f8 <menu_up+0xc90>

	case BRUSH1_MAX_CURRENT_MENU:
		current_menu = BRUSH1_AVERAGE_CURRENT_MENU;
    a17a:	87 eb       	ldi	r24, 0xB7	; 183
    a17c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 1 AVG CURRENT"));
    a180:	84 ed       	ldi	r24, 0xD4	; 212
    a182:	9d e1       	ldi	r25, 0x1D	; 29
    a184:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a188:	60 e0       	ldi	r22, 0x00	; 0
    a18a:	81 e0       	ldi	r24, 0x01	; 1
    a18c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush1_average_current);
    a190:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <brush1_average_current+0x1>
    a194:	8f 93       	push	r24
    a196:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <brush1_average_current>
    a19a:	8f 93       	push	r24
    a19c:	87 e2       	ldi	r24, 0x27	; 39
    a19e:	91 e2       	ldi	r25, 0x21	; 33
    a1a0:	9f 93       	push	r25
    a1a2:	8f 93       	push	r24
    a1a4:	83 ed       	ldi	r24, 0xD3	; 211
    a1a6:	97 e2       	ldi	r25, 0x27	; 39
    a1a8:	9f 93       	push	r25
    a1aa:	8f 93       	push	r24
    a1ac:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a1b0:	83 ed       	ldi	r24, 0xD3	; 211
    a1b2:	97 e2       	ldi	r25, 0x27	; 39
    a1b4:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a1b8:	0f 90       	pop	r0
    a1ba:	0f 90       	pop	r0
    a1bc:	0f 90       	pop	r0
    a1be:	0f 90       	pop	r0
    a1c0:	0f 90       	pop	r0
    a1c2:	0f 90       	pop	r0
    a1c4:	99 c1       	rjmp	.+818    	; 0xa4f8 <menu_up+0xc90>

	case BRUSH2_AVERAGE_CURRENT_MENU:
		current_menu = BRUSH1_MAX_CURRENT_MENU;
    a1c6:	88 eb       	ldi	r24, 0xB8	; 184
    a1c8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 1 MAX CURRENT"));
    a1cc:	80 ec       	ldi	r24, 0xC0	; 192
    a1ce:	9d e1       	ldi	r25, 0x1D	; 29
    a1d0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a1d4:	60 e0       	ldi	r22, 0x00	; 0
    a1d6:	81 e0       	ldi	r24, 0x01	; 1
    a1d8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush1_max_current);
    a1dc:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <brush1_max_current+0x1>
    a1e0:	8f 93       	push	r24
    a1e2:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <brush1_max_current>
    a1e6:	8f 93       	push	r24
    a1e8:	87 e2       	ldi	r24, 0x27	; 39
    a1ea:	91 e2       	ldi	r25, 0x21	; 33
    a1ec:	9f 93       	push	r25
    a1ee:	8f 93       	push	r24
    a1f0:	83 ed       	ldi	r24, 0xD3	; 211
    a1f2:	97 e2       	ldi	r25, 0x27	; 39
    a1f4:	9f 93       	push	r25
    a1f6:	8f 93       	push	r24
    a1f8:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a1fc:	83 ed       	ldi	r24, 0xD3	; 211
    a1fe:	97 e2       	ldi	r25, 0x27	; 39
    a200:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a204:	0f 90       	pop	r0
    a206:	0f 90       	pop	r0
    a208:	0f 90       	pop	r0
    a20a:	0f 90       	pop	r0
    a20c:	0f 90       	pop	r0
    a20e:	0f 90       	pop	r0
    a210:	73 c1       	rjmp	.+742    	; 0xa4f8 <menu_up+0xc90>

	case BRUSH2_MAX_CURRENT_MENU:
		current_menu = BRUSH2_AVERAGE_CURRENT_MENU;
    a212:	89 eb       	ldi	r24, 0xB9	; 185
    a214:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 2 AVG CURRENT"));
    a218:	8c ea       	ldi	r24, 0xAC	; 172
    a21a:	9d e1       	ldi	r25, 0x1D	; 29
    a21c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a220:	60 e0       	ldi	r22, 0x00	; 0
    a222:	81 e0       	ldi	r24, 0x01	; 1
    a224:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush2_average_current);
    a228:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <brush2_average_current+0x1>
    a22c:	8f 93       	push	r24
    a22e:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <brush2_average_current>
    a232:	8f 93       	push	r24
    a234:	87 e2       	ldi	r24, 0x27	; 39
    a236:	91 e2       	ldi	r25, 0x21	; 33
    a238:	9f 93       	push	r25
    a23a:	8f 93       	push	r24
    a23c:	83 ed       	ldi	r24, 0xD3	; 211
    a23e:	97 e2       	ldi	r25, 0x27	; 39
    a240:	9f 93       	push	r25
    a242:	8f 93       	push	r24
    a244:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a248:	83 ed       	ldi	r24, 0xD3	; 211
    a24a:	97 e2       	ldi	r25, 0x27	; 39
    a24c:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a250:	0f 90       	pop	r0
    a252:	0f 90       	pop	r0
    a254:	0f 90       	pop	r0
    a256:	0f 90       	pop	r0
    a258:	0f 90       	pop	r0
    a25a:	0f 90       	pop	r0
    a25c:	4d c1       	rjmp	.+666    	; 0xa4f8 <menu_up+0xc90>

	case VACUUM_HOURS_MENU:
		break;

	case VACUUM_AVERAGE_CURRENT_MENU:
		current_menu = VACUUM_HOURS_MENU;
    a25e:	8b eb       	ldi	r24, 0xBB	; 187
    a260:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM HOURS"));
    a264:	8f e9       	ldi	r24, 0x9F	; 159
    a266:	9d e1       	ldi	r25, 0x1D	; 29
    a268:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a26c:	60 e0       	ldi	r22, 0x00	; 0
    a26e:	81 e0       	ldi	r24, 0x01	; 1
    a270:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", vacuum_hours);
    a274:	80 91 fa 22 	lds	r24, 0x22FA	; 0x8022fa <vacuum_hours+0x1>
    a278:	8f 93       	push	r24
    a27a:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <vacuum_hours>
    a27e:	8f 93       	push	r24
    a280:	87 e2       	ldi	r24, 0x27	; 39
    a282:	91 e2       	ldi	r25, 0x21	; 33
    a284:	9f 93       	push	r25
    a286:	8f 93       	push	r24
    a288:	83 ed       	ldi	r24, 0xD3	; 211
    a28a:	97 e2       	ldi	r25, 0x27	; 39
    a28c:	9f 93       	push	r25
    a28e:	8f 93       	push	r24
    a290:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a294:	83 ed       	ldi	r24, 0xD3	; 211
    a296:	97 e2       	ldi	r25, 0x27	; 39
    a298:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a29c:	0f 90       	pop	r0
    a29e:	0f 90       	pop	r0
    a2a0:	0f 90       	pop	r0
    a2a2:	0f 90       	pop	r0
    a2a4:	0f 90       	pop	r0
    a2a6:	0f 90       	pop	r0
    a2a8:	27 c1       	rjmp	.+590    	; 0xa4f8 <menu_up+0xc90>

	case VACUUM_MAX_CURRENT_MENU:
		current_menu = VACUUM_AVERAGE_CURRENT_MENU;
    a2aa:	8c eb       	ldi	r24, 0xBC	; 188
    a2ac:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM AVG CURRENT"));
    a2b0:	8c e8       	ldi	r24, 0x8C	; 140
    a2b2:	9d e1       	ldi	r25, 0x1D	; 29
    a2b4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a2b8:	60 e0       	ldi	r22, 0x00	; 0
    a2ba:	81 e0       	ldi	r24, 0x01	; 1
    a2bc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", vacuum_average_current);
    a2c0:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <vacuum_average_current+0x1>
    a2c4:	8f 93       	push	r24
    a2c6:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <vacuum_average_current>
    a2ca:	8f 93       	push	r24
    a2cc:	87 e2       	ldi	r24, 0x27	; 39
    a2ce:	91 e2       	ldi	r25, 0x21	; 33
    a2d0:	9f 93       	push	r25
    a2d2:	8f 93       	push	r24
    a2d4:	83 ed       	ldi	r24, 0xD3	; 211
    a2d6:	97 e2       	ldi	r25, 0x27	; 39
    a2d8:	9f 93       	push	r25
    a2da:	8f 93       	push	r24
    a2dc:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a2e0:	83 ed       	ldi	r24, 0xD3	; 211
    a2e2:	97 e2       	ldi	r25, 0x27	; 39
    a2e4:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a2e8:	0f 90       	pop	r0
    a2ea:	0f 90       	pop	r0
    a2ec:	0f 90       	pop	r0
    a2ee:	0f 90       	pop	r0
    a2f0:	0f 90       	pop	r0
    a2f2:	0f 90       	pop	r0
    a2f4:	01 c1       	rjmp	.+514    	; 0xa4f8 <menu_up+0xc90>

	case PRESWEEP_HOURS_MENU:
		break;

	case PRESWEEP_AVERAGE_CURRENT_MENU:
		current_menu = PRESWEEP_HOURS_MENU;
    a2f6:	8e eb       	ldi	r24, 0xBE	; 190
    a2f8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP HOURS"));
    a2fc:	8d e7       	ldi	r24, 0x7D	; 125
    a2fe:	9d e1       	ldi	r25, 0x1D	; 29
    a300:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a304:	60 e0       	ldi	r22, 0x00	; 0
    a306:	81 e0       	ldi	r24, 0x01	; 1
    a308:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", presweep_hours);
    a30c:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <presweep_hours+0x1>
    a310:	8f 93       	push	r24
    a312:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <presweep_hours>
    a316:	8f 93       	push	r24
    a318:	87 e2       	ldi	r24, 0x27	; 39
    a31a:	91 e2       	ldi	r25, 0x21	; 33
    a31c:	9f 93       	push	r25
    a31e:	8f 93       	push	r24
    a320:	83 ed       	ldi	r24, 0xD3	; 211
    a322:	97 e2       	ldi	r25, 0x27	; 39
    a324:	9f 93       	push	r25
    a326:	8f 93       	push	r24
    a328:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a32c:	83 ed       	ldi	r24, 0xD3	; 211
    a32e:	97 e2       	ldi	r25, 0x27	; 39
    a330:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a334:	0f 90       	pop	r0
    a336:	0f 90       	pop	r0
    a338:	0f 90       	pop	r0
    a33a:	0f 90       	pop	r0
    a33c:	0f 90       	pop	r0
    a33e:	0f 90       	pop	r0
    a340:	db c0       	rjmp	.+438    	; 0xa4f8 <menu_up+0xc90>

	case PRESWEEP_MAX_CURRENT_MENU:
		current_menu = PRESWEEP_AVERAGE_CURRENT_MENU;
    a342:	8f eb       	ldi	r24, 0xBF	; 191
    a344:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP AVG CURRENT"));
    a348:	88 e6       	ldi	r24, 0x68	; 104
    a34a:	9d e1       	ldi	r25, 0x1D	; 29
    a34c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a350:	60 e0       	ldi	r22, 0x00	; 0
    a352:	81 e0       	ldi	r24, 0x01	; 1
    a354:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", presweep_average_current);
    a358:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <presweep_average_current+0x1>
    a35c:	8f 93       	push	r24
    a35e:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <presweep_average_current>
    a362:	8f 93       	push	r24
    a364:	87 e2       	ldi	r24, 0x27	; 39
    a366:	91 e2       	ldi	r25, 0x21	; 33
    a368:	9f 93       	push	r25
    a36a:	8f 93       	push	r24
    a36c:	83 ed       	ldi	r24, 0xD3	; 211
    a36e:	97 e2       	ldi	r25, 0x27	; 39
    a370:	9f 93       	push	r25
    a372:	8f 93       	push	r24
    a374:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    a378:	83 ed       	ldi	r24, 0xD3	; 211
    a37a:	97 e2       	ldi	r25, 0x27	; 39
    a37c:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a380:	0f 90       	pop	r0
    a382:	0f 90       	pop	r0
    a384:	0f 90       	pop	r0
    a386:	0f 90       	pop	r0
    a388:	0f 90       	pop	r0
    a38a:	0f 90       	pop	r0
    a38c:	b5 c0       	rjmp	.+362    	; 0xa4f8 <menu_up+0xc90>

		/******************************************************************************************************************************/

	case DEFAULT_MENU:
		current_menu = STATISTICS_MENU;
    a38e:	80 eb       	ldi	r24, 0xB0	; 176
    a390:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    a394:	8d e5       	ldi	r24, 0x5D	; 93
    a396:	9d e1       	ldi	r25, 0x1D	; 29
    a398:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a39c:	ad c0       	rjmp	.+346    	; 0xa4f8 <menu_up+0xc90>

		/*-------------------------------------------------------------------------------*/

	case DEFAULT_CONFIRM_MENU:
		lcd_write_new_P(PSTR("RESET OPERATION"));
    a39e:	8d e4       	ldi	r24, 0x4D	; 77
    a3a0:	9d e1       	ldi	r25, 0x1D	; 29
    a3a2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a3a6:	60 e0       	ldi	r22, 0x00	; 0
    a3a8:	81 e0       	ldi	r24, 0x01	; 1
    a3aa:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    a3ae:	83 e4       	ldi	r24, 0x43	; 67
    a3b0:	9d e1       	ldi	r25, 0x1D	; 29
    a3b2:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    a3b6:	9f ef       	ldi	r25, 0xFF	; 255
    a3b8:	2f e4       	ldi	r18, 0x4F	; 79
    a3ba:	83 ec       	ldi	r24, 0xC3	; 195
    a3bc:	91 50       	subi	r25, 0x01	; 1
    a3be:	20 40       	sbci	r18, 0x00	; 0
    a3c0:	80 40       	sbci	r24, 0x00	; 0
    a3c2:	e1 f7       	brne	.-8      	; 0xa3bc <menu_up+0xb54>
    a3c4:	00 c0       	rjmp	.+0      	; 0xa3c6 <menu_up+0xb5e>
    a3c6:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    a3c8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = DEFAULT_MENU;
    a3cc:	84 e0       	ldi	r24, 0x04	; 4
    a3ce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RESET TO DEFAULT"));
    a3d2:	82 e3       	ldi	r24, 0x32	; 50
    a3d4:	9d e1       	ldi	r25, 0x1D	; 29
    a3d6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a3da:	8e c0       	rjmp	.+284    	; 0xa4f8 <menu_up+0xc90>

		/******************************************************************************************************************************/

	case CLEAR_SD_CARD_MENU:
		current_menu = DEFAULT_MENU;
    a3dc:	84 e0       	ldi	r24, 0x04	; 4
    a3de:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RESET TO DEFAULT"));
    a3e2:	81 e2       	ldi	r24, 0x21	; 33
    a3e4:	9d e1       	ldi	r25, 0x1D	; 29
    a3e6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a3ea:	86 c0       	rjmp	.+268    	; 0xa4f8 <menu_up+0xc90>

	case CLEAR_SD_CARD_CONFIRM_MENU:
		lcd_write_new_P(PSTR("CLEAR OPERATION"));
    a3ec:	81 e1       	ldi	r24, 0x11	; 17
    a3ee:	9d e1       	ldi	r25, 0x1D	; 29
    a3f0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a3f4:	60 e0       	ldi	r22, 0x00	; 0
    a3f6:	81 e0       	ldi	r24, 0x01	; 1
    a3f8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    a3fc:	87 e0       	ldi	r24, 0x07	; 7
    a3fe:	9d e1       	ldi	r25, 0x1D	; 29
    a400:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    a404:	9f ef       	ldi	r25, 0xFF	; 255
    a406:	2f e4       	ldi	r18, 0x4F	; 79
    a408:	83 ec       	ldi	r24, 0xC3	; 195
    a40a:	91 50       	subi	r25, 0x01	; 1
    a40c:	20 40       	sbci	r18, 0x00	; 0
    a40e:	80 40       	sbci	r24, 0x00	; 0
    a410:	e1 f7       	brne	.-8      	; 0xa40a <menu_up+0xba2>
    a412:	00 c0       	rjmp	.+0      	; 0xa414 <menu_up+0xbac>
    a414:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    a416:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = CLEAR_SD_CARD_MENU;
    a41a:	80 ed       	ldi	r24, 0xD0	; 208
    a41c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CLEAR SD CARD"));
    a420:	89 ef       	ldi	r24, 0xF9	; 249
    a422:	9c e1       	ldi	r25, 0x1C	; 28
    a424:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a428:	67 c0       	rjmp	.+206    	; 0xa4f8 <menu_up+0xc90>

		/******************************************************************************************************************************/

	case ABOUT_MENU:
		current_menu = CLEAR_SD_CARD_MENU;
    a42a:	80 ed       	ldi	r24, 0xD0	; 208
    a42c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CLEAR SD CARD"));
    a430:	8b ee       	ldi	r24, 0xEB	; 235
    a432:	9c e1       	ldi	r25, 0x1C	; 28
    a434:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a438:	5f c0       	rjmp	.+190    	; 0xa4f8 <menu_up+0xc90>

	case RB800_MENU:
		break;

	case A1_MENU:
		current_menu = RB800_MENU;
    a43a:	8a ea       	ldi	r24, 0xAA	; 170
    a43c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT RB800"));
    a440:	8f ed       	ldi	r24, 0xDF	; 223
    a442:	9c e1       	ldi	r25, 0x1C	; 28
    a444:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a448:	57 c0       	rjmp	.+174    	; 0xa4f8 <menu_up+0xc90>

	case A2_MENU:
		current_menu = A1_MENU;
    a44a:	81 ea       	ldi	r24, 0xA1	; 161
    a44c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    a450:	86 ed       	ldi	r24, 0xD6	; 214
    a452:	9c e1       	ldi	r25, 0x1C	; 28
    a454:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a458:	4f c0       	rjmp	.+158    	; 0xa4f8 <menu_up+0xc90>

	case A3_MENU:
		current_menu = A2_MENU;
    a45a:	82 ea       	ldi	r24, 0xA2	; 162
    a45c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    a460:	8d ec       	ldi	r24, 0xCD	; 205
    a462:	9c e1       	ldi	r25, 0x1C	; 28
    a464:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a468:	47 c0       	rjmp	.+142    	; 0xa4f8 <menu_up+0xc90>

	case A1_SERIAL_NUM_MENU:
		break;

	case A1_PCB_MENU:
		current_menu = A1_SERIAL_NUM_MENU;
    a46a:	82 e6       	ldi	r24, 0x62	; 98
    a46c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A1 SERIAL NUM"));
    a470:	8f eb       	ldi	r24, 0xBF	; 191
    a472:	9c e1       	ldi	r25, 0x1C	; 28
    a474:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a478:	60 e0       	ldi	r22, 0x00	; 0
    a47a:	81 e0       	ldi	r24, 0x01	; 1
    a47c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A1_serial_num);
    a480:	88 e9       	ldi	r24, 0x98	; 152
    a482:	91 e2       	ldi	r25, 0x21	; 33
    a484:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a488:	37 c0       	rjmp	.+110    	; 0xa4f8 <menu_up+0xc90>

	case A1_FIRMWARE_MENU:
		current_menu = A1_PCB_MENU;
    a48a:	80 e4       	ldi	r24, 0x40	; 64
    a48c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A1_PCB);
    a490:	8b e4       	ldi	r24, 0x4B	; 75
    a492:	90 e2       	ldi	r25, 0x20	; 32
    a494:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a498:	2f c0       	rjmp	.+94     	; 0xa4f8 <menu_up+0xc90>

	case A2_SERIAL_NUM_MENU:
		break;

	case A2_PCB_MENU:
		current_menu = A2_SERIAL_NUM_MENU;
    a49a:	84 e6       	ldi	r24, 0x64	; 100
    a49c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A2 SERIAL NUM"));
    a4a0:	81 eb       	ldi	r24, 0xB1	; 177
    a4a2:	9c e1       	ldi	r25, 0x1C	; 28
    a4a4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a4a8:	60 e0       	ldi	r22, 0x00	; 0
    a4aa:	81 e0       	ldi	r24, 0x01	; 1
    a4ac:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A2_serial_num);
    a4b0:	86 e4       	ldi	r24, 0x46	; 70
    a4b2:	91 e2       	ldi	r25, 0x21	; 33
    a4b4:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a4b8:	1f c0       	rjmp	.+62     	; 0xa4f8 <menu_up+0xc90>

	case A2_FIRMWARE_MENU:
		current_menu = A2_PCB_MENU;
    a4ba:	84 e4       	ldi	r24, 0x44	; 68
    a4bc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A2_PCB);
    a4c0:	85 e7       	ldi	r24, 0x75	; 117
    a4c2:	90 e2       	ldi	r25, 0x20	; 32
    a4c4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a4c8:	17 c0       	rjmp	.+46     	; 0xa4f8 <menu_up+0xc90>

	case A3_SERIAL_NUM_MENU:
		break;

	case A3_PCB_MENU:
		current_menu = A3_SERIAL_NUM_MENU;
    a4ca:	86 e6       	ldi	r24, 0x66	; 102
    a4cc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A3 SERIAL NUM"));
    a4d0:	83 ea       	ldi	r24, 0xA3	; 163
    a4d2:	9c e1       	ldi	r25, 0x1C	; 28
    a4d4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a4d8:	60 e0       	ldi	r22, 0x00	; 0
    a4da:	81 e0       	ldi	r24, 0x01	; 1
    a4dc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A3_serial_num);
    a4e0:	8a eb       	ldi	r24, 0xBA	; 186
    a4e2:	91 e2       	ldi	r25, 0x21	; 33
    a4e4:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    a4e8:	07 c0       	rjmp	.+14     	; 0xa4f8 <menu_up+0xc90>

	case A3_FIRMWARE_MENU:
		current_menu = A3_PCB_MENU;
    a4ea:	88 e4       	ldi	r24, 0x48	; 72
    a4ec:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A3_PCB);
    a4f0:	8f e9       	ldi	r24, 0x9F	; 159
    a4f2:	90 e2       	ldi	r25, 0x20	; 32
    a4f4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>

		/******************************************************************************************************************************/

	default: break;
	}
}
    a4f8:	df 91       	pop	r29
    a4fa:	cf 91       	pop	r28
    a4fc:	1f 91       	pop	r17
    a4fe:	0f 91       	pop	r16
    a500:	ff 90       	pop	r15
    a502:	ef 90       	pop	r14
    a504:	08 95       	ret

0000a506 <menu_down>:

void menu_down(void)
{
    a506:	ef 92       	push	r14
    a508:	ff 92       	push	r15
    a50a:	0f 93       	push	r16
    a50c:	1f 93       	push	r17
    a50e:	cf 93       	push	r28
    a510:	df 93       	push	r29
	switch (current_menu)
    a512:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    a516:	8e 2f       	mov	r24, r30
    a518:	90 e0       	ldi	r25, 0x00	; 0
    a51a:	82 3d       	cpi	r24, 0xD2	; 210
    a51c:	91 05       	cpc	r25, r1
    a51e:	08 f0       	brcs	.+2      	; 0xa522 <menu_down+0x1c>
    a520:	81 c6       	rjmp	.+3330   	; 0xb224 <menu_down+0xd1e>
    a522:	fc 01       	movw	r30, r24
    a524:	e3 5d       	subi	r30, 0xD3	; 211
    a526:	fb 4f       	sbci	r31, 0xFB	; 251
    a528:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    a52c:	81 e0       	ldi	r24, 0x01	; 1
    a52e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    a532:	84 e9       	ldi	r24, 0x94	; 148
    a534:	9c e1       	ldi	r25, 0x1C	; 28
    a536:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a53a:	74 c6       	rjmp	.+3304   	; 0xb224 <menu_down+0xd1e>

		/******************************************************************************************************************************/

	case MOTOR_MENU:
		current_menu = BATTERY_MENU;
    a53c:	82 e0       	ldi	r24, 0x02	; 2
    a53e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY TYPE"));
    a542:	87 e8       	ldi	r24, 0x87	; 135
    a544:	9c e1       	ldi	r25, 0x1C	; 28
    a546:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a54a:	6c c6       	rjmp	.+3288   	; 0xb224 <menu_down+0xd1e>

		/*-------------------------------------------------------------------------------*/

	case ACCELERATION_MENU:
		current_menu = DECELERATION_MENU;
    a54c:	81 e1       	ldi	r24, 0x11	; 17
    a54e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DECELERATION"));
    a552:	8a e7       	ldi	r24, 0x7A	; 122
    a554:	9c e1       	ldi	r25, 0x1C	; 28
    a556:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a55a:	64 c6       	rjmp	.+3272   	; 0xb224 <menu_down+0xd1e>

	case DECELERATION_MENU:
		current_menu = BRAKE_DELAY_MENU;
    a55c:	82 e1       	ldi	r24, 0x12	; 18
    a55e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRAKE DELAY"));
    a562:	8e e6       	ldi	r24, 0x6E	; 110
    a564:	9c e1       	ldi	r25, 0x1C	; 28
    a566:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a56a:	5c c6       	rjmp	.+3256   	; 0xb224 <menu_down+0xd1e>

	case BRAKE_DELAY_MENU:
		current_menu = FORWARD_SPEED_MENU;
    a56c:	89 e1       	ldi	r24, 0x19	; 25
    a56e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    a572:	80 e6       	ldi	r24, 0x60	; 96
    a574:	9c e1       	ldi	r25, 0x1C	; 28
    a576:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a57a:	54 c6       	rjmp	.+3240   	; 0xb224 <menu_down+0xd1e>

	case FORWARD_SPEED_MENU:
		current_menu = REVERSE_SPEED_MENU;
    a57c:	83 e1       	ldi	r24, 0x13	; 19
    a57e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    a582:	82 e5       	ldi	r24, 0x52	; 82
    a584:	9c e1       	ldi	r25, 0x1C	; 28
    a586:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a58a:	4c c6       	rjmp	.+3224   	; 0xb224 <menu_down+0xd1e>

	case SLOW_SPEED_MENU:
		current_menu = FAST_SPEED_MENU;
    a58c:	85 e1       	ldi	r24, 0x15	; 21
    a58e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FAST SPEED"));
    a592:	87 e4       	ldi	r24, 0x47	; 71
    a594:	9c e1       	ldi	r25, 0x1C	; 28
    a596:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a59a:	44 c6       	rjmp	.+3208   	; 0xb224 <menu_down+0xd1e>

	case FAST_SPEED_MENU:
		break;

	case REVERSE_SPEED_MENU:
		current_menu = CURRENT_RATING_MENU;
    a59c:	86 e1       	ldi	r24, 0x16	; 22
    a59e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CURRENT RATING"));
    a5a2:	88 e3       	ldi	r24, 0x38	; 56
    a5a4:	9c e1       	ldi	r25, 0x1C	; 28
    a5a6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a5aa:	3c c6       	rjmp	.+3192   	; 0xb224 <menu_down+0xd1e>

	case CURRENT_RATING_MENU:
		current_menu = MAX_CURRENT_MENU;
    a5ac:	87 e1       	ldi	r24, 0x17	; 23
    a5ae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MAX CURRENT"));
    a5b2:	8c e2       	ldi	r24, 0x2C	; 44
    a5b4:	9c e1       	ldi	r25, 0x1C	; 28
    a5b6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a5ba:	34 c6       	rjmp	.+3176   	; 0xb224 <menu_down+0xd1e>

	case MAX_CURRENT_MENU:
		current_menu = OVERLOAD_TIME_MENU;
    a5bc:	88 e1       	ldi	r24, 0x18	; 24
    a5be:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("OVERLOAD TIME"));
    a5c2:	8e e1       	ldi	r24, 0x1E	; 30
    a5c4:	9c e1       	ldi	r25, 0x1C	; 28
    a5c6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a5ca:	2c c6       	rjmp	.+3160   	; 0xb224 <menu_down+0xd1e>

	case OVERLOAD_TIME_MENU:
		current_menu = POTENTIOMETER_MENU;
    a5cc:	80 e8       	ldi	r24, 0x80	; 128
    a5ce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    a5d2:	80 e1       	ldi	r24, 0x10	; 16
    a5d4:	9c e1       	ldi	r25, 0x1C	; 28
    a5d6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a5da:	60 e0       	ldi	r22, 0x00	; 0
    a5dc:	81 e0       	ldi	r24, 0x01	; 1
    a5de:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    a5e2:	87 e0       	ldi	r24, 0x07	; 7
    a5e4:	9c e1       	ldi	r25, 0x1C	; 28
    a5e6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    a5ea:	1c c6       	rjmp	.+3128   	; 0xb224 <menu_down+0xd1e>

		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = VACUUM_SETTINGS_MENU;
    a5ec:	8a e1       	ldi	r24, 0x1A	; 26
    a5ee:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM SETTINGS"));
    a5f2:	87 ef       	ldi	r24, 0xF7	; 247
    a5f4:	9b e1       	ldi	r25, 0x1B	; 27
    a5f6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a5fa:	14 c6       	rjmp	.+3112   	; 0xb224 <menu_down+0xd1e>

		//Choose the type of pot being used
	case POT_TYPE_MENU:
		current_menu = POT_CALIBRATION_MENU;
    a5fc:	82 e8       	ldi	r24, 0x82	; 130
    a5fe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    a602:	89 ee       	ldi	r24, 0xE9	; 233
    a604:	9b e1       	ldi	r25, 0x1B	; 27
    a606:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a60a:	60 e0       	ldi	r22, 0x00	; 0
    a60c:	81 e0       	ldi	r24, 0x01	; 1
    a60e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CALIBRATION"));
    a612:	8d ed       	ldi	r24, 0xDD	; 221
    a614:	9b e1       	ldi	r25, 0x1B	; 27
    a616:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    a61a:	04 c6       	rjmp	.+3080   	; 0xb224 <menu_down+0xd1e>

	case POT_CALIBRATION_VAL_MENU:
		break;

	case POT_RECALIBRATION_MENU:
		lcd_write_new_P(PSTR("RECALIBRATION"));
    a61c:	8f ec       	ldi	r24, 0xCF	; 207
    a61e:	9b e1       	ldi	r25, 0x1B	; 27
    a620:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    a624:	60 e0       	ldi	r22, 0x00	; 0
    a626:	81 e0       	ldi	r24, 0x01	; 1
    a628:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    a62c:	85 ec       	ldi	r24, 0xC5	; 197
    a62e:	9b e1       	ldi	r25, 0x1B	; 27
    a630:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_CANCELLED;
    a634:	8d ed       	ldi	r24, 0xDD	; 221
    a636:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    a63a:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    a63e:	2f ef       	ldi	r18, 0xFF	; 255
    a640:	3f e4       	ldi	r19, 0x4F	; 79
    a642:	83 ec       	ldi	r24, 0xC3	; 195
    a644:	21 50       	subi	r18, 0x01	; 1
    a646:	30 40       	sbci	r19, 0x00	; 0
    a648:	80 40       	sbci	r24, 0x00	; 0
    a64a:	e1 f7       	brne	.-8      	; 0xa644 <menu_down+0x13e>
    a64c:	00 c0       	rjmp	.+0      	; 0xa64e <menu_down+0x148>
    a64e:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    a650:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = POT_CALIBRATION_VAL_MENU;
    a654:	84 e8       	ldi	r24, 0x84	; 132
    a656:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    a65a:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    a65e:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    a662:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    a666:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    a66a:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    a66e:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    a672:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    a676:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    a67a:	9f 01       	movw	r18, r30
    a67c:	36 95       	lsr	r19
    a67e:	27 95       	ror	r18
    a680:	36 95       	lsr	r19
    a682:	27 95       	ror	r18
    a684:	36 95       	lsr	r19
    a686:	27 95       	ror	r18
    a688:	a5 ec       	ldi	r26, 0xC5	; 197
    a68a:	b0 e2       	ldi	r27, 0x20	; 32
    a68c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    a690:	92 95       	swap	r25
    a692:	82 95       	swap	r24
    a694:	8f 70       	andi	r24, 0x0F	; 15
    a696:	89 27       	eor	r24, r25
    a698:	9f 70       	andi	r25, 0x0F	; 15
    a69a:	89 27       	eor	r24, r25
    a69c:	0f 2e       	mov	r0, r31
    a69e:	f8 ee       	ldi	r31, 0xE8	; 232
    a6a0:	ef 2e       	mov	r14, r31
    a6a2:	f3 e0       	ldi	r31, 0x03	; 3
    a6a4:	ff 2e       	mov	r15, r31
    a6a6:	f0 2d       	mov	r31, r0
    a6a8:	8e 9d       	mul	r24, r14
    a6aa:	90 01       	movw	r18, r0
    a6ac:	8f 9d       	mul	r24, r15
    a6ae:	30 0d       	add	r19, r0
    a6b0:	9e 9d       	mul	r25, r14
    a6b2:	30 0d       	add	r19, r0
    a6b4:	11 24       	eor	r1, r1
    a6b6:	e2 1b       	sub	r30, r18
    a6b8:	f3 0b       	sbc	r31, r19
    a6ba:	ff 93       	push	r31
    a6bc:	ef 93       	push	r30
    a6be:	98 01       	movw	r18, r16
    a6c0:	36 95       	lsr	r19
    a6c2:	27 95       	ror	r18
    a6c4:	36 95       	lsr	r19
    a6c6:	27 95       	ror	r18
    a6c8:	36 95       	lsr	r19
    a6ca:	27 95       	ror	r18
    a6cc:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    a6d0:	92 95       	swap	r25
    a6d2:	82 95       	swap	r24
    a6d4:	8f 70       	andi	r24, 0x0F	; 15
    a6d6:	89 27       	eor	r24, r25
    a6d8:	9f 70       	andi	r25, 0x0F	; 15
    a6da:	89 27       	eor	r24, r25
    a6dc:	9f 93       	push	r25
    a6de:	8f 93       	push	r24
    a6e0:	9a 01       	movw	r18, r20
    a6e2:	36 95       	lsr	r19
    a6e4:	27 95       	ror	r18
    a6e6:	36 95       	lsr	r19
    a6e8:	27 95       	ror	r18
    a6ea:	36 95       	lsr	r19
    a6ec:	27 95       	ror	r18
    a6ee:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    a6f2:	92 95       	swap	r25
    a6f4:	82 95       	swap	r24
    a6f6:	8f 70       	andi	r24, 0x0F	; 15
    a6f8:	89 27       	eor	r24, r25
    a6fa:	9f 70       	andi	r25, 0x0F	; 15
    a6fc:	89 27       	eor	r24, r25
    a6fe:	8e 9d       	mul	r24, r14
    a700:	90 01       	movw	r18, r0
    a702:	8f 9d       	mul	r24, r15
    a704:	30 0d       	add	r19, r0
    a706:	9e 9d       	mul	r25, r14
    a708:	30 0d       	add	r19, r0
    a70a:	11 24       	eor	r1, r1
    a70c:	42 1b       	sub	r20, r18
    a70e:	53 0b       	sbc	r21, r19
    a710:	5f 93       	push	r21
    a712:	4f 93       	push	r20
    a714:	9e 01       	movw	r18, r28
    a716:	36 95       	lsr	r19
    a718:	27 95       	ror	r18
    a71a:	36 95       	lsr	r19
    a71c:	27 95       	ror	r18
    a71e:	36 95       	lsr	r19
    a720:	27 95       	ror	r18
    a722:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    a726:	92 95       	swap	r25
    a728:	82 95       	swap	r24
    a72a:	8f 70       	andi	r24, 0x0F	; 15
    a72c:	89 27       	eor	r24, r25
    a72e:	9f 70       	andi	r25, 0x0F	; 15
    a730:	89 27       	eor	r24, r25
    a732:	9f 93       	push	r25
    a734:	8f 93       	push	r24
    a736:	86 e0       	ldi	r24, 0x06	; 6
    a738:	90 e2       	ldi	r25, 0x20	; 32
    a73a:	9f 93       	push	r25
    a73c:	8f 93       	push	r24
    a73e:	83 ed       	ldi	r24, 0xD3	; 211
    a740:	97 e2       	ldi	r25, 0x27	; 39
    a742:	9f 93       	push	r25
    a744:	8f 93       	push	r24
    a746:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a74a:	83 ed       	ldi	r24, 0xD3	; 211
    a74c:	97 e2       	ldi	r25, 0x27	; 39
    a74e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    a752:	60 e0       	ldi	r22, 0x00	; 0
    a754:	81 e0       	ldi	r24, 0x01	; 1
    a756:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    a75a:	81 eb       	ldi	r24, 0xB1	; 177
    a75c:	9b e1       	ldi	r25, 0x1B	; 27
    a75e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    a762:	2d b7       	in	r18, 0x3d	; 61
    a764:	3e b7       	in	r19, 0x3e	; 62
    a766:	24 5f       	subi	r18, 0xF4	; 244
    a768:	3f 4f       	sbci	r19, 0xFF	; 255
    a76a:	2d bf       	out	0x3d, r18	; 61
    a76c:	3e bf       	out	0x3e, r19	; 62
    a76e:	5a c5       	rjmp	.+2740   	; 0xb224 <menu_down+0xd1e>

		/*--------------------------------------------------------------------------------*/

	case VACUUM_SETTINGS_MENU:
		current_menu = BRUSH_SETTINGS_MENU;
    a770:	8c e1       	ldi	r24, 0x1C	; 28
    a772:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH SETTINGS"));
    a776:	82 ea       	ldi	r24, 0xA2	; 162
    a778:	9b e1       	ldi	r25, 0x1B	; 27
    a77a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a77e:	52 c5       	rjmp	.+2724   	; 0xb224 <menu_down+0xd1e>

	case VACUUM_SLOW_START_MENU:
		break;

	case BRUSH_SETTINGS_MENU:
		current_menu = PRE_SWP_SETTINGS_MENU;
    a780:	8e e1       	ldi	r24, 0x1E	; 30
    a782:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRE-SWEEP SETTINGS"));
    a786:	8f e8       	ldi	r24, 0x8F	; 143
    a788:	9b e1       	ldi	r25, 0x1B	; 27
    a78a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    a78e:	4a c5       	rjmp	.+2708   	; 0xb224 <menu_down+0xd1e>
	case PRE_SWP_SLOW_START_MENU:
		break;
		/*-------------------------------------------------------------------------------*/

	case ACCELERATION_VAL_MENU:
		if (current_value > MIN_ACCELERATION)
    a790:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a794:	86 30       	cpi	r24, 0x06	; 6
    a796:	18 f0       	brcs	.+6      	; 0xa79e <menu_down+0x298>
			current_value--;
    a798:	81 50       	subi	r24, 0x01	; 1
    a79a:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    a79e:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <current_value>
    a7a2:	8d ec       	ldi	r24, 0xCD	; 205
    a7a4:	98 9f       	mul	r25, r24
    a7a6:	81 2d       	mov	r24, r1
    a7a8:	11 24       	eor	r1, r1
    a7aa:	86 95       	lsr	r24
    a7ac:	86 95       	lsr	r24
    a7ae:	86 95       	lsr	r24
    a7b0:	38 2f       	mov	r19, r24
    a7b2:	33 0f       	add	r19, r19
    a7b4:	23 2f       	mov	r18, r19
    a7b6:	22 0f       	add	r18, r18
    a7b8:	22 0f       	add	r18, r18
    a7ba:	23 0f       	add	r18, r19
    a7bc:	92 1b       	sub	r25, r18
    a7be:	1f 92       	push	r1
    a7c0:	9f 93       	push	r25
    a7c2:	1f 92       	push	r1
    a7c4:	8f 93       	push	r24
    a7c6:	89 ee       	ldi	r24, 0xE9	; 233
    a7c8:	90 e2       	ldi	r25, 0x20	; 32
    a7ca:	9f 93       	push	r25
    a7cc:	8f 93       	push	r24
    a7ce:	83 ed       	ldi	r24, 0xD3	; 211
    a7d0:	97 e2       	ldi	r25, 0x27	; 39
    a7d2:	9f 93       	push	r25
    a7d4:	8f 93       	push	r24
    a7d6:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a7da:	83 ed       	ldi	r24, 0xD3	; 211
    a7dc:	97 e2       	ldi	r25, 0x27	; 39
    a7de:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a7e2:	8d b7       	in	r24, 0x3d	; 61
    a7e4:	9e b7       	in	r25, 0x3e	; 62
    a7e6:	08 96       	adiw	r24, 0x08	; 8
    a7e8:	8d bf       	out	0x3d, r24	; 61
    a7ea:	9e bf       	out	0x3e, r25	; 62
    a7ec:	1b c5       	rjmp	.+2614   	; 0xb224 <menu_down+0xd1e>

	case DECELERATION_VAL_MENU:
		if (current_value > MIN_DECELERATION)
    a7ee:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a7f2:	86 30       	cpi	r24, 0x06	; 6
    a7f4:	18 f0       	brcs	.+6      	; 0xa7fc <menu_down+0x2f6>
			current_value--;
    a7f6:	81 50       	subi	r24, 0x01	; 1
    a7f8:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    a7fc:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <current_value>
    a800:	8d ec       	ldi	r24, 0xCD	; 205
    a802:	98 9f       	mul	r25, r24
    a804:	81 2d       	mov	r24, r1
    a806:	11 24       	eor	r1, r1
    a808:	86 95       	lsr	r24
    a80a:	86 95       	lsr	r24
    a80c:	86 95       	lsr	r24
    a80e:	38 2f       	mov	r19, r24
    a810:	33 0f       	add	r19, r19
    a812:	23 2f       	mov	r18, r19
    a814:	22 0f       	add	r18, r18
    a816:	22 0f       	add	r18, r18
    a818:	23 0f       	add	r18, r19
    a81a:	92 1b       	sub	r25, r18
    a81c:	1f 92       	push	r1
    a81e:	9f 93       	push	r25
    a820:	1f 92       	push	r1
    a822:	8f 93       	push	r24
    a824:	89 ee       	ldi	r24, 0xE9	; 233
    a826:	90 e2       	ldi	r25, 0x20	; 32
    a828:	9f 93       	push	r25
    a82a:	8f 93       	push	r24
    a82c:	83 ed       	ldi	r24, 0xD3	; 211
    a82e:	97 e2       	ldi	r25, 0x27	; 39
    a830:	9f 93       	push	r25
    a832:	8f 93       	push	r24
    a834:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a838:	83 ed       	ldi	r24, 0xD3	; 211
    a83a:	97 e2       	ldi	r25, 0x27	; 39
    a83c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a840:	2d b7       	in	r18, 0x3d	; 61
    a842:	3e b7       	in	r19, 0x3e	; 62
    a844:	28 5f       	subi	r18, 0xF8	; 248
    a846:	3f 4f       	sbci	r19, 0xFF	; 255
    a848:	2d bf       	out	0x3d, r18	; 61
    a84a:	3e bf       	out	0x3e, r19	; 62
    a84c:	eb c4       	rjmp	.+2518   	; 0xb224 <menu_down+0xd1e>

	case BRAKE_DELAY_VAL_MENU:
		if (current_value > MIN_BRAKE_DELAY)
    a84e:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a852:	88 23       	and	r24, r24
    a854:	19 f0       	breq	.+6      	; 0xa85c <menu_down+0x356>
			current_value--;
    a856:	81 50       	subi	r24, 0x01	; 1
    a858:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d.%d SECONDS", current_value / 10, current_value % 10);
    a85c:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <current_value>
    a860:	8d ec       	ldi	r24, 0xCD	; 205
    a862:	98 9f       	mul	r25, r24
    a864:	81 2d       	mov	r24, r1
    a866:	11 24       	eor	r1, r1
    a868:	86 95       	lsr	r24
    a86a:	86 95       	lsr	r24
    a86c:	86 95       	lsr	r24
    a86e:	38 2f       	mov	r19, r24
    a870:	33 0f       	add	r19, r19
    a872:	23 2f       	mov	r18, r19
    a874:	22 0f       	add	r18, r18
    a876:	22 0f       	add	r18, r18
    a878:	23 0f       	add	r18, r19
    a87a:	92 1b       	sub	r25, r18
    a87c:	1f 92       	push	r1
    a87e:	9f 93       	push	r25
    a880:	1f 92       	push	r1
    a882:	8f 93       	push	r24
    a884:	89 ee       	ldi	r24, 0xE9	; 233
    a886:	90 e2       	ldi	r25, 0x20	; 32
    a888:	9f 93       	push	r25
    a88a:	8f 93       	push	r24
    a88c:	83 ed       	ldi	r24, 0xD3	; 211
    a88e:	97 e2       	ldi	r25, 0x27	; 39
    a890:	9f 93       	push	r25
    a892:	8f 93       	push	r24
    a894:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a898:	83 ed       	ldi	r24, 0xD3	; 211
    a89a:	97 e2       	ldi	r25, 0x27	; 39
    a89c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a8a0:	8d b7       	in	r24, 0x3d	; 61
    a8a2:	9e b7       	in	r25, 0x3e	; 62
    a8a4:	08 96       	adiw	r24, 0x08	; 8
    a8a6:	8d bf       	out	0x3d, r24	; 61
    a8a8:	9e bf       	out	0x3e, r25	; 62
    a8aa:	bc c4       	rjmp	.+2424   	; 0xb224 <menu_down+0xd1e>

	case REVERSE_SPEED_VAL_MENU:
		if (current_value > MIN_REVERSE)
    a8ac:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a8b0:	86 30       	cpi	r24, 0x06	; 6
    a8b2:	18 f0       	brcs	.+6      	; 0xa8ba <menu_down+0x3b4>
			current_value--;
    a8b4:	81 50       	subi	r24, 0x01	; 1
    a8b6:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    a8ba:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a8be:	1f 92       	push	r1
    a8c0:	8f 93       	push	r24
    a8c2:	87 ef       	ldi	r24, 0xF7	; 247
    a8c4:	90 e2       	ldi	r25, 0x20	; 32
    a8c6:	9f 93       	push	r25
    a8c8:	8f 93       	push	r24
    a8ca:	83 ed       	ldi	r24, 0xD3	; 211
    a8cc:	97 e2       	ldi	r25, 0x27	; 39
    a8ce:	9f 93       	push	r25
    a8d0:	8f 93       	push	r24
    a8d2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a8d6:	83 ed       	ldi	r24, 0xD3	; 211
    a8d8:	97 e2       	ldi	r25, 0x27	; 39
    a8da:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a8de:	0f 90       	pop	r0
    a8e0:	0f 90       	pop	r0
    a8e2:	0f 90       	pop	r0
    a8e4:	0f 90       	pop	r0
    a8e6:	0f 90       	pop	r0
    a8e8:	0f 90       	pop	r0
    a8ea:	9c c4       	rjmp	.+2360   	; 0xb224 <menu_down+0xd1e>

	case SLOW_SPEED_VAL_MENU:
		if (current_value > MIN_SLOW)
    a8ec:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a8f0:	86 30       	cpi	r24, 0x06	; 6
    a8f2:	18 f0       	brcs	.+6      	; 0xa8fa <menu_down+0x3f4>
			current_value--;
    a8f4:	81 50       	subi	r24, 0x01	; 1
    a8f6:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    a8fa:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a8fe:	1f 92       	push	r1
    a900:	8f 93       	push	r24
    a902:	87 ef       	ldi	r24, 0xF7	; 247
    a904:	90 e2       	ldi	r25, 0x20	; 32
    a906:	9f 93       	push	r25
    a908:	8f 93       	push	r24
    a90a:	83 ed       	ldi	r24, 0xD3	; 211
    a90c:	97 e2       	ldi	r25, 0x27	; 39
    a90e:	9f 93       	push	r25
    a910:	8f 93       	push	r24
    a912:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a916:	83 ed       	ldi	r24, 0xD3	; 211
    a918:	97 e2       	ldi	r25, 0x27	; 39
    a91a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a91e:	0f 90       	pop	r0
    a920:	0f 90       	pop	r0
    a922:	0f 90       	pop	r0
    a924:	0f 90       	pop	r0
    a926:	0f 90       	pop	r0
    a928:	0f 90       	pop	r0
    a92a:	7c c4       	rjmp	.+2296   	; 0xb224 <menu_down+0xd1e>

	case FAST_SPEED_VAL_MENU:
		if (current_value > MIN_FAST)
    a92c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a930:	86 30       	cpi	r24, 0x06	; 6
    a932:	18 f0       	brcs	.+6      	; 0xa93a <menu_down+0x434>
			current_value--;
    a934:	81 50       	subi	r24, 0x01	; 1
    a936:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    a93a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a93e:	1f 92       	push	r1
    a940:	8f 93       	push	r24
    a942:	87 ef       	ldi	r24, 0xF7	; 247
    a944:	90 e2       	ldi	r25, 0x20	; 32
    a946:	9f 93       	push	r25
    a948:	8f 93       	push	r24
    a94a:	83 ed       	ldi	r24, 0xD3	; 211
    a94c:	97 e2       	ldi	r25, 0x27	; 39
    a94e:	9f 93       	push	r25
    a950:	8f 93       	push	r24
    a952:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a956:	83 ed       	ldi	r24, 0xD3	; 211
    a958:	97 e2       	ldi	r25, 0x27	; 39
    a95a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a95e:	0f 90       	pop	r0
    a960:	0f 90       	pop	r0
    a962:	0f 90       	pop	r0
    a964:	0f 90       	pop	r0
    a966:	0f 90       	pop	r0
    a968:	0f 90       	pop	r0
    a96a:	5c c4       	rjmp	.+2232   	; 0xb224 <menu_down+0xd1e>

	case CURRENT_RATING_VAL_MENU:
		if (current_value > MIN_CURRENT_RATING)
    a96c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a970:	88 23       	and	r24, r24
    a972:	19 f0       	breq	.+6      	; 0xa97a <menu_down+0x474>
			current_value--;
    a974:	81 50       	subi	r24, 0x01	; 1
    a976:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d AMPS", current_value);
    a97a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a97e:	1f 92       	push	r1
    a980:	8f 93       	push	r24
    a982:	89 e0       	ldi	r24, 0x09	; 9
    a984:	91 e2       	ldi	r25, 0x21	; 33
    a986:	9f 93       	push	r25
    a988:	8f 93       	push	r24
    a98a:	83 ed       	ldi	r24, 0xD3	; 211
    a98c:	97 e2       	ldi	r25, 0x27	; 39
    a98e:	9f 93       	push	r25
    a990:	8f 93       	push	r24
    a992:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a996:	83 ed       	ldi	r24, 0xD3	; 211
    a998:	97 e2       	ldi	r25, 0x27	; 39
    a99a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a99e:	0f 90       	pop	r0
    a9a0:	0f 90       	pop	r0
    a9a2:	0f 90       	pop	r0
    a9a4:	0f 90       	pop	r0
    a9a6:	0f 90       	pop	r0
    a9a8:	0f 90       	pop	r0
    a9aa:	3c c4       	rjmp	.+2168   	; 0xb224 <menu_down+0xd1e>

	case MAX_CURRENT_VAL_MENU:
		if (current_value > MIN_MAX_CURRENT)
    a9ac:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a9b0:	88 23       	and	r24, r24
    a9b2:	19 f0       	breq	.+6      	; 0xa9ba <menu_down+0x4b4>
			current_value--;
    a9b4:	81 50       	subi	r24, 0x01	; 1
    a9b6:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d AMPS", current_value);
    a9ba:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a9be:	1f 92       	push	r1
    a9c0:	8f 93       	push	r24
    a9c2:	89 e0       	ldi	r24, 0x09	; 9
    a9c4:	91 e2       	ldi	r25, 0x21	; 33
    a9c6:	9f 93       	push	r25
    a9c8:	8f 93       	push	r24
    a9ca:	83 ed       	ldi	r24, 0xD3	; 211
    a9cc:	97 e2       	ldi	r25, 0x27	; 39
    a9ce:	9f 93       	push	r25
    a9d0:	8f 93       	push	r24
    a9d2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    a9d6:	83 ed       	ldi	r24, 0xD3	; 211
    a9d8:	97 e2       	ldi	r25, 0x27	; 39
    a9da:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    a9de:	0f 90       	pop	r0
    a9e0:	0f 90       	pop	r0
    a9e2:	0f 90       	pop	r0
    a9e4:	0f 90       	pop	r0
    a9e6:	0f 90       	pop	r0
    a9e8:	0f 90       	pop	r0
    a9ea:	1c c4       	rjmp	.+2104   	; 0xb224 <menu_down+0xd1e>

	case OVERLOAD_TIME_VAL_MENU:
		if (current_value > MIN_OVERLOAD_TIME)
    a9ec:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a9f0:	88 23       	and	r24, r24
    a9f2:	19 f0       	breq	.+6      	; 0xa9fa <menu_down+0x4f4>
			current_value--;
    a9f4:	81 50       	subi	r24, 0x01	; 1
    a9f6:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d SECONDS", current_value);
    a9fa:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    a9fe:	1f 92       	push	r1
    aa00:	8f 93       	push	r24
    aa02:	8c ee       	ldi	r24, 0xEC	; 236
    aa04:	90 e2       	ldi	r25, 0x20	; 32
    aa06:	9f 93       	push	r25
    aa08:	8f 93       	push	r24
    aa0a:	83 ed       	ldi	r24, 0xD3	; 211
    aa0c:	97 e2       	ldi	r25, 0x27	; 39
    aa0e:	9f 93       	push	r25
    aa10:	8f 93       	push	r24
    aa12:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    aa16:	83 ed       	ldi	r24, 0xD3	; 211
    aa18:	97 e2       	ldi	r25, 0x27	; 39
    aa1a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    aa1e:	0f 90       	pop	r0
    aa20:	0f 90       	pop	r0
    aa22:	0f 90       	pop	r0
    aa24:	0f 90       	pop	r0
    aa26:	0f 90       	pop	r0
    aa28:	0f 90       	pop	r0
    aa2a:	fc c3       	rjmp	.+2040   	; 0xb224 <menu_down+0xd1e>

	case VACUUM_SLOW_START_VAL_MENU:
		if (current_value > MIN_VACUUM_RAMPUP_TIME)
    aa2c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    aa30:	88 23       	and	r24, r24
    aa32:	29 f0       	breq	.+10     	; 0xaa3e <menu_down+0x538>
			current_value--;
    aa34:	81 50       	subi	r24, 0x01	; 1
    aa36:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		if (current_value == 0)
    aa3a:	81 11       	cpse	r24, r1
    aa3c:	05 c0       	rjmp	.+10     	; 0xaa48 <menu_down+0x542>
		{
			lcd_write_new_P(PSTR("OFF"));
    aa3e:	8b e8       	ldi	r24, 0x8B	; 139
    aa40:	9b e1       	ldi	r25, 0x1B	; 27
    aa42:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    aa46:	ee c3       	rjmp	.+2012   	; 0xb224 <menu_down+0xd1e>
		}
		else
		{
			sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    aa48:	2a ef       	ldi	r18, 0xFA	; 250
    aa4a:	82 9f       	mul	r24, r18
    aa4c:	c0 01       	movw	r24, r0
    aa4e:	11 24       	eor	r1, r1
    aa50:	9f 93       	push	r25
    aa52:	8f 93       	push	r24
    aa54:	81 e1       	ldi	r24, 0x11	; 17
    aa56:	91 e2       	ldi	r25, 0x21	; 33
    aa58:	9f 93       	push	r25
    aa5a:	8f 93       	push	r24
    aa5c:	83 ed       	ldi	r24, 0xD3	; 211
    aa5e:	97 e2       	ldi	r25, 0x27	; 39
    aa60:	9f 93       	push	r25
    aa62:	8f 93       	push	r24
    aa64:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    aa68:	83 ed       	ldi	r24, 0xD3	; 211
    aa6a:	97 e2       	ldi	r25, 0x27	; 39
    aa6c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    aa70:	0f 90       	pop	r0
    aa72:	0f 90       	pop	r0
    aa74:	0f 90       	pop	r0
    aa76:	0f 90       	pop	r0
    aa78:	0f 90       	pop	r0
    aa7a:	0f 90       	pop	r0
    aa7c:	d3 c3       	rjmp	.+1958   	; 0xb224 <menu_down+0xd1e>
		}
		break;

	case BRUSH_SLOW_START_VAL_MENU:
		if (current_value > MIN_BRUSH_RAMPUP_TIME)
    aa7e:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    aa82:	88 23       	and	r24, r24
    aa84:	29 f0       	breq	.+10     	; 0xaa90 <menu_down+0x58a>
			current_value--;
    aa86:	81 50       	subi	r24, 0x01	; 1
    aa88:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		if (current_value == 0)
    aa8c:	81 11       	cpse	r24, r1
    aa8e:	05 c0       	rjmp	.+10     	; 0xaa9a <menu_down+0x594>
		{
			lcd_write_new_P(PSTR("OFF"));
    aa90:	87 e8       	ldi	r24, 0x87	; 135
    aa92:	9b e1       	ldi	r25, 0x1B	; 27
    aa94:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    aa98:	c5 c3       	rjmp	.+1930   	; 0xb224 <menu_down+0xd1e>
		}
		else
		{
			sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    aa9a:	3a ef       	ldi	r19, 0xFA	; 250
    aa9c:	83 9f       	mul	r24, r19
    aa9e:	c0 01       	movw	r24, r0
    aaa0:	11 24       	eor	r1, r1
    aaa2:	9f 93       	push	r25
    aaa4:	8f 93       	push	r24
    aaa6:	81 e1       	ldi	r24, 0x11	; 17
    aaa8:	91 e2       	ldi	r25, 0x21	; 33
    aaaa:	9f 93       	push	r25
    aaac:	8f 93       	push	r24
    aaae:	83 ed       	ldi	r24, 0xD3	; 211
    aab0:	97 e2       	ldi	r25, 0x27	; 39
    aab2:	9f 93       	push	r25
    aab4:	8f 93       	push	r24
    aab6:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    aaba:	83 ed       	ldi	r24, 0xD3	; 211
    aabc:	97 e2       	ldi	r25, 0x27	; 39
    aabe:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    aac2:	0f 90       	pop	r0
    aac4:	0f 90       	pop	r0
    aac6:	0f 90       	pop	r0
    aac8:	0f 90       	pop	r0
    aaca:	0f 90       	pop	r0
    aacc:	0f 90       	pop	r0
    aace:	aa c3       	rjmp	.+1876   	; 0xb224 <menu_down+0xd1e>
		}
		break;

	case PRE_SWP_SLOW_START_VAL_MENU:
		if (current_value > MIN_PRE_SWP_RAMPUP_TIME)
    aad0:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    aad4:	88 23       	and	r24, r24
    aad6:	29 f0       	breq	.+10     	; 0xaae2 <menu_down+0x5dc>
			current_value--;
    aad8:	81 50       	subi	r24, 0x01	; 1
    aada:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		if (current_value == 0)
    aade:	81 11       	cpse	r24, r1
    aae0:	05 c0       	rjmp	.+10     	; 0xaaec <menu_down+0x5e6>
		{
			lcd_write_new_P(PSTR("OFF"));
    aae2:	83 e8       	ldi	r24, 0x83	; 131
    aae4:	9b e1       	ldi	r25, 0x1B	; 27
    aae6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    aaea:	9c c3       	rjmp	.+1848   	; 0xb224 <menu_down+0xd1e>
		}
		else
		{
			sprintf(temp, "%d MILLISECONDS", (uint16_t)current_value * 250);
    aaec:	2a ef       	ldi	r18, 0xFA	; 250
    aaee:	82 9f       	mul	r24, r18
    aaf0:	c0 01       	movw	r24, r0
    aaf2:	11 24       	eor	r1, r1
    aaf4:	9f 93       	push	r25
    aaf6:	8f 93       	push	r24
    aaf8:	81 e1       	ldi	r24, 0x11	; 17
    aafa:	91 e2       	ldi	r25, 0x21	; 33
    aafc:	9f 93       	push	r25
    aafe:	8f 93       	push	r24
    ab00:	83 ed       	ldi	r24, 0xD3	; 211
    ab02:	97 e2       	ldi	r25, 0x27	; 39
    ab04:	9f 93       	push	r25
    ab06:	8f 93       	push	r24
    ab08:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    ab0c:	83 ed       	ldi	r24, 0xD3	; 211
    ab0e:	97 e2       	ldi	r25, 0x27	; 39
    ab10:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
    ab14:	0f 90       	pop	r0
    ab16:	0f 90       	pop	r0
    ab18:	0f 90       	pop	r0
    ab1a:	0f 90       	pop	r0
    ab1c:	0f 90       	pop	r0
    ab1e:	0f 90       	pop	r0
    ab20:	81 c3       	rjmp	.+1794   	; 0xb224 <menu_down+0xd1e>
		break;

		/******************************************************************************************************************************/

	case BATTERY_MENU:
		current_menu = SET_SERIAL_NUM_MENU;
    ab22:	80 e9       	ldi	r24, 0x90	; 144
    ab24:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET SERIAL NUM"));
    ab28:	84 e7       	ldi	r24, 0x74	; 116
    ab2a:	9b e1       	ldi	r25, 0x1B	; 27
    ab2c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab30:	79 c3       	rjmp	.+1778   	; 0xb224 <menu_down+0xd1e>

		/*-------------------------------------------------------------------------------*/

	case LEAD_MENU:
		current_menu = AGM_MENU;
    ab32:	81 e3       	ldi	r24, 0x31	; 49
    ab34:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY: AGM"));
    ab38:	87 e6       	ldi	r24, 0x67	; 103
    ab3a:	9b e1       	ldi	r25, 0x1B	; 27
    ab3c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab40:	71 c3       	rjmp	.+1762   	; 0xb224 <menu_down+0xd1e>

	case AGM_MENU:
		current_menu = GEL_MENU;
    ab42:	82 e3       	ldi	r24, 0x32	; 50
    ab44:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BATTERY: GEL"));
    ab48:	8a e5       	ldi	r24, 0x5A	; 90
    ab4a:	9b e1       	ldi	r25, 0x1B	; 27
    ab4c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab50:	69 c3       	rjmp	.+1746   	; 0xb224 <menu_down+0xd1e>
		break;

		/******************************************************************************************************************************/

	case SET_SERIAL_NUM_MENU:
		current_menu = RUN_TIME_MENU;
    ab52:	80 e7       	ldi	r24, 0x70	; 112
    ab54:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RUN TIME"));
    ab58:	81 e5       	ldi	r24, 0x51	; 81
    ab5a:	9b e1       	ldi	r25, 0x1B	; 27
    ab5c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab60:	61 c3       	rjmp	.+1730   	; 0xb224 <menu_down+0xd1e>

	case SET_RB800_SERIAL_NUM_MENU:
		current_menu = SET_A1_SERIAL_NUM_MENU;
    ab62:	82 e9       	ldi	r24, 0x92	; 146
    ab64:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A1 SERIAL NUM"));
    ab68:	8f e3       	ldi	r24, 0x3F	; 63
    ab6a:	9b e1       	ldi	r25, 0x1B	; 27
    ab6c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab70:	59 c3       	rjmp	.+1714   	; 0xb224 <menu_down+0xd1e>

	case SET_A1_SERIAL_NUM_MENU:
		current_menu = SET_A2_SERIAL_NUM_MENU;
    ab72:	84 e9       	ldi	r24, 0x94	; 148
    ab74:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A2 SERIAL NUM"));
    ab78:	8d e2       	ldi	r24, 0x2D	; 45
    ab7a:	9b e1       	ldi	r25, 0x1B	; 27
    ab7c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab80:	51 c3       	rjmp	.+1698   	; 0xb224 <menu_down+0xd1e>

	case SET_A2_SERIAL_NUM_MENU:
		current_menu = SET_A3_SERIAL_NUM_MENU;
    ab82:	86 e9       	ldi	r24, 0x96	; 150
    ab84:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SET A3 SERIAL NUM"));
    ab88:	8b e1       	ldi	r24, 0x1B	; 27
    ab8a:	9b e1       	ldi	r25, 0x1B	; 27
    ab8c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ab90:	49 c3       	rjmp	.+1682   	; 0xb224 <menu_down+0xd1e>
		break;

		/*-------------------------------------------------------------------------------*/

	case SET_RB800_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    ab92:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    ab96:	88 23       	and	r24, r24
    ab98:	09 f4       	brne	.+2      	; 0xab9c <menu_down+0x696>
    ab9a:	44 c3       	rjmp	.+1672   	; 0xb224 <menu_down+0xd1e>
			break;
		if (serial_num_temp[cursor - 2] != '0')// -2 IS TO START THE ARRAY FROM 0th position(cursor value will be 2)
    ab9c:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    aba0:	90 e0       	ldi	r25, 0x00	; 0
    aba2:	02 97       	sbiw	r24, 0x02	; 2
    aba4:	fc 01       	movw	r30, r24
    aba6:	e4 54       	subi	r30, 0x44	; 68
    aba8:	f8 4d       	sbci	r31, 0xD8	; 216
    abaa:	20 81       	ld	r18, Z
    abac:	20 33       	cpi	r18, 0x30	; 48
    abae:	29 f0       	breq	.+10     	; 0xabba <menu_down+0x6b4>
			serial_num_temp[cursor - 2]--;
    abb0:	fc 01       	movw	r30, r24
    abb2:	e4 54       	subi	r30, 0x44	; 68
    abb4:	f8 4d       	sbci	r31, 0xD8	; 216
    abb6:	21 50       	subi	r18, 0x01	; 1
    abb8:	20 83       	st	Z, r18
		lcd_set_cursor(0, 2);
    abba:	62 e0       	ldi	r22, 0x02	; 2
    abbc:	80 e0       	ldi	r24, 0x00	; 0
    abbe:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(serial_num_temp);
    abc2:	8c eb       	ldi	r24, 0xBC	; 188
    abc4:	97 e2       	ldi	r25, 0x27	; 39
    abc6:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		lcd_set_cursor(0, cursor);
    abca:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    abce:	80 e0       	ldi	r24, 0x00	; 0
    abd0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    abd4:	27 c3       	rjmp	.+1614   	; 0xb224 <menu_down+0xd1e>

	case SET_A1_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    abd6:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    abda:	88 23       	and	r24, r24
    abdc:	09 f4       	brne	.+2      	; 0xabe0 <menu_down+0x6da>
    abde:	22 c3       	rjmp	.+1604   	; 0xb224 <menu_down+0xd1e>
			break;
		if (serial_num_temp[cursor] != '0')
    abe0:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    abe4:	90 e0       	ldi	r25, 0x00	; 0
    abe6:	fc 01       	movw	r30, r24
    abe8:	e4 54       	subi	r30, 0x44	; 68
    abea:	f8 4d       	sbci	r31, 0xD8	; 216
    abec:	20 81       	ld	r18, Z
    abee:	20 33       	cpi	r18, 0x30	; 48
    abf0:	29 f0       	breq	.+10     	; 0xabfc <menu_down+0x6f6>
			serial_num_temp[cursor]--;
    abf2:	fc 01       	movw	r30, r24
    abf4:	e4 54       	subi	r30, 0x44	; 68
    abf6:	f8 4d       	sbci	r31, 0xD8	; 216
    abf8:	21 50       	subi	r18, 0x01	; 1
    abfa:	20 83       	st	Z, r18
		lcd_write_new(serial_num_temp);
    abfc:	8c eb       	ldi	r24, 0xBC	; 188
    abfe:	97 e2       	ldi	r25, 0x27	; 39
    ac00:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, cursor);
    ac04:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    ac08:	80 e0       	ldi	r24, 0x00	; 0
    ac0a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    ac0e:	0a c3       	rjmp	.+1556   	; 0xb224 <menu_down+0xd1e>

	case SET_A2_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    ac10:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    ac14:	88 23       	and	r24, r24
    ac16:	09 f4       	brne	.+2      	; 0xac1a <menu_down+0x714>
    ac18:	05 c3       	rjmp	.+1546   	; 0xb224 <menu_down+0xd1e>
			break;
		if (serial_num_temp[cursor] != '0')
    ac1a:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    ac1e:	90 e0       	ldi	r25, 0x00	; 0
    ac20:	fc 01       	movw	r30, r24
    ac22:	e4 54       	subi	r30, 0x44	; 68
    ac24:	f8 4d       	sbci	r31, 0xD8	; 216
    ac26:	20 81       	ld	r18, Z
    ac28:	20 33       	cpi	r18, 0x30	; 48
    ac2a:	29 f0       	breq	.+10     	; 0xac36 <menu_down+0x730>
			serial_num_temp[cursor]--;
    ac2c:	fc 01       	movw	r30, r24
    ac2e:	e4 54       	subi	r30, 0x44	; 68
    ac30:	f8 4d       	sbci	r31, 0xD8	; 216
    ac32:	21 50       	subi	r18, 0x01	; 1
    ac34:	20 83       	st	Z, r18
		lcd_write_new(serial_num_temp);
    ac36:	8c eb       	ldi	r24, 0xBC	; 188
    ac38:	97 e2       	ldi	r25, 0x27	; 39
    ac3a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, cursor);
    ac3e:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    ac42:	80 e0       	ldi	r24, 0x00	; 0
    ac44:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    ac48:	ed c2       	rjmp	.+1498   	; 0xb224 <menu_down+0xd1e>

	case SET_A3_SERIAL_NUM_VAL_MENU:
		if (!admin_mode)
    ac4a:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    ac4e:	88 23       	and	r24, r24
    ac50:	09 f4       	brne	.+2      	; 0xac54 <menu_down+0x74e>
    ac52:	e8 c2       	rjmp	.+1488   	; 0xb224 <menu_down+0xd1e>
			break;
		if (serial_num_temp[cursor] != '0')
    ac54:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    ac58:	90 e0       	ldi	r25, 0x00	; 0
    ac5a:	fc 01       	movw	r30, r24
    ac5c:	e4 54       	subi	r30, 0x44	; 68
    ac5e:	f8 4d       	sbci	r31, 0xD8	; 216
    ac60:	20 81       	ld	r18, Z
    ac62:	20 33       	cpi	r18, 0x30	; 48
    ac64:	29 f0       	breq	.+10     	; 0xac70 <menu_down+0x76a>
			serial_num_temp[cursor]--;
    ac66:	fc 01       	movw	r30, r24
    ac68:	e4 54       	subi	r30, 0x44	; 68
    ac6a:	f8 4d       	sbci	r31, 0xD8	; 216
    ac6c:	21 50       	subi	r18, 0x01	; 1
    ac6e:	20 83       	st	Z, r18
		lcd_write_new(serial_num_temp);
    ac70:	8c eb       	ldi	r24, 0xBC	; 188
    ac72:	97 e2       	ldi	r25, 0x27	; 39
    ac74:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(0, cursor);
    ac78:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    ac7c:	80 e0       	ldi	r24, 0x00	; 0
    ac7e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		break;
    ac82:	d0 c2       	rjmp	.+1440   	; 0xb224 <menu_down+0xd1e>

		/******************************************************************************************************************************/

	case RUN_TIME_MENU:
		current_menu = STATISTICS_MENU;
    ac84:	80 eb       	ldi	r24, 0xB0	; 176
    ac86:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("STATISTICS"));
    ac8a:	80 e1       	ldi	r24, 0x10	; 16
    ac8c:	9b e1       	ldi	r25, 0x1B	; 27
    ac8e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ac92:	c8 c2       	rjmp	.+1424   	; 0xb224 <menu_down+0xd1e>

		/*-------------------------------------------------------------------------------*/

	case RUN_TIME_VAL_MENU:
		if (!admin_mode)
    ac94:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <admin_mode>
    ac98:	88 23       	and	r24, r24
    ac9a:	09 f4       	brne	.+2      	; 0xac9e <menu_down+0x798>
    ac9c:	c3 c2       	rjmp	.+1414   	; 0xb224 <menu_down+0xd1e>
			break;
		if (cursor < 5)
    ac9e:	80 91 ee 27 	lds	r24, 0x27EE	; 0x8027ee <cursor>
    aca2:	85 30       	cpi	r24, 0x05	; 5
    aca4:	b0 f5       	brcc	.+108    	; 0xad12 <menu_down+0x80c>
		{
			if (run_time_hour_arr[cursor] == '0')
    aca6:	90 e0       	ldi	r25, 0x00	; 0
    aca8:	fc 01       	movw	r30, r24
    acaa:	e3 53       	subi	r30, 0x33	; 51
    acac:	f8 4d       	sbci	r31, 0xD8	; 216
    acae:	20 81       	ld	r18, Z
    acb0:	20 33       	cpi	r18, 0x30	; 48
    acb2:	09 f4       	brne	.+2      	; 0xacb6 <menu_down+0x7b0>
    acb4:	b7 c2       	rjmp	.+1390   	; 0xb224 <menu_down+0xd1e>
			{
				break;
			}
			run_time_hour_arr[cursor]--;
    acb6:	4d ec       	ldi	r20, 0xCD	; 205
    acb8:	57 e2       	ldi	r21, 0x27	; 39
    acba:	fc 01       	movw	r30, r24
    acbc:	e3 53       	subi	r30, 0x33	; 51
    acbe:	f8 4d       	sbci	r31, 0xD8	; 216
    acc0:	21 50       	subi	r18, 0x01	; 1
    acc2:	20 83       	st	Z, r18
			sprintf(temp, "%s:%s", run_time_hour_arr, run_time_min_arr);
    acc4:	89 ee       	ldi	r24, 0xE9	; 233
    acc6:	97 e2       	ldi	r25, 0x27	; 39
    acc8:	9f 93       	push	r25
    acca:	8f 93       	push	r24
    accc:	5f 93       	push	r21
    acce:	4f 93       	push	r20
    acd0:	81 e2       	ldi	r24, 0x21	; 33
    acd2:	91 e2       	ldi	r25, 0x21	; 33
    acd4:	9f 93       	push	r25
    acd6:	8f 93       	push	r24
    acd8:	83 ed       	ldi	r24, 0xD3	; 211
    acda:	97 e2       	ldi	r25, 0x27	; 39
    acdc:	9f 93       	push	r25
    acde:	8f 93       	push	r24
    ace0:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    ace4:	83 ed       	ldi	r24, 0xD3	; 211
    ace6:	97 e2       	ldi	r25, 0x27	; 39
    ace8:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(1, 0);
    acec:	60 e0       	ldi	r22, 0x00	; 0
    acee:	81 e0       	ldi	r24, 0x01	; 1
    acf0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("HOURS:MINUTES"));
    acf4:	82 e0       	ldi	r24, 0x02	; 2
    acf6:	9b e1       	ldi	r25, 0x1B	; 27
    acf8:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_set_cursor(0, cursor);
    acfc:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    ad00:	80 e0       	ldi	r24, 0x00	; 0
    ad02:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    ad06:	8d b7       	in	r24, 0x3d	; 61
    ad08:	9e b7       	in	r25, 0x3e	; 62
    ad0a:	08 96       	adiw	r24, 0x08	; 8
    ad0c:	8d bf       	out	0x3d, r24	; 61
    ad0e:	9e bf       	out	0x3e, r25	; 62
    ad10:	89 c2       	rjmp	.+1298   	; 0xb224 <menu_down+0xd1e>
		}
		else
		{
			if (run_time_min_arr[cursor - 5] == '0')
    ad12:	90 e0       	ldi	r25, 0x00	; 0
    ad14:	05 97       	sbiw	r24, 0x05	; 5
    ad16:	fc 01       	movw	r30, r24
    ad18:	e7 51       	subi	r30, 0x17	; 23
    ad1a:	f8 4d       	sbci	r31, 0xD8	; 216
    ad1c:	20 81       	ld	r18, Z
    ad1e:	20 33       	cpi	r18, 0x30	; 48
    ad20:	09 f4       	brne	.+2      	; 0xad24 <menu_down+0x81e>
    ad22:	80 c2       	rjmp	.+1280   	; 0xb224 <menu_down+0xd1e>
			{
				break;
			}
			run_time_min_arr[cursor - 5]--;
    ad24:	49 ee       	ldi	r20, 0xE9	; 233
    ad26:	57 e2       	ldi	r21, 0x27	; 39
    ad28:	fc 01       	movw	r30, r24
    ad2a:	e7 51       	subi	r30, 0x17	; 23
    ad2c:	f8 4d       	sbci	r31, 0xD8	; 216
    ad2e:	21 50       	subi	r18, 0x01	; 1
    ad30:	20 83       	st	Z, r18
			sprintf(temp, "%s:%s", run_time_hour_arr, run_time_min_arr);
    ad32:	5f 93       	push	r21
    ad34:	4f 93       	push	r20
    ad36:	8d ec       	ldi	r24, 0xCD	; 205
    ad38:	97 e2       	ldi	r25, 0x27	; 39
    ad3a:	9f 93       	push	r25
    ad3c:	8f 93       	push	r24
    ad3e:	81 e2       	ldi	r24, 0x21	; 33
    ad40:	91 e2       	ldi	r25, 0x21	; 33
    ad42:	9f 93       	push	r25
    ad44:	8f 93       	push	r24
    ad46:	83 ed       	ldi	r24, 0xD3	; 211
    ad48:	97 e2       	ldi	r25, 0x27	; 39
    ad4a:	9f 93       	push	r25
    ad4c:	8f 93       	push	r24
    ad4e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write_new(temp);
    ad52:	83 ed       	ldi	r24, 0xD3	; 211
    ad54:	97 e2       	ldi	r25, 0x27	; 39
    ad56:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
			lcd_set_cursor(1, 0);
    ad5a:	60 e0       	ldi	r22, 0x00	; 0
    ad5c:	81 e0       	ldi	r24, 0x01	; 1
    ad5e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			lcd_write_P(PSTR("HOURS:MINUTES"));
    ad62:	84 ef       	ldi	r24, 0xF4	; 244
    ad64:	9a e1       	ldi	r25, 0x1A	; 26
    ad66:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			lcd_set_cursor(0, cursor + 1);
    ad6a:	60 91 ee 27 	lds	r22, 0x27EE	; 0x8027ee <cursor>
    ad6e:	6f 5f       	subi	r22, 0xFF	; 255
    ad70:	80 e0       	ldi	r24, 0x00	; 0
    ad72:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
    ad76:	2d b7       	in	r18, 0x3d	; 61
    ad78:	3e b7       	in	r19, 0x3e	; 62
    ad7a:	28 5f       	subi	r18, 0xF8	; 248
    ad7c:	3f 4f       	sbci	r19, 0xFF	; 255
    ad7e:	2d bf       	out	0x3d, r18	; 61
    ad80:	3e bf       	out	0x3e, r19	; 62
    ad82:	50 c2       	rjmp	.+1184   	; 0xb224 <menu_down+0xd1e>
		break;

		/******************************************************************************************************************************/

	case STATISTICS_MENU:
		current_menu = DEFAULT_MENU;
    ad84:	84 e0       	ldi	r24, 0x04	; 4
    ad86:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RESET TO DEFAULT"));
    ad8a:	83 ee       	ldi	r24, 0xE3	; 227
    ad8c:	9a e1       	ldi	r25, 0x1A	; 26
    ad8e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ad92:	48 c2       	rjmp	.+1168   	; 0xb224 <menu_down+0xd1e>

		/*-------------------------------------------------------------------------------*/

	case BRUSH_STAT_MENU:
		current_menu = VACUUM_STAT_MENU;
    ad94:	82 eb       	ldi	r24, 0xB2	; 178
    ad96:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM STATISTICS"));
    ad9a:	81 ed       	ldi	r24, 0xD1	; 209
    ad9c:	9a e1       	ldi	r25, 0x1A	; 26
    ad9e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ada2:	40 c2       	rjmp	.+1152   	; 0xb224 <menu_down+0xd1e>

	case VACUUM_STAT_MENU:
		current_menu = PRESWEEP_STAT_MENU;
    ada4:	83 eb       	ldi	r24, 0xB3	; 179
    ada6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP STATISTICS"));
    adaa:	8d eb       	ldi	r24, 0xBD	; 189
    adac:	9a e1       	ldi	r25, 0x1A	; 26
    adae:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    adb2:	38 c2       	rjmp	.+1136   	; 0xb224 <menu_down+0xd1e>

	case PRESWEEP_STAT_MENU:
		current_menu = WATER_PUMP_STAT_MENU;
    adb4:	84 eb       	ldi	r24, 0xB4	; 180
    adb6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("WATER PUMP"));
    adba:	82 eb       	ldi	r24, 0xB2	; 178
    adbc:	9a e1       	ldi	r25, 0x1A	; 26
    adbe:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    adc2:	60 e0       	ldi	r22, 0x00	; 0
    adc4:	81 e0       	ldi	r24, 0x01	; 1
    adc6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("STATISTICS"));
    adca:	87 ea       	ldi	r24, 0xA7	; 167
    adcc:	9a e1       	ldi	r25, 0x1A	; 26
    adce:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    add2:	28 c2       	rjmp	.+1104   	; 0xb224 <menu_down+0xd1e>

	case WATER_PUMP_STAT_MENU:
		current_menu = DETERGENT_PUMP_STAT_MENU;
    add4:	85 eb       	ldi	r24, 0xB5	; 181
    add6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("DETERGENT PUMP"));
    adda:	88 e9       	ldi	r24, 0x98	; 152
    addc:	9a e1       	ldi	r25, 0x1A	; 26
    adde:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ade2:	60 e0       	ldi	r22, 0x00	; 0
    ade4:	81 e0       	ldi	r24, 0x01	; 1
    ade6:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("STATISTICS"));
    adea:	8d e8       	ldi	r24, 0x8D	; 141
    adec:	9a e1       	ldi	r25, 0x1A	; 26
    adee:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    adf2:	18 c2       	rjmp	.+1072   	; 0xb224 <menu_down+0xd1e>

	case DETERGENT_PUMP_STAT_MENU:
		current_menu = ECO_HOURS_MENU;
    adf4:	83 ec       	ldi	r24, 0xC3	; 195
    adf6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ECO MODE HOURS"));
    adfa:	8e e7       	ldi	r24, 0x7E	; 126
    adfc:	9a e1       	ldi	r25, 0x1A	; 26
    adfe:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ae02:	60 e0       	ldi	r22, 0x00	; 0
    ae04:	81 e0       	ldi	r24, 0x01	; 1
    ae06:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", eco_hours);
    ae0a:	80 91 e9 21 	lds	r24, 0x21E9	; 0x8021e9 <eco_hours+0x1>
    ae0e:	8f 93       	push	r24
    ae10:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <eco_hours>
    ae14:	8f 93       	push	r24
    ae16:	87 e2       	ldi	r24, 0x27	; 39
    ae18:	91 e2       	ldi	r25, 0x21	; 33
    ae1a:	9f 93       	push	r25
    ae1c:	8f 93       	push	r24
    ae1e:	83 ed       	ldi	r24, 0xD3	; 211
    ae20:	97 e2       	ldi	r25, 0x27	; 39
    ae22:	9f 93       	push	r25
    ae24:	8f 93       	push	r24
    ae26:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    ae2a:	83 ed       	ldi	r24, 0xD3	; 211
    ae2c:	97 e2       	ldi	r25, 0x27	; 39
    ae2e:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    ae32:	0f 90       	pop	r0
    ae34:	0f 90       	pop	r0
    ae36:	0f 90       	pop	r0
    ae38:	0f 90       	pop	r0
    ae3a:	0f 90       	pop	r0
    ae3c:	0f 90       	pop	r0
    ae3e:	f2 c1       	rjmp	.+996    	; 0xb224 <menu_down+0xd1e>
		break;

		/*-------------------------------------------------------------------------------*/

	case BRUSH_HOURS_MENU:
		current_menu = BRUSH1_AVERAGE_CURRENT_MENU;
    ae40:	87 eb       	ldi	r24, 0xB7	; 183
    ae42:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 1 AVG CURRENT"));
    ae46:	8a e6       	ldi	r24, 0x6A	; 106
    ae48:	9a e1       	ldi	r25, 0x1A	; 26
    ae4a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ae4e:	60 e0       	ldi	r22, 0x00	; 0
    ae50:	81 e0       	ldi	r24, 0x01	; 1
    ae52:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush1_average_current);
    ae56:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <brush1_average_current+0x1>
    ae5a:	8f 93       	push	r24
    ae5c:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <brush1_average_current>
    ae60:	8f 93       	push	r24
    ae62:	87 e2       	ldi	r24, 0x27	; 39
    ae64:	91 e2       	ldi	r25, 0x21	; 33
    ae66:	9f 93       	push	r25
    ae68:	8f 93       	push	r24
    ae6a:	83 ed       	ldi	r24, 0xD3	; 211
    ae6c:	97 e2       	ldi	r25, 0x27	; 39
    ae6e:	9f 93       	push	r25
    ae70:	8f 93       	push	r24
    ae72:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    ae76:	83 ed       	ldi	r24, 0xD3	; 211
    ae78:	97 e2       	ldi	r25, 0x27	; 39
    ae7a:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    ae7e:	0f 90       	pop	r0
    ae80:	0f 90       	pop	r0
    ae82:	0f 90       	pop	r0
    ae84:	0f 90       	pop	r0
    ae86:	0f 90       	pop	r0
    ae88:	0f 90       	pop	r0
    ae8a:	cc c1       	rjmp	.+920    	; 0xb224 <menu_down+0xd1e>

	case BRUSH1_AVERAGE_CURRENT_MENU:
		current_menu = BRUSH1_MAX_CURRENT_MENU;
    ae8c:	88 eb       	ldi	r24, 0xB8	; 184
    ae8e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 1 MAX CURRENT"));
    ae92:	86 e5       	ldi	r24, 0x56	; 86
    ae94:	9a e1       	ldi	r25, 0x1A	; 26
    ae96:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ae9a:	60 e0       	ldi	r22, 0x00	; 0
    ae9c:	81 e0       	ldi	r24, 0x01	; 1
    ae9e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush1_max_current);
    aea2:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <brush1_max_current+0x1>
    aea6:	8f 93       	push	r24
    aea8:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <brush1_max_current>
    aeac:	8f 93       	push	r24
    aeae:	87 e2       	ldi	r24, 0x27	; 39
    aeb0:	91 e2       	ldi	r25, 0x21	; 33
    aeb2:	9f 93       	push	r25
    aeb4:	8f 93       	push	r24
    aeb6:	83 ed       	ldi	r24, 0xD3	; 211
    aeb8:	97 e2       	ldi	r25, 0x27	; 39
    aeba:	9f 93       	push	r25
    aebc:	8f 93       	push	r24
    aebe:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    aec2:	83 ed       	ldi	r24, 0xD3	; 211
    aec4:	97 e2       	ldi	r25, 0x27	; 39
    aec6:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    aeca:	0f 90       	pop	r0
    aecc:	0f 90       	pop	r0
    aece:	0f 90       	pop	r0
    aed0:	0f 90       	pop	r0
    aed2:	0f 90       	pop	r0
    aed4:	0f 90       	pop	r0
    aed6:	a6 c1       	rjmp	.+844    	; 0xb224 <menu_down+0xd1e>

	case BRUSH1_MAX_CURRENT_MENU:
		current_menu = BRUSH2_AVERAGE_CURRENT_MENU;
    aed8:	89 eb       	ldi	r24, 0xB9	; 185
    aeda:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 2 AVG CURRENT"));
    aede:	82 e4       	ldi	r24, 0x42	; 66
    aee0:	9a e1       	ldi	r25, 0x1A	; 26
    aee2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    aee6:	60 e0       	ldi	r22, 0x00	; 0
    aee8:	81 e0       	ldi	r24, 0x01	; 1
    aeea:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush2_average_current);
    aeee:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <brush2_average_current+0x1>
    aef2:	8f 93       	push	r24
    aef4:	80 91 cf 21 	lds	r24, 0x21CF	; 0x8021cf <brush2_average_current>
    aef8:	8f 93       	push	r24
    aefa:	87 e2       	ldi	r24, 0x27	; 39
    aefc:	91 e2       	ldi	r25, 0x21	; 33
    aefe:	9f 93       	push	r25
    af00:	8f 93       	push	r24
    af02:	83 ed       	ldi	r24, 0xD3	; 211
    af04:	97 e2       	ldi	r25, 0x27	; 39
    af06:	9f 93       	push	r25
    af08:	8f 93       	push	r24
    af0a:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    af0e:	83 ed       	ldi	r24, 0xD3	; 211
    af10:	97 e2       	ldi	r25, 0x27	; 39
    af12:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    af16:	0f 90       	pop	r0
    af18:	0f 90       	pop	r0
    af1a:	0f 90       	pop	r0
    af1c:	0f 90       	pop	r0
    af1e:	0f 90       	pop	r0
    af20:	0f 90       	pop	r0
    af22:	80 c1       	rjmp	.+768    	; 0xb224 <menu_down+0xd1e>

	case BRUSH2_AVERAGE_CURRENT_MENU:
		current_menu = BRUSH2_MAX_CURRENT_MENU;
    af24:	8a eb       	ldi	r24, 0xBA	; 186
    af26:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("BRUSH 2 MAX CURRENT"));
    af2a:	8e e2       	ldi	r24, 0x2E	; 46
    af2c:	9a e1       	ldi	r25, 0x1A	; 26
    af2e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    af32:	60 e0       	ldi	r22, 0x00	; 0
    af34:	81 e0       	ldi	r24, 0x01	; 1
    af36:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", brush2_max_current);
    af3a:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <brush2_max_current+0x1>
    af3e:	8f 93       	push	r24
    af40:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <brush2_max_current>
    af44:	8f 93       	push	r24
    af46:	87 e2       	ldi	r24, 0x27	; 39
    af48:	91 e2       	ldi	r25, 0x21	; 33
    af4a:	9f 93       	push	r25
    af4c:	8f 93       	push	r24
    af4e:	83 ed       	ldi	r24, 0xD3	; 211
    af50:	97 e2       	ldi	r25, 0x27	; 39
    af52:	9f 93       	push	r25
    af54:	8f 93       	push	r24
    af56:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    af5a:	83 ed       	ldi	r24, 0xD3	; 211
    af5c:	97 e2       	ldi	r25, 0x27	; 39
    af5e:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    af62:	0f 90       	pop	r0
    af64:	0f 90       	pop	r0
    af66:	0f 90       	pop	r0
    af68:	0f 90       	pop	r0
    af6a:	0f 90       	pop	r0
    af6c:	0f 90       	pop	r0
    af6e:	5a c1       	rjmp	.+692    	; 0xb224 <menu_down+0xd1e>
		break;

		/*-------------------------------------------------------------------------------*/

	case VACUUM_HOURS_MENU:
		current_menu = VACUUM_AVERAGE_CURRENT_MENU;
    af70:	8c eb       	ldi	r24, 0xBC	; 188
    af72:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM AVG CURRENT"));
    af76:	8b e1       	ldi	r24, 0x1B	; 27
    af78:	9a e1       	ldi	r25, 0x1A	; 26
    af7a:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    af7e:	60 e0       	ldi	r22, 0x00	; 0
    af80:	81 e0       	ldi	r24, 0x01	; 1
    af82:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", vacuum_average_current);
    af86:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <vacuum_average_current+0x1>
    af8a:	8f 93       	push	r24
    af8c:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <vacuum_average_current>
    af90:	8f 93       	push	r24
    af92:	87 e2       	ldi	r24, 0x27	; 39
    af94:	91 e2       	ldi	r25, 0x21	; 33
    af96:	9f 93       	push	r25
    af98:	8f 93       	push	r24
    af9a:	83 ed       	ldi	r24, 0xD3	; 211
    af9c:	97 e2       	ldi	r25, 0x27	; 39
    af9e:	9f 93       	push	r25
    afa0:	8f 93       	push	r24
    afa2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    afa6:	83 ed       	ldi	r24, 0xD3	; 211
    afa8:	97 e2       	ldi	r25, 0x27	; 39
    afaa:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    afae:	0f 90       	pop	r0
    afb0:	0f 90       	pop	r0
    afb2:	0f 90       	pop	r0
    afb4:	0f 90       	pop	r0
    afb6:	0f 90       	pop	r0
    afb8:	0f 90       	pop	r0
    afba:	34 c1       	rjmp	.+616    	; 0xb224 <menu_down+0xd1e>

	case VACUUM_AVERAGE_CURRENT_MENU:
		current_menu = VACUUM_MAX_CURRENT_MENU;
    afbc:	8d eb       	ldi	r24, 0xBD	; 189
    afbe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("VACUUM MAX CURRENT"));
    afc2:	88 e0       	ldi	r24, 0x08	; 8
    afc4:	9a e1       	ldi	r25, 0x1A	; 26
    afc6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    afca:	60 e0       	ldi	r22, 0x00	; 0
    afcc:	81 e0       	ldi	r24, 0x01	; 1
    afce:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", vacuum_max_current);
    afd2:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <vacuum_max_current+0x1>
    afd6:	8f 93       	push	r24
    afd8:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <vacuum_max_current>
    afdc:	8f 93       	push	r24
    afde:	87 e2       	ldi	r24, 0x27	; 39
    afe0:	91 e2       	ldi	r25, 0x21	; 33
    afe2:	9f 93       	push	r25
    afe4:	8f 93       	push	r24
    afe6:	83 ed       	ldi	r24, 0xD3	; 211
    afe8:	97 e2       	ldi	r25, 0x27	; 39
    afea:	9f 93       	push	r25
    afec:	8f 93       	push	r24
    afee:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    aff2:	83 ed       	ldi	r24, 0xD3	; 211
    aff4:	97 e2       	ldi	r25, 0x27	; 39
    aff6:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    affa:	0f 90       	pop	r0
    affc:	0f 90       	pop	r0
    affe:	0f 90       	pop	r0
    b000:	0f 90       	pop	r0
    b002:	0f 90       	pop	r0
    b004:	0f 90       	pop	r0
    b006:	0e c1       	rjmp	.+540    	; 0xb224 <menu_down+0xd1e>
		break;

		/*-------------------------------------------------------------------------------*/

	case PRESWEEP_HOURS_MENU:
		current_menu = PRESWEEP_AVERAGE_CURRENT_MENU;
    b008:	8f eb       	ldi	r24, 0xBF	; 191
    b00a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP AVG CURRENT"));
    b00e:	83 ef       	ldi	r24, 0xF3	; 243
    b010:	99 e1       	ldi	r25, 0x19	; 25
    b012:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    b016:	60 e0       	ldi	r22, 0x00	; 0
    b018:	81 e0       	ldi	r24, 0x01	; 1
    b01a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", presweep_average_current);
    b01e:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <presweep_average_current+0x1>
    b022:	8f 93       	push	r24
    b024:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <presweep_average_current>
    b028:	8f 93       	push	r24
    b02a:	87 e2       	ldi	r24, 0x27	; 39
    b02c:	91 e2       	ldi	r25, 0x21	; 33
    b02e:	9f 93       	push	r25
    b030:	8f 93       	push	r24
    b032:	83 ed       	ldi	r24, 0xD3	; 211
    b034:	97 e2       	ldi	r25, 0x27	; 39
    b036:	9f 93       	push	r25
    b038:	8f 93       	push	r24
    b03a:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    b03e:	83 ed       	ldi	r24, 0xD3	; 211
    b040:	97 e2       	ldi	r25, 0x27	; 39
    b042:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    b046:	0f 90       	pop	r0
    b048:	0f 90       	pop	r0
    b04a:	0f 90       	pop	r0
    b04c:	0f 90       	pop	r0
    b04e:	0f 90       	pop	r0
    b050:	0f 90       	pop	r0
    b052:	e8 c0       	rjmp	.+464    	; 0xb224 <menu_down+0xd1e>

	case PRESWEEP_AVERAGE_CURRENT_MENU:
		current_menu = PRESWEEP_MAX_CURRENT_MENU;
    b054:	80 ec       	ldi	r24, 0xC0	; 192
    b056:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESWEEP MAX CURRENT"));
    b05a:	8e ed       	ldi	r24, 0xDE	; 222
    b05c:	99 e1       	ldi	r25, 0x19	; 25
    b05e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    b062:	60 e0       	ldi	r22, 0x00	; 0
    b064:	81 e0       	ldi	r24, 0x01	; 1
    b066:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		sprintf(temp, "%d", presweep_max_current);
    b06a:	80 91 b9 22 	lds	r24, 0x22B9	; 0x8022b9 <presweep_max_current+0x1>
    b06e:	8f 93       	push	r24
    b070:	80 91 b8 22 	lds	r24, 0x22B8	; 0x8022b8 <presweep_max_current>
    b074:	8f 93       	push	r24
    b076:	87 e2       	ldi	r24, 0x27	; 39
    b078:	91 e2       	ldi	r25, 0x21	; 33
    b07a:	9f 93       	push	r25
    b07c:	8f 93       	push	r24
    b07e:	83 ed       	ldi	r24, 0xD3	; 211
    b080:	97 e2       	ldi	r25, 0x27	; 39
    b082:	9f 93       	push	r25
    b084:	8f 93       	push	r24
    b086:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write(temp);
    b08a:	83 ed       	ldi	r24, 0xD3	; 211
    b08c:	97 e2       	ldi	r25, 0x27	; 39
    b08e:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    b092:	0f 90       	pop	r0
    b094:	0f 90       	pop	r0
    b096:	0f 90       	pop	r0
    b098:	0f 90       	pop	r0
    b09a:	0f 90       	pop	r0
    b09c:	0f 90       	pop	r0
    b09e:	c2 c0       	rjmp	.+388    	; 0xb224 <menu_down+0xd1e>

		/******************************************************************************************************************************/


	case DEFAULT_MENU:
		current_menu = CLEAR_SD_CARD_MENU;
    b0a0:	80 ed       	ldi	r24, 0xD0	; 208
    b0a2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("CLEAR SD CARD"));
    b0a6:	80 ed       	ldi	r24, 0xD0	; 208
    b0a8:	99 e1       	ldi	r25, 0x19	; 25
    b0aa:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    b0ae:	ba c0       	rjmp	.+372    	; 0xb224 <menu_down+0xd1e>

		/*-------------------------------------------------------------------------------*/

	case DEFAULT_CONFIRM_MENU:
		set_to_default();
    b0b0:	0e 94 1c 3a 	call	0x7438	; 0x7438 <set_to_default>
		sei();
    b0b4:	78 94       	sei
		lcd_write_new_P(PSTR("ALL SETTINGS RESET"));
    b0b6:	8d eb       	ldi	r24, 0xBD	; 189
    b0b8:	99 e1       	ldi	r25, 0x19	; 25
    b0ba:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    b0be:	60 e0       	ldi	r22, 0x00	; 0
    b0c0:	81 e0       	ldi	r24, 0x01	; 1
    b0c2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("TO DEFAULT VALUES"));
    b0c6:	8b ea       	ldi	r24, 0xAB	; 171
    b0c8:	99 e1       	ldi	r25, 0x19	; 25
    b0ca:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b0ce:	3f ef       	ldi	r19, 0xFF	; 255
    b0d0:	83 e2       	ldi	r24, 0x23	; 35
    b0d2:	94 ef       	ldi	r25, 0xF4	; 244
    b0d4:	20 e0       	ldi	r18, 0x00	; 0
    b0d6:	31 50       	subi	r19, 0x01	; 1
    b0d8:	80 40       	sbci	r24, 0x00	; 0
    b0da:	90 40       	sbci	r25, 0x00	; 0
    b0dc:	20 40       	sbci	r18, 0x00	; 0
    b0de:	d9 f7       	brne	.-10     	; 0xb0d6 <menu_down+0xbd0>
    b0e0:	00 c0       	rjmp	.+0      	; 0xb0e2 <menu_down+0xbdc>
    b0e2:	00 00       	nop
		_delay_ms(3000);
		clear_switch_pressed();
    b0e4:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = DEFAULT_MENU;
    b0e8:	84 e0       	ldi	r24, 0x04	; 4
    b0ea:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RESET TO DEFAULT"));
    b0ee:	8a e9       	ldi	r24, 0x9A	; 154
    b0f0:	99 e1       	ldi	r25, 0x19	; 25
    b0f2:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    b0f6:	96 c0       	rjmp	.+300    	; 0xb224 <menu_down+0xd1e>

		/******************************************************************************************************************************/

	case CLEAR_SD_CARD_MENU:
		current_menu = ABOUT_MENU;
    b0f8:	83 e0       	ldi	r24, 0x03	; 3
    b0fa:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    b0fe:	84 e9       	ldi	r24, 0x94	; 148
    b100:	99 e1       	ldi	r25, 0x19	; 25
    b102:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    b106:	8e c0       	rjmp	.+284    	; 0xb224 <menu_down+0xd1e>

	case CLEAR_SD_CARD_CONFIRM_MENU:
		erase_SD_card();
    b108:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <erase_SD_card>
		sei();
    b10c:	78 94       	sei
		lcd_write_new_P(PSTR("ERASING SD CARD"));
    b10e:	84 e8       	ldi	r24, 0x84	; 132
    b110:	99 e1       	ldi	r25, 0x19	; 25
    b112:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    b116:	3f ef       	ldi	r19, 0xFF	; 255
    b118:	87 ea       	ldi	r24, 0xA7	; 167
    b11a:	91 e6       	ldi	r25, 0x61	; 97
    b11c:	31 50       	subi	r19, 0x01	; 1
    b11e:	80 40       	sbci	r24, 0x00	; 0
    b120:	90 40       	sbci	r25, 0x00	; 0
    b122:	e1 f7       	brne	.-8      	; 0xb11c <menu_down+0xc16>
    b124:	00 c0       	rjmp	.+0      	; 0xb126 <menu_down+0xc20>
    b126:	00 00       	nop
		_delay_ms(1000); lcd_write_P(PSTR("."));
    b128:	82 e8       	ldi	r24, 0x82	; 130
    b12a:	99 e1       	ldi	r25, 0x19	; 25
    b12c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b130:	2f ef       	ldi	r18, 0xFF	; 255
    b132:	37 ea       	ldi	r19, 0xA7	; 167
    b134:	81 e6       	ldi	r24, 0x61	; 97
    b136:	21 50       	subi	r18, 0x01	; 1
    b138:	30 40       	sbci	r19, 0x00	; 0
    b13a:	80 40       	sbci	r24, 0x00	; 0
    b13c:	e1 f7       	brne	.-8      	; 0xb136 <menu_down+0xc30>
    b13e:	00 c0       	rjmp	.+0      	; 0xb140 <menu_down+0xc3a>
    b140:	00 00       	nop
		_delay_ms(1000); lcd_write_P(PSTR("."));
    b142:	80 e8       	ldi	r24, 0x80	; 128
    b144:	99 e1       	ldi	r25, 0x19	; 25
    b146:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b14a:	9f ef       	ldi	r25, 0xFF	; 255
    b14c:	27 ea       	ldi	r18, 0xA7	; 167
    b14e:	31 e6       	ldi	r19, 0x61	; 97
    b150:	91 50       	subi	r25, 0x01	; 1
    b152:	20 40       	sbci	r18, 0x00	; 0
    b154:	30 40       	sbci	r19, 0x00	; 0
    b156:	e1 f7       	brne	.-8      	; 0xb150 <menu_down+0xc4a>
    b158:	00 c0       	rjmp	.+0      	; 0xb15a <menu_down+0xc54>
    b15a:	00 00       	nop
		_delay_ms(1000); lcd_write_P(PSTR("."));
    b15c:	8e e7       	ldi	r24, 0x7E	; 126
    b15e:	99 e1       	ldi	r25, 0x19	; 25
    b160:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b164:	8f ef       	ldi	r24, 0xFF	; 255
    b166:	93 e2       	ldi	r25, 0x23	; 35
    b168:	24 ef       	ldi	r18, 0xF4	; 244
    b16a:	30 e0       	ldi	r19, 0x00	; 0
    b16c:	81 50       	subi	r24, 0x01	; 1
    b16e:	90 40       	sbci	r25, 0x00	; 0
    b170:	20 40       	sbci	r18, 0x00	; 0
    b172:	30 40       	sbci	r19, 0x00	; 0
    b174:	d9 f7       	brne	.-10     	; 0xb16c <menu_down+0xc66>
    b176:	00 c0       	rjmp	.+0      	; 0xb178 <menu_down+0xc72>
    b178:	00 00       	nop
		_delay_ms(3000);
		lcd_write_new_P(PSTR("SD CARD CLEARED"));
    b17a:	8e e6       	ldi	r24, 0x6E	; 110
    b17c:	99 e1       	ldi	r25, 0x19	; 25
    b17e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    b182:	60 e0       	ldi	r22, 0x00	; 0
    b184:	81 e0       	ldi	r24, 0x01	; 1
    b186:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("RESTART REQUIRED"));
    b18a:	8d e5       	ldi	r24, 0x5D	; 93
    b18c:	99 e1       	ldi	r25, 0x19	; 25
    b18e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		cli();
    b192:	f8 94       	cli
    b194:	ff cf       	rjmp	.-2      	; 0xb194 <menu_down+0xc8e>
		break;

		/*-------------------------------------------------------------------------------*/

	case RB800_MENU:
		current_menu = A1_MENU;
    b196:	81 ea       	ldi	r24, 0xA1	; 161
    b198:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    b19c:	84 e5       	ldi	r24, 0x54	; 84
    b19e:	99 e1       	ldi	r25, 0x19	; 25
    b1a0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    b1a4:	3f c0       	rjmp	.+126    	; 0xb224 <menu_down+0xd1e>

	case A1_MENU:
		current_menu = A2_MENU;
    b1a6:	82 ea       	ldi	r24, 0xA2	; 162
    b1a8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    b1ac:	8b e4       	ldi	r24, 0x4B	; 75
    b1ae:	99 e1       	ldi	r25, 0x19	; 25
    b1b0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    b1b4:	37 c0       	rjmp	.+110    	; 0xb224 <menu_down+0xd1e>

	case A2_MENU:
		current_menu = A3_MENU;
    b1b6:	83 ea       	ldi	r24, 0xA3	; 163
    b1b8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    b1bc:	82 e4       	ldi	r24, 0x42	; 66
    b1be:	99 e1       	ldi	r25, 0x19	; 25
    b1c0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    b1c4:	2f c0       	rjmp	.+94     	; 0xb224 <menu_down+0xd1e>

	case RB800_SERIAL_NUM_MENU:
		break;

	case A1_SERIAL_NUM_MENU:
		current_menu = A1_PCB_MENU;
    b1c6:	80 e4       	ldi	r24, 0x40	; 64
    b1c8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A1_PCB);
    b1cc:	8b e4       	ldi	r24, 0x4B	; 75
    b1ce:	90 e2       	ldi	r25, 0x20	; 32
    b1d0:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    b1d4:	27 c0       	rjmp	.+78     	; 0xb224 <menu_down+0xd1e>

	case A1_PCB_MENU:
		current_menu = A1_FIRMWARE_MENU;
    b1d6:	81 e4       	ldi	r24, 0x41	; 65
    b1d8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A1_FIRMWARE);
    b1dc:	80 e6       	ldi	r24, 0x60	; 96
    b1de:	90 e2       	ldi	r25, 0x20	; 32
    b1e0:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    b1e4:	1f c0       	rjmp	.+62     	; 0xb224 <menu_down+0xd1e>

	case A1_FIRMWARE_MENU:
		break;

	case A2_SERIAL_NUM_MENU:
		current_menu = A2_PCB_MENU;
    b1e6:	84 e4       	ldi	r24, 0x44	; 68
    b1e8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A2_PCB);
    b1ec:	85 e7       	ldi	r24, 0x75	; 117
    b1ee:	90 e2       	ldi	r25, 0x20	; 32
    b1f0:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    b1f4:	17 c0       	rjmp	.+46     	; 0xb224 <menu_down+0xd1e>

	case A2_PCB_MENU:
		current_menu = A2_FIRMWARE_MENU;
    b1f6:	85 e4       	ldi	r24, 0x45	; 69
    b1f8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A2_FIRMWARE);
    b1fc:	8a e8       	ldi	r24, 0x8A	; 138
    b1fe:	90 e2       	ldi	r25, 0x20	; 32
    b200:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    b204:	0f c0       	rjmp	.+30     	; 0xb224 <menu_down+0xd1e>

	case A2_FIRMWARE_MENU:
		break;

	case A3_SERIAL_NUM_MENU:
		current_menu = A3_PCB_MENU;
    b206:	88 e4       	ldi	r24, 0x48	; 72
    b208:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A3_PCB);
    b20c:	8f e9       	ldi	r24, 0x9F	; 159
    b20e:	90 e2       	ldi	r25, 0x20	; 32
    b210:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    b214:	07 c0       	rjmp	.+14     	; 0xb224 <menu_down+0xd1e>

	case A3_PCB_MENU:
		current_menu = A3_FIRMWARE_MENU;
    b216:	89 e4       	ldi	r24, 0x49	; 73
    b218:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A3_FIRMWARE);
    b21c:	84 eb       	ldi	r24, 0xB4	; 180
    b21e:	90 e2       	ldi	r25, 0x20	; 32
    b220:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>

		/******************************************************************************************************************************/

	default: break;
	}
}
    b224:	df 91       	pop	r29
    b226:	cf 91       	pop	r28
    b228:	1f 91       	pop	r17
    b22a:	0f 91       	pop	r16
    b22c:	ff 90       	pop	r15
    b22e:	ef 90       	pop	r14
    b230:	08 95       	ret

0000b232 <enter_admin_mode>:

//Admin mode allows user to change the serial number and runtime hours
void enter_admin_mode(uint8_t switch_pressed)
{
	switch (admin_mode_count)
    b232:	90 91 97 21 	lds	r25, 0x2197	; 0x802197 <admin_mode_count>
    b236:	92 30       	cpi	r25, 0x02	; 2
    b238:	f1 f0       	breq	.+60     	; 0xb276 <enter_admin_mode+0x44>
    b23a:	28 f4       	brcc	.+10     	; 0xb246 <enter_admin_mode+0x14>
    b23c:	99 23       	and	r25, r25
    b23e:	49 f0       	breq	.+18     	; 0xb252 <enter_admin_mode+0x20>
    b240:	91 30       	cpi	r25, 0x01	; 1
    b242:	81 f0       	breq	.+32     	; 0xb264 <enter_admin_mode+0x32>
    b244:	3b c0       	rjmp	.+118    	; 0xb2bc <enter_admin_mode+0x8a>
    b246:	94 30       	cpi	r25, 0x04	; 4
    b248:	39 f1       	breq	.+78     	; 0xb298 <enter_admin_mode+0x66>
    b24a:	e8 f0       	brcs	.+58     	; 0xb286 <enter_admin_mode+0x54>
    b24c:	95 30       	cpi	r25, 0x05	; 5
    b24e:	69 f1       	breq	.+90     	; 0xb2aa <enter_admin_mode+0x78>
    b250:	35 c0       	rjmp	.+106    	; 0xb2bc <enter_admin_mode+0x8a>
	{
	case 0:
		if (switch_pressed == S_SLO_NUM)
    b252:	83 30       	cpi	r24, 0x03	; 3
    b254:	21 f4       	brne	.+8      	; 0xb25e <enter_admin_mode+0x2c>
		{
			admin_mode_count++;
    b256:	81 e0       	ldi	r24, 0x01	; 1
    b258:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <admin_mode_count>
    b25c:	08 95       	ret
		}
		else
			admin_mode_count = 0;
    b25e:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b262:	08 95       	ret
		break;

	case 1:
		if (switch_pressed == S_SLO_NUM)
    b264:	83 30       	cpi	r24, 0x03	; 3
    b266:	21 f4       	brne	.+8      	; 0xb270 <enter_admin_mode+0x3e>
		{
			admin_mode_count++;
    b268:	82 e0       	ldi	r24, 0x02	; 2
    b26a:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <admin_mode_count>
    b26e:	08 95       	ret
		}
		else
			admin_mode_count = 0;
    b270:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b274:	08 95       	ret
		break;

	case 2:
		if (switch_pressed == S_SLO_NUM)
    b276:	83 30       	cpi	r24, 0x03	; 3
    b278:	19 f4       	brne	.+6      	; 0xb280 <enter_admin_mode+0x4e>
		{
			admin_mode_count++;
    b27a:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <admin_mode_count>
    b27e:	08 95       	ret
		}
		else
			admin_mode_count = 0;
    b280:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b284:	08 95       	ret
		break;

	case 3:
		if (switch_pressed == S_SLO_NUM)
    b286:	83 30       	cpi	r24, 0x03	; 3
    b288:	21 f4       	brne	.+8      	; 0xb292 <enter_admin_mode+0x60>
		{
			admin_mode_count++;
    b28a:	84 e0       	ldi	r24, 0x04	; 4
    b28c:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <admin_mode_count>
    b290:	08 95       	ret
		}
		else
			admin_mode_count = 0;
    b292:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b296:	08 95       	ret
		break;

	case 4:
		if (switch_pressed == S_SLO_NUM)
    b298:	83 30       	cpi	r24, 0x03	; 3
    b29a:	21 f4       	brne	.+8      	; 0xb2a4 <enter_admin_mode+0x72>
		{
			admin_mode_count++;
    b29c:	85 e0       	ldi	r24, 0x05	; 5
    b29e:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <admin_mode_count>
    b2a2:	08 95       	ret
		}
		else
			admin_mode_count = 0;
    b2a4:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b2a8:	08 95       	ret
		break;

	case 5:
		if (switch_pressed == S_SLO_NUM)
    b2aa:	83 30       	cpi	r24, 0x03	; 3
    b2ac:	21 f4       	brne	.+8      	; 0xb2b6 <enter_admin_mode+0x84>
		{
			admin_mode = TRUE;
    b2ae:	81 e0       	ldi	r24, 0x01	; 1
    b2b0:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <admin_mode>
    b2b4:	08 95       	ret
		}
		else
			admin_mode_count = 0;
    b2b6:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b2ba:	08 95       	ret
		break;

	default:
		admin_mode = FALSE;
    b2bc:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <admin_mode>
    b2c0:	08 95       	ret

0000b2c2 <start_s_menu>:
	}
}

void start_s_menu(void)
{
	stop_second_timer();
    b2c2:	0e 94 d2 5a 	call	0xb5a4	; 0xb5a4 <stop_second_timer>
	user_settings_menu_enable = TRUE;
    b2c6:	81 e0       	ldi	r24, 0x01	; 1
    b2c8:	80 93 5d 23 	sts	0x235D, r24	; 0x80235d <user_settings_menu_enable>
	pot_calibrating = FALSE;
    b2cc:	10 92 af 22 	sts	0x22AF, r1	; 0x8022af <pot_calibrating>
	admin_mode = FALSE;
    b2d0:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <admin_mode>
	admin_mode_count = 0;
    b2d4:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>

	ack_counter = 0;
    b2d8:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <ack_counter>
    b2dc:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <ack_counter+0x1>

	lcd_write_new_P(PSTR("CHECKING CAN BUS..."));
    b2e0:	8e e2       	ldi	r24, 0x2E	; 46
    b2e2:	99 e1       	ldi	r25, 0x19	; 25
    b2e4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    b2e8:	2f ef       	ldi	r18, 0xFF	; 255
    b2ea:	87 ea       	ldi	r24, 0xA7	; 167
    b2ec:	91 e6       	ldi	r25, 0x61	; 97
    b2ee:	21 50       	subi	r18, 0x01	; 1
    b2f0:	80 40       	sbci	r24, 0x00	; 0
    b2f2:	90 40       	sbci	r25, 0x00	; 0
    b2f4:	e1 f7       	brne	.-8      	; 0xb2ee <start_s_menu+0x2c>
    b2f6:	00 c0       	rjmp	.+0      	; 0xb2f8 <start_s_menu+0x36>
    b2f8:	00 00       	nop
    b2fa:	5d c0       	rjmp	.+186    	; 0xb3b6 <start_s_menu+0xf4>
	_delay_ms(1000);
	//Make sure CAN bus is functioning on all boards
	while (!can_functioning)
	{
		if (ack_counter >= 15 && !can_functioning)
    b2fc:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    b300:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    b304:	0f 97       	sbiw	r24, 0x0f	; 15
    b306:	d0 f1       	brcs	.+116    	; 0xb37c <start_s_menu+0xba>
		{
			if (!A2_ack_received & !A3_ack_received)
    b308:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <A2_ack_received>
    b30c:	80 91 5f 23 	lds	r24, 0x235F	; 0x80235f <A3_ack_received>
    b310:	21 e0       	ldi	r18, 0x01	; 1
    b312:	91 11       	cpse	r25, r1
    b314:	20 e0       	ldi	r18, 0x00	; 0
    b316:	22 23       	and	r18, r18
    b318:	91 f0       	breq	.+36     	; 0xb33e <start_s_menu+0x7c>
    b31a:	21 e0       	ldi	r18, 0x01	; 1
    b31c:	81 11       	cpse	r24, r1
    b31e:	20 e0       	ldi	r18, 0x00	; 0
    b320:	22 23       	and	r18, r18
    b322:	69 f0       	breq	.+26     	; 0xb33e <start_s_menu+0x7c>
			{
				lcd_write_new_P(PSTR("NO CAN COMM"));
    b324:	82 e2       	ldi	r24, 0x22	; 34
    b326:	99 e1       	ldi	r25, 0x19	; 25
    b328:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    b32c:	60 e0       	ldi	r22, 0x00	; 0
    b32e:	81 e0       	ldi	r24, 0x01	; 1
    b330:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHECK WIRING"));
    b334:	85 e1       	ldi	r24, 0x15	; 21
    b336:	99 e1       	ldi	r25, 0x19	; 25
    b338:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b33c:	1d c0       	rjmp	.+58     	; 0xb378 <start_s_menu+0xb6>
			}
			else if (!A2_ack_received)
    b33e:	91 11       	cpse	r25, r1
    b340:	0d c0       	rjmp	.+26     	; 0xb35c <start_s_menu+0x9a>
			{
				lcd_write_new_P(PSTR("NO A2 CAN COMM"));
    b342:	86 e0       	ldi	r24, 0x06	; 6
    b344:	99 e1       	ldi	r25, 0x19	; 25
    b346:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    b34a:	60 e0       	ldi	r22, 0x00	; 0
    b34c:	81 e0       	ldi	r24, 0x01	; 1
    b34e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHECK WIRING"));
    b352:	89 ef       	ldi	r24, 0xF9	; 249
    b354:	98 e1       	ldi	r25, 0x18	; 24
    b356:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b35a:	0e c0       	rjmp	.+28     	; 0xb378 <start_s_menu+0xb6>
			}
			else if (!A3_ack_received)
    b35c:	81 11       	cpse	r24, r1
    b35e:	0c c0       	rjmp	.+24     	; 0xb378 <start_s_menu+0xb6>
			{
				lcd_write_new_P(PSTR("NO A3 CAN COMM"));
    b360:	8a ee       	ldi	r24, 0xEA	; 234
    b362:	98 e1       	ldi	r25, 0x18	; 24
    b364:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    b368:	60 e0       	ldi	r22, 0x00	; 0
    b36a:	81 e0       	ldi	r24, 0x01	; 1
    b36c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHECK WIRING"));
    b370:	8d ed       	ldi	r24, 0xDD	; 221
    b372:	98 e1       	ldi	r25, 0x18	; 24
    b374:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			}
			
			
			cli();
    b378:	f8 94       	cli
    b37a:	ff cf       	rjmp	.-2      	; 0xb37a <start_s_menu+0xb8>
			WHILE_TRUE();
		}
		if (!CQRx_queueIsEmpty())
    b37c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    b380:	81 11       	cpse	r24, r1
    b382:	05 c0       	rjmp	.+10     	; 0xb38e <start_s_menu+0xcc>
		{
			CQRx_dequeue();
    b384:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
			reset_CAN_error();
    b388:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    b38c:	14 c0       	rjmp	.+40     	; 0xb3b6 <start_s_menu+0xf4>
		}
		else
		{
			ack_counter++;
    b38e:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    b392:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    b396:	01 96       	adiw	r24, 0x01	; 1
    b398:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <ack_counter>
    b39c:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <ack_counter+0x1>
			send_CAN_ACK();
    b3a0:	0e 94 3d 24 	call	0x487a	; 0x487a <send_CAN_ACK>
    b3a4:	2f ef       	ldi	r18, 0xFF	; 255
    b3a6:	87 ea       	ldi	r24, 0xA7	; 167
    b3a8:	91 e6       	ldi	r25, 0x61	; 97
    b3aa:	21 50       	subi	r18, 0x01	; 1
    b3ac:	80 40       	sbci	r24, 0x00	; 0
    b3ae:	90 40       	sbci	r25, 0x00	; 0
    b3b0:	e1 f7       	brne	.-8      	; 0xb3aa <start_s_menu+0xe8>
    b3b2:	00 c0       	rjmp	.+0      	; 0xb3b4 <start_s_menu+0xf2>
    b3b4:	00 00       	nop
	ack_counter = 0;

	lcd_write_new_P(PSTR("CHECKING CAN BUS..."));
	_delay_ms(1000);
	//Make sure CAN bus is functioning on all boards
	while (!can_functioning)
    b3b6:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    b3ba:	88 23       	and	r24, r24
    b3bc:	09 f4       	brne	.+2      	; 0xb3c0 <start_s_menu+0xfe>
    b3be:	9e cf       	rjmp	.-196    	; 0xb2fc <start_s_menu+0x3a>
    b3c0:	2f ef       	ldi	r18, 0xFF	; 255
    b3c2:	87 e8       	ldi	r24, 0x87	; 135
    b3c4:	93 e1       	ldi	r25, 0x13	; 19
    b3c6:	21 50       	subi	r18, 0x01	; 1
    b3c8:	80 40       	sbci	r24, 0x00	; 0
    b3ca:	90 40       	sbci	r25, 0x00	; 0
    b3cc:	e1 f7       	brne	.-8      	; 0xb3c6 <start_s_menu+0x104>
    b3ce:	00 c0       	rjmp	.+0      	; 0xb3d0 <start_s_menu+0x10e>
    b3d0:	00 00       	nop
	}

	//_delay_ms(200);
	//request_DM_settings();
	_delay_ms(200);
	send_pot_calibrating();
    b3d2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    b3d6:	2f ef       	ldi	r18, 0xFF	; 255
    b3d8:	87 e8       	ldi	r24, 0x87	; 135
    b3da:	93 e1       	ldi	r25, 0x13	; 19
    b3dc:	21 50       	subi	r18, 0x01	; 1
    b3de:	80 40       	sbci	r24, 0x00	; 0
    b3e0:	90 40       	sbci	r25, 0x00	; 0
    b3e2:	e1 f7       	brne	.-8      	; 0xb3dc <start_s_menu+0x11a>
    b3e4:	00 c0       	rjmp	.+0      	; 0xb3e6 <start_s_menu+0x124>
    b3e6:	00 00       	nop
	_delay_ms(200);
	request_A2_serial_num();
    b3e8:	0e 94 d7 24 	call	0x49ae	; 0x49ae <request_A2_serial_num>
    b3ec:	2f ef       	ldi	r18, 0xFF	; 255
    b3ee:	87 e8       	ldi	r24, 0x87	; 135
    b3f0:	93 e1       	ldi	r25, 0x13	; 19
    b3f2:	21 50       	subi	r18, 0x01	; 1
    b3f4:	80 40       	sbci	r24, 0x00	; 0
    b3f6:	90 40       	sbci	r25, 0x00	; 0
    b3f8:	e1 f7       	brne	.-8      	; 0xb3f2 <start_s_menu+0x130>
    b3fa:	00 c0       	rjmp	.+0      	; 0xb3fc <start_s_menu+0x13a>
    b3fc:	00 00       	nop
	_delay_ms(200);
	clear_switch_pressed();
    b3fe:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
	//_delay_ms(200);
	request_A3_serial_num();
    b402:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <request_A3_serial_num>
    b406:	2f ef       	ldi	r18, 0xFF	; 255
    b408:	87 e8       	ldi	r24, 0x87	; 135
    b40a:	93 e1       	ldi	r25, 0x13	; 19
    b40c:	21 50       	subi	r18, 0x01	; 1
    b40e:	80 40       	sbci	r24, 0x00	; 0
    b410:	90 40       	sbci	r25, 0x00	; 0
    b412:	e1 f7       	brne	.-8      	; 0xb40c <start_s_menu+0x14a>
    b414:	00 c0       	rjmp	.+0      	; 0xb416 <start_s_menu+0x154>
    b416:	00 00       	nop
	_delay_ms(200);
	lcd_set_cursor(0, 0);
    b418:	60 e0       	ldi	r22, 0x00	; 0
    b41a:	80 e0       	ldi	r24, 0x00	; 0
    b41c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write_P(PSTR("EP - up  |RV - next"));
    b420:	89 ec       	ldi	r24, 0xC9	; 201
    b422:	98 e1       	ldi	r25, 0x18	; 24
    b424:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
	lcd_set_cursor(1, 0);
    b428:	60 e0       	ldi	r22, 0x00	; 0
    b42a:	81 e0       	ldi	r24, 0x01	; 1
    b42c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write_P(PSTR("BR - down|HL - back"));
    b430:	85 eb       	ldi	r24, 0xB5	; 181
    b432:	98 e1       	ldi	r25, 0x18	; 24
    b434:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    b438:	2f ef       	ldi	r18, 0xFF	; 255
    b43a:	87 e8       	ldi	r24, 0x87	; 135
    b43c:	93 e1       	ldi	r25, 0x13	; 19
    b43e:	21 50       	subi	r18, 0x01	; 1
    b440:	80 40       	sbci	r24, 0x00	; 0
    b442:	90 40       	sbci	r25, 0x00	; 0
    b444:	e1 f7       	brne	.-8      	; 0xb43e <start_s_menu+0x17c>
    b446:	00 c0       	rjmp	.+0      	; 0xb448 <start_s_menu+0x186>
    b448:	00 00       	nop
	_delay_ms(200);
	request_statistics();
    b44a:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <request_statistics>
	current_menu = PRE_MENU;
    b44e:	10 92 cd 21 	sts	0x21CD, r1	; 0x8021cd <current_menu>
		admin_mode = FALSE;
	}
}

void start_s_menu(void)
{
    b452:	01 e0       	ldi	r16, 0x01	; 1
    b454:	10 e0       	ldi	r17, 0x00	; 0
    b456:	c0 e0       	ldi	r28, 0x00	; 0
    b458:	d0 e0       	ldi	r29, 0x00	; 0
    b45a:	03 c0       	rjmp	.+6      	; 0xb462 <start_s_menu+0x1a0>
    b45c:	21 96       	adiw	r28, 0x01	; 1
    b45e:	0f 5f       	subi	r16, 0xFF	; 255
    b460:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1)
	{
		//Check if any switches have been pressed
		for (int num = 0; num < NUM_SWITCHES; num++)
		{
			if (switch_pressed[num])
    b462:	fe 01       	movw	r30, r28
    b464:	eb 52       	subi	r30, 0x2B	; 43
    b466:	fd 4d       	sbci	r31, 0xDD	; 221
    b468:	80 81       	ld	r24, Z
    b46a:	88 23       	and	r24, r24
    b46c:	49 f1       	breq	.+82     	; 0xb4c0 <start_s_menu+0x1fe>
			{
				//Clear switch_pressed
				switch_pressed[num] = FALSE;
    b46e:	fe 01       	movw	r30, r28
    b470:	eb 52       	subi	r30, 0x2B	; 43
    b472:	fd 4d       	sbci	r31, 0xDD	; 221
    b474:	10 82       	st	Z, r1
				//Perform action depending on switch
				switch (num)
    b476:	fe 01       	movw	r30, r28
    b478:	31 97       	sbiw	r30, 0x01	; 1
    b47a:	ee 30       	cpi	r30, 0x0E	; 14
    b47c:	f1 05       	cpc	r31, r1
    b47e:	00 f5       	brcc	.+64     	; 0xb4c0 <start_s_menu+0x1fe>
    b480:	e1 50       	subi	r30, 0x01	; 1
    b482:	fb 4f       	sbci	r31, 0xFB	; 251
    b484:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
					/*case S_DU_NUM: menu_up();	break;
					case S_TR_NUM: menu_next();	break;
					case S_ECO_NUM: menu_back(); break;
					case S_DD_NUM: menu_down();	break;*/

				case S_EP_NUM: menu_up();   admin_mode_count = 0;	break;
    b488:	0e 94 34 4c 	call	0x9868	; 0x9868 <menu_up>
    b48c:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b490:	e5 cf       	rjmp	.-54     	; 0xb45c <start_s_menu+0x19a>
				case S_RV_NUM: menu_next(); admin_mode_count = 0;	break;
    b492:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <menu_next>
    b496:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b49a:	e0 cf       	rjmp	.-64     	; 0xb45c <start_s_menu+0x19a>
				case S_HL_NUM: menu_back(); admin_mode_count = 0;   break;
    b49c:	0e 94 32 48 	call	0x9064	; 0x9064 <menu_back>
    b4a0:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b4a4:	db cf       	rjmp	.-74     	; 0xb45c <start_s_menu+0x19a>
				case S_BR_NUM: menu_down();	admin_mode_count = 0;   break;
    b4a6:	0e 94 83 52 	call	0xa506	; 0xa506 <menu_down>
    b4aa:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
    b4ae:	d6 cf       	rjmp	.-84     	; 0xb45c <start_s_menu+0x19a>

				case S_DU_NUM: admin_mode_count = 0;
				case S_PU_NUM: admin_mode_count = 0;
    b4b0:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
				case S_SLO_NUM:enter_admin_mode(num); break;
    b4b4:	8c 2f       	mov	r24, r28
    b4b6:	0e 94 19 59 	call	0xb232	; 0xb232 <enter_admin_mode>
    b4ba:	02 c0       	rjmp	.+4      	; 0xb4c0 <start_s_menu+0x1fe>
				case S_ECO_NUM:admin_mode_count = 0;
				case S_VAC_NUM:admin_mode_count = 0;
				case S_HRN_NUM:admin_mode_count = 0;
				case S_DD_NUM: admin_mode_count = 0;
				case S_ATO_NUM:admin_mode_count = 0;
				case S_PD_NUM: admin_mode_count = 0;
    b4bc:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <admin_mode_count>
	current_menu = PRE_MENU;

	while (1)
	{
		//Check if any switches have been pressed
		for (int num = 0; num < NUM_SWITCHES; num++)
    b4c0:	0f 30       	cpi	r16, 0x0F	; 15
    b4c2:	11 05       	cpc	r17, r1
    b4c4:	5c f2       	brlt	.-106    	; 0xb45c <start_s_menu+0x19a>
				default:  break;
				}
			}
		}

		if (!CQRx_queueIsEmpty())
    b4c6:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    b4ca:	81 11       	cpse	r24, r1
    b4cc:	c2 cf       	rjmp	.-124    	; 0xb452 <start_s_menu+0x190>
		{
			CQRx_dequeue();
    b4ce:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
			reset_CAN_error();
    b4d2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    b4d6:	bd cf       	rjmp	.-134    	; 0xb452 <start_s_menu+0x190>

0000b4d8 <initialize_SPI>:
uint8_t write_read_byte_SPI(uint8_t _byte)
{
	write_byte_SPI(_byte);
	uint8_t byte = CAN_SPI_BUS.DATA;
	return byte;
}
    b4d8:	e1 e4       	ldi	r30, 0x41	; 65
    b4da:	f6 e0       	ldi	r31, 0x06	; 6
    b4dc:	80 e1       	ldi	r24, 0x10	; 16
    b4de:	80 83       	st	Z, r24
    b4e0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    b4e4:	80 e2       	ldi	r24, 0x20	; 32
    b4e6:	80 83       	st	Z, r24
    b4e8:	80 e8       	ldi	r24, 0x80	; 128
    b4ea:	80 83       	st	Z, r24
    b4ec:	82 ed       	ldi	r24, 0xD2	; 210
    b4ee:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    b4f2:	08 95       	ret

0000b4f4 <write_byte_SPI>:
    b4f4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    b4f8:	89 ee       	ldi	r24, 0xE9	; 233
    b4fa:	9d ef       	ldi	r25, 0xFD	; 253
    b4fc:	e0 ec       	ldi	r30, 0xC0	; 192
    b4fe:	f8 e0       	ldi	r31, 0x08	; 8
    b500:	02 c0       	rjmp	.+4      	; 0xb506 <write_byte_SPI+0x12>
    b502:	01 97       	sbiw	r24, 0x01	; 1
    b504:	19 f0       	breq	.+6      	; 0xb50c <write_byte_SPI+0x18>
    b506:	22 81       	ldd	r18, Z+2	; 0x02
    b508:	22 23       	and	r18, r18
    b50a:	dc f7       	brge	.-10     	; 0xb502 <write_byte_SPI+0xe>
    b50c:	08 95       	ret

0000b50e <write_bytes_SPI>:

//Writes the number of specified byte from the array to the SPI bus
void write_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
    b50e:	0f 93       	push	r16
    b510:	1f 93       	push	r17
    b512:	cf 93       	push	r28
    b514:	df 93       	push	r29
	for (int i = 0; i < num_bytes; i++)
    b516:	66 23       	and	r22, r22
    b518:	51 f0       	breq	.+20     	; 0xb52e <write_bytes_SPI+0x20>
    b51a:	8c 01       	movw	r16, r24
    b51c:	ec 01       	movw	r28, r24
    b51e:	06 0f       	add	r16, r22
    b520:	11 1d       	adc	r17, r1
	{
		write_byte_SPI(bytes[i]);
    b522:	89 91       	ld	r24, Y+
    b524:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
}

//Writes the number of specified byte from the array to the SPI bus
void write_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
    b528:	c0 17       	cp	r28, r16
    b52a:	d1 07       	cpc	r29, r17
    b52c:	d1 f7       	brne	.-12     	; 0xb522 <write_bytes_SPI+0x14>
	{
		write_byte_SPI(bytes[i]);
	}
}
    b52e:	df 91       	pop	r29
    b530:	cf 91       	pop	r28
    b532:	1f 91       	pop	r17
    b534:	0f 91       	pop	r16
    b536:	08 95       	ret

0000b538 <read_bytes_SPI>:

//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
    b538:	ef 92       	push	r14
    b53a:	ff 92       	push	r15
    b53c:	0f 93       	push	r16
    b53e:	1f 93       	push	r17
    b540:	cf 93       	push	r28
    b542:	df 93       	push	r29
	for (int i = 0; i < num_bytes; i++)
    b544:	66 23       	and	r22, r22
    b546:	99 f0       	breq	.+38     	; 0xb56e <read_bytes_SPI+0x36>
    b548:	8c 01       	movw	r16, r24
    b54a:	ec 01       	movw	r28, r24
    b54c:	06 0f       	add	r16, r22
    b54e:	11 1d       	adc	r17, r1

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI(uint8_t _byte)
{
	write_byte_SPI(_byte);
	uint8_t byte = CAN_SPI_BUS.DATA;
    b550:	0f 2e       	mov	r0, r31
    b552:	f0 ec       	ldi	r31, 0xC0	; 192
    b554:	ef 2e       	mov	r14, r31
    b556:	f8 e0       	ldi	r31, 0x08	; 8
    b558:	ff 2e       	mov	r15, r31
    b55a:	f0 2d       	mov	r31, r0
}

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI(uint8_t _byte)
{
	write_byte_SPI(_byte);
    b55c:	80 e0       	ldi	r24, 0x00	; 0
    b55e:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <write_byte_SPI>
	uint8_t byte = CAN_SPI_BUS.DATA;
    b562:	f7 01       	movw	r30, r14
    b564:	93 81       	ldd	r25, Z+3	; 0x03
//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
	{
		bytes[i] = write_read_byte_SPI(0x00);
    b566:	99 93       	st	Y+, r25
}

//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
    b568:	c0 17       	cp	r28, r16
    b56a:	d1 07       	cpc	r29, r17
    b56c:	b9 f7       	brne	.-18     	; 0xb55c <read_bytes_SPI+0x24>
	{
		bytes[i] = write_read_byte_SPI(0x00);
	}
    b56e:	df 91       	pop	r29
    b570:	cf 91       	pop	r28
    b572:	1f 91       	pop	r17
    b574:	0f 91       	pop	r16
    b576:	ff 90       	pop	r15
    b578:	ef 90       	pop	r14
    b57a:	08 95       	ret

0000b57c <initialize_timers>:
}

//Change the duty cycle for the PWM output
void set_duty_cycle(uint8_t percent)
{
	TCC0.CCA = (400 * percent) / 100;
    b57c:	e0 e4       	ldi	r30, 0x40	; 64
    b57e:	f8 e0       	ldi	r31, 0x08	; 8
    b580:	85 e0       	ldi	r24, 0x05	; 5
    b582:	80 83       	st	Z, r24
    b584:	81 e0       	ldi	r24, 0x01	; 1
    b586:	87 83       	std	Z+7, r24	; 0x07
    b588:	28 e8       	ldi	r18, 0x88	; 136
    b58a:	33 e1       	ldi	r19, 0x13	; 19
    b58c:	20 a7       	std	Z+40, r18	; 0x28
    b58e:	31 a7       	std	Z+41, r19	; 0x29
    b590:	e0 e4       	ldi	r30, 0x40	; 64
    b592:	f9 e0       	ldi	r31, 0x09	; 9
    b594:	97 e0       	ldi	r25, 0x07	; 7
    b596:	90 83       	st	Z, r25
    b598:	87 83       	std	Z+7, r24	; 0x07
    b59a:	8d e0       	ldi	r24, 0x0D	; 13
    b59c:	93 e0       	ldi	r25, 0x03	; 3
    b59e:	80 a7       	std	Z+40, r24	; 0x28
    b5a0:	91 a7       	std	Z+41, r25	; 0x29
    b5a2:	08 95       	ret

0000b5a4 <stop_second_timer>:
    b5a4:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    b5a8:	08 95       	ret

0000b5aa <initialize_32Mhz>:
//Enabling the 32 Mhz clock will change the system clock to 8 Mhz
//The 32 Mhz clock goes through a /4 before the system clock
void initialize_32Mhz(void)
{
	//Enable the 32 Mhz clock
	OSC.CTRL |= 0x02;
    b5aa:	e0 e5       	ldi	r30, 0x50	; 80
    b5ac:	f0 e0       	ldi	r31, 0x00	; 0
    b5ae:	80 81       	ld	r24, Z
    b5b0:	82 60       	ori	r24, 0x02	; 2
    b5b2:	80 83       	st	Z, r24
	//Wait for the clock to stabilize
	while (!(OSC.STATUS & 0x02));
    b5b4:	81 81       	ldd	r24, Z+1	; 0x01
    b5b6:	81 ff       	sbrs	r24, 1
    b5b8:	fd cf       	rjmp	.-6      	; 0xb5b4 <initialize_32Mhz+0xa>
	//Protect the Io registers
	CCP = CCP_IOREG_gc;
    b5ba:	88 ed       	ldi	r24, 0xD8	; 216
    b5bc:	84 bf       	out	0x34, r24	; 52
	//Set the clock to the 32 Mhz clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    b5be:	81 e0       	ldi	r24, 0x01	; 1
    b5c0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    b5c4:	08 95       	ret

0000b5c6 <write_hours>:
}

void write_hours(void)
{
	eeprom_busy_wait();
    b5c6:	ef ec       	ldi	r30, 0xCF	; 207
    b5c8:	f1 e0       	ldi	r31, 0x01	; 1
    b5ca:	80 81       	ld	r24, Z
    b5cc:	88 23       	and	r24, r24
    b5ce:	ec f3       	brlt	.-6      	; 0xb5ca <write_hours+0x4>
	eeprom_write_word((uint16_t *)EEP16_HOURS_ADDR, hours);
    b5d0:	60 91 40 23 	lds	r22, 0x2340	; 0x802340 <hours>
    b5d4:	70 91 41 23 	lds	r23, 0x2341	; 0x802341 <hours+0x1>
    b5d8:	82 e4       	ldi	r24, 0x42	; 66
    b5da:	90 e0       	ldi	r25, 0x00	; 0
    b5dc:	0e 94 14 6f 	call	0xde28	; 0xde28 <eeprom_write_word>
	eeprom_busy_wait();
    b5e0:	ef ec       	ldi	r30, 0xCF	; 207
    b5e2:	f1 e0       	ldi	r31, 0x01	; 1
    b5e4:	80 81       	ld	r24, Z
    b5e6:	88 23       	and	r24, r24
    b5e8:	ec f3       	brlt	.-6      	; 0xb5e4 <write_hours+0x1e>
	eeprom_write_word((uint16_t *)EEP16_HOURS_CHKSM, ~hours);
    b5ea:	60 91 40 23 	lds	r22, 0x2340	; 0x802340 <hours>
    b5ee:	70 91 41 23 	lds	r23, 0x2341	; 0x802341 <hours+0x1>
    b5f2:	60 95       	com	r22
    b5f4:	70 95       	com	r23
    b5f6:	84 e4       	ldi	r24, 0x44	; 68
    b5f8:	90 e0       	ldi	r25, 0x00	; 0
    b5fa:	0e 94 14 6f 	call	0xde28	; 0xde28 <eeprom_write_word>
	eeprom_busy_wait();
    b5fe:	ef ec       	ldi	r30, 0xCF	; 207
    b600:	f1 e0       	ldi	r31, 0x01	; 1
    b602:	80 81       	ld	r24, Z
    b604:	88 23       	and	r24, r24
    b606:	ec f3       	brlt	.-6      	; 0xb602 <write_hours+0x3c>
	eeprom_write_word((uint16_t *)EEP16_HOURS_BKP, hours);
    b608:	60 91 40 23 	lds	r22, 0x2340	; 0x802340 <hours>
    b60c:	70 91 41 23 	lds	r23, 0x2341	; 0x802341 <hours+0x1>
    b610:	82 e5       	ldi	r24, 0x52	; 82
    b612:	90 e0       	ldi	r25, 0x00	; 0
    b614:	0e 94 14 6f 	call	0xde28	; 0xde28 <eeprom_write_word>
	eeprom_busy_wait();
    b618:	ef ec       	ldi	r30, 0xCF	; 207
    b61a:	f1 e0       	ldi	r31, 0x01	; 1
    b61c:	80 81       	ld	r24, Z
    b61e:	88 23       	and	r24, r24
    b620:	ec f3       	brlt	.-6      	; 0xb61c <write_hours+0x56>
	eeprom_write_word((uint16_t *)EEP16_HOURS_BKP_CHKSM, ~hours);
    b622:	60 91 40 23 	lds	r22, 0x2340	; 0x802340 <hours>
    b626:	70 91 41 23 	lds	r23, 0x2341	; 0x802341 <hours+0x1>
    b62a:	60 95       	com	r22
    b62c:	70 95       	com	r23
    b62e:	84 e5       	ldi	r24, 0x54	; 84
    b630:	90 e0       	ldi	r25, 0x00	; 0
    b632:	0e 94 14 6f 	call	0xde28	; 0xde28 <eeprom_write_word>
	eeprom_busy_wait();
    b636:	ef ec       	ldi	r30, 0xCF	; 207
    b638:	f1 e0       	ldi	r31, 0x01	; 1
    b63a:	80 81       	ld	r24, Z
    b63c:	88 23       	and	r24, r24
    b63e:	ec f3       	brlt	.-6      	; 0xb63a <write_hours+0x74>
}
    b640:	08 95       	ret

0000b642 <write_minutes>:

void write_minutes(void)
{
	eeprom_busy_wait();
    b642:	ef ec       	ldi	r30, 0xCF	; 207
    b644:	f1 e0       	ldi	r31, 0x01	; 1
    b646:	80 81       	ld	r24, Z
    b648:	88 23       	and	r24, r24
    b64a:	ec f3       	brlt	.-6      	; 0xb646 <write_minutes+0x4>
	eeprom_write_byte((uint8_t *)EEP8_MINUTES_ADDR, minutes);
    b64c:	60 91 02 23 	lds	r22, 0x2302	; 0x802302 <minutes>
    b650:	80 e4       	ldi	r24, 0x40	; 64
    b652:	90 e0       	ldi	r25, 0x00	; 0
    b654:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <eeprom_write_byte>
	eeprom_busy_wait();
    b658:	ef ec       	ldi	r30, 0xCF	; 207
    b65a:	f1 e0       	ldi	r31, 0x01	; 1
    b65c:	80 81       	ld	r24, Z
    b65e:	88 23       	and	r24, r24
    b660:	ec f3       	brlt	.-6      	; 0xb65c <write_minutes+0x1a>
	eeprom_write_byte((uint8_t *)EEP8_MINUTES_CHKSM, ~minutes);
    b662:	60 91 02 23 	lds	r22, 0x2302	; 0x802302 <minutes>
    b666:	60 95       	com	r22
    b668:	81 e4       	ldi	r24, 0x41	; 65
    b66a:	90 e0       	ldi	r25, 0x00	; 0
    b66c:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <eeprom_write_byte>
	eeprom_busy_wait();
    b670:	ef ec       	ldi	r30, 0xCF	; 207
    b672:	f1 e0       	ldi	r31, 0x01	; 1
    b674:	80 81       	ld	r24, Z
    b676:	88 23       	and	r24, r24
    b678:	ec f3       	brlt	.-6      	; 0xb674 <write_minutes+0x32>
	eeprom_write_byte((uint8_t *)EEP8_MINUTES_BKP, minutes);
    b67a:	60 91 02 23 	lds	r22, 0x2302	; 0x802302 <minutes>
    b67e:	80 e5       	ldi	r24, 0x50	; 80
    b680:	90 e0       	ldi	r25, 0x00	; 0
    b682:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <eeprom_write_byte>
	eeprom_busy_wait();
    b686:	ef ec       	ldi	r30, 0xCF	; 207
    b688:	f1 e0       	ldi	r31, 0x01	; 1
    b68a:	80 81       	ld	r24, Z
    b68c:	88 23       	and	r24, r24
    b68e:	ec f3       	brlt	.-6      	; 0xb68a <write_minutes+0x48>
	eeprom_write_byte((uint8_t *)EEP8_MINUTES_BKP_CKSM, ~minutes);
    b690:	60 91 02 23 	lds	r22, 0x2302	; 0x802302 <minutes>
    b694:	60 95       	com	r22
    b696:	81 e5       	ldi	r24, 0x51	; 81
    b698:	90 e0       	ldi	r25, 0x00	; 0
    b69a:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <eeprom_write_byte>
	eeprom_busy_wait();
    b69e:	ef ec       	ldi	r30, 0xCF	; 207
    b6a0:	f1 e0       	ldi	r31, 0x01	; 1
    b6a2:	80 81       	ld	r24, Z
    b6a4:	88 23       	and	r24, r24
    b6a6:	ec f3       	brlt	.-6      	; 0xb6a2 <write_minutes+0x60>
}
    b6a8:	08 95       	ret

0000b6aa <read_hours>:

void read_hours(void)
{
    b6aa:	cf 93       	push	r28
    b6ac:	df 93       	push	r29
	uint16_t v1, v2;
	eeprom_busy_wait();
    b6ae:	ef ec       	ldi	r30, 0xCF	; 207
    b6b0:	f1 e0       	ldi	r31, 0x01	; 1
    b6b2:	80 81       	ld	r24, Z
    b6b4:	88 23       	and	r24, r24
    b6b6:	ec f3       	brlt	.-6      	; 0xb6b2 <read_hours+0x8>
	v1 = eeprom_read_word((const uint16_t*)EEP16_HOURS_ADDR);
    b6b8:	82 e4       	ldi	r24, 0x42	; 66
    b6ba:	90 e0       	ldi	r25, 0x00	; 0
    b6bc:	0e 94 d1 6e 	call	0xdda2	; 0xdda2 <eeprom_read_word>
    b6c0:	ec 01       	movw	r28, r24
	eeprom_busy_wait();
    b6c2:	ef ec       	ldi	r30, 0xCF	; 207
    b6c4:	f1 e0       	ldi	r31, 0x01	; 1
    b6c6:	80 81       	ld	r24, Z
    b6c8:	88 23       	and	r24, r24
    b6ca:	ec f3       	brlt	.-6      	; 0xb6c6 <read_hours+0x1c>
	v2 = eeprom_read_word((const uint16_t*)EEP16_HOURS_CHKSM);
    b6cc:	84 e4       	ldi	r24, 0x44	; 68
    b6ce:	90 e0       	ldi	r25, 0x00	; 0
    b6d0:	0e 94 d1 6e 	call	0xdda2	; 0xdda2 <eeprom_read_word>
	if ((v1 ^ v2) == 0xFFFF)
    b6d4:	8c 27       	eor	r24, r28
    b6d6:	9d 27       	eor	r25, r29
    b6d8:	01 96       	adiw	r24, 0x01	; 1
    b6da:	29 f4       	brne	.+10     	; 0xb6e6 <read_hours+0x3c>
	{
		hours = v1;
    b6dc:	c0 93 40 23 	sts	0x2340, r28	; 0x802340 <hours>
    b6e0:	d0 93 41 23 	sts	0x2341, r29	; 0x802341 <hours+0x1>
		return;
    b6e4:	20 c0       	rjmp	.+64     	; 0xb726 <read_hours+0x7c>
	}
	eeprom_busy_wait();
    b6e6:	ef ec       	ldi	r30, 0xCF	; 207
    b6e8:	f1 e0       	ldi	r31, 0x01	; 1
    b6ea:	80 81       	ld	r24, Z
    b6ec:	88 23       	and	r24, r24
    b6ee:	ec f3       	brlt	.-6      	; 0xb6ea <read_hours+0x40>
	v1 = eeprom_read_word((const uint16_t*)EEP16_HOURS_BKP);
    b6f0:	82 e5       	ldi	r24, 0x52	; 82
    b6f2:	90 e0       	ldi	r25, 0x00	; 0
    b6f4:	0e 94 d1 6e 	call	0xdda2	; 0xdda2 <eeprom_read_word>
    b6f8:	ec 01       	movw	r28, r24
	eeprom_busy_wait();
    b6fa:	ef ec       	ldi	r30, 0xCF	; 207
    b6fc:	f1 e0       	ldi	r31, 0x01	; 1
    b6fe:	80 81       	ld	r24, Z
    b700:	88 23       	and	r24, r24
    b702:	ec f3       	brlt	.-6      	; 0xb6fe <read_hours+0x54>
	v2 = eeprom_read_word((const uint16_t*)EEP16_HOURS_BKP_CHKSM);
    b704:	84 e5       	ldi	r24, 0x54	; 84
    b706:	90 e0       	ldi	r25, 0x00	; 0
    b708:	0e 94 d1 6e 	call	0xdda2	; 0xdda2 <eeprom_read_word>
	if ((v1 ^ v2) == 0xFFFF)
    b70c:	8c 27       	eor	r24, r28
    b70e:	9d 27       	eor	r25, r29
    b710:	01 96       	adiw	r24, 0x01	; 1
    b712:	29 f4       	brne	.+10     	; 0xb71e <read_hours+0x74>
	{
		hours = v1;
    b714:	c0 93 40 23 	sts	0x2340, r28	; 0x802340 <hours>
    b718:	d0 93 41 23 	sts	0x2341, r29	; 0x802341 <hours+0x1>
		return;
    b71c:	04 c0       	rjmp	.+8      	; 0xb726 <read_hours+0x7c>
	}

	hours = 0;
    b71e:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <hours>
    b722:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <hours+0x1>
}
    b726:	df 91       	pop	r29
    b728:	cf 91       	pop	r28
    b72a:	08 95       	ret

0000b72c <read_minutes>:

void read_minutes(void)
{
    b72c:	cf 93       	push	r28
	uint8_t v1, v2;
	eeprom_busy_wait();
    b72e:	ef ec       	ldi	r30, 0xCF	; 207
    b730:	f1 e0       	ldi	r31, 0x01	; 1
    b732:	80 81       	ld	r24, Z
    b734:	88 23       	and	r24, r24
    b736:	ec f3       	brlt	.-6      	; 0xb732 <read_minutes+0x6>
	v1 = eeprom_read_byte((uint8_t *)EEP8_MINUTES_ADDR);
    b738:	80 e4       	ldi	r24, 0x40	; 64
    b73a:	90 e0       	ldi	r25, 0x00	; 0
    b73c:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    b740:	c8 2f       	mov	r28, r24
	eeprom_busy_wait();
    b742:	ef ec       	ldi	r30, 0xCF	; 207
    b744:	f1 e0       	ldi	r31, 0x01	; 1
    b746:	80 81       	ld	r24, Z
    b748:	88 23       	and	r24, r24
    b74a:	ec f3       	brlt	.-6      	; 0xb746 <read_minutes+0x1a>
	v2 = eeprom_read_byte((uint8_t *)EEP8_MINUTES_CHKSM);
    b74c:	81 e4       	ldi	r24, 0x41	; 65
    b74e:	90 e0       	ldi	r25, 0x00	; 0
    b750:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
	if ((v1 ^ v2) == 0xFF)
    b754:	8c 27       	eor	r24, r28
    b756:	8f 3f       	cpi	r24, 0xFF	; 255
    b758:	19 f4       	brne	.+6      	; 0xb760 <read_minutes+0x34>
	{
		minutes = v1;
    b75a:	c0 93 02 23 	sts	0x2302, r28	; 0x802302 <minutes>
		return;
    b75e:	1b c0       	rjmp	.+54     	; 0xb796 <read_minutes+0x6a>
	}
	eeprom_busy_wait();
    b760:	ef ec       	ldi	r30, 0xCF	; 207
    b762:	f1 e0       	ldi	r31, 0x01	; 1
    b764:	80 81       	ld	r24, Z
    b766:	88 23       	and	r24, r24
    b768:	ec f3       	brlt	.-6      	; 0xb764 <read_minutes+0x38>
	v1 = eeprom_read_byte((uint8_t *)EEP8_MINUTES_BKP);
    b76a:	80 e5       	ldi	r24, 0x50	; 80
    b76c:	90 e0       	ldi	r25, 0x00	; 0
    b76e:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
    b772:	c8 2f       	mov	r28, r24
	eeprom_busy_wait();
    b774:	ef ec       	ldi	r30, 0xCF	; 207
    b776:	f1 e0       	ldi	r31, 0x01	; 1
    b778:	80 81       	ld	r24, Z
    b77a:	88 23       	and	r24, r24
    b77c:	ec f3       	brlt	.-6      	; 0xb778 <read_minutes+0x4c>
	v2 = eeprom_read_byte((uint8_t *)EEP8_MINUTES_BKP_CKSM);
    b77e:	81 e5       	ldi	r24, 0x51	; 81
    b780:	90 e0       	ldi	r25, 0x00	; 0
    b782:	0e 94 c1 6e 	call	0xdd82	; 0xdd82 <eeprom_read_byte>
	if ((v1 ^ v2) == 0xFF)
    b786:	8c 27       	eor	r24, r28
    b788:	8f 3f       	cpi	r24, 0xFF	; 255
    b78a:	19 f4       	brne	.+6      	; 0xb792 <read_minutes+0x66>
	{
		minutes = v1;
    b78c:	c0 93 02 23 	sts	0x2302, r28	; 0x802302 <minutes>
		return;
    b790:	02 c0       	rjmp	.+4      	; 0xb796 <read_minutes+0x6a>
	}

	minutes = 0;
    b792:	10 92 02 23 	sts	0x2302, r1	; 0x802302 <minutes>
}
    b796:	cf 91       	pop	r28
    b798:	08 95       	ret

0000b79a <initialize_runtime_reset_timer>:
	TCD1.CCA = 781;
}

void initialize_runtime_reset_timer(void)
{
	runtimer_on = FALSE;
    b79a:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <runtimer_on>

	//Second timer for the run time of the RB
	//Enable timer 0 with /1024 prescalar
	TCC0.CTRLA = 0x07;
    b79e:	e0 e0       	ldi	r30, 0x00	; 0
    b7a0:	f8 e0       	ldi	r31, 0x08	; 8
    b7a2:	87 e0       	ldi	r24, 0x07	; 7
    b7a4:	80 83       	st	Z, r24
	//Enable Compare A interrupt
	TCC0.INTCTRLB = 0x01;
    b7a6:	81 e0       	ldi	r24, 0x01	; 1
    b7a8:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CCA = 31250;
    b7aa:	82 e1       	ldi	r24, 0x12	; 18
    b7ac:	9a e7       	ldi	r25, 0x7A	; 122
    b7ae:	80 a7       	std	Z+40, r24	; 0x28
    b7b0:	91 a7       	std	Z+41, r25	; 0x29

	read_hours();
    b7b2:	0e 94 55 5b 	call	0xb6aa	; 0xb6aa <read_hours>
	read_minutes();
    b7b6:	0e 94 96 5b 	call	0xb72c	; 0xb72c <read_minutes>

	//Turn on tracking device
	PORTA_DIRSET = (1 << TRK);
    b7ba:	82 e0       	ldi	r24, 0x02	; 2
    b7bc:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	TRK_ON;
    b7c0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    b7c4:	08 95       	ret

0000b7c6 <start_input_reset>:
}


void start_input_reset(void)
{
	input_reset_flag = TRUE;
    b7c6:	81 e0       	ldi	r24, 0x01	; 1
    b7c8:	80 93 fe 22 	sts	0x22FE, r24	; 0x8022fe <input_reset_flag>
	input_reset_sec = 0;
    b7cc:	10 92 bc 22 	sts	0x22BC, r1	; 0x8022bc <input_reset_sec>
    b7d0:	08 95       	ret

0000b7d2 <__vector_16>:
}

//Each interrupt occurs at 1 second
ISR(SECOND_INT)
{
    b7d2:	1f 92       	push	r1
    b7d4:	0f 92       	push	r0
    b7d6:	0f b6       	in	r0, 0x3f	; 63
    b7d8:	0f 92       	push	r0
    b7da:	11 24       	eor	r1, r1
    b7dc:	08 b6       	in	r0, 0x38	; 56
    b7de:	0f 92       	push	r0
    b7e0:	18 be       	out	0x38, r1	; 56
    b7e2:	09 b6       	in	r0, 0x39	; 57
    b7e4:	0f 92       	push	r0
    b7e6:	19 be       	out	0x39, r1	; 57
    b7e8:	0b b6       	in	r0, 0x3b	; 59
    b7ea:	0f 92       	push	r0
    b7ec:	1b be       	out	0x3b, r1	; 59
    b7ee:	2f 93       	push	r18
    b7f0:	3f 93       	push	r19
    b7f2:	4f 93       	push	r20
    b7f4:	5f 93       	push	r21
    b7f6:	6f 93       	push	r22
    b7f8:	7f 93       	push	r23
    b7fa:	8f 93       	push	r24
    b7fc:	9f 93       	push	r25
    b7fe:	af 93       	push	r26
    b800:	bf 93       	push	r27
    b802:	ef 93       	push	r30
    b804:	ff 93       	push	r31
	//Reset counter
	TCC0.CNT = 0;
    b806:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    b80a:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	/*if(!motor_info_sent)
	{
		send_motor_info();
	}*/

	if (!can_functioning && !printing_info)
    b80e:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    b812:	81 11       	cpse	r24, r1
    b814:	0f c0       	rjmp	.+30     	; 0xb834 <__vector_16+0x62>
    b816:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <printing_info>
    b81a:	81 11       	cpse	r24, r1
    b81c:	0b c0       	rjmp	.+22     	; 0xb834 <__vector_16+0x62>
	{
		send_CAN_ACK();
    b81e:	0e 94 3d 24 	call	0x487a	; 0x487a <send_CAN_ACK>
		ack_counter++;
    b822:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    b826:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    b82a:	01 96       	adiw	r24, 0x01	; 1
    b82c:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <ack_counter>
    b830:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <ack_counter+0x1>
	}

	if (top_error || back_safety_alert || fuse_error)
    b834:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <top_error>
    b838:	81 11       	cpse	r24, r1
    b83a:	08 c0       	rjmp	.+16     	; 0xb84c <__vector_16+0x7a>
    b83c:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <back_safety_alert>
    b840:	81 11       	cpse	r24, r1
    b842:	04 c0       	rjmp	.+8      	; 0xb84c <__vector_16+0x7a>
    b844:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <fuse_error>
    b848:	88 23       	and	r24, r24
    b84a:	b1 f0       	breq	.+44     	; 0xb878 <__vector_16+0xa6>
	{
		LCD_LED_TGL;
    b84c:	80 e1       	ldi	r24, 0x10	; 16
    b84e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
		//If input flag is set, count to some time and print the menu
		if (input_reset_flag == TRUE && (++input_reset_sec > INPUT_RESET_SEC))
    b852:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <input_reset_flag>
    b856:	81 30       	cpi	r24, 0x01	; 1
    b858:	09 f0       	breq	.+2      	; 0xb85c <__vector_16+0x8a>
    b85a:	2d c1       	rjmp	.+602    	; 0xbab6 <__vector_16+0x2e4>
    b85c:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <input_reset_sec>
    b860:	8f 5f       	subi	r24, 0xFF	; 255
    b862:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <input_reset_sec>
    b866:	83 30       	cpi	r24, 0x03	; 3
    b868:	08 f4       	brcc	.+2      	; 0xb86c <__vector_16+0x9a>
    b86a:	25 c1       	rjmp	.+586    	; 0xbab6 <__vector_16+0x2e4>
		{
			input_reset_flag = FALSE;
    b86c:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <input_reset_flag>
			print_menu = TRUE;
    b870:	81 e0       	ldi	r24, 0x01	; 1
    b872:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    b876:	1f c1       	rjmp	.+574    	; 0xbab6 <__vector_16+0x2e4>
		}
		return;
	}

	//Counter for the lifetime usage of the cleaner
	if (runtimer_on)
    b878:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <runtimer_on>
    b87c:	88 23       	and	r24, r24
    b87e:	09 f1       	breq	.+66     	; 0xb8c2 <__vector_16+0xf0>
	{
		if (++seconds >= 60)
    b880:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <seconds>
    b884:	8f 5f       	subi	r24, 0xFF	; 255
    b886:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <seconds>
    b88a:	8c 33       	cpi	r24, 0x3C	; 60
    b88c:	d0 f0       	brcs	.+52     	; 0xb8c2 <__vector_16+0xf0>
		{
			if (++minutes >= 60)
    b88e:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <minutes>
    b892:	8f 5f       	subi	r24, 0xFF	; 255
    b894:	80 93 02 23 	sts	0x2302, r24	; 0x802302 <minutes>
    b898:	8c 33       	cpi	r24, 0x3C	; 60
    b89a:	70 f0       	brcs	.+28     	; 0xb8b8 <__vector_16+0xe6>
			{
				hours++;
    b89c:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <hours>
    b8a0:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <hours+0x1>
    b8a4:	01 96       	adiw	r24, 0x01	; 1
    b8a6:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <hours>
    b8aa:	90 93 41 23 	sts	0x2341, r25	; 0x802341 <hours+0x1>
				update_hour = TRUE;
    b8ae:	81 e0       	ldi	r24, 0x01	; 1
    b8b0:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <update_hour>
				minutes = 0;
    b8b4:	10 92 02 23 	sts	0x2302, r1	; 0x802302 <minutes>
			}
			//IVA002: Fix for EEP corruption
			update_minutes = true;
    b8b8:	81 e0       	ldi	r24, 0x01	; 1
    b8ba:	80 93 fc 22 	sts	0x22FC, r24	; 0x8022fc <update_minutes>
			seconds = 0;
    b8be:	10 92 b4 22 	sts	0x22B4, r1	; 0x8022b4 <seconds>
		}
	}

	//Checks if the horn button state is incorrect
	if ((S_HRN_LOW && horn == OFF) || (!S_HRN_LOW && horn == ON))
    b8c2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    b8c6:	81 fd       	sbrc	r24, 1
    b8c8:	04 c0       	rjmp	.+8      	; 0xb8d2 <__vector_16+0x100>
    b8ca:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <horn>
    b8ce:	88 23       	and	r24, r24
    b8d0:	41 f0       	breq	.+16     	; 0xb8e2 <__vector_16+0x110>
    b8d2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    b8d6:	81 ff       	sbrs	r24, 1
    b8d8:	13 c0       	rjmp	.+38     	; 0xb900 <__vector_16+0x12e>
    b8da:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <horn>
    b8de:	81 30       	cpi	r24, 0x01	; 1
    b8e0:	79 f4       	brne	.+30     	; 0xb900 <__vector_16+0x12e>
	{
		if (horn_check_failed >= 1)
    b8e2:	80 91 00 23 	lds	r24, 0x2300	; 0x802300 <horn_check_failed>
    b8e6:	88 23       	and	r24, r24
    b8e8:	31 f0       	breq	.+12     	; 0xb8f6 <__vector_16+0x124>
		{
			switch_pressed[S_HRN_NUM] = TRUE;
    b8ea:	81 e0       	ldi	r24, 0x01	; 1
    b8ec:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <switch_pressed+0xb>
			horn_check_failed = FALSE;
    b8f0:	10 92 00 23 	sts	0x2300, r1	; 0x802300 <horn_check_failed>
    b8f4:	05 c0       	rjmp	.+10     	; 0xb900 <__vector_16+0x12e>
		}
		else
		{
			horn_check_failed++;
    b8f6:	80 91 00 23 	lds	r24, 0x2300	; 0x802300 <horn_check_failed>
    b8fa:	8f 5f       	subi	r24, 0xFF	; 255
    b8fc:	80 93 00 23 	sts	0x2300, r24	; 0x802300 <horn_check_failed>
		}
	}

#ifndef  __SIM__
	//Checks if the extra pressure button state is incorrect
	if ((S_EP_LOW && extra_pressure == OFF) || (!S_EP_LOW && extra_pressure == ON))
    b900:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    b904:	85 fd       	sbrc	r24, 5
    b906:	04 c0       	rjmp	.+8      	; 0xb910 <__vector_16+0x13e>
    b908:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <extra_pressure>
    b90c:	88 23       	and	r24, r24
    b90e:	41 f0       	breq	.+16     	; 0xb920 <__vector_16+0x14e>
    b910:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    b914:	85 ff       	sbrs	r24, 5
    b916:	13 c0       	rjmp	.+38     	; 0xb93e <__vector_16+0x16c>
    b918:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <extra_pressure>
    b91c:	81 30       	cpi	r24, 0x01	; 1
    b91e:	79 f4       	brne	.+30     	; 0xb93e <__vector_16+0x16c>
	{
		if (ep_check_failed >= 2)
    b920:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <ep_check_failed>
    b924:	82 30       	cpi	r24, 0x02	; 2
    b926:	30 f0       	brcs	.+12     	; 0xb934 <__vector_16+0x162>
		{
			switch_pressed[S_EP_NUM] = TRUE;
    b928:	81 e0       	ldi	r24, 0x01	; 1
    b92a:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <switch_pressed+0x6>
			ep_check_failed = FALSE;
    b92e:	10 92 c8 22 	sts	0x22C8, r1	; 0x8022c8 <ep_check_failed>
    b932:	05 c0       	rjmp	.+10     	; 0xb93e <__vector_16+0x16c>
		}
		else
		{
			ep_check_failed++;
    b934:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <ep_check_failed>
    b938:	8f 5f       	subi	r24, 0xFF	; 255
    b93a:	80 93 c8 22 	sts	0x22C8, r24	; 0x8022c8 <ep_check_failed>
		}
	}
#endif // ! __SIM_

	//If input flag is set, count to some time and print the menu
	if (input_reset_flag == TRUE && (++input_reset_sec > INPUT_RESET_SEC))
    b93e:	80 91 fe 22 	lds	r24, 0x22FE	; 0x8022fe <input_reset_flag>
    b942:	81 30       	cpi	r24, 0x01	; 1
    b944:	61 f4       	brne	.+24     	; 0xb95e <__vector_16+0x18c>
    b946:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <input_reset_sec>
    b94a:	8f 5f       	subi	r24, 0xFF	; 255
    b94c:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <input_reset_sec>
    b950:	83 30       	cpi	r24, 0x03	; 3
    b952:	28 f0       	brcs	.+10     	; 0xb95e <__vector_16+0x18c>
	{
		input_reset_flag = FALSE;
    b954:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <input_reset_flag>
		print_menu = TRUE;
    b958:	81 e0       	ldi	r24, 0x01	; 1
    b95a:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
	}

	//Blink indefinitely when tank is full
	if (tank_full || alarm_on)
    b95e:	80 91 91 22 	lds	r24, 0x2291	; 0x802291 <tank_full>
    b962:	81 11       	cpse	r24, r1
    b964:	04 c0       	rjmp	.+8      	; 0xb96e <__vector_16+0x19c>
    b966:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <alarm_on>
    b96a:	88 23       	and	r24, r24
    b96c:	19 f0       	breq	.+6      	; 0xb974 <__vector_16+0x1a2>
	{
		LCD_LED_TGL;
    b96e:	80 e1       	ldi	r24, 0x10	; 16
    b970:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
	}

	//Blinks the brush led
	if (blink_brush_led)
    b974:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <blink_brush_led>
    b978:	88 23       	and	r24, r24
    b97a:	19 f0       	breq	.+6      	; 0xb982 <__vector_16+0x1b0>
	{
		L_BR_TGL;
    b97c:	88 e0       	ldi	r24, 0x08	; 8
    b97e:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
	}

	//Blinks the vacuum led
	if (blink_vac_led)
    b982:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <blink_vac_led>
    b986:	88 23       	and	r24, r24
    b988:	19 f0       	breq	.+6      	; 0xb990 <__vector_16+0x1be>
	{
		L_VAC_TGL;
    b98a:	80 e4       	ldi	r24, 0x40	; 64
    b98c:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <__TEXT_REGION_LENGTH__+0x700707>
	{
		L_SLD_TGL;
	}*/

	//Pauses the lcd screen from updating for a while so message can be read
	if (lcd_update_pause > 1)
    b990:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    b994:	82 30       	cpi	r24, 0x02	; 2
    b996:	30 f0       	brcs	.+12     	; 0xb9a4 <__vector_16+0x1d2>
	{
		lcd_update_pause--;
    b998:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    b99c:	81 50       	subi	r24, 0x01	; 1
    b99e:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
    b9a2:	10 c0       	rjmp	.+32     	; 0xb9c4 <__vector_16+0x1f2>
}
	else if (lcd_update_pause == 1)
    b9a4:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    b9a8:	81 30       	cpi	r24, 0x01	; 1
    b9aa:	49 f4       	brne	.+18     	; 0xb9be <__vector_16+0x1ec>
	{
		lcd_update_pause--;
    b9ac:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    b9b0:	81 50       	subi	r24, 0x01	; 1
    b9b2:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <lcd_update_pause>
		print_menu = TRUE;
    b9b6:	81 e0       	ldi	r24, 0x01	; 1
    b9b8:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
    b9bc:	03 c0       	rjmp	.+6      	; 0xb9c4 <__vector_16+0x1f2>
	}
	else
		update_menu = TRUE;
    b9be:	81 e0       	ldi	r24, 0x01	; 1
    b9c0:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <update_menu>

	if (motors_status == MOTORS_OFF && battery_status != BATTERY_UNKNOWN)
    b9c4:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <motors_status>
    b9c8:	8a 3a       	cpi	r24, 0xAA	; 170
    b9ca:	41 f4       	brne	.+16     	; 0xb9dc <__vector_16+0x20a>
    b9cc:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    b9d0:	88 23       	and	r24, r24
    b9d2:	71 f1       	breq	.+92     	; 0xba30 <__vector_16+0x25e>
	{
		print_battery_off = TRUE;
    b9d4:	81 e0       	ldi	r24, 0x01	; 1
    b9d6:	80 93 44 23 	sts	0x2344, r24	; 0x802344 <print_battery_off>
    b9da:	2e c0       	rjmp	.+92     	; 0xba38 <__vector_16+0x266>
	}
	//Clear screen first then print battery low
	else if (battery_status == BATTERY_LOW)
    b9dc:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <battery_status>
    b9e0:	8b 3b       	cpi	r24, 0xBB	; 187
    b9e2:	89 f4       	brne	.+34     	; 0xba06 <__vector_16+0x234>
	{
		if (battery_low_counter < 2)
    b9e4:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <battery_low_counter>
    b9e8:	82 30       	cpi	r24, 0x02	; 2
    b9ea:	48 f4       	brcc	.+18     	; 0xb9fe <__vector_16+0x22c>
		{
			print_menu = TRUE;
    b9ec:	81 e0       	ldi	r24, 0x01	; 1
    b9ee:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
			battery_low_counter++;
    b9f2:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <battery_low_counter>
    b9f6:	8f 5f       	subi	r24, 0xFF	; 255
    b9f8:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <battery_low_counter>
    b9fc:	1d c0       	rjmp	.+58     	; 0xba38 <__vector_16+0x266>
		}
		else
		{
			print_battery_low = TRUE;
    b9fe:	81 e0       	ldi	r24, 0x01	; 1
    ba00:	80 93 ae 22 	sts	0x22AE, r24	; 0x8022ae <print_battery_low>
    ba04:	19 c0       	rjmp	.+50     	; 0xba38 <__vector_16+0x266>
		}
	}
	//Clear screen first then print battery off
	else if (battery_status == BATTERY_OFF)
    ba06:	8c 3c       	cpi	r24, 0xCC	; 204
    ba08:	99 f4       	brne	.+38     	; 0xba30 <__vector_16+0x25e>
	{
		battery_low_counter = 0;
    ba0a:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <battery_low_counter>
		if (battery_off_counter < 2)
    ba0e:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <battery_off_counter>
    ba12:	82 30       	cpi	r24, 0x02	; 2
    ba14:	48 f4       	brcc	.+18     	; 0xba28 <__vector_16+0x256>
		{
			print_menu = TRUE;
    ba16:	81 e0       	ldi	r24, 0x01	; 1
    ba18:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <print_menu>
			battery_off_counter++;
    ba1c:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <battery_off_counter>
    ba20:	8f 5f       	subi	r24, 0xFF	; 255
    ba22:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <battery_off_counter>
    ba26:	08 c0       	rjmp	.+16     	; 0xba38 <__vector_16+0x266>
		}
		else
		{
			print_battery_off = TRUE;
    ba28:	81 e0       	ldi	r24, 0x01	; 1
    ba2a:	80 93 44 23 	sts	0x2344, r24	; 0x802344 <print_battery_off>
    ba2e:	04 c0       	rjmp	.+8      	; 0xba38 <__vector_16+0x266>
		}
	}
	//Reset counters
	else
	{
		battery_low_counter = 0;
    ba30:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <battery_low_counter>
		battery_off_counter = 0;
    ba34:	10 92 cc 22 	sts	0x22CC, r1	; 0x8022cc <battery_off_counter>
	}

	if (printing_info && lcd_update_pause == 0)
    ba38:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <printing_info>
    ba3c:	88 23       	and	r24, r24
    ba3e:	89 f0       	breq	.+34     	; 0xba62 <__vector_16+0x290>
    ba40:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <lcd_update_pause>
    ba44:	81 11       	cpse	r24, r1
    ba46:	0d c0       	rjmp	.+26     	; 0xba62 <__vector_16+0x290>
	{
		printing_info_counter++;
    ba48:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <printing_info_counter>
    ba4c:	8f 5f       	subi	r24, 0xFF	; 255
    ba4e:	80 93 f5 22 	sts	0x22F5, r24	; 0x8022f5 <printing_info_counter>
		if (printing_info_counter % 2 == 0)
    ba52:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <printing_info_counter>
    ba56:	80 fd       	sbrc	r24, 0
    ba58:	04 c0       	rjmp	.+8      	; 0xba62 <__vector_16+0x290>
			printed_info = FALSE;
    ba5a:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <printed_info>
    ba5e:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <printed_info+0x1>
	}

	if (can_functioning && (can_functioning_timer++ > 3))
    ba62:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    ba66:	88 23       	and	r24, r24
    ba68:	99 f0       	breq	.+38     	; 0xba90 <__vector_16+0x2be>
    ba6a:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <can_functioning_timer>
    ba6e:	91 e0       	ldi	r25, 0x01	; 1
    ba70:	98 0f       	add	r25, r24
    ba72:	90 93 43 23 	sts	0x2343, r25	; 0x802343 <can_functioning_timer>
    ba76:	84 30       	cpi	r24, 0x04	; 4
    ba78:	a8 f0       	brcs	.+42     	; 0xbaa4 <__vector_16+0x2d2>
	{
		can_functioning = FALSE;
    ba7a:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <can_functioning>
    ba7e:	08 c0       	rjmp	.+16     	; 0xba90 <__vector_16+0x2be>
	}

	if (can_functioning && (A3_can_functioning_timer++ > 3))
	{
		can_functioning = FALSE;
    ba80:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <can_functioning>
		A3_ack_received = FALSE;
    ba84:	10 92 5f 23 	sts	0x235F, r1	; 0x80235f <A3_ack_received>
		ack_counter = 0;
    ba88:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <ack_counter>
    ba8c:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <ack_counter+0x1>
	}

	if (reset_timer < 10)
    ba90:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <reset_timer>
    ba94:	8a 30       	cpi	r24, 0x0A	; 10
    ba96:	78 f4       	brcc	.+30     	; 0xbab6 <__vector_16+0x2e4>
		reset_timer++;
    ba98:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <reset_timer>
    ba9c:	8f 5f       	subi	r24, 0xFF	; 255
    ba9e:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <reset_timer>
    baa2:	09 c0       	rjmp	.+18     	; 0xbab6 <__vector_16+0x2e4>
	if (can_functioning && (can_functioning_timer++ > 3))
	{
		can_functioning = FALSE;
	}

	if (can_functioning && (A3_can_functioning_timer++ > 3))
    baa4:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <A3_can_functioning_timer>
    baa8:	91 e0       	ldi	r25, 0x01	; 1
    baaa:	98 0f       	add	r25, r24
    baac:	90 93 e4 22 	sts	0x22E4, r25	; 0x8022e4 <A3_can_functioning_timer>
    bab0:	84 30       	cpi	r24, 0x04	; 4
    bab2:	30 f7       	brcc	.-52     	; 0xba80 <__vector_16+0x2ae>
    bab4:	ed cf       	rjmp	.-38     	; 0xba90 <__vector_16+0x2be>
		ack_counter = 0;
	}

	if (reset_timer < 10)
		reset_timer++;
}
    bab6:	ff 91       	pop	r31
    bab8:	ef 91       	pop	r30
    baba:	bf 91       	pop	r27
    babc:	af 91       	pop	r26
    babe:	9f 91       	pop	r25
    bac0:	8f 91       	pop	r24
    bac2:	7f 91       	pop	r23
    bac4:	6f 91       	pop	r22
    bac6:	5f 91       	pop	r21
    bac8:	4f 91       	pop	r20
    baca:	3f 91       	pop	r19
    bacc:	2f 91       	pop	r18
    bace:	0f 90       	pop	r0
    bad0:	0b be       	out	0x3b, r0	; 59
    bad2:	0f 90       	pop	r0
    bad4:	09 be       	out	0x39, r0	; 57
    bad6:	0f 90       	pop	r0
    bad8:	08 be       	out	0x38, r0	; 56
    bada:	0f 90       	pop	r0
    badc:	0f be       	out	0x3f, r0	; 63
    bade:	0f 90       	pop	r0
    bae0:	1f 90       	pop	r1
    bae2:	18 95       	reti

0000bae4 <__vector_22>:

ISR(DEBOUNCE_INT)
{
    bae4:	1f 92       	push	r1
    bae6:	0f 92       	push	r0
    bae8:	0f b6       	in	r0, 0x3f	; 63
    baea:	0f 92       	push	r0
    baec:	11 24       	eor	r1, r1
    baee:	08 b6       	in	r0, 0x38	; 56
    baf0:	0f 92       	push	r0
    baf2:	18 be       	out	0x38, r1	; 56
    baf4:	09 b6       	in	r0, 0x39	; 57
    baf6:	0f 92       	push	r0
    baf8:	19 be       	out	0x39, r1	; 57
    bafa:	0a b6       	in	r0, 0x3a	; 58
    bafc:	0f 92       	push	r0
    bafe:	1a be       	out	0x3a, r1	; 58
    bb00:	0b b6       	in	r0, 0x3b	; 59
    bb02:	0f 92       	push	r0
    bb04:	1b be       	out	0x3b, r1	; 59
    bb06:	2f 92       	push	r2
    bb08:	3f 92       	push	r3
    bb0a:	4f 92       	push	r4
    bb0c:	5f 92       	push	r5
    bb0e:	6f 92       	push	r6
    bb10:	7f 92       	push	r7
    bb12:	8f 92       	push	r8
    bb14:	9f 92       	push	r9
    bb16:	af 92       	push	r10
    bb18:	bf 92       	push	r11
    bb1a:	cf 92       	push	r12
    bb1c:	df 92       	push	r13
    bb1e:	ef 92       	push	r14
    bb20:	ff 92       	push	r15
    bb22:	0f 93       	push	r16
    bb24:	1f 93       	push	r17
    bb26:	2f 93       	push	r18
    bb28:	3f 93       	push	r19
    bb2a:	4f 93       	push	r20
    bb2c:	5f 93       	push	r21
    bb2e:	6f 93       	push	r22
    bb30:	7f 93       	push	r23
    bb32:	8f 93       	push	r24
    bb34:	9f 93       	push	r25
    bb36:	af 93       	push	r26
    bb38:	bf 93       	push	r27
    bb3a:	cf 93       	push	r28
    bb3c:	df 93       	push	r29
    bb3e:	ef 93       	push	r30
    bb40:	ff 93       	push	r31
	//PORTF_OUTSET = (1 << 3);
	//Extra pressure debounce
	if (!user_settings_menu_enable)// while not in user menu
    bb42:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <user_settings_menu_enable>
    bb46:	81 11       	cpse	r24, r1
    bb48:	1c c0       	rjmp	.+56     	; 0xbb82 <__vector_22+0x9e>
	{
		if (ep_down)
    bb4a:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <ep_down>
    bb4e:	88 23       	and	r24, r24
    bb50:	29 f0       	breq	.+10     	; 0xbb5c <__vector_22+0x78>
			ep_down_counter++;
    bb52:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <ep_down_counter>
    bb56:	8f 5f       	subi	r24, 0xFF	; 255
    bb58:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <ep_down_counter>

		if (ep_up)
    bb5c:	80 91 f8 22 	lds	r24, 0x22F8	; 0x8022f8 <ep_up>
    bb60:	88 23       	and	r24, r24
    bb62:	79 f0       	breq	.+30     	; 0xbb82 <__vector_22+0x9e>
		{
			if (ep_down_counter >= _750_MS)
    bb64:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <ep_down_counter>
    bb68:	8b 34       	cpi	r24, 0x4B	; 75
    bb6a:	30 f0       	brcs	.+12     	; 0xbb78 <__vector_22+0x94>
			{
				switch_pressed[S_EP_NUM] = TRUE;
    bb6c:	81 e0       	ldi	r24, 0x01	; 1
    bb6e:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <switch_pressed+0x6>
				ep_up = FALSE;
    bb72:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <ep_up>
    bb76:	05 c0       	rjmp	.+10     	; 0xbb82 <__vector_22+0x9e>
			}
			else
				ep_down_counter++;
    bb78:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <ep_down_counter>
    bb7c:	8f 5f       	subi	r24, 0xFF	; 255
    bb7e:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <ep_down_counter>
		}
	}
	//Horn debounce
	if (hrn_down)
    bb82:	80 91 97 22 	lds	r24, 0x2297	; 0x802297 <hrn_down>
    bb86:	88 23       	and	r24, r24
    bb88:	29 f0       	breq	.+10     	; 0xbb94 <__vector_22+0xb0>
		hrn_down_counter++;
    bb8a:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <hrn_down_counter>
    bb8e:	8f 5f       	subi	r24, 0xFF	; 255
    bb90:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <hrn_down_counter>

	if (hrn_up)
    bb94:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <hrn_up>
    bb98:	88 23       	and	r24, r24
    bb9a:	09 f4       	brne	.+2      	; 0xbb9e <__vector_22+0xba>
    bb9c:	31 c1       	rjmp	.+610    	; 0xbe00 <__vector_22+0x31c>
	{
		if (hrn_down_counter >= _150_MS)
    bb9e:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <hrn_down_counter>
    bba2:	8f 30       	cpi	r24, 0x0F	; 15
    bba4:	30 f0       	brcs	.+12     	; 0xbbb2 <__vector_22+0xce>
		{
			switch_pressed[S_HRN_NUM] = TRUE;
    bba6:	81 e0       	ldi	r24, 0x01	; 1
    bba8:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <switch_pressed+0xb>
			hrn_up = FALSE;
    bbac:	10 92 b5 22 	sts	0x22B5, r1	; 0x8022b5 <hrn_up>
    bbb0:	27 c1       	rjmp	.+590    	; 0xbe00 <__vector_22+0x31c>
		}
		else
			hrn_down_counter++;
    bbb2:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <hrn_down_counter>
    bbb6:	8f 5f       	subi	r24, 0xFF	; 255
    bbb8:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <hrn_down_counter>
    bbbc:	21 c1       	rjmp	.+578    	; 0xbe00 <__vector_22+0x31c>
    bbbe:	21 96       	adiw	r28, 0x01	; 1
    bbc0:	2f ef       	ldi	r18, 0xFF	; 255
    bbc2:	e2 1a       	sub	r14, r18
    bbc4:	f2 0a       	sbc	r15, r18
    bbc6:	8e 01       	movw	r16, r28

	//Check all switches
	for (int num = 0; num < NUM_SWITCHES; num++)
	{
		//Check if switch has been pressed
		if (switch_down[num])
    bbc8:	fe 01       	movw	r30, r28
    bbca:	e7 52       	subi	r30, 0x27	; 39
    bbcc:	fe 4d       	sbci	r31, 0xDE	; 222
    bbce:	80 81       	ld	r24, Z
    bbd0:	88 23       	and	r24, r24
    bbd2:	09 f4       	brne	.+2      	; 0xbbd6 <__vector_22+0xf2>
    bbd4:	fd c0       	rjmp	.+506    	; 0xbdd0 <__vector_22+0x2ec>
		{
			//Auto switch can be held down for some time to change auto mode
			//So it require special operation
			if (num == S_ATO_NUM)
    bbd6:	cd 30       	cpi	r28, 0x0D	; 13
    bbd8:	d1 05       	cpc	r29, r1
    bbda:	f1 f5       	brne	.+124    	; 0xbc58 <__vector_22+0x174>
			{
				//Count up to a certain time
				if (switch_counter[num] <= _50_MS)
    bbdc:	f6 01       	movw	r30, r12
    bbde:	82 8d       	ldd	r24, Z+26	; 0x1a
    bbe0:	93 8d       	ldd	r25, Z+27	; 0x1b
    bbe2:	06 97       	sbiw	r24, 0x06	; 6
    bbe4:	30 f4       	brcc	.+12     	; 0xbbf2 <__vector_22+0x10e>
				{
					//Increment the counter
					switch_counter[num]++;
    bbe6:	82 8d       	ldd	r24, Z+26	; 0x1a
    bbe8:	93 8d       	ldd	r25, Z+27	; 0x1b
    bbea:	01 96       	adiw	r24, 0x01	; 1
    bbec:	82 8f       	std	Z+26, r24	; 0x1a
    bbee:	93 8f       	std	Z+27, r25	; 0x1b
    bbf0:	e6 cf       	rjmp	.-52     	; 0xbbbe <__vector_22+0xda>
				}
				else
				{
					//Auto switch can be held down for some time to set new auto mode
					if (!S_ATO_LOW)
    bbf2:	f3 01       	movw	r30, r6
    bbf4:	80 81       	ld	r24, Z
    bbf6:	84 ff       	sbrs	r24, 4
    bbf8:	19 c0       	rjmp	.+50     	; 0xbc2c <__vector_22+0x148>
					{
						//If held for long than 3 seconds
						if (switch_counter[num] < _3_SEC)
    bbfa:	f6 01       	movw	r30, r12
    bbfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    bbfe:	93 8d       	ldd	r25, Z+27	; 0x1b
    bc00:	8c 32       	cpi	r24, 0x2C	; 44
    bc02:	91 40       	sbci	r25, 0x01	; 1
    bc04:	58 f4       	brcc	.+22     	; 0xbc1c <__vector_22+0x138>
						{
							switch_down[num] = FALSE;
    bc06:	f4 01       	movw	r30, r8
    bc08:	15 86       	std	Z+13, r1	; 0x0d
							switch_counter[num] = 0;
    bc0a:	f6 01       	movw	r30, r12
    bc0c:	12 8e       	std	Z+26, r1	; 0x1a
    bc0e:	13 8e       	std	Z+27, r1	; 0x1b
							switch_debounce[num] = FALSE;
    bc10:	f5 01       	movw	r30, r10
    bc12:	15 86       	std	Z+13, r1	; 0x0d
							switch_pressed[num] = TRUE;
    bc14:	f1 e0       	ldi	r31, 0x01	; 1
    bc16:	f0 93 e2 22 	sts	0x22E2, r31	; 0x8022e2 <switch_pressed+0xd>
    bc1a:	d1 cf       	rjmp	.-94     	; 0xbbbe <__vector_22+0xda>
						}
						else
						{
							switch_down[num] = FALSE;
    bc1c:	f4 01       	movw	r30, r8
    bc1e:	15 86       	std	Z+13, r1	; 0x0d
							switch_counter[num] = 0;
    bc20:	f6 01       	movw	r30, r12
    bc22:	12 8e       	std	Z+26, r1	; 0x1a
    bc24:	13 8e       	std	Z+27, r1	; 0x1b
							switch_debounce[num] = FALSE;
    bc26:	f5 01       	movw	r30, r10
    bc28:	15 86       	std	Z+13, r1	; 0x0d
    bc2a:	c9 cf       	rjmp	.-110    	; 0xbbbe <__vector_22+0xda>
						}
					}
					else
					{
						if (switch_debounce[num] == FALSE)
    bc2c:	f5 01       	movw	r30, r10
    bc2e:	85 85       	ldd	r24, Z+13	; 0x0d
    bc30:	81 11       	cpse	r24, r1
    bc32:	c5 cf       	rjmp	.-118    	; 0xbbbe <__vector_22+0xda>
						{
							//Increment the counter
							switch_counter[num]++;
    bc34:	f6 01       	movw	r30, r12
    bc36:	82 8d       	ldd	r24, Z+26	; 0x1a
    bc38:	93 8d       	ldd	r25, Z+27	; 0x1b
    bc3a:	01 96       	adiw	r24, 0x01	; 1
    bc3c:	82 8f       	std	Z+26, r24	; 0x1a
    bc3e:	93 8f       	std	Z+27, r25	; 0x1b
							if (switch_counter[num] >= _3_SEC)
    bc40:	82 8d       	ldd	r24, Z+26	; 0x1a
    bc42:	93 8d       	ldd	r25, Z+27	; 0x1b
    bc44:	8c 32       	cpi	r24, 0x2C	; 44
    bc46:	91 40       	sbci	r25, 0x01	; 1
    bc48:	08 f4       	brcc	.+2      	; 0xbc4c <__vector_22+0x168>
    bc4a:	b9 cf       	rjmp	.-142    	; 0xbbbe <__vector_22+0xda>
							{
								switch_debounce[num] = TRUE;
    bc4c:	21 e0       	ldi	r18, 0x01	; 1
    bc4e:	f5 01       	movw	r30, r10
    bc50:	25 87       	std	Z+13, r18	; 0x0d
								new_auto_flag = TRUE;
    bc52:	20 93 cb 22 	sts	0x22CB, r18	; 0x8022cb <new_auto_flag>
    bc56:	b3 cf       	rjmp	.-154    	; 0xbbbe <__vector_22+0xda>
				}
				continue;
			}

			//Increment the counter
			switch_counter[num]++;
    bc58:	fe 01       	movw	r30, r28
    bc5a:	ee 0f       	add	r30, r30
    bc5c:	ff 1f       	adc	r31, r31
    bc5e:	e5 5a       	subi	r30, 0xA5	; 165
    bc60:	fe 4d       	sbci	r31, 0xDE	; 222
    bc62:	80 81       	ld	r24, Z
    bc64:	91 81       	ldd	r25, Z+1	; 0x01
    bc66:	01 96       	adiw	r24, 0x01	; 1
    bc68:	80 83       	st	Z, r24
    bc6a:	91 83       	std	Z+1, r25	; 0x01

			//After some time check if the switch is still low and has not already been pressed
			if (!switch_debounce[num] && !switch_pressed[num] && (switch_counter[num] > _50_MS) && switch_low(num))
    bc6c:	fe 01       	movw	r30, r28
    bc6e:	e9 5f       	subi	r30, 0xF9	; 249
    bc70:	fc 4d       	sbci	r31, 0xDC	; 220
    bc72:	80 81       	ld	r24, Z
    bc74:	81 11       	cpse	r24, r1
    bc76:	1d c0       	rjmp	.+58     	; 0xbcb2 <__vector_22+0x1ce>
    bc78:	fe 01       	movw	r30, r28
    bc7a:	eb 52       	subi	r30, 0x2B	; 43
    bc7c:	fd 4d       	sbci	r31, 0xDD	; 221
    bc7e:	80 81       	ld	r24, Z
    bc80:	81 11       	cpse	r24, r1
    bc82:	17 c0       	rjmp	.+46     	; 0xbcb2 <__vector_22+0x1ce>
    bc84:	fe 01       	movw	r30, r28
    bc86:	ee 0f       	add	r30, r30
    bc88:	ff 1f       	adc	r31, r31
    bc8a:	e5 5a       	subi	r30, 0xA5	; 165
    bc8c:	fe 4d       	sbci	r31, 0xDE	; 222
    bc8e:	80 81       	ld	r24, Z
    bc90:	91 81       	ldd	r25, Z+1	; 0x01
    bc92:	06 97       	sbiw	r24, 0x06	; 6
    bc94:	70 f0       	brcs	.+28     	; 0xbcb2 <__vector_22+0x1ce>
    bc96:	8c 2f       	mov	r24, r28
    bc98:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <switch_low>
    bc9c:	88 23       	and	r24, r24
    bc9e:	49 f0       	breq	.+18     	; 0xbcb2 <__vector_22+0x1ce>
			{
				switch_pressed[num] = TRUE;
    bca0:	fe 01       	movw	r30, r28
    bca2:	eb 52       	subi	r30, 0x2B	; 43
    bca4:	fd 4d       	sbci	r31, 0xDD	; 221
    bca6:	81 e0       	ldi	r24, 0x01	; 1
    bca8:	80 83       	st	Z, r24
				switch_debounce[num] = TRUE;
    bcaa:	fe 01       	movw	r30, r28
    bcac:	e9 5f       	subi	r30, 0xF9	; 249
    bcae:	fc 4d       	sbci	r31, 0xDC	; 220
    bcb0:	80 83       	st	Z, r24
			}

			//After enough time passes allow the switch to be pushed again
			if (switch_counter[num] > _350_MS)
    bcb2:	f8 01       	movw	r30, r16
    bcb4:	ee 0f       	add	r30, r30
    bcb6:	ff 1f       	adc	r31, r31
    bcb8:	e5 5a       	subi	r30, 0xA5	; 165
    bcba:	fe 4d       	sbci	r31, 0xDE	; 222
    bcbc:	80 81       	ld	r24, Z
    bcbe:	91 81       	ldd	r25, Z+1	; 0x01
    bcc0:	84 97       	sbiw	r24, 0x24	; 36
    bcc2:	08 f4       	brcc	.+2      	; 0xbcc6 <__vector_22+0x1e2>
    bcc4:	85 c0       	rjmp	.+266    	; 0xbdd0 <__vector_22+0x2ec>
			{
				//Pump switches can be held to increase/decrease so they are reset after some time
				switch (num)
    bcc6:	c7 30       	cpi	r28, 0x07	; 7
    bcc8:	d1 05       	cpc	r29, r1
    bcca:	09 f4       	brne	.+2      	; 0xbcce <__vector_22+0x1ea>
    bccc:	42 c0       	rjmp	.+132    	; 0xbd52 <__vector_22+0x26e>
    bcce:	20 f4       	brcc	.+8      	; 0xbcd8 <__vector_22+0x1f4>
    bcd0:	c2 30       	cpi	r28, 0x02	; 2
    bcd2:	d1 05       	cpc	r29, r1
    bcd4:	49 f0       	breq	.+18     	; 0xbce8 <__vector_22+0x204>
    bcd6:	6d c0       	rjmp	.+218    	; 0xbdb2 <__vector_22+0x2ce>
    bcd8:	c9 30       	cpi	r28, 0x09	; 9
    bcda:	d1 05       	cpc	r29, r1
    bcdc:	09 f4       	brne	.+2      	; 0xbce0 <__vector_22+0x1fc>
    bcde:	51 c0       	rjmp	.+162    	; 0xbd82 <__vector_22+0x29e>
    bce0:	ce 30       	cpi	r28, 0x0E	; 14
    bce2:	d1 05       	cpc	r29, r1
    bce4:	d1 f0       	breq	.+52     	; 0xbd1a <__vector_22+0x236>
    bce6:	65 c0       	rjmp	.+202    	; 0xbdb2 <__vector_22+0x2ce>
				{
				case S_PU_NUM:
					//If the switch has been let go simply reset
					if (!S_PU_LOW)
    bce8:	e8 e2       	ldi	r30, 0x28	; 40
    bcea:	f6 e0       	ldi	r31, 0x06	; 6
    bcec:	80 81       	ld	r24, Z
    bcee:	83 ff       	sbrs	r24, 3
    bcf0:	08 c0       	rjmp	.+16     	; 0xbd02 <__vector_22+0x21e>
					{
						switch_down[num] = FALSE;
    bcf2:	f4 01       	movw	r30, r8
    bcf4:	12 82       	std	Z+2, r1	; 0x02
						switch_counter[num] = 0;
    bcf6:	f6 01       	movw	r30, r12
    bcf8:	14 82       	std	Z+4, r1	; 0x04
    bcfa:	15 82       	std	Z+5, r1	; 0x05
						switch_debounce[num] = FALSE;
    bcfc:	f5 01       	movw	r30, r10
    bcfe:	12 82       	std	Z+2, r1	; 0x02
    bd00:	5e cf       	rjmp	.-324    	; 0xbbbe <__vector_22+0xda>
					}
					//If it's still being held down, wait for 750 ms before resetting
					//Do not reset switch_down since switch is already being held down
					else if (switch_counter[num] > _750_MS)
    bd02:	f6 01       	movw	r30, r12
    bd04:	84 81       	ldd	r24, Z+4	; 0x04
    bd06:	95 81       	ldd	r25, Z+5	; 0x05
    bd08:	8c 34       	cpi	r24, 0x4C	; 76
    bd0a:	91 05       	cpc	r25, r1
    bd0c:	08 f4       	brcc	.+2      	; 0xbd10 <__vector_22+0x22c>
    bd0e:	57 cf       	rjmp	.-338    	; 0xbbbe <__vector_22+0xda>
					{
						switch_counter[num] = 0;
    bd10:	14 82       	std	Z+4, r1	; 0x04
    bd12:	15 82       	std	Z+5, r1	; 0x05
						switch_debounce[num] = FALSE;
    bd14:	f5 01       	movw	r30, r10
    bd16:	12 82       	std	Z+2, r1	; 0x02
    bd18:	52 cf       	rjmp	.-348    	; 0xbbbe <__vector_22+0xda>
					}
					break;

				case S_PD_NUM:
					if (!S_PD_LOW)
    bd1a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    bd1e:	88 23       	and	r24, r24
    bd20:	4c f4       	brge	.+18     	; 0xbd34 <__vector_22+0x250>
					{
						switch_down[num] = FALSE;
    bd22:	10 92 e7 21 	sts	0x21E7, r1	; 0x8021e7 <switch_down+0xe>
						switch_counter[num] = 0;
    bd26:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <switch_counter+0x1c>
    bd2a:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <switch_counter+0x1d>
						switch_debounce[num] = FALSE;
    bd2e:	10 92 15 23 	sts	0x2315, r1	; 0x802315 <switch_debounce+0xe>
    bd32:	53 c0       	rjmp	.+166    	; 0xbdda <__vector_22+0x2f6>
					}
					else if (switch_counter[num] > _750_MS)
    bd34:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <switch_counter+0x1c>
    bd38:	90 91 78 21 	lds	r25, 0x2178	; 0x802178 <switch_counter+0x1d>
    bd3c:	8c 34       	cpi	r24, 0x4C	; 76
    bd3e:	91 05       	cpc	r25, r1
    bd40:	08 f4       	brcc	.+2      	; 0xbd44 <__vector_22+0x260>
    bd42:	4b c0       	rjmp	.+150    	; 0xbdda <__vector_22+0x2f6>
					{
						switch_counter[num] = 0;
    bd44:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <switch_counter+0x1c>
    bd48:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <switch_counter+0x1d>
						switch_debounce[num] = FALSE;
    bd4c:	10 92 15 23 	sts	0x2315, r1	; 0x802315 <switch_debounce+0xe>
    bd50:	44 c0       	rjmp	.+136    	; 0xbdda <__vector_22+0x2f6>
					}
					break;

				case S_DU_NUM:
					if (!S_DU_LOW)
    bd52:	f2 01       	movw	r30, r4
    bd54:	80 81       	ld	r24, Z
    bd56:	88 23       	and	r24, r24
    bd58:	44 f4       	brge	.+16     	; 0xbd6a <__vector_22+0x286>
					{
						switch_down[num] = FALSE;
    bd5a:	f4 01       	movw	r30, r8
    bd5c:	17 82       	std	Z+7, r1	; 0x07
						switch_counter[num] = 0;
    bd5e:	f6 01       	movw	r30, r12
    bd60:	16 86       	std	Z+14, r1	; 0x0e
    bd62:	17 86       	std	Z+15, r1	; 0x0f
						switch_debounce[num] = FALSE;
    bd64:	f5 01       	movw	r30, r10
    bd66:	17 82       	std	Z+7, r1	; 0x07
    bd68:	2a cf       	rjmp	.-428    	; 0xbbbe <__vector_22+0xda>
					}
					else if (switch_counter[num] > _750_MS)
    bd6a:	f6 01       	movw	r30, r12
    bd6c:	86 85       	ldd	r24, Z+14	; 0x0e
    bd6e:	97 85       	ldd	r25, Z+15	; 0x0f
    bd70:	8c 34       	cpi	r24, 0x4C	; 76
    bd72:	91 05       	cpc	r25, r1
    bd74:	08 f4       	brcc	.+2      	; 0xbd78 <__vector_22+0x294>
    bd76:	23 cf       	rjmp	.-442    	; 0xbbbe <__vector_22+0xda>
					{
						switch_counter[num] = 0;
    bd78:	16 86       	std	Z+14, r1	; 0x0e
    bd7a:	17 86       	std	Z+15, r1	; 0x0f
						switch_debounce[num] = FALSE;
    bd7c:	f5 01       	movw	r30, r10
    bd7e:	17 82       	std	Z+7, r1	; 0x07
    bd80:	1e cf       	rjmp	.-452    	; 0xbbbe <__vector_22+0xda>
					}
					break;

				case S_DD_NUM:
					if (!S_DD_LOW)
    bd82:	f1 01       	movw	r30, r2
    bd84:	80 81       	ld	r24, Z
    bd86:	85 ff       	sbrs	r24, 5
    bd88:	08 c0       	rjmp	.+16     	; 0xbd9a <__vector_22+0x2b6>
					{
						switch_down[num] = FALSE;
    bd8a:	f4 01       	movw	r30, r8
    bd8c:	11 86       	std	Z+9, r1	; 0x09
						switch_counter[num] = 0;
    bd8e:	f6 01       	movw	r30, r12
    bd90:	12 8a       	std	Z+18, r1	; 0x12
    bd92:	13 8a       	std	Z+19, r1	; 0x13
						switch_debounce[num] = FALSE;
    bd94:	f5 01       	movw	r30, r10
    bd96:	11 86       	std	Z+9, r1	; 0x09
    bd98:	12 cf       	rjmp	.-476    	; 0xbbbe <__vector_22+0xda>
					}
					else if (switch_counter[num] > _750_MS)
    bd9a:	f6 01       	movw	r30, r12
    bd9c:	82 89       	ldd	r24, Z+18	; 0x12
    bd9e:	93 89       	ldd	r25, Z+19	; 0x13
    bda0:	8c 34       	cpi	r24, 0x4C	; 76
    bda2:	91 05       	cpc	r25, r1
    bda4:	08 f4       	brcc	.+2      	; 0xbda8 <__vector_22+0x2c4>
    bda6:	0b cf       	rjmp	.-490    	; 0xbbbe <__vector_22+0xda>
					{
						switch_counter[num] = 0;
    bda8:	12 8a       	std	Z+18, r1	; 0x12
    bdaa:	13 8a       	std	Z+19, r1	; 0x13
						switch_debounce[num] = FALSE;
    bdac:	f5 01       	movw	r30, r10
    bdae:	11 86       	std	Z+9, r1	; 0x09
    bdb0:	06 cf       	rjmp	.-500    	; 0xbbbe <__vector_22+0xda>
					}
					break;

				default:
					switch_down[num] = FALSE;
    bdb2:	f8 01       	movw	r30, r16
    bdb4:	e7 52       	subi	r30, 0x27	; 39
    bdb6:	fe 4d       	sbci	r31, 0xDE	; 222
    bdb8:	10 82       	st	Z, r1
					switch_counter[num] = 0;
    bdba:	f8 01       	movw	r30, r16
    bdbc:	ee 0f       	add	r30, r30
    bdbe:	ff 1f       	adc	r31, r31
    bdc0:	e5 5a       	subi	r30, 0xA5	; 165
    bdc2:	fe 4d       	sbci	r31, 0xDE	; 222
    bdc4:	10 82       	st	Z, r1
    bdc6:	11 82       	std	Z+1, r1	; 0x01
					switch_debounce[num] = FALSE;
    bdc8:	f8 01       	movw	r30, r16
    bdca:	e9 5f       	subi	r30, 0xF9	; 249
    bdcc:	fc 4d       	sbci	r31, 0xDC	; 220
    bdce:	10 82       	st	Z, r1
		else
			hrn_down_counter++;
	}

	//Check all switches
	for (int num = 0; num < NUM_SWITCHES; num++)
    bdd0:	ff e0       	ldi	r31, 0x0F	; 15
    bdd2:	ef 16       	cp	r14, r31
    bdd4:	f1 04       	cpc	r15, r1
    bdd6:	0c f4       	brge	.+2      	; 0xbdda <__vector_22+0x2f6>
    bdd8:	f2 ce       	rjmp	.-540    	; 0xbbbe <__vector_22+0xda>
				}
			}
		}
	}

	periodic_count++;
    bdda:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <periodic_count>
    bdde:	8f 5f       	subi	r24, 0xFF	; 255
    bde0:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <periodic_count>
	if (periodic_count > 1)
    bde4:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <periodic_count>
    bde8:	82 30       	cpi	r24, 0x02	; 2
    bdea:	28 f0       	brcs	.+10     	; 0xbdf6 <__vector_22+0x312>
	{
		periodic_count = 0;
    bdec:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <periodic_count>
		periodic_send = TRUE;
    bdf0:	81 e0       	ldi	r24, 0x01	; 1
    bdf2:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <periodic_send>
	}

	//PORTF_OUTCLR = (1 << 3);	
	//Counter is reset to start timer from the beginning so compare interrupt can happen correctly
	TCC1.CNT = 0;
    bdf6:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    bdfa:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
}
    bdfe:	2a c0       	rjmp	.+84     	; 0xbe54 <__vector_22+0x370>
	if (reset_timer < 10)
		reset_timer++;
}

ISR(DEBOUNCE_INT)
{
    be00:	ee 24       	eor	r14, r14
    be02:	e3 94       	inc	r14
    be04:	f1 2c       	mov	r15, r1
    be06:	c0 e0       	ldi	r28, 0x00	; 0
    be08:	d0 e0       	ldi	r29, 0x00	; 0
						switch_debounce[num] = FALSE;
					}
					break;

				case S_DU_NUM:
					if (!S_DU_LOW)
    be0a:	0f 2e       	mov	r0, r31
    be0c:	f8 ee       	ldi	r31, 0xE8	; 232
    be0e:	4f 2e       	mov	r4, r31
    be10:	f6 e0       	ldi	r31, 0x06	; 6
    be12:	5f 2e       	mov	r5, r31
    be14:	f0 2d       	mov	r31, r0
					{
						switch_down[num] = FALSE;
						switch_counter[num] = 0;
						switch_debounce[num] = FALSE;
					}
					else if (switch_counter[num] > _750_MS)
    be16:	0f 2e       	mov	r0, r31
    be18:	fb e5       	ldi	r31, 0x5B	; 91
    be1a:	cf 2e       	mov	r12, r31
    be1c:	f1 e2       	ldi	r31, 0x21	; 33
    be1e:	df 2e       	mov	r13, r31
    be20:	f0 2d       	mov	r31, r0
					{
						switch_counter[num] = 0;
						switch_debounce[num] = FALSE;
    be22:	0f 2e       	mov	r0, r31
    be24:	f7 e0       	ldi	r31, 0x07	; 7
    be26:	af 2e       	mov	r10, r31
    be28:	f3 e2       	ldi	r31, 0x23	; 35
    be2a:	bf 2e       	mov	r11, r31
    be2c:	f0 2d       	mov	r31, r0
					break;

				case S_DU_NUM:
					if (!S_DU_LOW)
					{
						switch_down[num] = FALSE;
    be2e:	0f 2e       	mov	r0, r31
    be30:	f9 ed       	ldi	r31, 0xD9	; 217
    be32:	8f 2e       	mov	r8, r31
    be34:	f1 e2       	ldi	r31, 0x21	; 33
    be36:	9f 2e       	mov	r9, r31
    be38:	f0 2d       	mov	r31, r0
						switch_debounce[num] = FALSE;
					}
					break;

				case S_DD_NUM:
					if (!S_DD_LOW)
    be3a:	0f 2e       	mov	r0, r31
    be3c:	f8 e0       	ldi	r31, 0x08	; 8
    be3e:	2f 2e       	mov	r2, r31
    be40:	f7 e0       	ldi	r31, 0x07	; 7
    be42:	3f 2e       	mov	r3, r31
    be44:	f0 2d       	mov	r31, r0
					switch_counter[num]++;
				}
				else
				{
					//Auto switch can be held down for some time to set new auto mode
					if (!S_ATO_LOW)
    be46:	0f 2e       	mov	r0, r31
    be48:	f8 e2       	ldi	r31, 0x28	; 40
    be4a:	6f 2e       	mov	r6, r31
    be4c:	f7 e0       	ldi	r31, 0x07	; 7
    be4e:	7f 2e       	mov	r7, r31
    be50:	f0 2d       	mov	r31, r0
    be52:	b9 ce       	rjmp	.-654    	; 0xbbc6 <__vector_22+0xe2>
	}

	//PORTF_OUTCLR = (1 << 3);	
	//Counter is reset to start timer from the beginning so compare interrupt can happen correctly
	TCC1.CNT = 0;
}
    be54:	ff 91       	pop	r31
    be56:	ef 91       	pop	r30
    be58:	df 91       	pop	r29
    be5a:	cf 91       	pop	r28
    be5c:	bf 91       	pop	r27
    be5e:	af 91       	pop	r26
    be60:	9f 91       	pop	r25
    be62:	8f 91       	pop	r24
    be64:	7f 91       	pop	r23
    be66:	6f 91       	pop	r22
    be68:	5f 91       	pop	r21
    be6a:	4f 91       	pop	r20
    be6c:	3f 91       	pop	r19
    be6e:	2f 91       	pop	r18
    be70:	1f 91       	pop	r17
    be72:	0f 91       	pop	r16
    be74:	ff 90       	pop	r15
    be76:	ef 90       	pop	r14
    be78:	df 90       	pop	r13
    be7a:	cf 90       	pop	r12
    be7c:	bf 90       	pop	r11
    be7e:	af 90       	pop	r10
    be80:	9f 90       	pop	r9
    be82:	8f 90       	pop	r8
    be84:	7f 90       	pop	r7
    be86:	6f 90       	pop	r6
    be88:	5f 90       	pop	r5
    be8a:	4f 90       	pop	r4
    be8c:	3f 90       	pop	r3
    be8e:	2f 90       	pop	r2
    be90:	0f 90       	pop	r0
    be92:	0b be       	out	0x3b, r0	; 59
    be94:	0f 90       	pop	r0
    be96:	0a be       	out	0x3a, r0	; 58
    be98:	0f 90       	pop	r0
    be9a:	09 be       	out	0x39, r0	; 57
    be9c:	0f 90       	pop	r0
    be9e:	08 be       	out	0x38, r0	; 56
    bea0:	0f 90       	pop	r0
    bea2:	0f be       	out	0x3f, r0	; 63
    bea4:	0f 90       	pop	r0
    bea6:	1f 90       	pop	r1
    bea8:	18 95       	reti

0000beaa <__vector_85>:

//IVA002: Added for CAN Tx Queue
ISR(CAN_TX_TIMER_INT)
{
    beaa:	1f 92       	push	r1
    beac:	0f 92       	push	r0
    beae:	0f b6       	in	r0, 0x3f	; 63
    beb0:	0f 92       	push	r0
    beb2:	11 24       	eor	r1, r1
    beb4:	08 b6       	in	r0, 0x38	; 56
    beb6:	0f 92       	push	r0
    beb8:	18 be       	out	0x38, r1	; 56
    beba:	09 b6       	in	r0, 0x39	; 57
    bebc:	0f 92       	push	r0
    bebe:	19 be       	out	0x39, r1	; 57
    bec0:	0b b6       	in	r0, 0x3b	; 59
    bec2:	0f 92       	push	r0
    bec4:	1b be       	out	0x3b, r1	; 59
    bec6:	2f 93       	push	r18
    bec8:	3f 93       	push	r19
    beca:	4f 93       	push	r20
    becc:	5f 93       	push	r21
    bece:	6f 93       	push	r22
    bed0:	7f 93       	push	r23
    bed2:	8f 93       	push	r24
    bed4:	9f 93       	push	r25
    bed6:	af 93       	push	r26
    bed8:	bf 93       	push	r27
    beda:	ef 93       	push	r30
    bedc:	ff 93       	push	r31
	CQTx_dequeue();
    bede:	0e 94 83 1c 	call	0x3906	; 0x3906 <CQTx_dequeue>
	TCD1.CNT = 0;
    bee2:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <__TEXT_REGION_LENGTH__+0x700960>
    bee6:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <__TEXT_REGION_LENGTH__+0x700961>
}
    beea:	ff 91       	pop	r31
    beec:	ef 91       	pop	r30
    beee:	bf 91       	pop	r27
    bef0:	af 91       	pop	r26
    bef2:	9f 91       	pop	r25
    bef4:	8f 91       	pop	r24
    bef6:	7f 91       	pop	r23
    bef8:	6f 91       	pop	r22
    befa:	5f 91       	pop	r21
    befc:	4f 91       	pop	r20
    befe:	3f 91       	pop	r19
    bf00:	2f 91       	pop	r18
    bf02:	0f 90       	pop	r0
    bf04:	0b be       	out	0x3b, r0	; 59
    bf06:	0f 90       	pop	r0
    bf08:	09 be       	out	0x39, r0	; 57
    bf0a:	0f 90       	pop	r0
    bf0c:	08 be       	out	0x38, r0	; 56
    bf0e:	0f 90       	pop	r0
    bf10:	0f be       	out	0x3f, r0	; 63
    bf12:	0f 90       	pop	r0
    bf14:	1f 90       	pop	r1
    bf16:	18 95       	reti

0000bf18 <TWI_MasterInit>:
	uint8_t address,
	uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    bf18:	fc 01       	movw	r30, r24
    bf1a:	60 83       	st	Z, r22
    bf1c:	71 83       	std	Z+1, r23	; 0x01
    bf1e:	48 63       	ori	r20, 0x38	; 56
    bf20:	db 01       	movw	r26, r22
    bf22:	11 96       	adiw	r26, 0x01	; 1
    bf24:	4c 93       	st	X, r20
    bf26:	a0 81       	ld	r26, Z
    bf28:	b1 81       	ldd	r27, Z+1	; 0x01
    bf2a:	15 96       	adiw	r26, 0x05	; 5
    bf2c:	2c 93       	st	X, r18
    bf2e:	01 90       	ld	r0, Z+
    bf30:	f0 81       	ld	r31, Z
    bf32:	e0 2d       	mov	r30, r0
    bf34:	81 e0       	ldi	r24, 0x01	; 1
    bf36:	84 83       	std	Z+4, r24	; 0x04
    bf38:	08 95       	ret

0000bf3a <TWI_MasterWriteRead>:
    bf3a:	ef 92       	push	r14
    bf3c:	ff 92       	push	r15
    bf3e:	0f 93       	push	r16
    bf40:	cf 93       	push	r28
    bf42:	df 93       	push	r29
    bf44:	ec 01       	movw	r28, r24
    bf46:	25 36       	cpi	r18, 0x65	; 101
    bf48:	08 f0       	brcs	.+2      	; 0xbf4c <TWI_MasterWriteRead+0x12>
    bf4a:	48 c0       	rjmp	.+144    	; 0xbfdc <TWI_MasterWriteRead+0xa2>
    bf4c:	0a 31       	cpi	r16, 0x1A	; 26
    bf4e:	08 f0       	brcs	.+2      	; 0xbf52 <TWI_MasterWriteRead+0x18>
    bf50:	47 c0       	rjmp	.+142    	; 0xbfe0 <TWI_MasterWriteRead+0xa6>
    bf52:	fc 01       	movw	r30, r24
    bf54:	ec 57       	subi	r30, 0x7C	; 124
    bf56:	ff 4f       	sbci	r31, 0xFF	; 255
    bf58:	80 81       	ld	r24, Z
    bf5a:	81 11       	cpse	r24, r1
    bf5c:	43 c0       	rjmp	.+134    	; 0xbfe4 <TWI_MasterWriteRead+0xaa>
    bf5e:	81 e0       	ldi	r24, 0x01	; 1
    bf60:	80 83       	st	Z, r24
    bf62:	31 96       	adiw	r30, 0x01	; 1
    bf64:	10 82       	st	Z, r1
    bf66:	66 0f       	add	r22, r22
    bf68:	6a 83       	std	Y+2, r22	; 0x02
    bf6a:	22 23       	and	r18, r18
    bf6c:	a1 f0       	breq	.+40     	; 0xbf96 <TWI_MasterWriteRead+0x5c>
    bf6e:	7a 01       	movw	r14, r20
    bf70:	6f ef       	ldi	r22, 0xFF	; 255
    bf72:	62 0f       	add	r22, r18
    bf74:	70 e0       	ldi	r23, 0x00	; 0
    bf76:	6f 5f       	subi	r22, 0xFF	; 255
    bf78:	7f 4f       	sbci	r23, 0xFF	; 255
    bf7a:	64 0f       	add	r22, r20
    bf7c:	75 1f       	adc	r23, r21
    bf7e:	fa 01       	movw	r30, r20
    bf80:	df 01       	movw	r26, r30
    bf82:	ae 19       	sub	r26, r14
    bf84:	bf 09       	sbc	r27, r15
    bf86:	91 91       	ld	r25, Z+
    bf88:	ac 0f       	add	r26, r28
    bf8a:	bd 1f       	adc	r27, r29
    bf8c:	13 96       	adiw	r26, 0x03	; 3
    bf8e:	9c 93       	st	X, r25
    bf90:	e6 17       	cp	r30, r22
    bf92:	f7 07       	cpc	r31, r23
    bf94:	a9 f7       	brne	.-22     	; 0xbf80 <TWI_MasterWriteRead+0x46>
    bf96:	fe 01       	movw	r30, r28
    bf98:	e0 58       	subi	r30, 0x80	; 128
    bf9a:	ff 4f       	sbci	r31, 0xFF	; 255
    bf9c:	20 83       	st	Z, r18
    bf9e:	de 01       	movw	r26, r28
    bfa0:	af 57       	subi	r26, 0x7F	; 127
    bfa2:	bf 4f       	sbci	r27, 0xFF	; 255
    bfa4:	0c 93       	st	X, r16
    bfa6:	11 96       	adiw	r26, 0x01	; 1
    bfa8:	1c 92       	st	X, r1
    bfaa:	11 96       	adiw	r26, 0x01	; 1
    bfac:	1c 92       	st	X, r1
    bfae:	80 81       	ld	r24, Z
    bfb0:	88 23       	and	r24, r24
    bfb2:	39 f0       	breq	.+14     	; 0xbfc2 <TWI_MasterWriteRead+0x88>
    bfb4:	8a 81       	ldd	r24, Y+2	; 0x02
    bfb6:	8e 7f       	andi	r24, 0xFE	; 254
    bfb8:	e8 81       	ld	r30, Y
    bfba:	f9 81       	ldd	r31, Y+1	; 0x01
    bfbc:	86 83       	std	Z+6, r24	; 0x06
    bfbe:	81 e0       	ldi	r24, 0x01	; 1
    bfc0:	14 c0       	rjmp	.+40     	; 0xbfea <TWI_MasterWriteRead+0xb0>
    bfc2:	fe 01       	movw	r30, r28
    bfc4:	ef 57       	subi	r30, 0x7F	; 127
    bfc6:	ff 4f       	sbci	r31, 0xFF	; 255
    bfc8:	80 81       	ld	r24, Z
    bfca:	88 23       	and	r24, r24
    bfcc:	69 f0       	breq	.+26     	; 0xbfe8 <TWI_MasterWriteRead+0xae>
    bfce:	8a 81       	ldd	r24, Y+2	; 0x02
    bfd0:	81 60       	ori	r24, 0x01	; 1
    bfd2:	e8 81       	ld	r30, Y
    bfd4:	f9 81       	ldd	r31, Y+1	; 0x01
    bfd6:	86 83       	std	Z+6, r24	; 0x06
    bfd8:	81 e0       	ldi	r24, 0x01	; 1
    bfda:	07 c0       	rjmp	.+14     	; 0xbfea <TWI_MasterWriteRead+0xb0>
    bfdc:	80 e0       	ldi	r24, 0x00	; 0
    bfde:	05 c0       	rjmp	.+10     	; 0xbfea <TWI_MasterWriteRead+0xb0>
    bfe0:	80 e0       	ldi	r24, 0x00	; 0
    bfe2:	03 c0       	rjmp	.+6      	; 0xbfea <TWI_MasterWriteRead+0xb0>
    bfe4:	80 e0       	ldi	r24, 0x00	; 0
    bfe6:	01 c0       	rjmp	.+2      	; 0xbfea <TWI_MasterWriteRead+0xb0>
    bfe8:	81 e0       	ldi	r24, 0x01	; 1
    bfea:	df 91       	pop	r29
    bfec:	cf 91       	pop	r28
    bfee:	0f 91       	pop	r16
    bff0:	ff 90       	pop	r15
    bff2:	ef 90       	pop	r14
    bff4:	08 95       	ret

0000bff6 <TWI_MasterWrite>:
    bff6:	0f 93       	push	r16
    bff8:	00 e0       	ldi	r16, 0x00	; 0
    bffa:	0e 94 9d 5f 	call	0xbf3a	; 0xbf3a <TWI_MasterWriteRead>
    bffe:	2f ef       	ldi	r18, 0xFF	; 255
    c000:	39 ef       	ldi	r19, 0xF9	; 249
    c002:	90 e0       	ldi	r25, 0x00	; 0
    c004:	21 50       	subi	r18, 0x01	; 1
    c006:	30 40       	sbci	r19, 0x00	; 0
    c008:	90 40       	sbci	r25, 0x00	; 0
    c00a:	e1 f7       	brne	.-8      	; 0xc004 <TWI_MasterWrite+0xe>
    c00c:	00 c0       	rjmp	.+0      	; 0xc00e <TWI_MasterWrite+0x18>
    c00e:	00 00       	nop
    c010:	0f 91       	pop	r16
    c012:	08 95       	ret

0000c014 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{

	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    c014:	dc 01       	movw	r26, r24
    c016:	ed 91       	ld	r30, X+
    c018:	fc 91       	ld	r31, X
    c01a:	11 97       	sbiw	r26, 0x01	; 1
    c01c:	24 81       	ldd	r18, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    c01e:	22 ff       	sbrs	r18, 2
    c020:	05 c0       	rjmp	.+10     	; 0xc02c <TWI_MasterArbitrationLostBusErrorHandler+0x18>
		twi->result = TWIM_RESULT_BUS_ERROR;
    c022:	34 e0       	ldi	r19, 0x04	; 4
    c024:	ab 57       	subi	r26, 0x7B	; 123
    c026:	bf 4f       	sbci	r27, 0xFF	; 255
    c028:	3c 93       	st	X, r19
    c02a:	05 c0       	rjmp	.+10     	; 0xc036 <TWI_MasterArbitrationLostBusErrorHandler+0x22>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    c02c:	33 e0       	ldi	r19, 0x03	; 3
    c02e:	dc 01       	movw	r26, r24
    c030:	ab 57       	subi	r26, 0x7B	; 123
    c032:	bf 4f       	sbci	r27, 0xFF	; 255
    c034:	3c 93       	st	X, r19
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    c036:	28 60       	ori	r18, 0x08	; 8
    c038:	24 83       	std	Z+4, r18	; 0x04

	twi->status = TWIM_STATUS_READY;
    c03a:	fc 01       	movw	r30, r24
    c03c:	ec 57       	subi	r30, 0x7C	; 124
    c03e:	ff 4f       	sbci	r31, 0xFF	; 255
    c040:	10 82       	st	Z, r1
    c042:	08 95       	ret

0000c044 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    c044:	cf 93       	push	r28
    c046:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite = twi->bytesToWrite;
    c048:	fc 01       	movw	r30, r24
    c04a:	e0 58       	subi	r30, 0x80	; 128
    c04c:	ff 4f       	sbci	r31, 0xFF	; 255
    c04e:	30 81       	ld	r19, Z
	uint8_t bytesToRead = twi->bytesToRead;
    c050:	31 96       	adiw	r30, 0x01	; 1
    c052:	40 81       	ld	r20, Z

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    c054:	dc 01       	movw	r26, r24
    c056:	ed 91       	ld	r30, X+
    c058:	fc 91       	ld	r31, X
    c05a:	24 81       	ldd	r18, Z+4	; 0x04
    c05c:	24 ff       	sbrs	r18, 4
    c05e:	0a c0       	rjmp	.+20     	; 0xc074 <TWI_MasterWriteHandler+0x30>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    c060:	23 e0       	ldi	r18, 0x03	; 3
    c062:	23 83       	std	Z+3, r18	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    c064:	fc 01       	movw	r30, r24
    c066:	eb 57       	subi	r30, 0x7B	; 123
    c068:	ff 4f       	sbci	r31, 0xFF	; 255
    c06a:	25 e0       	ldi	r18, 0x05	; 5
    c06c:	20 83       	st	Z, r18
		twi->status = TWIM_STATUS_READY;
    c06e:	31 97       	sbiw	r30, 0x01	; 1
    c070:	10 82       	st	Z, r1
    c072:	25 c0       	rjmp	.+74     	; 0xc0be <TWI_MasterWriteHandler+0x7a>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    c074:	dc 01       	movw	r26, r24
    c076:	ae 57       	subi	r26, 0x7E	; 126
    c078:	bf 4f       	sbci	r27, 0xFF	; 255
    c07a:	2c 91       	ld	r18, X
    c07c:	23 17       	cp	r18, r19
    c07e:	50 f4       	brcc	.+20     	; 0xc094 <TWI_MasterWriteHandler+0x50>
		uint8_t data = twi->writeData[twi->bytesWritten];
    c080:	2c 91       	ld	r18, X
    c082:	ec 01       	movw	r28, r24
    c084:	c2 0f       	add	r28, r18
    c086:	d1 1d       	adc	r29, r1
    c088:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    c08a:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    c08c:	8c 91       	ld	r24, X
    c08e:	8f 5f       	subi	r24, 0xFF	; 255
    c090:	8c 93       	st	X, r24
    c092:	15 c0       	rjmp	.+42     	; 0xc0be <TWI_MasterWriteHandler+0x7a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    c094:	dc 01       	movw	r26, r24
    c096:	ad 57       	subi	r26, 0x7D	; 125
    c098:	bf 4f       	sbci	r27, 0xFF	; 255
    c09a:	2c 91       	ld	r18, X
    c09c:	24 17       	cp	r18, r20
    c09e:	30 f4       	brcc	.+12     	; 0xc0ac <TWI_MasterWriteHandler+0x68>
		uint8_t readAddress = twi->address | 0x01;
    c0a0:	dc 01       	movw	r26, r24
    c0a2:	12 96       	adiw	r26, 0x02	; 2
    c0a4:	8c 91       	ld	r24, X
    c0a6:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    c0a8:	86 83       	std	Z+6, r24	; 0x06
    c0aa:	09 c0       	rjmp	.+18     	; 0xc0be <TWI_MasterWriteHandler+0x7a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    c0ac:	23 e0       	ldi	r18, 0x03	; 3
    c0ae:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    c0b0:	fc 01       	movw	r30, r24
    c0b2:	eb 57       	subi	r30, 0x7B	; 123
    c0b4:	ff 4f       	sbci	r31, 0xFF	; 255
    c0b6:	21 e0       	ldi	r18, 0x01	; 1
    c0b8:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    c0ba:	31 97       	sbiw	r30, 0x01	; 1
    c0bc:	10 82       	st	Z, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    c0be:	df 91       	pop	r29
    c0c0:	cf 91       	pop	r28
    c0c2:	08 95       	ret

0000c0c4 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    c0c4:	fc 01       	movw	r30, r24
    c0c6:	ed 57       	subi	r30, 0x7D	; 125
    c0c8:	ff 4f       	sbci	r31, 0xFF	; 255
    c0ca:	20 81       	ld	r18, Z
    c0cc:	29 31       	cpi	r18, 0x19	; 25
    c0ce:	90 f4       	brcc	.+36     	; 0xc0f4 <TWI_MasterReadHandler+0x30>
		uint8_t data = twi->interface->MASTER.DATA;
    c0d0:	dc 01       	movw	r26, r24
    c0d2:	ed 91       	ld	r30, X+
    c0d4:	fc 91       	ld	r31, X
    c0d6:	11 97       	sbiw	r26, 0x01	; 1
    c0d8:	27 81       	ldd	r18, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    c0da:	fc 01       	movw	r30, r24
    c0dc:	ed 57       	subi	r30, 0x7D	; 125
    c0de:	ff 4f       	sbci	r31, 0xFF	; 255
    c0e0:	30 81       	ld	r19, Z
    c0e2:	a3 0f       	add	r26, r19
    c0e4:	b1 1d       	adc	r27, r1
    c0e6:	a9 59       	subi	r26, 0x99	; 153
    c0e8:	bf 4f       	sbci	r27, 0xFF	; 255
    c0ea:	2c 93       	st	X, r18
		twi->bytesRead++;
    c0ec:	20 81       	ld	r18, Z
    c0ee:	2f 5f       	subi	r18, 0xFF	; 255
    c0f0:	20 83       	st	Z, r18
    c0f2:	0c c0       	rjmp	.+24     	; 0xc10c <TWI_MasterReadHandler+0x48>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    c0f4:	dc 01       	movw	r26, r24
    c0f6:	ed 91       	ld	r30, X+
    c0f8:	fc 91       	ld	r31, X
    c0fa:	23 e0       	ldi	r18, 0x03	; 3
    c0fc:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    c0fe:	22 e0       	ldi	r18, 0x02	; 2
    c100:	fc 01       	movw	r30, r24
    c102:	eb 57       	subi	r30, 0x7B	; 123
    c104:	ff 4f       	sbci	r31, 0xFF	; 255
    c106:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    c108:	31 97       	sbiw	r30, 0x01	; 1
    c10a:	10 82       	st	Z, r1
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    c10c:	fc 01       	movw	r30, r24
    c10e:	ef 57       	subi	r30, 0x7F	; 127
    c110:	ff 4f       	sbci	r31, 0xFF	; 255
    c112:	30 81       	ld	r19, Z

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    c114:	32 96       	adiw	r30, 0x02	; 2
    c116:	20 81       	ld	r18, Z
    c118:	23 17       	cp	r18, r19
    c11a:	30 f4       	brcc	.+12     	; 0xc128 <TWI_MasterReadHandler+0x64>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    c11c:	dc 01       	movw	r26, r24
    c11e:	ed 91       	ld	r30, X+
    c120:	fc 91       	ld	r31, X
    c122:	82 e0       	ldi	r24, 0x02	; 2
    c124:	83 83       	std	Z+3, r24	; 0x03
    c126:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    c128:	dc 01       	movw	r26, r24
    c12a:	ed 91       	ld	r30, X+
    c12c:	fc 91       	ld	r31, X
    c12e:	27 e0       	ldi	r18, 0x07	; 7
    c130:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    c132:	fc 01       	movw	r30, r24
    c134:	eb 57       	subi	r30, 0x7B	; 123
    c136:	ff 4f       	sbci	r31, 0xFF	; 255
    c138:	21 e0       	ldi	r18, 0x01	; 1
    c13a:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    c13c:	31 97       	sbiw	r30, 0x01	; 1
    c13e:	10 82       	st	Z, r1
    c140:	08 95       	ret

0000c142 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    c142:	dc 01       	movw	r26, r24
    c144:	ed 91       	ld	r30, X+
    c146:	fc 91       	ld	r31, X
    c148:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    c14a:	32 2f       	mov	r19, r18
    c14c:	3c 70       	andi	r19, 0x0C	; 12
    c14e:	19 f0       	breq	.+6      	; 0xc156 <TWI_MasterInterruptHandler+0x14>
		(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    c150:	0e 94 0a 60 	call	0xc014	; 0xc014 <TWI_MasterArbitrationLostBusErrorHandler>
    c154:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    c156:	26 ff       	sbrs	r18, 6
    c158:	03 c0       	rjmp	.+6      	; 0xc160 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    c15a:	0e 94 22 60 	call	0xc044	; 0xc044 <TWI_MasterWriteHandler>
    c15e:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    c160:	22 23       	and	r18, r18
    c162:	1c f4       	brge	.+6      	; 0xc16a <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    c164:	0e 94 62 60 	call	0xc0c4	; 0xc0c4 <TWI_MasterReadHandler>
    c168:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    c16a:	fc 01       	movw	r30, r24
    c16c:	eb 57       	subi	r30, 0x7B	; 123
    c16e:	ff 4f       	sbci	r31, 0xFF	; 255
    c170:	26 e0       	ldi	r18, 0x06	; 6
    c172:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    c174:	31 97       	sbiw	r30, 0x01	; 1
    c176:	10 82       	st	Z, r1
    c178:	08 95       	ret

0000c17a <user_menu_next>:
 //Variables that can be used by the menu
uint8_t cursor;
char temp[21];

void user_menu_next(void)
{
    c17a:	ef 92       	push	r14
    c17c:	ff 92       	push	r15
    c17e:	0f 93       	push	r16
    c180:	1f 93       	push	r17
    c182:	cf 93       	push	r28
    c184:	df 93       	push	r29
	switch (current_menu)
    c186:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    c18a:	8e 2f       	mov	r24, r30
    c18c:	90 e0       	ldi	r25, 0x00	; 0
    c18e:	8b 3a       	cpi	r24, 0xAB	; 171
    c190:	91 05       	cpc	r25, r1
    c192:	08 f0       	brcs	.+2      	; 0xc196 <user_menu_next+0x1c>
    c194:	d5 c1       	rjmp	.+938    	; 0xc540 <user_menu_next+0x3c6>
    c196:	fc 01       	movw	r30, r24
    c198:	e3 5f       	subi	r30, 0xF3	; 243
    c19a:	fa 4f       	sbci	r31, 0xFA	; 250
    c19c:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
		//Any button press will move pre-menu to the motor menu
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    c1a0:	81 e0       	ldi	r24, 0x01	; 1
    c1a2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c1a6:	83 ea       	ldi	r24, 0xA3	; 163
    c1a8:	9e e2       	ldi	r25, 0x2E	; 46
    c1aa:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c1ae:	c8 c1       	rjmp	.+912    	; 0xc540 <user_menu_next+0x3c6>

		/******************************************************************************************************************************/

		//In the motor menu users can adjust motor values
	case MOTOR_MENU:
		current_menu = FORWARD_SPEED_MENU;
    c1b0:	89 e1       	ldi	r24, 0x19	; 25
    c1b2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    c1b6:	85 e9       	ldi	r24, 0x95	; 149
    c1b8:	9e e2       	ldi	r25, 0x2E	; 46
    c1ba:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c1be:	c0 c1       	rjmp	.+896    	; 0xc540 <user_menu_next+0x3c6>

		/*-------------------------------------------------------------------------------*/

		//Two forward speed options available: slow and fast
	case FORWARD_SPEED_MENU:
		current_menu = SLOW_SPEED_MENU;
    c1c0:	84 e1       	ldi	r24, 0x14	; 20
    c1c2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    c1c6:	8a e8       	ldi	r24, 0x8A	; 138
    c1c8:	9e e2       	ldi	r25, 0x2E	; 46
    c1ca:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c1ce:	b8 c1       	rjmp	.+880    	; 0xc540 <user_menu_next+0x3c6>

		/*-------------------------------------------------------------------------------*/

		//% of max speed when in slow mode (tortoise)
	case SLOW_SPEED_MENU:
		current_menu = SLOW_SPEED_VAL_MENU;
    c1d0:	84 e2       	ldi	r24, 0x24	; 36
    c1d2:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = slow_speed;
    c1d6:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <slow_speed>
    c1da:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    c1de:	1f 92       	push	r1
    c1e0:	8f 93       	push	r24
    c1e2:	87 ef       	ldi	r24, 0xF7	; 247
    c1e4:	90 e2       	ldi	r25, 0x20	; 32
    c1e6:	9f 93       	push	r25
    c1e8:	8f 93       	push	r24
    c1ea:	83 ed       	ldi	r24, 0xD3	; 211
    c1ec:	97 e2       	ldi	r25, 0x27	; 39
    c1ee:	9f 93       	push	r25
    c1f0:	8f 93       	push	r24
    c1f2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c1f6:	83 ed       	ldi	r24, 0xD3	; 211
    c1f8:	97 e2       	ldi	r25, 0x27	; 39
    c1fa:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    c1fe:	0f 90       	pop	r0
    c200:	0f 90       	pop	r0
    c202:	0f 90       	pop	r0
    c204:	0f 90       	pop	r0
    c206:	0f 90       	pop	r0
    c208:	0f 90       	pop	r0
    c20a:	9a c1       	rjmp	.+820    	; 0xc540 <user_menu_next+0x3c6>

		//% of max speed when in fast mode (hare)
	case FAST_SPEED_MENU:
		current_menu = FAST_SPEED_VAL_MENU;
    c20c:	85 e2       	ldi	r24, 0x25	; 37
    c20e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = fast_speed;
    c212:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <fast_speed>
    c216:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    c21a:	1f 92       	push	r1
    c21c:	8f 93       	push	r24
    c21e:	87 ef       	ldi	r24, 0xF7	; 247
    c220:	90 e2       	ldi	r25, 0x20	; 32
    c222:	9f 93       	push	r25
    c224:	8f 93       	push	r24
    c226:	83 ed       	ldi	r24, 0xD3	; 211
    c228:	97 e2       	ldi	r25, 0x27	; 39
    c22a:	9f 93       	push	r25
    c22c:	8f 93       	push	r24
    c22e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c232:	83 ed       	ldi	r24, 0xD3	; 211
    c234:	97 e2       	ldi	r25, 0x27	; 39
    c236:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    c23a:	0f 90       	pop	r0
    c23c:	0f 90       	pop	r0
    c23e:	0f 90       	pop	r0
    c240:	0f 90       	pop	r0
    c242:	0f 90       	pop	r0
    c244:	0f 90       	pop	r0
    c246:	7c c1       	rjmp	.+760    	; 0xc540 <user_menu_next+0x3c6>

		/*-------------------------------------------------------------------------------*/
	case SLOW_SPEED_VAL_MENU:
		slow_speed = current_value;
    c248:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c24c:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <slow_speed>
		update_DM_settings();
    c250:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <update_DM_settings>
		//eeprom_update_byte((uint8_t *) EEP8_SLOW_SPEED, current_value);
		lcd_write_new_P(PSTR("SLOW SPEED SET"));
    c254:	8b e7       	ldi	r24, 0x7B	; 123
    c256:	9e e2       	ldi	r25, 0x2E	; 46
    c258:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    c25c:	2f ef       	ldi	r18, 0xFF	; 255
    c25e:	8f e4       	ldi	r24, 0x4F	; 79
    c260:	93 ec       	ldi	r25, 0xC3	; 195
    c262:	21 50       	subi	r18, 0x01	; 1
    c264:	80 40       	sbci	r24, 0x00	; 0
    c266:	90 40       	sbci	r25, 0x00	; 0
    c268:	e1 f7       	brne	.-8      	; 0xc262 <user_menu_next+0xe8>
    c26a:	00 c0       	rjmp	.+0      	; 0xc26c <user_menu_next+0xf2>
    c26c:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    c26e:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = SLOW_SPEED_MENU;
    c272:	84 e1       	ldi	r24, 0x14	; 20
    c274:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    c278:	80 e7       	ldi	r24, 0x70	; 112
    c27a:	9e e2       	ldi	r25, 0x2E	; 46
    c27c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c280:	5f c1       	rjmp	.+702    	; 0xc540 <user_menu_next+0x3c6>

	case FAST_SPEED_VAL_MENU:
		fast_speed = current_value;
    c282:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c286:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <fast_speed>
		update_DM_settings();
    c28a:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <update_DM_settings>
		//eeprom_update_byte((uint8_t *) EEP8_FAST_SPEED, current_value);
		lcd_write_new_P(PSTR("FAST SPEED SET"));
    c28e:	81 e6       	ldi	r24, 0x61	; 97
    c290:	9e e2       	ldi	r25, 0x2E	; 46
    c292:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    c296:	2f ef       	ldi	r18, 0xFF	; 255
    c298:	8f e4       	ldi	r24, 0x4F	; 79
    c29a:	93 ec       	ldi	r25, 0xC3	; 195
    c29c:	21 50       	subi	r18, 0x01	; 1
    c29e:	80 40       	sbci	r24, 0x00	; 0
    c2a0:	90 40       	sbci	r25, 0x00	; 0
    c2a2:	e1 f7       	brne	.-8      	; 0xc29c <user_menu_next+0x122>
    c2a4:	00 c0       	rjmp	.+0      	; 0xc2a6 <user_menu_next+0x12c>
    c2a6:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    c2a8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = FAST_SPEED_MENU;
    c2ac:	85 e1       	ldi	r24, 0x15	; 21
    c2ae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FAST SPEED"));
    c2b2:	86 e5       	ldi	r24, 0x56	; 86
    c2b4:	9e e2       	ldi	r25, 0x2E	; 46
    c2b6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c2ba:	42 c1       	rjmp	.+644    	; 0xc540 <user_menu_next+0x3c6>

		/*------------------------------------------------------------------------------------------------------------------------------*/
		//% of max speed allowed when in reverse
	case REVERSE_SPEED_MENU:
		current_menu = REVERSE_SPEED_VAL_MENU;
    c2bc:	83 e2       	ldi	r24, 0x23	; 35
    c2be:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		current_value = reverse_speed;
    c2c2:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <reverse_speed>
    c2c6:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    c2ca:	1f 92       	push	r1
    c2cc:	8f 93       	push	r24
    c2ce:	87 ef       	ldi	r24, 0xF7	; 247
    c2d0:	90 e2       	ldi	r25, 0x20	; 32
    c2d2:	9f 93       	push	r25
    c2d4:	8f 93       	push	r24
    c2d6:	83 ed       	ldi	r24, 0xD3	; 211
    c2d8:	97 e2       	ldi	r25, 0x27	; 39
    c2da:	9f 93       	push	r25
    c2dc:	8f 93       	push	r24
    c2de:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c2e2:	83 ed       	ldi	r24, 0xD3	; 211
    c2e4:	97 e2       	ldi	r25, 0x27	; 39
    c2e6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    c2ea:	0f 90       	pop	r0
    c2ec:	0f 90       	pop	r0
    c2ee:	0f 90       	pop	r0
    c2f0:	0f 90       	pop	r0
    c2f2:	0f 90       	pop	r0
    c2f4:	0f 90       	pop	r0
    c2f6:	24 c1       	rjmp	.+584    	; 0xc540 <user_menu_next+0x3c6>
		/*------------------------------------------------------------------------------------------------------------------------------*/
	case REVERSE_SPEED_VAL_MENU:
		reverse_speed = current_value;
    c2f8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c2fc:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <reverse_speed>
		update_DM_settings();
    c300:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <update_DM_settings>
		//eeprom_update_byte((uint8_t *) EEP8_REVERSE_SPEED, current_value);
		lcd_write_new_P(PSTR("REVERSE SPEED SET"));
    c304:	84 e4       	ldi	r24, 0x44	; 68
    c306:	9e e2       	ldi	r25, 0x2E	; 46
    c308:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    c30c:	2f ef       	ldi	r18, 0xFF	; 255
    c30e:	8f e4       	ldi	r24, 0x4F	; 79
    c310:	93 ec       	ldi	r25, 0xC3	; 195
    c312:	21 50       	subi	r18, 0x01	; 1
    c314:	80 40       	sbci	r24, 0x00	; 0
    c316:	90 40       	sbci	r25, 0x00	; 0
    c318:	e1 f7       	brne	.-8      	; 0xc312 <user_menu_next+0x198>
    c31a:	00 c0       	rjmp	.+0      	; 0xc31c <user_menu_next+0x1a2>
    c31c:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    c31e:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = REVERSE_SPEED_MENU;
    c322:	83 e1       	ldi	r24, 0x13	; 19
    c324:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    c328:	86 e3       	ldi	r24, 0x36	; 54
    c32a:	9e e2       	ldi	r25, 0x2E	; 46
    c32c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c330:	07 c1       	rjmp	.+526    	; 0xc540 <user_menu_next+0x3c6>
		/******************************************************************************************************************************/
		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = POT_CALIBRATION_MENU;
    c332:	82 e8       	ldi	r24, 0x82	; 130
    c334:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    c338:	88 e2       	ldi	r24, 0x28	; 40
    c33a:	9e e2       	ldi	r25, 0x2E	; 46
    c33c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c340:	60 e0       	ldi	r22, 0x00	; 0
    c342:	81 e0       	ldi	r24, 0x01	; 1
    c344:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CALIBRATION"));
    c348:	8c e1       	ldi	r24, 0x1C	; 28
    c34a:	9e e2       	ldi	r25, 0x2E	; 46
    c34c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c350:	f7 c0       	rjmp	.+494    	; 0xc540 <user_menu_next+0x3c6>

		//Choose the type of pot being used
	case POT_TYPE_MENU:
		current_menu = POT_TYPE_VAL_MENU;
    c352:	83 e8       	ldi	r24, 0x83	; 131
    c354:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("NOT YET IMPLEMENTED"));
    c358:	88 e0       	ldi	r24, 0x08	; 8
    c35a:	9e e2       	ldi	r25, 0x2E	; 46
    c35c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c360:	ef c0       	rjmp	.+478    	; 0xc540 <user_menu_next+0x3c6>
	case POT_TYPE_VAL_MENU:
		break;

		//Display current calibration values, press next to recalibrate pot
	case POT_CALIBRATION_MENU:
		current_menu = POT_CALIBRATION_VAL_MENU;
    c362:	84 e8       	ldi	r24, 0x84	; 132
    c364:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    c368:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    c36c:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    c370:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    c374:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    c378:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    c37c:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    c380:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    c384:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    c388:	9f 01       	movw	r18, r30
    c38a:	36 95       	lsr	r19
    c38c:	27 95       	ror	r18
    c38e:	36 95       	lsr	r19
    c390:	27 95       	ror	r18
    c392:	36 95       	lsr	r19
    c394:	27 95       	ror	r18
    c396:	a5 ec       	ldi	r26, 0xC5	; 197
    c398:	b0 e2       	ldi	r27, 0x20	; 32
    c39a:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c39e:	92 95       	swap	r25
    c3a0:	82 95       	swap	r24
    c3a2:	8f 70       	andi	r24, 0x0F	; 15
    c3a4:	89 27       	eor	r24, r25
    c3a6:	9f 70       	andi	r25, 0x0F	; 15
    c3a8:	89 27       	eor	r24, r25
    c3aa:	0f 2e       	mov	r0, r31
    c3ac:	f8 ee       	ldi	r31, 0xE8	; 232
    c3ae:	ef 2e       	mov	r14, r31
    c3b0:	f3 e0       	ldi	r31, 0x03	; 3
    c3b2:	ff 2e       	mov	r15, r31
    c3b4:	f0 2d       	mov	r31, r0
    c3b6:	8e 9d       	mul	r24, r14
    c3b8:	90 01       	movw	r18, r0
    c3ba:	8f 9d       	mul	r24, r15
    c3bc:	30 0d       	add	r19, r0
    c3be:	9e 9d       	mul	r25, r14
    c3c0:	30 0d       	add	r19, r0
    c3c2:	11 24       	eor	r1, r1
    c3c4:	e2 1b       	sub	r30, r18
    c3c6:	f3 0b       	sbc	r31, r19
    c3c8:	ff 93       	push	r31
    c3ca:	ef 93       	push	r30
    c3cc:	98 01       	movw	r18, r16
    c3ce:	36 95       	lsr	r19
    c3d0:	27 95       	ror	r18
    c3d2:	36 95       	lsr	r19
    c3d4:	27 95       	ror	r18
    c3d6:	36 95       	lsr	r19
    c3d8:	27 95       	ror	r18
    c3da:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c3de:	92 95       	swap	r25
    c3e0:	82 95       	swap	r24
    c3e2:	8f 70       	andi	r24, 0x0F	; 15
    c3e4:	89 27       	eor	r24, r25
    c3e6:	9f 70       	andi	r25, 0x0F	; 15
    c3e8:	89 27       	eor	r24, r25
    c3ea:	9f 93       	push	r25
    c3ec:	8f 93       	push	r24
    c3ee:	9a 01       	movw	r18, r20
    c3f0:	36 95       	lsr	r19
    c3f2:	27 95       	ror	r18
    c3f4:	36 95       	lsr	r19
    c3f6:	27 95       	ror	r18
    c3f8:	36 95       	lsr	r19
    c3fa:	27 95       	ror	r18
    c3fc:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c400:	92 95       	swap	r25
    c402:	82 95       	swap	r24
    c404:	8f 70       	andi	r24, 0x0F	; 15
    c406:	89 27       	eor	r24, r25
    c408:	9f 70       	andi	r25, 0x0F	; 15
    c40a:	89 27       	eor	r24, r25
    c40c:	8e 9d       	mul	r24, r14
    c40e:	90 01       	movw	r18, r0
    c410:	8f 9d       	mul	r24, r15
    c412:	30 0d       	add	r19, r0
    c414:	9e 9d       	mul	r25, r14
    c416:	30 0d       	add	r19, r0
    c418:	11 24       	eor	r1, r1
    c41a:	42 1b       	sub	r20, r18
    c41c:	53 0b       	sbc	r21, r19
    c41e:	5f 93       	push	r21
    c420:	4f 93       	push	r20
    c422:	9e 01       	movw	r18, r28
    c424:	36 95       	lsr	r19
    c426:	27 95       	ror	r18
    c428:	36 95       	lsr	r19
    c42a:	27 95       	ror	r18
    c42c:	36 95       	lsr	r19
    c42e:	27 95       	ror	r18
    c430:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c434:	92 95       	swap	r25
    c436:	82 95       	swap	r24
    c438:	8f 70       	andi	r24, 0x0F	; 15
    c43a:	89 27       	eor	r24, r25
    c43c:	9f 70       	andi	r25, 0x0F	; 15
    c43e:	89 27       	eor	r24, r25
    c440:	9f 93       	push	r25
    c442:	8f 93       	push	r24
    c444:	86 e0       	ldi	r24, 0x06	; 6
    c446:	90 e2       	ldi	r25, 0x20	; 32
    c448:	9f 93       	push	r25
    c44a:	8f 93       	push	r24
    c44c:	83 ed       	ldi	r24, 0xD3	; 211
    c44e:	97 e2       	ldi	r25, 0x27	; 39
    c450:	9f 93       	push	r25
    c452:	8f 93       	push	r24
    c454:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c458:	83 ed       	ldi	r24, 0xD3	; 211
    c45a:	97 e2       	ldi	r25, 0x27	; 39
    c45c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    c460:	60 e0       	ldi	r22, 0x00	; 0
    c462:	81 e0       	ldi	r24, 0x01	; 1
    c464:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    c468:	84 ef       	ldi	r24, 0xF4	; 244
    c46a:	9d e2       	ldi	r25, 0x2D	; 45
    c46c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c470:	8d b7       	in	r24, 0x3d	; 61
    c472:	9e b7       	in	r25, 0x3e	; 62
    c474:	0c 96       	adiw	r24, 0x0c	; 12
    c476:	8d bf       	out	0x3d, r24	; 61
    c478:	9e bf       	out	0x3e, r25	; 62
    c47a:	62 c0       	rjmp	.+196    	; 0xc540 <user_menu_next+0x3c6>

	case POT_CALIBRATION_VAL_MENU:
		current_menu = POT_RECALIBRATION_MENU;
    c47c:	85 e8       	ldi	r24, 0x85	; 133
    c47e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("PRESS PEDAL UNTIL"));
    c482:	82 ee       	ldi	r24, 0xE2	; 226
    c484:	9d e2       	ldi	r25, 0x2D	; 45
    c486:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c48a:	60 e0       	ldi	r22, 0x00	; 0
    c48c:	81 e0       	ldi	r24, 0x01	; 1
    c48e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("PEDAL SWITCH CLOSES"));
    c492:	8e ec       	ldi	r24, 0xCE	; 206
    c494:	9d e2       	ldi	r25, 0x2D	; 45
    c496:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_LOW;
    c49a:	8a ea       	ldi	r24, 0xAA	; 170
    c49c:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    c4a0:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
		break;
    c4a4:	4d c0       	rjmp	.+154    	; 0xc540 <user_menu_next+0x3c6>

	case POT_VALUE_MENU:
		current_menu = POT_MENU;
    c4a6:	87 e8       	ldi	r24, 0x87	; 135
    c4a8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		Request_pot_value();
    c4ac:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <Request_pot_value>
		break;
    c4b0:	47 c0       	rjmp	.+142    	; 0xc540 <user_menu_next+0x3c6>
	case POT_MENU:
		break;
		/******************************************************************************************************************************/

	case ABOUT_MENU:
		current_menu = RB800_MENU;
    c4b2:	8a ea       	ldi	r24, 0xAA	; 170
    c4b4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT RB800"));
    c4b8:	82 ec       	ldi	r24, 0xC2	; 194
    c4ba:	9d e2       	ldi	r25, 0x2D	; 45
    c4bc:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c4c0:	3f c0       	rjmp	.+126    	; 0xc540 <user_menu_next+0x3c6>

		/*-------------------------------------------------------------------------------*/

	case RB800_MENU:
		current_menu = RB800_SERIAL_NUM_MENU;
    c4c2:	88 e6       	ldi	r24, 0x68	; 104
    c4c4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("RB800 SERIAL NUM"));
    c4c8:	81 eb       	ldi	r24, 0xB1	; 177
    c4ca:	9d e2       	ldi	r25, 0x2D	; 45
    c4cc:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c4d0:	60 e0       	ldi	r22, 0x00	; 0
    c4d2:	81 e0       	ldi	r24, 0x01	; 1
    c4d4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(serial_num);
    c4d8:	83 e8       	ldi	r24, 0x83	; 131
    c4da:	91 e2       	ldi	r25, 0x21	; 33
    c4dc:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    c4e0:	2f c0       	rjmp	.+94     	; 0xc540 <user_menu_next+0x3c6>

	case A1_MENU:
		current_menu = A1_SERIAL_NUM_MENU;
    c4e2:	82 e6       	ldi	r24, 0x62	; 98
    c4e4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A1 SERIAL NUM"));
    c4e8:	83 ea       	ldi	r24, 0xA3	; 163
    c4ea:	9d e2       	ldi	r25, 0x2D	; 45
    c4ec:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c4f0:	60 e0       	ldi	r22, 0x00	; 0
    c4f2:	81 e0       	ldi	r24, 0x01	; 1
    c4f4:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A1_serial_num);
    c4f8:	88 e9       	ldi	r24, 0x98	; 152
    c4fa:	91 e2       	ldi	r25, 0x21	; 33
    c4fc:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    c500:	1f c0       	rjmp	.+62     	; 0xc540 <user_menu_next+0x3c6>

	case A2_MENU:
		current_menu = A2_SERIAL_NUM_MENU;
    c502:	84 e6       	ldi	r24, 0x64	; 100
    c504:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A2 SERIAL NUM"));
    c508:	85 e9       	ldi	r24, 0x95	; 149
    c50a:	9d e2       	ldi	r25, 0x2D	; 45
    c50c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c510:	60 e0       	ldi	r22, 0x00	; 0
    c512:	81 e0       	ldi	r24, 0x01	; 1
    c514:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A2_serial_num);
    c518:	86 e4       	ldi	r24, 0x46	; 70
    c51a:	91 e2       	ldi	r25, 0x21	; 33
    c51c:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    c520:	0f c0       	rjmp	.+30     	; 0xc540 <user_menu_next+0x3c6>

	case A3_MENU:
		current_menu = A3_SERIAL_NUM_MENU;
    c522:	86 e6       	ldi	r24, 0x66	; 102
    c524:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A3 SERIAL NUM"));
    c528:	87 e8       	ldi	r24, 0x87	; 135
    c52a:	9d e2       	ldi	r25, 0x2D	; 45
    c52c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c530:	60 e0       	ldi	r22, 0x00	; 0
    c532:	81 e0       	ldi	r24, 0x01	; 1
    c534:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A3_serial_num);
    c538:	8a eb       	ldi	r24, 0xBA	; 186
    c53a:	91 e2       	ldi	r25, 0x21	; 33
    c53c:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>

		/******************************************************************************************************************************/

	default: break;
	}
}
    c540:	df 91       	pop	r29
    c542:	cf 91       	pop	r28
    c544:	1f 91       	pop	r17
    c546:	0f 91       	pop	r16
    c548:	ff 90       	pop	r15
    c54a:	ef 90       	pop	r14
    c54c:	08 95       	ret

0000c54e <user_menu_back>:

void user_menu_back(void)
{
    c54e:	ef 92       	push	r14
    c550:	ff 92       	push	r15
    c552:	0f 93       	push	r16
    c554:	1f 93       	push	r17
    c556:	cf 93       	push	r28
    c558:	df 93       	push	r29
	switch (current_menu)
    c55a:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    c55e:	8e 2f       	mov	r24, r30
    c560:	90 e0       	ldi	r25, 0x00	; 0
    c562:	8b 3a       	cpi	r24, 0xAB	; 171
    c564:	91 05       	cpc	r25, r1
    c566:	08 f0       	brcs	.+2      	; 0xc56a <user_menu_back+0x1c>
    c568:	b5 c1       	rjmp	.+874    	; 0xc8d4 <user_menu_back+0x386>
    c56a:	fc 01       	movw	r30, r24
    c56c:	e8 54       	subi	r30, 0x48	; 72
    c56e:	fa 4f       	sbci	r31, 0xFA	; 250
    c570:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    c574:	81 e0       	ldi	r24, 0x01	; 1
    c576:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c57a:	88 e7       	ldi	r24, 0x78	; 120
    c57c:	9d e2       	ldi	r25, 0x2D	; 45
    c57e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c582:	a8 c1       	rjmp	.+848    	; 0xc8d4 <user_menu_back+0x386>

		/*-------------------------------------------------------------------------------*/


	case FORWARD_SPEED_MENU:
		current_menu = MOTOR_MENU;
    c584:	81 e0       	ldi	r24, 0x01	; 1
    c586:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c58a:	89 e6       	ldi	r24, 0x69	; 105
    c58c:	9d e2       	ldi	r25, 0x2D	; 45
    c58e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c592:	a0 c1       	rjmp	.+832    	; 0xc8d4 <user_menu_back+0x386>

	case SLOW_SPEED_MENU:
		current_menu = FORWARD_SPEED_MENU;
    c594:	89 e1       	ldi	r24, 0x19	; 25
    c596:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    c59a:	8b e5       	ldi	r24, 0x5B	; 91
    c59c:	9d e2       	ldi	r25, 0x2D	; 45
    c59e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c5a2:	98 c1       	rjmp	.+816    	; 0xc8d4 <user_menu_back+0x386>

	case FAST_SPEED_MENU:
		current_menu = FORWARD_SPEED_MENU;
    c5a4:	89 e1       	ldi	r24, 0x19	; 25
    c5a6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    c5aa:	8d e4       	ldi	r24, 0x4D	; 77
    c5ac:	9d e2       	ldi	r25, 0x2D	; 45
    c5ae:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c5b2:	90 c1       	rjmp	.+800    	; 0xc8d4 <user_menu_back+0x386>

	case SLOW_SPEED_VAL_MENU:
		current_menu = SLOW_SPEED_MENU;
    c5b4:	84 e1       	ldi	r24, 0x14	; 20
    c5b6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    c5ba:	82 e4       	ldi	r24, 0x42	; 66
    c5bc:	9d e2       	ldi	r25, 0x2D	; 45
    c5be:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c5c2:	88 c1       	rjmp	.+784    	; 0xc8d4 <user_menu_back+0x386>

	case FAST_SPEED_VAL_MENU:
		current_menu = FAST_SPEED_MENU;
    c5c4:	85 e1       	ldi	r24, 0x15	; 21
    c5c6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FAST SPEED"));
    c5ca:	87 e3       	ldi	r24, 0x37	; 55
    c5cc:	9d e2       	ldi	r25, 0x2D	; 45
    c5ce:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c5d2:	80 c1       	rjmp	.+768    	; 0xc8d4 <user_menu_back+0x386>

	case REVERSE_SPEED_MENU:
		current_menu = MOTOR_MENU;
    c5d4:	81 e0       	ldi	r24, 0x01	; 1
    c5d6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c5da:	88 e2       	ldi	r24, 0x28	; 40
    c5dc:	9d e2       	ldi	r25, 0x2D	; 45
    c5de:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c5e2:	78 c1       	rjmp	.+752    	; 0xc8d4 <user_menu_back+0x386>
	case REVERSE_SPEED_VAL_MENU:
		current_menu = REVERSE_SPEED_MENU;
    c5e4:	83 e1       	ldi	r24, 0x13	; 19
    c5e6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    c5ea:	8a e1       	ldi	r24, 0x1A	; 26
    c5ec:	9d e2       	ldi	r25, 0x2D	; 45
    c5ee:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c5f2:	70 c1       	rjmp	.+736    	; 0xc8d4 <user_menu_back+0x386>
		/******************************************************************************************************************************/
		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = MOTOR_MENU;
    c5f4:	81 e0       	ldi	r24, 0x01	; 1
    c5f6:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c5fa:	8b e0       	ldi	r24, 0x0B	; 11
    c5fc:	9d e2       	ldi	r25, 0x2D	; 45
    c5fe:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c602:	68 c1       	rjmp	.+720    	; 0xc8d4 <user_menu_back+0x386>

		//Choose the type of pot being used
	case POT_TYPE_MENU:
		current_menu = POTENTIOMETER_MENU;
    c604:	80 e8       	ldi	r24, 0x80	; 128
    c606:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    c60a:	8d ef       	ldi	r24, 0xFD	; 253
    c60c:	9c e2       	ldi	r25, 0x2C	; 44
    c60e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c612:	60 e0       	ldi	r22, 0x00	; 0
    c614:	81 e0       	ldi	r24, 0x01	; 1
    c616:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    c61a:	84 ef       	ldi	r24, 0xF4	; 244
    c61c:	9c e2       	ldi	r25, 0x2C	; 44
    c61e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c622:	58 c1       	rjmp	.+688    	; 0xc8d4 <user_menu_back+0x386>

	case POT_TYPE_VAL_MENU:
		current_menu = POT_TYPE_MENU;
    c624:	81 e8       	ldi	r24, 0x81	; 129
    c626:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER TYPE"));
    c62a:	81 ee       	ldi	r24, 0xE1	; 225
    c62c:	9c e2       	ldi	r25, 0x2C	; 44
    c62e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c632:	50 c1       	rjmp	.+672    	; 0xc8d4 <user_menu_back+0x386>

	case POT_CALIBRATION_MENU:
		current_menu = POTENTIOMETER_MENU;
    c634:	80 e8       	ldi	r24, 0x80	; 128
    c636:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    c63a:	83 ed       	ldi	r24, 0xD3	; 211
    c63c:	9c e2       	ldi	r25, 0x2C	; 44
    c63e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c642:	60 e0       	ldi	r22, 0x00	; 0
    c644:	81 e0       	ldi	r24, 0x01	; 1
    c646:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    c64a:	8a ec       	ldi	r24, 0xCA	; 202
    c64c:	9c e2       	ldi	r25, 0x2C	; 44
    c64e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c652:	40 c1       	rjmp	.+640    	; 0xc8d4 <user_menu_back+0x386>

	case POT_CALIBRATION_VAL_MENU:
		current_menu = POT_CALIBRATION_MENU;
    c654:	82 e8       	ldi	r24, 0x82	; 130
    c656:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    c65a:	8c eb       	ldi	r24, 0xBC	; 188
    c65c:	9c e2       	ldi	r25, 0x2C	; 44
    c65e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c662:	60 e0       	ldi	r22, 0x00	; 0
    c664:	81 e0       	ldi	r24, 0x01	; 1
    c666:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CALIBRATION"));
    c66a:	80 eb       	ldi	r24, 0xB0	; 176
    c66c:	9c e2       	ldi	r25, 0x2C	; 44
    c66e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c672:	30 c1       	rjmp	.+608    	; 0xc8d4 <user_menu_back+0x386>

	case POT_VALUE_MENU:
		current_menu = MOTOR_MENU;
    c674:	81 e0       	ldi	r24, 0x01	; 1
    c676:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c67a:	81 ea       	ldi	r24, 0xA1	; 161
    c67c:	9c e2       	ldi	r25, 0x2C	; 44
    c67e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c682:	28 c1       	rjmp	.+592    	; 0xc8d4 <user_menu_back+0x386>

	case POT_MENU:
		current_menu = POT_VALUE_MENU;
    c684:	86 e8       	ldi	r24, 0x86	; 134
    c686:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    c68a:	83 e9       	ldi	r24, 0x93	; 147
    c68c:	9c e2       	ldi	r25, 0x2C	; 44
    c68e:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c692:	60 e0       	ldi	r22, 0x00	; 0
    c694:	81 e0       	ldi	r24, 0x01	; 1
    c696:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("VALUE"));
    c69a:	8d e8       	ldi	r24, 0x8D	; 141
    c69c:	9c e2       	ldi	r25, 0x2C	; 44
    c69e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c6a2:	18 c1       	rjmp	.+560    	; 0xc8d4 <user_menu_back+0x386>

	case POT_RECALIBRATION_MENU:
		lcd_write_new_P(PSTR("RECALIBRATION"));
    c6a4:	8f e7       	ldi	r24, 0x7F	; 127
    c6a6:	9c e2       	ldi	r25, 0x2C	; 44
    c6a8:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    c6ac:	60 e0       	ldi	r22, 0x00	; 0
    c6ae:	81 e0       	ldi	r24, 0x01	; 1
    c6b0:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    c6b4:	85 e7       	ldi	r24, 0x75	; 117
    c6b6:	9c e2       	ldi	r25, 0x2C	; 44
    c6b8:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_CANCELLED;
    c6bc:	8d ed       	ldi	r24, 0xDD	; 221
    c6be:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    c6c2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    c6c6:	2f ef       	ldi	r18, 0xFF	; 255
    c6c8:	8f e4       	ldi	r24, 0x4F	; 79
    c6ca:	93 ec       	ldi	r25, 0xC3	; 195
    c6cc:	21 50       	subi	r18, 0x01	; 1
    c6ce:	80 40       	sbci	r24, 0x00	; 0
    c6d0:	90 40       	sbci	r25, 0x00	; 0
    c6d2:	e1 f7       	brne	.-8      	; 0xc6cc <user_menu_back+0x17e>
    c6d4:	00 c0       	rjmp	.+0      	; 0xc6d6 <user_menu_back+0x188>
    c6d6:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    c6d8:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = POT_CALIBRATION_VAL_MENU;
    c6dc:	84 e8       	ldi	r24, 0x84	; 132
    c6de:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    c6e2:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    c6e6:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    c6ea:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    c6ee:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    c6f2:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    c6f6:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    c6fa:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    c6fe:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    c702:	9f 01       	movw	r18, r30
    c704:	36 95       	lsr	r19
    c706:	27 95       	ror	r18
    c708:	36 95       	lsr	r19
    c70a:	27 95       	ror	r18
    c70c:	36 95       	lsr	r19
    c70e:	27 95       	ror	r18
    c710:	a5 ec       	ldi	r26, 0xC5	; 197
    c712:	b0 e2       	ldi	r27, 0x20	; 32
    c714:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c718:	92 95       	swap	r25
    c71a:	82 95       	swap	r24
    c71c:	8f 70       	andi	r24, 0x0F	; 15
    c71e:	89 27       	eor	r24, r25
    c720:	9f 70       	andi	r25, 0x0F	; 15
    c722:	89 27       	eor	r24, r25
    c724:	0f 2e       	mov	r0, r31
    c726:	f8 ee       	ldi	r31, 0xE8	; 232
    c728:	ef 2e       	mov	r14, r31
    c72a:	f3 e0       	ldi	r31, 0x03	; 3
    c72c:	ff 2e       	mov	r15, r31
    c72e:	f0 2d       	mov	r31, r0
    c730:	8e 9d       	mul	r24, r14
    c732:	90 01       	movw	r18, r0
    c734:	8f 9d       	mul	r24, r15
    c736:	30 0d       	add	r19, r0
    c738:	9e 9d       	mul	r25, r14
    c73a:	30 0d       	add	r19, r0
    c73c:	11 24       	eor	r1, r1
    c73e:	e2 1b       	sub	r30, r18
    c740:	f3 0b       	sbc	r31, r19
    c742:	ff 93       	push	r31
    c744:	ef 93       	push	r30
    c746:	98 01       	movw	r18, r16
    c748:	36 95       	lsr	r19
    c74a:	27 95       	ror	r18
    c74c:	36 95       	lsr	r19
    c74e:	27 95       	ror	r18
    c750:	36 95       	lsr	r19
    c752:	27 95       	ror	r18
    c754:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c758:	92 95       	swap	r25
    c75a:	82 95       	swap	r24
    c75c:	8f 70       	andi	r24, 0x0F	; 15
    c75e:	89 27       	eor	r24, r25
    c760:	9f 70       	andi	r25, 0x0F	; 15
    c762:	89 27       	eor	r24, r25
    c764:	9f 93       	push	r25
    c766:	8f 93       	push	r24
    c768:	9a 01       	movw	r18, r20
    c76a:	36 95       	lsr	r19
    c76c:	27 95       	ror	r18
    c76e:	36 95       	lsr	r19
    c770:	27 95       	ror	r18
    c772:	36 95       	lsr	r19
    c774:	27 95       	ror	r18
    c776:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c77a:	92 95       	swap	r25
    c77c:	82 95       	swap	r24
    c77e:	8f 70       	andi	r24, 0x0F	; 15
    c780:	89 27       	eor	r24, r25
    c782:	9f 70       	andi	r25, 0x0F	; 15
    c784:	89 27       	eor	r24, r25
    c786:	8e 9d       	mul	r24, r14
    c788:	90 01       	movw	r18, r0
    c78a:	8f 9d       	mul	r24, r15
    c78c:	30 0d       	add	r19, r0
    c78e:	9e 9d       	mul	r25, r14
    c790:	30 0d       	add	r19, r0
    c792:	11 24       	eor	r1, r1
    c794:	42 1b       	sub	r20, r18
    c796:	53 0b       	sbc	r21, r19
    c798:	5f 93       	push	r21
    c79a:	4f 93       	push	r20
    c79c:	9e 01       	movw	r18, r28
    c79e:	36 95       	lsr	r19
    c7a0:	27 95       	ror	r18
    c7a2:	36 95       	lsr	r19
    c7a4:	27 95       	ror	r18
    c7a6:	36 95       	lsr	r19
    c7a8:	27 95       	ror	r18
    c7aa:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    c7ae:	92 95       	swap	r25
    c7b0:	82 95       	swap	r24
    c7b2:	8f 70       	andi	r24, 0x0F	; 15
    c7b4:	89 27       	eor	r24, r25
    c7b6:	9f 70       	andi	r25, 0x0F	; 15
    c7b8:	89 27       	eor	r24, r25
    c7ba:	9f 93       	push	r25
    c7bc:	8f 93       	push	r24
    c7be:	86 e0       	ldi	r24, 0x06	; 6
    c7c0:	90 e2       	ldi	r25, 0x20	; 32
    c7c2:	9f 93       	push	r25
    c7c4:	8f 93       	push	r24
    c7c6:	83 ed       	ldi	r24, 0xD3	; 211
    c7c8:	97 e2       	ldi	r25, 0x27	; 39
    c7ca:	9f 93       	push	r25
    c7cc:	8f 93       	push	r24
    c7ce:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c7d2:	83 ed       	ldi	r24, 0xD3	; 211
    c7d4:	97 e2       	ldi	r25, 0x27	; 39
    c7d6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    c7da:	60 e0       	ldi	r22, 0x00	; 0
    c7dc:	81 e0       	ldi	r24, 0x01	; 1
    c7de:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    c7e2:	81 e6       	ldi	r24, 0x61	; 97
    c7e4:	9c e2       	ldi	r25, 0x2C	; 44
    c7e6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    c7ea:	8d b7       	in	r24, 0x3d	; 61
    c7ec:	9e b7       	in	r25, 0x3e	; 62
    c7ee:	0c 96       	adiw	r24, 0x0c	; 12
    c7f0:	8d bf       	out	0x3d, r24	; 61
    c7f2:	9e bf       	out	0x3e, r25	; 62
    c7f4:	6f c0       	rjmp	.+222    	; 0xc8d4 <user_menu_back+0x386>
		break;

		/*-------------------------------------------------------------------------------*/

	case RB800_MENU:
		current_menu = ABOUT_MENU;
    c7f6:	83 e0       	ldi	r24, 0x03	; 3
    c7f8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    c7fc:	8b e5       	ldi	r24, 0x5B	; 91
    c7fe:	9c e2       	ldi	r25, 0x2C	; 44
    c800:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c804:	67 c0       	rjmp	.+206    	; 0xc8d4 <user_menu_back+0x386>

	case A1_MENU:
		current_menu = ABOUT_MENU;
    c806:	83 e0       	ldi	r24, 0x03	; 3
    c808:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    c80c:	85 e5       	ldi	r24, 0x55	; 85
    c80e:	9c e2       	ldi	r25, 0x2C	; 44
    c810:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c814:	5f c0       	rjmp	.+190    	; 0xc8d4 <user_menu_back+0x386>

	case A2_MENU:
		current_menu = ABOUT_MENU;
    c816:	83 e0       	ldi	r24, 0x03	; 3
    c818:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    c81c:	8f e4       	ldi	r24, 0x4F	; 79
    c81e:	9c e2       	ldi	r25, 0x2C	; 44
    c820:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c824:	57 c0       	rjmp	.+174    	; 0xc8d4 <user_menu_back+0x386>

	case A3_MENU:
		current_menu = ABOUT_MENU;
    c826:	83 e0       	ldi	r24, 0x03	; 3
    c828:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    c82c:	89 e4       	ldi	r24, 0x49	; 73
    c82e:	9c e2       	ldi	r25, 0x2C	; 44
    c830:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c834:	4f c0       	rjmp	.+158    	; 0xc8d4 <user_menu_back+0x386>

		/*-------------------------------------------------------------------------------*/

	case RB800_SERIAL_NUM_MENU:
		current_menu = RB800_MENU;
    c836:	8a ea       	ldi	r24, 0xAA	; 170
    c838:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT RB800"));
    c83c:	8d e3       	ldi	r24, 0x3D	; 61
    c83e:	9c e2       	ldi	r25, 0x2C	; 44
    c840:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c844:	47 c0       	rjmp	.+142    	; 0xc8d4 <user_menu_back+0x386>

	case A1_SERIAL_NUM_MENU:
		current_menu = A1_MENU;
    c846:	81 ea       	ldi	r24, 0xA1	; 161
    c848:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    c84c:	84 e3       	ldi	r24, 0x34	; 52
    c84e:	9c e2       	ldi	r25, 0x2C	; 44
    c850:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c854:	3f c0       	rjmp	.+126    	; 0xc8d4 <user_menu_back+0x386>

	case A1_PCB_MENU:
		current_menu = A1_MENU;
    c856:	81 ea       	ldi	r24, 0xA1	; 161
    c858:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    c85c:	8b e2       	ldi	r24, 0x2B	; 43
    c85e:	9c e2       	ldi	r25, 0x2C	; 44
    c860:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c864:	37 c0       	rjmp	.+110    	; 0xc8d4 <user_menu_back+0x386>

	case A1_FIRMWARE_MENU:
		current_menu = A1_MENU;
    c866:	81 ea       	ldi	r24, 0xA1	; 161
    c868:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    c86c:	82 e2       	ldi	r24, 0x22	; 34
    c86e:	9c e2       	ldi	r25, 0x2C	; 44
    c870:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c874:	2f c0       	rjmp	.+94     	; 0xc8d4 <user_menu_back+0x386>

	case A2_SERIAL_NUM_MENU:
		current_menu = A2_MENU;
    c876:	82 ea       	ldi	r24, 0xA2	; 162
    c878:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    c87c:	89 e1       	ldi	r24, 0x19	; 25
    c87e:	9c e2       	ldi	r25, 0x2C	; 44
    c880:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c884:	27 c0       	rjmp	.+78     	; 0xc8d4 <user_menu_back+0x386>

	case A2_PCB_MENU:
		current_menu = A2_MENU;
    c886:	82 ea       	ldi	r24, 0xA2	; 162
    c888:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    c88c:	80 e1       	ldi	r24, 0x10	; 16
    c88e:	9c e2       	ldi	r25, 0x2C	; 44
    c890:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c894:	1f c0       	rjmp	.+62     	; 0xc8d4 <user_menu_back+0x386>

	case A2_FIRMWARE_MENU:
		current_menu = A2_MENU;
    c896:	82 ea       	ldi	r24, 0xA2	; 162
    c898:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    c89c:	87 e0       	ldi	r24, 0x07	; 7
    c89e:	9c e2       	ldi	r25, 0x2C	; 44
    c8a0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c8a4:	17 c0       	rjmp	.+46     	; 0xc8d4 <user_menu_back+0x386>

	case A3_SERIAL_NUM_MENU:
		current_menu = A3_MENU;
    c8a6:	83 ea       	ldi	r24, 0xA3	; 163
    c8a8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    c8ac:	8e ef       	ldi	r24, 0xFE	; 254
    c8ae:	9b e2       	ldi	r25, 0x2B	; 43
    c8b0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c8b4:	0f c0       	rjmp	.+30     	; 0xc8d4 <user_menu_back+0x386>

	case A3_PCB_MENU:
		current_menu = A3_MENU;
    c8b6:	83 ea       	ldi	r24, 0xA3	; 163
    c8b8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    c8bc:	85 ef       	ldi	r24, 0xF5	; 245
    c8be:	9b e2       	ldi	r25, 0x2B	; 43
    c8c0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c8c4:	07 c0       	rjmp	.+14     	; 0xc8d4 <user_menu_back+0x386>

	case A3_FIRMWARE_MENU:
		current_menu = A3_MENU;
    c8c6:	83 ea       	ldi	r24, 0xA3	; 163
    c8c8:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    c8cc:	8c ee       	ldi	r24, 0xEC	; 236
    c8ce:	9b e2       	ldi	r25, 0x2B	; 43
    c8d0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>

		/******************************************************************************************************************************/
	default: break;
	}

}
    c8d4:	df 91       	pop	r29
    c8d6:	cf 91       	pop	r28
    c8d8:	1f 91       	pop	r17
    c8da:	0f 91       	pop	r16
    c8dc:	ff 90       	pop	r15
    c8de:	ef 90       	pop	r14
    c8e0:	08 95       	ret

0000c8e2 <user_menu_up>:

void user_menu_up(void)
{
    c8e2:	ef 92       	push	r14
    c8e4:	ff 92       	push	r15
    c8e6:	0f 93       	push	r16
    c8e8:	1f 93       	push	r17
    c8ea:	cf 93       	push	r28
    c8ec:	df 93       	push	r29
	switch (current_menu)
    c8ee:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    c8f2:	8e 2f       	mov	r24, r30
    c8f4:	90 e0       	ldi	r25, 0x00	; 0
    c8f6:	84 3a       	cpi	r24, 0xA4	; 164
    c8f8:	91 05       	cpc	r25, r1
    c8fa:	08 f0       	brcs	.+2      	; 0xc8fe <user_menu_up+0x1c>
    c8fc:	a5 c1       	rjmp	.+842    	; 0xcc48 <user_menu_up+0x366>
    c8fe:	fc 01       	movw	r30, r24
    c900:	ed 59       	subi	r30, 0x9D	; 157
    c902:	f9 4f       	sbci	r31, 0xF9	; 249
    c904:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    c908:	81 e0       	ldi	r24, 0x01	; 1
    c90a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    c90e:	8d ed       	ldi	r24, 0xDD	; 221
    c910:	9b e2       	ldi	r25, 0x2B	; 43
    c912:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c916:	98 c1       	rjmp	.+816    	; 0xcc48 <user_menu_up+0x366>
		/*-------------------------------------------------------------------------------*/

	case FORWARD_SPEED_MENU:
		break;
	case REVERSE_SPEED_MENU:
		current_menu = FORWARD_SPEED_MENU;
    c918:	89 e1       	ldi	r24, 0x19	; 25
    c91a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FORWARD SPEED"));
    c91e:	8f ec       	ldi	r24, 0xCF	; 207
    c920:	9b e2       	ldi	r25, 0x2B	; 43
    c922:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c926:	90 c1       	rjmp	.+800    	; 0xcc48 <user_menu_up+0x366>
	case SLOW_SPEED_MENU:
		break;

	case FAST_SPEED_MENU:
		current_menu = SLOW_SPEED_MENU;
    c928:	84 e1       	ldi	r24, 0x14	; 20
    c92a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("SLOW SPEED"));
    c92e:	84 ec       	ldi	r24, 0xC4	; 196
    c930:	9b e2       	ldi	r25, 0x2B	; 43
    c932:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    c936:	88 c1       	rjmp	.+784    	; 0xcc48 <user_menu_up+0x366>

		/*--------------------------------------------------------------------------------*/

	case SLOW_SPEED_VAL_MENU:
		if (current_value < MAX_SLOW)
    c938:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c93c:	80 35       	cpi	r24, 0x50	; 80
    c93e:	18 f4       	brcc	.+6      	; 0xc946 <user_menu_up+0x64>
			current_value++;
    c940:	8f 5f       	subi	r24, 0xFF	; 255
    c942:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    c946:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c94a:	1f 92       	push	r1
    c94c:	8f 93       	push	r24
    c94e:	87 ef       	ldi	r24, 0xF7	; 247
    c950:	90 e2       	ldi	r25, 0x20	; 32
    c952:	9f 93       	push	r25
    c954:	8f 93       	push	r24
    c956:	83 ed       	ldi	r24, 0xD3	; 211
    c958:	97 e2       	ldi	r25, 0x27	; 39
    c95a:	9f 93       	push	r25
    c95c:	8f 93       	push	r24
    c95e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c962:	83 ed       	ldi	r24, 0xD3	; 211
    c964:	97 e2       	ldi	r25, 0x27	; 39
    c966:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    c96a:	0f 90       	pop	r0
    c96c:	0f 90       	pop	r0
    c96e:	0f 90       	pop	r0
    c970:	0f 90       	pop	r0
    c972:	0f 90       	pop	r0
    c974:	0f 90       	pop	r0
    c976:	68 c1       	rjmp	.+720    	; 0xcc48 <user_menu_up+0x366>

	case FAST_SPEED_VAL_MENU:
		if (current_value < MAX_FAST)
    c978:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c97c:	84 36       	cpi	r24, 0x64	; 100
    c97e:	18 f4       	brcc	.+6      	; 0xc986 <user_menu_up+0xa4>
			current_value++;
    c980:	8f 5f       	subi	r24, 0xFF	; 255
    c982:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    c986:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c98a:	1f 92       	push	r1
    c98c:	8f 93       	push	r24
    c98e:	87 ef       	ldi	r24, 0xF7	; 247
    c990:	90 e2       	ldi	r25, 0x20	; 32
    c992:	9f 93       	push	r25
    c994:	8f 93       	push	r24
    c996:	83 ed       	ldi	r24, 0xD3	; 211
    c998:	97 e2       	ldi	r25, 0x27	; 39
    c99a:	9f 93       	push	r25
    c99c:	8f 93       	push	r24
    c99e:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c9a2:	83 ed       	ldi	r24, 0xD3	; 211
    c9a4:	97 e2       	ldi	r25, 0x27	; 39
    c9a6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    c9aa:	0f 90       	pop	r0
    c9ac:	0f 90       	pop	r0
    c9ae:	0f 90       	pop	r0
    c9b0:	0f 90       	pop	r0
    c9b2:	0f 90       	pop	r0
    c9b4:	0f 90       	pop	r0
    c9b6:	48 c1       	rjmp	.+656    	; 0xcc48 <user_menu_up+0x366>
	case REVERSE_SPEED_VAL_MENU:
		if (current_value < MAX_REVERSE)
    c9b8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c9bc:	80 35       	cpi	r24, 0x50	; 80
    c9be:	18 f4       	brcc	.+6      	; 0xc9c6 <user_menu_up+0xe4>
			current_value++;
    c9c0:	8f 5f       	subi	r24, 0xFF	; 255
    c9c2:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    c9c6:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    c9ca:	1f 92       	push	r1
    c9cc:	8f 93       	push	r24
    c9ce:	87 ef       	ldi	r24, 0xF7	; 247
    c9d0:	90 e2       	ldi	r25, 0x20	; 32
    c9d2:	9f 93       	push	r25
    c9d4:	8f 93       	push	r24
    c9d6:	83 ed       	ldi	r24, 0xD3	; 211
    c9d8:	97 e2       	ldi	r25, 0x27	; 39
    c9da:	9f 93       	push	r25
    c9dc:	8f 93       	push	r24
    c9de:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    c9e2:	83 ed       	ldi	r24, 0xD3	; 211
    c9e4:	97 e2       	ldi	r25, 0x27	; 39
    c9e6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    c9ea:	0f 90       	pop	r0
    c9ec:	0f 90       	pop	r0
    c9ee:	0f 90       	pop	r0
    c9f0:	0f 90       	pop	r0
    c9f2:	0f 90       	pop	r0
    c9f4:	0f 90       	pop	r0
    c9f6:	28 c1       	rjmp	.+592    	; 0xcc48 <user_menu_up+0x366>
		/******************************************************************************************************************************/
		/*--------------------------------------------------------------------------------*/

		//Choose type of pot and calibrate the pot
	case POTENTIOMETER_MENU:
		current_menu = REVERSE_SPEED_MENU;
    c9f8:	83 e1       	ldi	r24, 0x13	; 19
    c9fa:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    c9fe:	86 eb       	ldi	r24, 0xB6	; 182
    ca00:	9b e2       	ldi	r25, 0x2B	; 43
    ca02:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ca06:	20 c1       	rjmp	.+576    	; 0xcc48 <user_menu_up+0x366>
	case POT_VALUE_MENU:
		current_menu = POTENTIOMETER_MENU;
    ca08:	80 e8       	ldi	r24, 0x80	; 128
    ca0a:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    ca0e:	88 ea       	ldi	r24, 0xA8	; 168
    ca10:	9b e2       	ldi	r25, 0x2B	; 43
    ca12:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ca16:	60 e0       	ldi	r22, 0x00	; 0
    ca18:	81 e0       	ldi	r24, 0x01	; 1
    ca1a:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    ca1e:	8f e9       	ldi	r24, 0x9F	; 159
    ca20:	9b e2       	ldi	r25, 0x2B	; 43
    ca22:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    ca26:	10 c1       	rjmp	.+544    	; 0xcc48 <user_menu_up+0x366>

	case POT_CALIBRATION_VAL_MENU:
		break;

	case POT_RECALIBRATION_MENU:
		lcd_write_new_P(PSTR("RECALIBRATION"));
    ca28:	81 e9       	ldi	r24, 0x91	; 145
    ca2a:	9b e2       	ldi	r25, 0x2B	; 43
    ca2c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ca30:	60 e0       	ldi	r22, 0x00	; 0
    ca32:	81 e0       	ldi	r24, 0x01	; 1
    ca34:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    ca38:	87 e8       	ldi	r24, 0x87	; 135
    ca3a:	9b e2       	ldi	r25, 0x2B	; 43
    ca3c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_CANCELLED;
    ca40:	8d ed       	ldi	r24, 0xDD	; 221
    ca42:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    ca46:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    ca4a:	2f ef       	ldi	r18, 0xFF	; 255
    ca4c:	8f e4       	ldi	r24, 0x4F	; 79
    ca4e:	93 ec       	ldi	r25, 0xC3	; 195
    ca50:	21 50       	subi	r18, 0x01	; 1
    ca52:	80 40       	sbci	r24, 0x00	; 0
    ca54:	90 40       	sbci	r25, 0x00	; 0
    ca56:	e1 f7       	brne	.-8      	; 0xca50 <user_menu_up+0x16e>
    ca58:	00 c0       	rjmp	.+0      	; 0xca5a <user_menu_up+0x178>
    ca5a:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    ca5c:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = POT_CALIBRATION_VAL_MENU;
    ca60:	84 e8       	ldi	r24, 0x84	; 132
    ca62:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    ca66:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    ca6a:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    ca6e:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    ca72:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    ca76:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    ca7a:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    ca7e:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    ca82:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    ca86:	9f 01       	movw	r18, r30
    ca88:	36 95       	lsr	r19
    ca8a:	27 95       	ror	r18
    ca8c:	36 95       	lsr	r19
    ca8e:	27 95       	ror	r18
    ca90:	36 95       	lsr	r19
    ca92:	27 95       	ror	r18
    ca94:	a5 ec       	ldi	r26, 0xC5	; 197
    ca96:	b0 e2       	ldi	r27, 0x20	; 32
    ca98:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    ca9c:	92 95       	swap	r25
    ca9e:	82 95       	swap	r24
    caa0:	8f 70       	andi	r24, 0x0F	; 15
    caa2:	89 27       	eor	r24, r25
    caa4:	9f 70       	andi	r25, 0x0F	; 15
    caa6:	89 27       	eor	r24, r25
    caa8:	0f 2e       	mov	r0, r31
    caaa:	f8 ee       	ldi	r31, 0xE8	; 232
    caac:	ef 2e       	mov	r14, r31
    caae:	f3 e0       	ldi	r31, 0x03	; 3
    cab0:	ff 2e       	mov	r15, r31
    cab2:	f0 2d       	mov	r31, r0
    cab4:	8e 9d       	mul	r24, r14
    cab6:	90 01       	movw	r18, r0
    cab8:	8f 9d       	mul	r24, r15
    caba:	30 0d       	add	r19, r0
    cabc:	9e 9d       	mul	r25, r14
    cabe:	30 0d       	add	r19, r0
    cac0:	11 24       	eor	r1, r1
    cac2:	e2 1b       	sub	r30, r18
    cac4:	f3 0b       	sbc	r31, r19
    cac6:	ff 93       	push	r31
    cac8:	ef 93       	push	r30
    caca:	98 01       	movw	r18, r16
    cacc:	36 95       	lsr	r19
    cace:	27 95       	ror	r18
    cad0:	36 95       	lsr	r19
    cad2:	27 95       	ror	r18
    cad4:	36 95       	lsr	r19
    cad6:	27 95       	ror	r18
    cad8:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    cadc:	92 95       	swap	r25
    cade:	82 95       	swap	r24
    cae0:	8f 70       	andi	r24, 0x0F	; 15
    cae2:	89 27       	eor	r24, r25
    cae4:	9f 70       	andi	r25, 0x0F	; 15
    cae6:	89 27       	eor	r24, r25
    cae8:	9f 93       	push	r25
    caea:	8f 93       	push	r24
    caec:	9a 01       	movw	r18, r20
    caee:	36 95       	lsr	r19
    caf0:	27 95       	ror	r18
    caf2:	36 95       	lsr	r19
    caf4:	27 95       	ror	r18
    caf6:	36 95       	lsr	r19
    caf8:	27 95       	ror	r18
    cafa:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    cafe:	92 95       	swap	r25
    cb00:	82 95       	swap	r24
    cb02:	8f 70       	andi	r24, 0x0F	; 15
    cb04:	89 27       	eor	r24, r25
    cb06:	9f 70       	andi	r25, 0x0F	; 15
    cb08:	89 27       	eor	r24, r25
    cb0a:	8e 9d       	mul	r24, r14
    cb0c:	90 01       	movw	r18, r0
    cb0e:	8f 9d       	mul	r24, r15
    cb10:	30 0d       	add	r19, r0
    cb12:	9e 9d       	mul	r25, r14
    cb14:	30 0d       	add	r19, r0
    cb16:	11 24       	eor	r1, r1
    cb18:	42 1b       	sub	r20, r18
    cb1a:	53 0b       	sbc	r21, r19
    cb1c:	5f 93       	push	r21
    cb1e:	4f 93       	push	r20
    cb20:	9e 01       	movw	r18, r28
    cb22:	36 95       	lsr	r19
    cb24:	27 95       	ror	r18
    cb26:	36 95       	lsr	r19
    cb28:	27 95       	ror	r18
    cb2a:	36 95       	lsr	r19
    cb2c:	27 95       	ror	r18
    cb2e:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    cb32:	92 95       	swap	r25
    cb34:	82 95       	swap	r24
    cb36:	8f 70       	andi	r24, 0x0F	; 15
    cb38:	89 27       	eor	r24, r25
    cb3a:	9f 70       	andi	r25, 0x0F	; 15
    cb3c:	89 27       	eor	r24, r25
    cb3e:	9f 93       	push	r25
    cb40:	8f 93       	push	r24
    cb42:	86 e0       	ldi	r24, 0x06	; 6
    cb44:	90 e2       	ldi	r25, 0x20	; 32
    cb46:	9f 93       	push	r25
    cb48:	8f 93       	push	r24
    cb4a:	83 ed       	ldi	r24, 0xD3	; 211
    cb4c:	97 e2       	ldi	r25, 0x27	; 39
    cb4e:	9f 93       	push	r25
    cb50:	8f 93       	push	r24
    cb52:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    cb56:	83 ed       	ldi	r24, 0xD3	; 211
    cb58:	97 e2       	ldi	r25, 0x27	; 39
    cb5a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    cb5e:	60 e0       	ldi	r22, 0x00	; 0
    cb60:	81 e0       	ldi	r24, 0x01	; 1
    cb62:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    cb66:	83 e7       	ldi	r24, 0x73	; 115
    cb68:	9b e2       	ldi	r25, 0x2B	; 43
    cb6a:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    cb6e:	8d b7       	in	r24, 0x3d	; 61
    cb70:	9e b7       	in	r25, 0x3e	; 62
    cb72:	0c 96       	adiw	r24, 0x0c	; 12
    cb74:	8d bf       	out	0x3d, r24	; 61
    cb76:	9e bf       	out	0x3e, r25	; 62
    cb78:	67 c0       	rjmp	.+206    	; 0xcc48 <user_menu_up+0x366>

		/*--------------------------------------------------------------------------------*/
	case ABOUT_MENU:
		current_menu = MOTOR_MENU;
    cb7a:	81 e0       	ldi	r24, 0x01	; 1
    cb7c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETINGS"));
    cb80:	85 e6       	ldi	r24, 0x65	; 101
    cb82:	9b e2       	ldi	r25, 0x2B	; 43
    cb84:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cb88:	5f c0       	rjmp	.+190    	; 0xcc48 <user_menu_up+0x366>

	case RB800_MENU:
		break;

	case A1_MENU:
		current_menu = RB800_MENU;
    cb8a:	8a ea       	ldi	r24, 0xAA	; 170
    cb8c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT RB800"));
    cb90:	89 e5       	ldi	r24, 0x59	; 89
    cb92:	9b e2       	ldi	r25, 0x2B	; 43
    cb94:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cb98:	57 c0       	rjmp	.+174    	; 0xcc48 <user_menu_up+0x366>

	case A2_MENU:
		current_menu = A1_MENU;
    cb9a:	81 ea       	ldi	r24, 0xA1	; 161
    cb9c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    cba0:	80 e5       	ldi	r24, 0x50	; 80
    cba2:	9b e2       	ldi	r25, 0x2B	; 43
    cba4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cba8:	4f c0       	rjmp	.+158    	; 0xcc48 <user_menu_up+0x366>

	case A3_MENU:
		current_menu = A2_MENU;
    cbaa:	82 ea       	ldi	r24, 0xA2	; 162
    cbac:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    cbb0:	87 e4       	ldi	r24, 0x47	; 71
    cbb2:	9b e2       	ldi	r25, 0x2B	; 43
    cbb4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cbb8:	47 c0       	rjmp	.+142    	; 0xcc48 <user_menu_up+0x366>

	case A1_SERIAL_NUM_MENU:
		break;

	case A1_PCB_MENU:
		current_menu = A1_SERIAL_NUM_MENU;
    cbba:	82 e6       	ldi	r24, 0x62	; 98
    cbbc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A1 SERIAL NUM"));
    cbc0:	89 e3       	ldi	r24, 0x39	; 57
    cbc2:	9b e2       	ldi	r25, 0x2B	; 43
    cbc4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    cbc8:	60 e0       	ldi	r22, 0x00	; 0
    cbca:	81 e0       	ldi	r24, 0x01	; 1
    cbcc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A1_serial_num);
    cbd0:	88 e9       	ldi	r24, 0x98	; 152
    cbd2:	91 e2       	ldi	r25, 0x21	; 33
    cbd4:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    cbd8:	37 c0       	rjmp	.+110    	; 0xcc48 <user_menu_up+0x366>

	case A1_FIRMWARE_MENU:
		current_menu = A1_PCB_MENU;
    cbda:	80 e4       	ldi	r24, 0x40	; 64
    cbdc:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A1_PCB);
    cbe0:	8b e4       	ldi	r24, 0x4B	; 75
    cbe2:	90 e2       	ldi	r25, 0x20	; 32
    cbe4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cbe8:	2f c0       	rjmp	.+94     	; 0xcc48 <user_menu_up+0x366>

	case A2_SERIAL_NUM_MENU:
		break;

	case A2_PCB_MENU:
		current_menu = A2_SERIAL_NUM_MENU;
    cbea:	84 e6       	ldi	r24, 0x64	; 100
    cbec:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A2 SERIAL NUM"));
    cbf0:	8b e2       	ldi	r24, 0x2B	; 43
    cbf2:	9b e2       	ldi	r25, 0x2B	; 43
    cbf4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    cbf8:	60 e0       	ldi	r22, 0x00	; 0
    cbfa:	81 e0       	ldi	r24, 0x01	; 1
    cbfc:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A2_serial_num);
    cc00:	86 e4       	ldi	r24, 0x46	; 70
    cc02:	91 e2       	ldi	r25, 0x21	; 33
    cc04:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    cc08:	1f c0       	rjmp	.+62     	; 0xcc48 <user_menu_up+0x366>

	case A2_FIRMWARE_MENU:
		current_menu = A2_PCB_MENU;
    cc0a:	84 e4       	ldi	r24, 0x44	; 68
    cc0c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A2_PCB);
    cc10:	85 e7       	ldi	r24, 0x75	; 117
    cc12:	90 e2       	ldi	r25, 0x20	; 32
    cc14:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cc18:	17 c0       	rjmp	.+46     	; 0xcc48 <user_menu_up+0x366>

	case A3_SERIAL_NUM_MENU:
		break;

	case A3_PCB_MENU:
		current_menu = A3_SERIAL_NUM_MENU;
    cc1a:	86 e6       	ldi	r24, 0x66	; 102
    cc1c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("A3 SERIAL NUM"));
    cc20:	8d e1       	ldi	r24, 0x1D	; 29
    cc22:	9b e2       	ldi	r25, 0x2B	; 43
    cc24:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    cc28:	60 e0       	ldi	r22, 0x00	; 0
    cc2a:	81 e0       	ldi	r24, 0x01	; 1
    cc2c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write(A3_serial_num);
    cc30:	8a eb       	ldi	r24, 0xBA	; 186
    cc32:	91 e2       	ldi	r25, 0x21	; 33
    cc34:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
		break;
    cc38:	07 c0       	rjmp	.+14     	; 0xcc48 <user_menu_up+0x366>

	case A3_FIRMWARE_MENU:
		current_menu = A3_PCB_MENU;
    cc3a:	88 e4       	ldi	r24, 0x48	; 72
    cc3c:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A3_PCB);
    cc40:	8f e9       	ldi	r24, 0x9F	; 159
    cc42:	90 e2       	ldi	r25, 0x20	; 32
    cc44:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>

		/******************************************************************************************************************************/

	default: break;
	}
}
    cc48:	df 91       	pop	r29
    cc4a:	cf 91       	pop	r28
    cc4c:	1f 91       	pop	r17
    cc4e:	0f 91       	pop	r16
    cc50:	ff 90       	pop	r15
    cc52:	ef 90       	pop	r14
    cc54:	08 95       	ret

0000cc56 <user_menu_down>:

void user_menu_down(void)
{
    cc56:	ef 92       	push	r14
    cc58:	ff 92       	push	r15
    cc5a:	0f 93       	push	r16
    cc5c:	1f 93       	push	r17
    cc5e:	cf 93       	push	r28
    cc60:	df 93       	push	r29
	switch (current_menu)
    cc62:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <current_menu>
    cc66:	8e 2f       	mov	r24, r30
    cc68:	90 e0       	ldi	r25, 0x00	; 0
    cc6a:	8b 3a       	cpi	r24, 0xAB	; 171
    cc6c:	91 05       	cpc	r25, r1
    cc6e:	08 f0       	brcs	.+2      	; 0xcc72 <user_menu_down+0x1c>
    cc70:	a5 c1       	rjmp	.+842    	; 0xcfbc <user_menu_down+0x366>
    cc72:	fc 01       	movw	r30, r24
    cc74:	e9 5f       	subi	r30, 0xF9	; 249
    cc76:	f8 4f       	sbci	r31, 0xF8	; 248
    cc78:	0c 94 9c 6b 	jmp	0xd738	; 0xd738 <__tablejump2__>
	{
	case PRE_MENU:
		current_menu = MOTOR_MENU;
    cc7c:	81 e0       	ldi	r24, 0x01	; 1
    cc7e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("MOTOR SETTINGS"));
    cc82:	8e e0       	ldi	r24, 0x0E	; 14
    cc84:	9b e2       	ldi	r25, 0x2B	; 43
    cc86:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cc8a:	98 c1       	rjmp	.+816    	; 0xcfbc <user_menu_down+0x366>

		/******************************************************************************************************************************/

	case MOTOR_MENU:
		current_menu = ABOUT_MENU;
    cc8c:	83 e0       	ldi	r24, 0x03	; 3
    cc8e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT"));
    cc92:	88 e0       	ldi	r24, 0x08	; 8
    cc94:	9b e2       	ldi	r25, 0x2B	; 43
    cc96:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cc9a:	90 c1       	rjmp	.+800    	; 0xcfbc <user_menu_down+0x366>

		/*-------------------------------------------------------------------------------*/

	case FORWARD_SPEED_MENU:
		current_menu = REVERSE_SPEED_MENU;
    cc9c:	83 e1       	ldi	r24, 0x13	; 19
    cc9e:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("REVERSE SPEED"));
    cca2:	8a ef       	ldi	r24, 0xFA	; 250
    cca4:	9a e2       	ldi	r25, 0x2A	; 42
    cca6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ccaa:	88 c1       	rjmp	.+784    	; 0xcfbc <user_menu_down+0x366>
	case REVERSE_SPEED_MENU:
		current_menu = POTENTIOMETER_MENU;
    ccac:	80 e8       	ldi	r24, 0x80	; 128
    ccae:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    ccb2:	8c ee       	ldi	r24, 0xEC	; 236
    ccb4:	9a e2       	ldi	r25, 0x2A	; 42
    ccb6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ccba:	60 e0       	ldi	r22, 0x00	; 0
    ccbc:	81 e0       	ldi	r24, 0x01	; 1
    ccbe:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("SETTINGS"));
    ccc2:	83 ee       	ldi	r24, 0xE3	; 227
    ccc4:	9a e2       	ldi	r25, 0x2A	; 42
    ccc6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    ccca:	78 c1       	rjmp	.+752    	; 0xcfbc <user_menu_down+0x366>
	case POTENTIOMETER_MENU:
		current_menu = POT_VALUE_MENU;
    cccc:	86 e8       	ldi	r24, 0x86	; 134
    ccce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    ccd2:	85 ed       	ldi	r24, 0xD5	; 213
    ccd4:	9a e2       	ldi	r25, 0x2A	; 42
    ccd6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    ccda:	60 e0       	ldi	r22, 0x00	; 0
    ccdc:	81 e0       	ldi	r24, 0x01	; 1
    ccde:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("VALUE"));
    cce2:	8f ec       	ldi	r24, 0xCF	; 207
    cce4:	9a e2       	ldi	r25, 0x2A	; 42
    cce6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    ccea:	68 c1       	rjmp	.+720    	; 0xcfbc <user_menu_down+0x366>

	case SLOW_SPEED_MENU:
		current_menu = FAST_SPEED_MENU;
    ccec:	85 e1       	ldi	r24, 0x15	; 21
    ccee:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("FAST SPEED"));
    ccf2:	84 ec       	ldi	r24, 0xC4	; 196
    ccf4:	9a e2       	ldi	r25, 0x2A	; 42
    ccf6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    ccfa:	60 c1       	rjmp	.+704    	; 0xcfbc <user_menu_down+0x366>

	case FAST_SPEED_MENU:
		break;

	case SLOW_SPEED_VAL_MENU:
		if (current_value > MIN_SLOW)
    ccfc:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    cd00:	86 30       	cpi	r24, 0x06	; 6
    cd02:	18 f0       	brcs	.+6      	; 0xcd0a <user_menu_down+0xb4>
			current_value--;
    cd04:	81 50       	subi	r24, 0x01	; 1
    cd06:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    cd0a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    cd0e:	1f 92       	push	r1
    cd10:	8f 93       	push	r24
    cd12:	87 ef       	ldi	r24, 0xF7	; 247
    cd14:	90 e2       	ldi	r25, 0x20	; 32
    cd16:	9f 93       	push	r25
    cd18:	8f 93       	push	r24
    cd1a:	83 ed       	ldi	r24, 0xD3	; 211
    cd1c:	97 e2       	ldi	r25, 0x27	; 39
    cd1e:	9f 93       	push	r25
    cd20:	8f 93       	push	r24
    cd22:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    cd26:	83 ed       	ldi	r24, 0xD3	; 211
    cd28:	97 e2       	ldi	r25, 0x27	; 39
    cd2a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cd2e:	0f 90       	pop	r0
    cd30:	0f 90       	pop	r0
    cd32:	0f 90       	pop	r0
    cd34:	0f 90       	pop	r0
    cd36:	0f 90       	pop	r0
    cd38:	0f 90       	pop	r0
    cd3a:	40 c1       	rjmp	.+640    	; 0xcfbc <user_menu_down+0x366>

	case FAST_SPEED_VAL_MENU:
		if (current_value > MIN_FAST)
    cd3c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    cd40:	86 30       	cpi	r24, 0x06	; 6
    cd42:	18 f0       	brcs	.+6      	; 0xcd4a <user_menu_down+0xf4>
			current_value--;
    cd44:	81 50       	subi	r24, 0x01	; 1
    cd46:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    cd4a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    cd4e:	1f 92       	push	r1
    cd50:	8f 93       	push	r24
    cd52:	87 ef       	ldi	r24, 0xF7	; 247
    cd54:	90 e2       	ldi	r25, 0x20	; 32
    cd56:	9f 93       	push	r25
    cd58:	8f 93       	push	r24
    cd5a:	83 ed       	ldi	r24, 0xD3	; 211
    cd5c:	97 e2       	ldi	r25, 0x27	; 39
    cd5e:	9f 93       	push	r25
    cd60:	8f 93       	push	r24
    cd62:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    cd66:	83 ed       	ldi	r24, 0xD3	; 211
    cd68:	97 e2       	ldi	r25, 0x27	; 39
    cd6a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cd6e:	0f 90       	pop	r0
    cd70:	0f 90       	pop	r0
    cd72:	0f 90       	pop	r0
    cd74:	0f 90       	pop	r0
    cd76:	0f 90       	pop	r0
    cd78:	0f 90       	pop	r0
    cd7a:	20 c1       	rjmp	.+576    	; 0xcfbc <user_menu_down+0x366>
	case REVERSE_SPEED_VAL_MENU:
		if (current_value > MIN_REVERSE)
    cd7c:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    cd80:	86 30       	cpi	r24, 0x06	; 6
    cd82:	18 f0       	brcs	.+6      	; 0xcd8a <user_menu_down+0x134>
			current_value--;
    cd84:	81 50       	subi	r24, 0x01	; 1
    cd86:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <current_value>
		sprintf(temp, "%d%% OF MAX SPEED", current_value);
    cd8a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <current_value>
    cd8e:	1f 92       	push	r1
    cd90:	8f 93       	push	r24
    cd92:	87 ef       	ldi	r24, 0xF7	; 247
    cd94:	90 e2       	ldi	r25, 0x20	; 32
    cd96:	9f 93       	push	r25
    cd98:	8f 93       	push	r24
    cd9a:	83 ed       	ldi	r24, 0xD3	; 211
    cd9c:	97 e2       	ldi	r25, 0x27	; 39
    cd9e:	9f 93       	push	r25
    cda0:	8f 93       	push	r24
    cda2:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    cda6:	83 ed       	ldi	r24, 0xD3	; 211
    cda8:	97 e2       	ldi	r25, 0x27	; 39
    cdaa:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cdae:	0f 90       	pop	r0
    cdb0:	0f 90       	pop	r0
    cdb2:	0f 90       	pop	r0
    cdb4:	0f 90       	pop	r0
    cdb6:	0f 90       	pop	r0
    cdb8:	0f 90       	pop	r0
    cdba:	00 c1       	rjmp	.+512    	; 0xcfbc <user_menu_down+0x366>
		/*------------------------------------------------------------------------------------------------------*/
		//Choose the type of pot being used
	case POT_TYPE_MENU:
		current_menu = POT_CALIBRATION_MENU;
    cdbc:	82 e8       	ldi	r24, 0x82	; 130
    cdbe:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("POTENTIOMETER"));
    cdc2:	86 eb       	ldi	r24, 0xB6	; 182
    cdc4:	9a e2       	ldi	r25, 0x2A	; 42
    cdc6:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    cdca:	60 e0       	ldi	r22, 0x00	; 0
    cdcc:	81 e0       	ldi	r24, 0x01	; 1
    cdce:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CALIBRATION"));
    cdd2:	8a ea       	ldi	r24, 0xAA	; 170
    cdd4:	9a e2       	ldi	r25, 0x2A	; 42
    cdd6:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    cdda:	f0 c0       	rjmp	.+480    	; 0xcfbc <user_menu_down+0x366>

	case POT_CALIBRATION_VAL_MENU:
		break;

	case POT_RECALIBRATION_MENU:
		lcd_write_new_P(PSTR("RECALIBRATION"));
    cddc:	8c e9       	ldi	r24, 0x9C	; 156
    cdde:	9a e2       	ldi	r25, 0x2A	; 42
    cde0:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		lcd_set_cursor(1, 0);
    cde4:	60 e0       	ldi	r22, 0x00	; 0
    cde6:	81 e0       	ldi	r24, 0x01	; 1
    cde8:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("CANCELLED"));
    cdec:	82 e9       	ldi	r24, 0x92	; 146
    cdee:	9a e2       	ldi	r25, 0x2A	; 42
    cdf0:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		pot_calibrating = POT_CALIBRATING_CANCELLED;
    cdf4:	8d ed       	ldi	r24, 0xDD	; 221
    cdf6:	80 93 af 22 	sts	0x22AF, r24	; 0x8022af <pot_calibrating>
		send_pot_calibrating();
    cdfa:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    cdfe:	2f ef       	ldi	r18, 0xFF	; 255
    ce00:	8f e4       	ldi	r24, 0x4F	; 79
    ce02:	93 ec       	ldi	r25, 0xC3	; 195
    ce04:	21 50       	subi	r18, 0x01	; 1
    ce06:	80 40       	sbci	r24, 0x00	; 0
    ce08:	90 40       	sbci	r25, 0x00	; 0
    ce0a:	e1 f7       	brne	.-8      	; 0xce04 <user_menu_down+0x1ae>
    ce0c:	00 c0       	rjmp	.+0      	; 0xce0e <user_menu_down+0x1b8>
    ce0e:	00 00       	nop
		_delay_ms(2000);
		clear_switch_pressed();
    ce10:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
		current_menu = POT_CALIBRATION_VAL_MENU;
    ce14:	84 e8       	ldi	r24, 0x84	; 132
    ce16:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		sprintf(temp, "LOW=%d.%03d|HIGH=%d.%03d", pot_low_deadband / 1000, pot_low_deadband % 1000, pot_high_deadband / 1000, pot_high_deadband % 1000);
    ce1a:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <pot_high_deadband>
    ce1e:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    ce22:	00 91 4d 23 	lds	r16, 0x234D	; 0x80234d <pot_high_deadband>
    ce26:	10 91 4e 23 	lds	r17, 0x234E	; 0x80234e <pot_high_deadband+0x1>
    ce2a:	40 91 f2 21 	lds	r20, 0x21F2	; 0x8021f2 <pot_low_deadband>
    ce2e:	50 91 f3 21 	lds	r21, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    ce32:	c0 91 f2 21 	lds	r28, 0x21F2	; 0x8021f2 <pot_low_deadband>
    ce36:	d0 91 f3 21 	lds	r29, 0x21F3	; 0x8021f3 <pot_low_deadband+0x1>
    ce3a:	9f 01       	movw	r18, r30
    ce3c:	36 95       	lsr	r19
    ce3e:	27 95       	ror	r18
    ce40:	36 95       	lsr	r19
    ce42:	27 95       	ror	r18
    ce44:	36 95       	lsr	r19
    ce46:	27 95       	ror	r18
    ce48:	a5 ec       	ldi	r26, 0xC5	; 197
    ce4a:	b0 e2       	ldi	r27, 0x20	; 32
    ce4c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    ce50:	92 95       	swap	r25
    ce52:	82 95       	swap	r24
    ce54:	8f 70       	andi	r24, 0x0F	; 15
    ce56:	89 27       	eor	r24, r25
    ce58:	9f 70       	andi	r25, 0x0F	; 15
    ce5a:	89 27       	eor	r24, r25
    ce5c:	0f 2e       	mov	r0, r31
    ce5e:	f8 ee       	ldi	r31, 0xE8	; 232
    ce60:	ef 2e       	mov	r14, r31
    ce62:	f3 e0       	ldi	r31, 0x03	; 3
    ce64:	ff 2e       	mov	r15, r31
    ce66:	f0 2d       	mov	r31, r0
    ce68:	8e 9d       	mul	r24, r14
    ce6a:	90 01       	movw	r18, r0
    ce6c:	8f 9d       	mul	r24, r15
    ce6e:	30 0d       	add	r19, r0
    ce70:	9e 9d       	mul	r25, r14
    ce72:	30 0d       	add	r19, r0
    ce74:	11 24       	eor	r1, r1
    ce76:	e2 1b       	sub	r30, r18
    ce78:	f3 0b       	sbc	r31, r19
    ce7a:	ff 93       	push	r31
    ce7c:	ef 93       	push	r30
    ce7e:	98 01       	movw	r18, r16
    ce80:	36 95       	lsr	r19
    ce82:	27 95       	ror	r18
    ce84:	36 95       	lsr	r19
    ce86:	27 95       	ror	r18
    ce88:	36 95       	lsr	r19
    ce8a:	27 95       	ror	r18
    ce8c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    ce90:	92 95       	swap	r25
    ce92:	82 95       	swap	r24
    ce94:	8f 70       	andi	r24, 0x0F	; 15
    ce96:	89 27       	eor	r24, r25
    ce98:	9f 70       	andi	r25, 0x0F	; 15
    ce9a:	89 27       	eor	r24, r25
    ce9c:	9f 93       	push	r25
    ce9e:	8f 93       	push	r24
    cea0:	9a 01       	movw	r18, r20
    cea2:	36 95       	lsr	r19
    cea4:	27 95       	ror	r18
    cea6:	36 95       	lsr	r19
    cea8:	27 95       	ror	r18
    ceaa:	36 95       	lsr	r19
    ceac:	27 95       	ror	r18
    ceae:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    ceb2:	92 95       	swap	r25
    ceb4:	82 95       	swap	r24
    ceb6:	8f 70       	andi	r24, 0x0F	; 15
    ceb8:	89 27       	eor	r24, r25
    ceba:	9f 70       	andi	r25, 0x0F	; 15
    cebc:	89 27       	eor	r24, r25
    cebe:	8e 9d       	mul	r24, r14
    cec0:	90 01       	movw	r18, r0
    cec2:	8f 9d       	mul	r24, r15
    cec4:	30 0d       	add	r19, r0
    cec6:	9e 9d       	mul	r25, r14
    cec8:	30 0d       	add	r19, r0
    ceca:	11 24       	eor	r1, r1
    cecc:	42 1b       	sub	r20, r18
    cece:	53 0b       	sbc	r21, r19
    ced0:	5f 93       	push	r21
    ced2:	4f 93       	push	r20
    ced4:	9e 01       	movw	r18, r28
    ced6:	36 95       	lsr	r19
    ced8:	27 95       	ror	r18
    ceda:	36 95       	lsr	r19
    cedc:	27 95       	ror	r18
    cede:	36 95       	lsr	r19
    cee0:	27 95       	ror	r18
    cee2:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    cee6:	92 95       	swap	r25
    cee8:	82 95       	swap	r24
    ceea:	8f 70       	andi	r24, 0x0F	; 15
    ceec:	89 27       	eor	r24, r25
    ceee:	9f 70       	andi	r25, 0x0F	; 15
    cef0:	89 27       	eor	r24, r25
    cef2:	9f 93       	push	r25
    cef4:	8f 93       	push	r24
    cef6:	86 e0       	ldi	r24, 0x06	; 6
    cef8:	90 e2       	ldi	r25, 0x20	; 32
    cefa:	9f 93       	push	r25
    cefc:	8f 93       	push	r24
    cefe:	83 ed       	ldi	r24, 0xD3	; 211
    cf00:	97 e2       	ldi	r25, 0x27	; 39
    cf02:	9f 93       	push	r25
    cf04:	8f 93       	push	r24
    cf06:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
		lcd_write_new(temp);
    cf0a:	83 ed       	ldi	r24, 0xD3	; 211
    cf0c:	97 e2       	ldi	r25, 0x27	; 39
    cf0e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		lcd_set_cursor(1, 0);
    cf12:	60 e0       	ldi	r22, 0x00	; 0
    cf14:	81 e0       	ldi	r24, 0x01	; 1
    cf16:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
		lcd_write_P(PSTR("NEXT TO RECALIBRATE"));
    cf1a:	8e e7       	ldi	r24, 0x7E	; 126
    cf1c:	9a e2       	ldi	r25, 0x2A	; 42
    cf1e:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
		break;
    cf22:	8d b7       	in	r24, 0x3d	; 61
    cf24:	9e b7       	in	r25, 0x3e	; 62
    cf26:	0c 96       	adiw	r24, 0x0c	; 12
    cf28:	8d bf       	out	0x3d, r24	; 61
    cf2a:	9e bf       	out	0x3e, r25	; 62
    cf2c:	47 c0       	rjmp	.+142    	; 0xcfbc <user_menu_down+0x366>
		break;

		/*-------------------------------------------------------------------------------*/

	case RB800_MENU:
		current_menu = A1_MENU;
    cf2e:	81 ea       	ldi	r24, 0xA1	; 161
    cf30:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A1"));
    cf34:	85 e7       	ldi	r24, 0x75	; 117
    cf36:	9a e2       	ldi	r25, 0x2A	; 42
    cf38:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cf3c:	3f c0       	rjmp	.+126    	; 0xcfbc <user_menu_down+0x366>

	case A1_MENU:
		current_menu = A2_MENU;
    cf3e:	82 ea       	ldi	r24, 0xA2	; 162
    cf40:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A2"));
    cf44:	8c e6       	ldi	r24, 0x6C	; 108
    cf46:	9a e2       	ldi	r25, 0x2A	; 42
    cf48:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cf4c:	37 c0       	rjmp	.+110    	; 0xcfbc <user_menu_down+0x366>

	case A2_MENU:
		current_menu = A3_MENU;
    cf4e:	83 ea       	ldi	r24, 0xA3	; 163
    cf50:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new_P(PSTR("ABOUT A3"));
    cf54:	83 e6       	ldi	r24, 0x63	; 99
    cf56:	9a e2       	ldi	r25, 0x2A	; 42
    cf58:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
		break;
    cf5c:	2f c0       	rjmp	.+94     	; 0xcfbc <user_menu_down+0x366>

	case RB800_SERIAL_NUM_MENU:
		break;

	case A1_SERIAL_NUM_MENU:
		current_menu = A1_PCB_MENU;
    cf5e:	80 e4       	ldi	r24, 0x40	; 64
    cf60:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A1_PCB);
    cf64:	8b e4       	ldi	r24, 0x4B	; 75
    cf66:	90 e2       	ldi	r25, 0x20	; 32
    cf68:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cf6c:	27 c0       	rjmp	.+78     	; 0xcfbc <user_menu_down+0x366>

	case A1_PCB_MENU:
		current_menu = A1_FIRMWARE_MENU;
    cf6e:	81 e4       	ldi	r24, 0x41	; 65
    cf70:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A1_FIRMWARE);
    cf74:	80 e6       	ldi	r24, 0x60	; 96
    cf76:	90 e2       	ldi	r25, 0x20	; 32
    cf78:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cf7c:	1f c0       	rjmp	.+62     	; 0xcfbc <user_menu_down+0x366>

	case A1_FIRMWARE_MENU:
		break;

	case A2_SERIAL_NUM_MENU:
		current_menu = A2_PCB_MENU;
    cf7e:	84 e4       	ldi	r24, 0x44	; 68
    cf80:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A2_PCB);
    cf84:	85 e7       	ldi	r24, 0x75	; 117
    cf86:	90 e2       	ldi	r25, 0x20	; 32
    cf88:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cf8c:	17 c0       	rjmp	.+46     	; 0xcfbc <user_menu_down+0x366>

	case A2_PCB_MENU:
		current_menu = A2_FIRMWARE_MENU;
    cf8e:	85 e4       	ldi	r24, 0x45	; 69
    cf90:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A2_FIRMWARE);
    cf94:	8a e8       	ldi	r24, 0x8A	; 138
    cf96:	90 e2       	ldi	r25, 0x20	; 32
    cf98:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cf9c:	0f c0       	rjmp	.+30     	; 0xcfbc <user_menu_down+0x366>

	case A2_FIRMWARE_MENU:
		break;

	case A3_SERIAL_NUM_MENU:
		current_menu = A3_PCB_MENU;
    cf9e:	88 e4       	ldi	r24, 0x48	; 72
    cfa0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A3_PCB);
    cfa4:	8f e9       	ldi	r24, 0x9F	; 159
    cfa6:	90 e2       	ldi	r25, 0x20	; 32
    cfa8:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>
		break;
    cfac:	07 c0       	rjmp	.+14     	; 0xcfbc <user_menu_down+0x366>

	case A3_PCB_MENU:
		current_menu = A3_FIRMWARE_MENU;
    cfae:	89 e4       	ldi	r24, 0x49	; 73
    cfb0:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <current_menu>
		lcd_write_new(A3_FIRMWARE);
    cfb4:	84 eb       	ldi	r24, 0xB4	; 180
    cfb6:	90 e2       	ldi	r25, 0x20	; 32
    cfb8:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <lcd_write_new>

		/******************************************************************************************************************************/

	default: break;
	}
}
    cfbc:	df 91       	pop	r29
    cfbe:	cf 91       	pop	r28
    cfc0:	1f 91       	pop	r17
    cfc2:	0f 91       	pop	r16
    cfc4:	ff 90       	pop	r15
    cfc6:	ef 90       	pop	r14
    cfc8:	08 95       	ret

0000cfca <start_u_menu>:

void start_u_menu(void)
{
	stop_second_timer();
    cfca:	0e 94 d2 5a 	call	0xb5a4	; 0xb5a4 <stop_second_timer>
	user_settings_menu_enable = TRUE;
    cfce:	81 e0       	ldi	r24, 0x01	; 1
    cfd0:	80 93 5d 23 	sts	0x235D, r24	; 0x80235d <user_settings_menu_enable>
	pot_calibrating = FALSE;
    cfd4:	10 92 af 22 	sts	0x22AF, r1	; 0x8022af <pot_calibrating>

	ack_counter = 0;
    cfd8:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <ack_counter>
    cfdc:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <ack_counter+0x1>

	lcd_write_new_P(PSTR("CHECKING CAN BUS..."));
    cfe0:	8f e4       	ldi	r24, 0x4F	; 79
    cfe2:	9a e2       	ldi	r25, 0x2A	; 42
    cfe4:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
    cfe8:	2f ef       	ldi	r18, 0xFF	; 255
    cfea:	87 ea       	ldi	r24, 0xA7	; 167
    cfec:	91 e6       	ldi	r25, 0x61	; 97
    cfee:	21 50       	subi	r18, 0x01	; 1
    cff0:	80 40       	sbci	r24, 0x00	; 0
    cff2:	90 40       	sbci	r25, 0x00	; 0
    cff4:	e1 f7       	brne	.-8      	; 0xcfee <start_u_menu+0x24>
    cff6:	00 c0       	rjmp	.+0      	; 0xcff8 <start_u_menu+0x2e>
    cff8:	00 00       	nop
    cffa:	5d c0       	rjmp	.+186    	; 0xd0b6 <start_u_menu+0xec>
	_delay_ms(1000);
	while (!can_functioning)
	{
		if (ack_counter >= 5 && !can_functioning)
    cffc:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    d000:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    d004:	05 97       	sbiw	r24, 0x05	; 5
    d006:	d0 f1       	brcs	.+116    	; 0xd07c <start_u_menu+0xb2>
		{
			if (!A2_ack_received & !A3_ack_received)
    d008:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <A2_ack_received>
    d00c:	80 91 5f 23 	lds	r24, 0x235F	; 0x80235f <A3_ack_received>
    d010:	21 e0       	ldi	r18, 0x01	; 1
    d012:	91 11       	cpse	r25, r1
    d014:	20 e0       	ldi	r18, 0x00	; 0
    d016:	22 23       	and	r18, r18
    d018:	91 f0       	breq	.+36     	; 0xd03e <start_u_menu+0x74>
    d01a:	21 e0       	ldi	r18, 0x01	; 1
    d01c:	81 11       	cpse	r24, r1
    d01e:	20 e0       	ldi	r18, 0x00	; 0
    d020:	22 23       	and	r18, r18
    d022:	69 f0       	breq	.+26     	; 0xd03e <start_u_menu+0x74>
			{
				lcd_write_new_P(PSTR("NO CAN COMM"));
    d024:	83 e4       	ldi	r24, 0x43	; 67
    d026:	9a e2       	ldi	r25, 0x2A	; 42
    d028:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    d02c:	60 e0       	ldi	r22, 0x00	; 0
    d02e:	81 e0       	ldi	r24, 0x01	; 1
    d030:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHECK WIRING"));
    d034:	86 e3       	ldi	r24, 0x36	; 54
    d036:	9a e2       	ldi	r25, 0x2A	; 42
    d038:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    d03c:	1d c0       	rjmp	.+58     	; 0xd078 <start_u_menu+0xae>
			}
			else if (!A2_ack_received)
    d03e:	91 11       	cpse	r25, r1
    d040:	0d c0       	rjmp	.+26     	; 0xd05c <start_u_menu+0x92>
			{
				lcd_write_new_P(PSTR("NO A2 CAN COMM"));
    d042:	87 e2       	ldi	r24, 0x27	; 39
    d044:	9a e2       	ldi	r25, 0x2A	; 42
    d046:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    d04a:	60 e0       	ldi	r22, 0x00	; 0
    d04c:	81 e0       	ldi	r24, 0x01	; 1
    d04e:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHECK WIRING"));
    d052:	8a e1       	ldi	r24, 0x1A	; 26
    d054:	9a e2       	ldi	r25, 0x2A	; 42
    d056:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
    d05a:	0e c0       	rjmp	.+28     	; 0xd078 <start_u_menu+0xae>
			}
			else if (!A3_ack_received)
    d05c:	81 11       	cpse	r24, r1
    d05e:	0c c0       	rjmp	.+24     	; 0xd078 <start_u_menu+0xae>
			{
				lcd_write_new_P(PSTR("NO A3 CAN COMM"));
    d060:	8b e0       	ldi	r24, 0x0B	; 11
    d062:	9a e2       	ldi	r25, 0x2A	; 42
    d064:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
				lcd_set_cursor(1, 0);
    d068:	60 e0       	ldi	r22, 0x00	; 0
    d06a:	81 e0       	ldi	r24, 0x01	; 1
    d06c:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
				lcd_write_P(PSTR("CHECK WIRING"));
    d070:	8e ef       	ldi	r24, 0xFE	; 254
    d072:	99 e2       	ldi	r25, 0x29	; 41
    d074:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
			}
			cli();
    d078:	f8 94       	cli
    d07a:	ff cf       	rjmp	.-2      	; 0xd07a <start_u_menu+0xb0>
			WHILE_TRUE();
		}
		if (!CQRx_queueIsEmpty())
    d07c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    d080:	81 11       	cpse	r24, r1
    d082:	05 c0       	rjmp	.+10     	; 0xd08e <start_u_menu+0xc4>
		{
			CQRx_dequeue();
    d084:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
			reset_CAN_error();
    d088:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    d08c:	14 c0       	rjmp	.+40     	; 0xd0b6 <start_u_menu+0xec>
		}
		else
		{
			ack_counter++;
    d08e:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <ack_counter>
    d092:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <ack_counter+0x1>
    d096:	01 96       	adiw	r24, 0x01	; 1
    d098:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <ack_counter>
    d09c:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <ack_counter+0x1>
			send_CAN_ACK();
    d0a0:	0e 94 3d 24 	call	0x487a	; 0x487a <send_CAN_ACK>
    d0a4:	2f ef       	ldi	r18, 0xFF	; 255
    d0a6:	87 ea       	ldi	r24, 0xA7	; 167
    d0a8:	91 e6       	ldi	r25, 0x61	; 97
    d0aa:	21 50       	subi	r18, 0x01	; 1
    d0ac:	80 40       	sbci	r24, 0x00	; 0
    d0ae:	90 40       	sbci	r25, 0x00	; 0
    d0b0:	e1 f7       	brne	.-8      	; 0xd0aa <start_u_menu+0xe0>
    d0b2:	00 c0       	rjmp	.+0      	; 0xd0b4 <start_u_menu+0xea>
    d0b4:	00 00       	nop

	ack_counter = 0;

	lcd_write_new_P(PSTR("CHECKING CAN BUS..."));
	_delay_ms(1000);
	while (!can_functioning)
    d0b6:	80 91 ca 22 	lds	r24, 0x22CA	; 0x8022ca <can_functioning>
    d0ba:	88 23       	and	r24, r24
    d0bc:	09 f4       	brne	.+2      	; 0xd0c0 <start_u_menu+0xf6>
    d0be:	9e cf       	rjmp	.-196    	; 0xcffc <start_u_menu+0x32>
    d0c0:	2f ef       	ldi	r18, 0xFF	; 255
    d0c2:	87 e8       	ldi	r24, 0x87	; 135
    d0c4:	93 e1       	ldi	r25, 0x13	; 19
    d0c6:	21 50       	subi	r18, 0x01	; 1
    d0c8:	80 40       	sbci	r24, 0x00	; 0
    d0ca:	90 40       	sbci	r25, 0x00	; 0
    d0cc:	e1 f7       	brne	.-8      	; 0xd0c6 <start_u_menu+0xfc>
    d0ce:	00 c0       	rjmp	.+0      	; 0xd0d0 <start_u_menu+0x106>
    d0d0:	00 00       	nop
		}
	}

	//request_DM_settings();
	_delay_ms(200);
	send_pot_calibrating();
    d0d2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <send_pot_calibrating>
    d0d6:	2f ef       	ldi	r18, 0xFF	; 255
    d0d8:	87 e8       	ldi	r24, 0x87	; 135
    d0da:	93 e1       	ldi	r25, 0x13	; 19
    d0dc:	21 50       	subi	r18, 0x01	; 1
    d0de:	80 40       	sbci	r24, 0x00	; 0
    d0e0:	90 40       	sbci	r25, 0x00	; 0
    d0e2:	e1 f7       	brne	.-8      	; 0xd0dc <start_u_menu+0x112>
    d0e4:	00 c0       	rjmp	.+0      	; 0xd0e6 <start_u_menu+0x11c>
    d0e6:	00 00       	nop
	_delay_ms(200);
	request_A2_serial_num();
    d0e8:	0e 94 d7 24 	call	0x49ae	; 0x49ae <request_A2_serial_num>
    d0ec:	2f ef       	ldi	r18, 0xFF	; 255
    d0ee:	87 e8       	ldi	r24, 0x87	; 135
    d0f0:	93 e1       	ldi	r25, 0x13	; 19
    d0f2:	21 50       	subi	r18, 0x01	; 1
    d0f4:	80 40       	sbci	r24, 0x00	; 0
    d0f6:	90 40       	sbci	r25, 0x00	; 0
    d0f8:	e1 f7       	brne	.-8      	; 0xd0f2 <start_u_menu+0x128>
    d0fa:	00 c0       	rjmp	.+0      	; 0xd0fc <start_u_menu+0x132>
    d0fc:	00 00       	nop
	_delay_ms(200);
	clear_switch_pressed();
    d0fe:	0e 94 91 26 	call	0x4d22	; 0x4d22 <clear_switch_pressed>
	request_A3_serial_num();
    d102:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <request_A3_serial_num>
    d106:	2f ef       	ldi	r18, 0xFF	; 255
    d108:	87 e8       	ldi	r24, 0x87	; 135
    d10a:	93 e1       	ldi	r25, 0x13	; 19
    d10c:	21 50       	subi	r18, 0x01	; 1
    d10e:	80 40       	sbci	r24, 0x00	; 0
    d110:	90 40       	sbci	r25, 0x00	; 0
    d112:	e1 f7       	brne	.-8      	; 0xd10c <start_u_menu+0x142>
    d114:	00 c0       	rjmp	.+0      	; 0xd116 <start_u_menu+0x14c>
    d116:	00 00       	nop
	_delay_ms(200);
	lcd_write_new_P(PSTR("EP - up  |RV - next"));
    d118:	8a ee       	ldi	r24, 0xEA	; 234
    d11a:	99 e2       	ldi	r25, 0x29	; 41
    d11c:	0e 94 2b 33 	call	0x6656	; 0x6656 <lcd_write_new_P>
	lcd_set_cursor(1, 0);
    d120:	60 e0       	ldi	r22, 0x00	; 0
    d122:	81 e0       	ldi	r24, 0x01	; 1
    d124:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
	lcd_write_P(PSTR("BR - down|HL - back"));
    d128:	86 ed       	ldi	r24, 0xD6	; 214
    d12a:	99 e2       	ldi	r25, 0x29	; 41
    d12c:	0e 94 89 32 	call	0x6512	; 0x6512 <lcd_write_P>
	current_menu = PRE_MENU;
    d130:	10 92 cd 21 	sts	0x21CD, r1	; 0x8021cd <current_menu>
		{
			_delay_ms(10);
			Request_pot_value();
			_delay_ms(50);
			lcd_set_cursor(0, 0);
			sprintf(temp, "VALUE=%d.%03d  ", pot_value / 1000, pot_value % 1000);
    d134:	0f 2e       	mov	r0, r31
    d136:	f8 ee       	ldi	r31, 0xE8	; 232
    d138:	cf 2e       	mov	r12, r31
    d13a:	f3 e0       	ldi	r31, 0x03	; 3
    d13c:	df 2e       	mov	r13, r31
    d13e:	f0 2d       	mov	r31, r0
    d140:	0f 2e       	mov	r0, r31
    d142:	fa e2       	ldi	r31, 0x2A	; 42
    d144:	ef 2e       	mov	r14, r31
    d146:	f1 e2       	ldi	r31, 0x21	; 33
    d148:	ff 2e       	mov	r15, r31
    d14a:	f0 2d       	mov	r31, r0
    d14c:	03 ed       	ldi	r16, 0xD3	; 211
    d14e:	17 e2       	ldi	r17, 0x27	; 39
    d150:	a0 2e       	mov	r10, r16
    d152:	b1 2e       	mov	r11, r17
	default: break;
	}
}

void start_u_menu(void)
{
    d154:	c1 e0       	ldi	r28, 0x01	; 1
    d156:	d0 e0       	ldi	r29, 0x00	; 0
    d158:	01 c0       	rjmp	.+2      	; 0xd15c <start_u_menu+0x192>
    d15a:	21 96       	adiw	r28, 0x01	; 1
    d15c:	ce 01       	movw	r24, r28
    d15e:	01 97       	sbiw	r24, 0x01	; 1
	while (1)
	{
		//Check if any switches have been pressed
		for (int num = 0; num < NUM_SWITCHES; num++)
		{
			if (switch_pressed[num])
    d160:	fc 01       	movw	r30, r24
    d162:	eb 52       	subi	r30, 0x2B	; 43
    d164:	fd 4d       	sbci	r31, 0xDD	; 221
    d166:	20 81       	ld	r18, Z
    d168:	22 23       	and	r18, r18
    d16a:	e9 f0       	breq	.+58     	; 0xd1a6 <start_u_menu+0x1dc>
			{
				//Clear switch_pressed
				switch_pressed[num] = FALSE;
    d16c:	fc 01       	movw	r30, r24
    d16e:	eb 52       	subi	r30, 0x2B	; 43
    d170:	fd 4d       	sbci	r31, 0xDD	; 221
    d172:	10 82       	st	Z, r1
				//Perform action depending on switch
				switch (num)
    d174:	86 30       	cpi	r24, 0x06	; 6
    d176:	91 05       	cpc	r25, r1
    d178:	51 f0       	breq	.+20     	; 0xd18e <start_u_menu+0x1c4>
    d17a:	18 f4       	brcc	.+6      	; 0xd182 <start_u_menu+0x1b8>
    d17c:	01 97       	sbiw	r24, 0x01	; 1
    d17e:	69 f0       	breq	.+26     	; 0xd19a <start_u_menu+0x1d0>
    d180:	12 c0       	rjmp	.+36     	; 0xd1a6 <start_u_menu+0x1dc>
    d182:	88 30       	cpi	r24, 0x08	; 8
    d184:	91 05       	cpc	r25, r1
    d186:	31 f0       	breq	.+12     	; 0xd194 <start_u_menu+0x1ca>
    d188:	0c 97       	sbiw	r24, 0x0c	; 12
    d18a:	51 f0       	breq	.+20     	; 0xd1a0 <start_u_menu+0x1d6>
    d18c:	0c c0       	rjmp	.+24     	; 0xd1a6 <start_u_menu+0x1dc>
				{
				case S_EP_NUM: user_menu_up();	 break;
    d18e:	0e 94 71 64 	call	0xc8e2	; 0xc8e2 <user_menu_up>
    d192:	e3 cf       	rjmp	.-58     	; 0xd15a <start_u_menu+0x190>
				case S_RV_NUM: user_menu_next(); break;
    d194:	0e 94 bd 60 	call	0xc17a	; 0xc17a <user_menu_next>
    d198:	e0 cf       	rjmp	.-64     	; 0xd15a <start_u_menu+0x190>
				case S_HL_NUM: user_menu_back(); break;
    d19a:	0e 94 a7 62 	call	0xc54e	; 0xc54e <user_menu_back>
    d19e:	dd cf       	rjmp	.-70     	; 0xd15a <start_u_menu+0x190>
				case S_BR_NUM: user_menu_down(); break;
    d1a0:	0e 94 2b 66 	call	0xcc56	; 0xcc56 <user_menu_down>
    d1a4:	da cf       	rjmp	.-76     	; 0xd15a <start_u_menu+0x190>
	current_menu = PRE_MENU;

	while (1)
	{
		//Check if any switches have been pressed
		for (int num = 0; num < NUM_SWITCHES; num++)
    d1a6:	cf 30       	cpi	r28, 0x0F	; 15
    d1a8:	d1 05       	cpc	r29, r1
    d1aa:	bc f2       	brlt	.-82     	; 0xd15a <start_u_menu+0x190>

				default:  break;
				}
			}
		}
		if (current_menu == POT_MENU)
    d1ac:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <current_menu>
    d1b0:	87 38       	cpi	r24, 0x87	; 135
    d1b2:	09 f0       	breq	.+2      	; 0xd1b6 <start_u_menu+0x1ec>
    d1b4:	6d c0       	rjmp	.+218    	; 0xd290 <start_u_menu+0x2c6>
    d1b6:	2f ef       	ldi	r18, 0xFF	; 255
    d1b8:	89 ef       	ldi	r24, 0xF9	; 249
    d1ba:	90 e0       	ldi	r25, 0x00	; 0
    d1bc:	21 50       	subi	r18, 0x01	; 1
    d1be:	80 40       	sbci	r24, 0x00	; 0
    d1c0:	90 40       	sbci	r25, 0x00	; 0
    d1c2:	e1 f7       	brne	.-8      	; 0xd1bc <start_u_menu+0x1f2>
    d1c4:	00 c0       	rjmp	.+0      	; 0xd1c6 <start_u_menu+0x1fc>
    d1c6:	00 00       	nop
		{
			_delay_ms(10);
			Request_pot_value();
    d1c8:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <Request_pot_value>
    d1cc:	2f ef       	ldi	r18, 0xFF	; 255
    d1ce:	81 ee       	ldi	r24, 0xE1	; 225
    d1d0:	94 e0       	ldi	r25, 0x04	; 4
    d1d2:	21 50       	subi	r18, 0x01	; 1
    d1d4:	80 40       	sbci	r24, 0x00	; 0
    d1d6:	90 40       	sbci	r25, 0x00	; 0
    d1d8:	e1 f7       	brne	.-8      	; 0xd1d2 <start_u_menu+0x208>
    d1da:	00 c0       	rjmp	.+0      	; 0xd1dc <start_u_menu+0x212>
    d1dc:	00 00       	nop
			_delay_ms(50);
			lcd_set_cursor(0, 0);
    d1de:	60 e0       	ldi	r22, 0x00	; 0
    d1e0:	80 e0       	ldi	r24, 0x00	; 0
    d1e2:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			sprintf(temp, "VALUE=%d.%03d  ", pot_value / 1000, pot_value % 1000);
    d1e6:	40 91 cb 21 	lds	r20, 0x21CB	; 0x8021cb <pot_value>
    d1ea:	50 91 cc 21 	lds	r21, 0x21CC	; 0x8021cc <pot_value+0x1>
    d1ee:	e0 91 cb 21 	lds	r30, 0x21CB	; 0x8021cb <pot_value>
    d1f2:	f0 91 cc 21 	lds	r31, 0x21CC	; 0x8021cc <pot_value+0x1>
    d1f6:	9a 01       	movw	r18, r20
    d1f8:	36 95       	lsr	r19
    d1fa:	27 95       	ror	r18
    d1fc:	36 95       	lsr	r19
    d1fe:	27 95       	ror	r18
    d200:	36 95       	lsr	r19
    d202:	27 95       	ror	r18
    d204:	a5 ec       	ldi	r26, 0xC5	; 197
    d206:	b0 e2       	ldi	r27, 0x20	; 32
    d208:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    d20c:	92 95       	swap	r25
    d20e:	82 95       	swap	r24
    d210:	8f 70       	andi	r24, 0x0F	; 15
    d212:	89 27       	eor	r24, r25
    d214:	9f 70       	andi	r25, 0x0F	; 15
    d216:	89 27       	eor	r24, r25
    d218:	8c 9d       	mul	r24, r12
    d21a:	90 01       	movw	r18, r0
    d21c:	8d 9d       	mul	r24, r13
    d21e:	30 0d       	add	r19, r0
    d220:	9c 9d       	mul	r25, r12
    d222:	30 0d       	add	r19, r0
    d224:	11 24       	eor	r1, r1
    d226:	42 1b       	sub	r20, r18
    d228:	53 0b       	sbc	r21, r19
    d22a:	5f 93       	push	r21
    d22c:	4f 93       	push	r20
    d22e:	9f 01       	movw	r18, r30
    d230:	36 95       	lsr	r19
    d232:	27 95       	ror	r18
    d234:	36 95       	lsr	r19
    d236:	27 95       	ror	r18
    d238:	36 95       	lsr	r19
    d23a:	27 95       	ror	r18
    d23c:	0e 94 a6 6b 	call	0xd74c	; 0xd74c <__umulhisi3>
    d240:	92 95       	swap	r25
    d242:	82 95       	swap	r24
    d244:	8f 70       	andi	r24, 0x0F	; 15
    d246:	89 27       	eor	r24, r25
    d248:	9f 70       	andi	r25, 0x0F	; 15
    d24a:	89 27       	eor	r24, r25
    d24c:	9f 93       	push	r25
    d24e:	8f 93       	push	r24
    d250:	ff 92       	push	r15
    d252:	ef 92       	push	r14
    d254:	1f 93       	push	r17
    d256:	0f 93       	push	r16
    d258:	0e 94 d8 6b 	call	0xd7b0	; 0xd7b0 <sprintf>
			lcd_write(temp);
    d25c:	8a 2d       	mov	r24, r10
    d25e:	9b 2d       	mov	r25, r11
    d260:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
			lcd_set_cursor(1, 0);
    d264:	60 e0       	ldi	r22, 0x00	; 0
    d266:	81 e0       	ldi	r24, 0x01	; 1
    d268:	0e 94 b4 32 	call	0x6568	; 0x6568 <lcd_set_cursor>
			sprintf(temp, "        ");
    d26c:	89 e0       	ldi	r24, 0x09	; 9
    d26e:	ea e3       	ldi	r30, 0x3A	; 58
    d270:	f1 e2       	ldi	r31, 0x21	; 33
    d272:	aa 2d       	mov	r26, r10
    d274:	bb 2d       	mov	r27, r11
    d276:	01 90       	ld	r0, Z+
    d278:	0d 92       	st	X+, r0
    d27a:	8a 95       	dec	r24
    d27c:	e1 f7       	brne	.-8      	; 0xd276 <start_u_menu+0x2ac>
			lcd_write(temp);
    d27e:	8a 2d       	mov	r24, r10
    d280:	9b 2d       	mov	r25, r11
    d282:	0e 94 4f 32 	call	0x649e	; 0x649e <lcd_write>
    d286:	8d b7       	in	r24, 0x3d	; 61
    d288:	9e b7       	in	r25, 0x3e	; 62
    d28a:	08 96       	adiw	r24, 0x08	; 8
    d28c:	8d bf       	out	0x3d, r24	; 61
    d28e:	9e bf       	out	0x3e, r25	; 62
		}
		if (!CQRx_queueIsEmpty())
    d290:	0e 94 c9 1b 	call	0x3792	; 0x3792 <CQRx_queueIsEmpty>
    d294:	81 11       	cpse	r24, r1
    d296:	5e cf       	rjmp	.-324    	; 0xd154 <start_u_menu+0x18a>
		{
			CQRx_dequeue();
    d298:	0e 94 34 1c 	call	0x3868	; 0x3868 <CQRx_dequeue>
			reset_CAN_error();
    d29c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <reset_CAN_error>
    d2a0:	59 cf       	rjmp	.-334    	; 0xd154 <start_u_menu+0x18a>

0000d2a2 <__subsf3>:
    d2a2:	50 58       	subi	r21, 0x80	; 128

0000d2a4 <__addsf3>:
    d2a4:	bb 27       	eor	r27, r27
    d2a6:	aa 27       	eor	r26, r26
    d2a8:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <__addsf3x>
    d2ac:	0c 94 dc 6a 	jmp	0xd5b8	; 0xd5b8 <__fp_round>
    d2b0:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <__fp_pscA>
    d2b4:	38 f0       	brcs	.+14     	; 0xd2c4 <__addsf3+0x20>
    d2b6:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <__fp_pscB>
    d2ba:	20 f0       	brcs	.+8      	; 0xd2c4 <__addsf3+0x20>
    d2bc:	39 f4       	brne	.+14     	; 0xd2cc <__addsf3+0x28>
    d2be:	9f 3f       	cpi	r25, 0xFF	; 255
    d2c0:	19 f4       	brne	.+6      	; 0xd2c8 <__addsf3+0x24>
    d2c2:	26 f4       	brtc	.+8      	; 0xd2cc <__addsf3+0x28>
    d2c4:	0c 94 cb 6a 	jmp	0xd596	; 0xd596 <__fp_nan>
    d2c8:	0e f4       	brtc	.+2      	; 0xd2cc <__addsf3+0x28>
    d2ca:	e0 95       	com	r30
    d2cc:	e7 fb       	bst	r30, 7
    d2ce:	0c 94 c5 6a 	jmp	0xd58a	; 0xd58a <__fp_inf>

0000d2d2 <__addsf3x>:
    d2d2:	e9 2f       	mov	r30, r25
    d2d4:	0e 94 ed 6a 	call	0xd5da	; 0xd5da <__fp_split3>
    d2d8:	58 f3       	brcs	.-42     	; 0xd2b0 <__addsf3+0xc>
    d2da:	ba 17       	cp	r27, r26
    d2dc:	62 07       	cpc	r22, r18
    d2de:	73 07       	cpc	r23, r19
    d2e0:	84 07       	cpc	r24, r20
    d2e2:	95 07       	cpc	r25, r21
    d2e4:	20 f0       	brcs	.+8      	; 0xd2ee <__addsf3x+0x1c>
    d2e6:	79 f4       	brne	.+30     	; 0xd306 <__addsf3x+0x34>
    d2e8:	a6 f5       	brtc	.+104    	; 0xd352 <__addsf3x+0x80>
    d2ea:	0c 94 0f 6b 	jmp	0xd61e	; 0xd61e <__fp_zero>
    d2ee:	0e f4       	brtc	.+2      	; 0xd2f2 <__addsf3x+0x20>
    d2f0:	e0 95       	com	r30
    d2f2:	0b 2e       	mov	r0, r27
    d2f4:	ba 2f       	mov	r27, r26
    d2f6:	a0 2d       	mov	r26, r0
    d2f8:	0b 01       	movw	r0, r22
    d2fa:	b9 01       	movw	r22, r18
    d2fc:	90 01       	movw	r18, r0
    d2fe:	0c 01       	movw	r0, r24
    d300:	ca 01       	movw	r24, r20
    d302:	a0 01       	movw	r20, r0
    d304:	11 24       	eor	r1, r1
    d306:	ff 27       	eor	r31, r31
    d308:	59 1b       	sub	r21, r25
    d30a:	99 f0       	breq	.+38     	; 0xd332 <__addsf3x+0x60>
    d30c:	59 3f       	cpi	r21, 0xF9	; 249
    d30e:	50 f4       	brcc	.+20     	; 0xd324 <__addsf3x+0x52>
    d310:	50 3e       	cpi	r21, 0xE0	; 224
    d312:	68 f1       	brcs	.+90     	; 0xd36e <__addsf3x+0x9c>
    d314:	1a 16       	cp	r1, r26
    d316:	f0 40       	sbci	r31, 0x00	; 0
    d318:	a2 2f       	mov	r26, r18
    d31a:	23 2f       	mov	r18, r19
    d31c:	34 2f       	mov	r19, r20
    d31e:	44 27       	eor	r20, r20
    d320:	58 5f       	subi	r21, 0xF8	; 248
    d322:	f3 cf       	rjmp	.-26     	; 0xd30a <__addsf3x+0x38>
    d324:	46 95       	lsr	r20
    d326:	37 95       	ror	r19
    d328:	27 95       	ror	r18
    d32a:	a7 95       	ror	r26
    d32c:	f0 40       	sbci	r31, 0x00	; 0
    d32e:	53 95       	inc	r21
    d330:	c9 f7       	brne	.-14     	; 0xd324 <__addsf3x+0x52>
    d332:	7e f4       	brtc	.+30     	; 0xd352 <__addsf3x+0x80>
    d334:	1f 16       	cp	r1, r31
    d336:	ba 0b       	sbc	r27, r26
    d338:	62 0b       	sbc	r22, r18
    d33a:	73 0b       	sbc	r23, r19
    d33c:	84 0b       	sbc	r24, r20
    d33e:	ba f0       	brmi	.+46     	; 0xd36e <__addsf3x+0x9c>
    d340:	91 50       	subi	r25, 0x01	; 1
    d342:	a1 f0       	breq	.+40     	; 0xd36c <__addsf3x+0x9a>
    d344:	ff 0f       	add	r31, r31
    d346:	bb 1f       	adc	r27, r27
    d348:	66 1f       	adc	r22, r22
    d34a:	77 1f       	adc	r23, r23
    d34c:	88 1f       	adc	r24, r24
    d34e:	c2 f7       	brpl	.-16     	; 0xd340 <__addsf3x+0x6e>
    d350:	0e c0       	rjmp	.+28     	; 0xd36e <__addsf3x+0x9c>
    d352:	ba 0f       	add	r27, r26
    d354:	62 1f       	adc	r22, r18
    d356:	73 1f       	adc	r23, r19
    d358:	84 1f       	adc	r24, r20
    d35a:	48 f4       	brcc	.+18     	; 0xd36e <__addsf3x+0x9c>
    d35c:	87 95       	ror	r24
    d35e:	77 95       	ror	r23
    d360:	67 95       	ror	r22
    d362:	b7 95       	ror	r27
    d364:	f7 95       	ror	r31
    d366:	9e 3f       	cpi	r25, 0xFE	; 254
    d368:	08 f0       	brcs	.+2      	; 0xd36c <__addsf3x+0x9a>
    d36a:	b0 cf       	rjmp	.-160    	; 0xd2cc <__addsf3+0x28>
    d36c:	93 95       	inc	r25
    d36e:	88 0f       	add	r24, r24
    d370:	08 f0       	brcs	.+2      	; 0xd374 <__addsf3x+0xa2>
    d372:	99 27       	eor	r25, r25
    d374:	ee 0f       	add	r30, r30
    d376:	97 95       	ror	r25
    d378:	87 95       	ror	r24
    d37a:	08 95       	ret

0000d37c <__cmpsf2>:
    d37c:	0e 94 a1 6a 	call	0xd542	; 0xd542 <__fp_cmp>
    d380:	08 f4       	brcc	.+2      	; 0xd384 <__cmpsf2+0x8>
    d382:	81 e0       	ldi	r24, 0x01	; 1
    d384:	08 95       	ret

0000d386 <__divsf3>:
    d386:	0e 94 d7 69 	call	0xd3ae	; 0xd3ae <__divsf3x>
    d38a:	0c 94 dc 6a 	jmp	0xd5b8	; 0xd5b8 <__fp_round>
    d38e:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <__fp_pscB>
    d392:	58 f0       	brcs	.+22     	; 0xd3aa <__divsf3+0x24>
    d394:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <__fp_pscA>
    d398:	40 f0       	brcs	.+16     	; 0xd3aa <__divsf3+0x24>
    d39a:	29 f4       	brne	.+10     	; 0xd3a6 <__divsf3+0x20>
    d39c:	5f 3f       	cpi	r21, 0xFF	; 255
    d39e:	29 f0       	breq	.+10     	; 0xd3aa <__divsf3+0x24>
    d3a0:	0c 94 c5 6a 	jmp	0xd58a	; 0xd58a <__fp_inf>
    d3a4:	51 11       	cpse	r21, r1
    d3a6:	0c 94 10 6b 	jmp	0xd620	; 0xd620 <__fp_szero>
    d3aa:	0c 94 cb 6a 	jmp	0xd596	; 0xd596 <__fp_nan>

0000d3ae <__divsf3x>:
    d3ae:	0e 94 ed 6a 	call	0xd5da	; 0xd5da <__fp_split3>
    d3b2:	68 f3       	brcs	.-38     	; 0xd38e <__divsf3+0x8>

0000d3b4 <__divsf3_pse>:
    d3b4:	99 23       	and	r25, r25
    d3b6:	b1 f3       	breq	.-20     	; 0xd3a4 <__divsf3+0x1e>
    d3b8:	55 23       	and	r21, r21
    d3ba:	91 f3       	breq	.-28     	; 0xd3a0 <__divsf3+0x1a>
    d3bc:	95 1b       	sub	r25, r21
    d3be:	55 0b       	sbc	r21, r21
    d3c0:	bb 27       	eor	r27, r27
    d3c2:	aa 27       	eor	r26, r26
    d3c4:	62 17       	cp	r22, r18
    d3c6:	73 07       	cpc	r23, r19
    d3c8:	84 07       	cpc	r24, r20
    d3ca:	38 f0       	brcs	.+14     	; 0xd3da <__divsf3_pse+0x26>
    d3cc:	9f 5f       	subi	r25, 0xFF	; 255
    d3ce:	5f 4f       	sbci	r21, 0xFF	; 255
    d3d0:	22 0f       	add	r18, r18
    d3d2:	33 1f       	adc	r19, r19
    d3d4:	44 1f       	adc	r20, r20
    d3d6:	aa 1f       	adc	r26, r26
    d3d8:	a9 f3       	breq	.-22     	; 0xd3c4 <__divsf3_pse+0x10>
    d3da:	35 d0       	rcall	.+106    	; 0xd446 <__divsf3_pse+0x92>
    d3dc:	0e 2e       	mov	r0, r30
    d3de:	3a f0       	brmi	.+14     	; 0xd3ee <__divsf3_pse+0x3a>
    d3e0:	e0 e8       	ldi	r30, 0x80	; 128
    d3e2:	32 d0       	rcall	.+100    	; 0xd448 <__divsf3_pse+0x94>
    d3e4:	91 50       	subi	r25, 0x01	; 1
    d3e6:	50 40       	sbci	r21, 0x00	; 0
    d3e8:	e6 95       	lsr	r30
    d3ea:	00 1c       	adc	r0, r0
    d3ec:	ca f7       	brpl	.-14     	; 0xd3e0 <__divsf3_pse+0x2c>
    d3ee:	2b d0       	rcall	.+86     	; 0xd446 <__divsf3_pse+0x92>
    d3f0:	fe 2f       	mov	r31, r30
    d3f2:	29 d0       	rcall	.+82     	; 0xd446 <__divsf3_pse+0x92>
    d3f4:	66 0f       	add	r22, r22
    d3f6:	77 1f       	adc	r23, r23
    d3f8:	88 1f       	adc	r24, r24
    d3fa:	bb 1f       	adc	r27, r27
    d3fc:	26 17       	cp	r18, r22
    d3fe:	37 07       	cpc	r19, r23
    d400:	48 07       	cpc	r20, r24
    d402:	ab 07       	cpc	r26, r27
    d404:	b0 e8       	ldi	r27, 0x80	; 128
    d406:	09 f0       	breq	.+2      	; 0xd40a <__divsf3_pse+0x56>
    d408:	bb 0b       	sbc	r27, r27
    d40a:	80 2d       	mov	r24, r0
    d40c:	bf 01       	movw	r22, r30
    d40e:	ff 27       	eor	r31, r31
    d410:	93 58       	subi	r25, 0x83	; 131
    d412:	5f 4f       	sbci	r21, 0xFF	; 255
    d414:	3a f0       	brmi	.+14     	; 0xd424 <__divsf3_pse+0x70>
    d416:	9e 3f       	cpi	r25, 0xFE	; 254
    d418:	51 05       	cpc	r21, r1
    d41a:	78 f0       	brcs	.+30     	; 0xd43a <__divsf3_pse+0x86>
    d41c:	0c 94 c5 6a 	jmp	0xd58a	; 0xd58a <__fp_inf>
    d420:	0c 94 10 6b 	jmp	0xd620	; 0xd620 <__fp_szero>
    d424:	5f 3f       	cpi	r21, 0xFF	; 255
    d426:	e4 f3       	brlt	.-8      	; 0xd420 <__divsf3_pse+0x6c>
    d428:	98 3e       	cpi	r25, 0xE8	; 232
    d42a:	d4 f3       	brlt	.-12     	; 0xd420 <__divsf3_pse+0x6c>
    d42c:	86 95       	lsr	r24
    d42e:	77 95       	ror	r23
    d430:	67 95       	ror	r22
    d432:	b7 95       	ror	r27
    d434:	f7 95       	ror	r31
    d436:	9f 5f       	subi	r25, 0xFF	; 255
    d438:	c9 f7       	brne	.-14     	; 0xd42c <__divsf3_pse+0x78>
    d43a:	88 0f       	add	r24, r24
    d43c:	91 1d       	adc	r25, r1
    d43e:	96 95       	lsr	r25
    d440:	87 95       	ror	r24
    d442:	97 f9       	bld	r25, 7
    d444:	08 95       	ret
    d446:	e1 e0       	ldi	r30, 0x01	; 1
    d448:	66 0f       	add	r22, r22
    d44a:	77 1f       	adc	r23, r23
    d44c:	88 1f       	adc	r24, r24
    d44e:	bb 1f       	adc	r27, r27
    d450:	62 17       	cp	r22, r18
    d452:	73 07       	cpc	r23, r19
    d454:	84 07       	cpc	r24, r20
    d456:	ba 07       	cpc	r27, r26
    d458:	20 f0       	brcs	.+8      	; 0xd462 <__divsf3_pse+0xae>
    d45a:	62 1b       	sub	r22, r18
    d45c:	73 0b       	sbc	r23, r19
    d45e:	84 0b       	sbc	r24, r20
    d460:	ba 0b       	sbc	r27, r26
    d462:	ee 1f       	adc	r30, r30
    d464:	88 f7       	brcc	.-30     	; 0xd448 <__divsf3_pse+0x94>
    d466:	e0 95       	com	r30
    d468:	08 95       	ret

0000d46a <__fixunssfsi>:
    d46a:	0e 94 f5 6a 	call	0xd5ea	; 0xd5ea <__fp_splitA>
    d46e:	88 f0       	brcs	.+34     	; 0xd492 <__fixunssfsi+0x28>
    d470:	9f 57       	subi	r25, 0x7F	; 127
    d472:	98 f0       	brcs	.+38     	; 0xd49a <__fixunssfsi+0x30>
    d474:	b9 2f       	mov	r27, r25
    d476:	99 27       	eor	r25, r25
    d478:	b7 51       	subi	r27, 0x17	; 23
    d47a:	b0 f0       	brcs	.+44     	; 0xd4a8 <__fixunssfsi+0x3e>
    d47c:	e1 f0       	breq	.+56     	; 0xd4b6 <__fixunssfsi+0x4c>
    d47e:	66 0f       	add	r22, r22
    d480:	77 1f       	adc	r23, r23
    d482:	88 1f       	adc	r24, r24
    d484:	99 1f       	adc	r25, r25
    d486:	1a f0       	brmi	.+6      	; 0xd48e <__fixunssfsi+0x24>
    d488:	ba 95       	dec	r27
    d48a:	c9 f7       	brne	.-14     	; 0xd47e <__fixunssfsi+0x14>
    d48c:	14 c0       	rjmp	.+40     	; 0xd4b6 <__fixunssfsi+0x4c>
    d48e:	b1 30       	cpi	r27, 0x01	; 1
    d490:	91 f0       	breq	.+36     	; 0xd4b6 <__fixunssfsi+0x4c>
    d492:	0e 94 0f 6b 	call	0xd61e	; 0xd61e <__fp_zero>
    d496:	b1 e0       	ldi	r27, 0x01	; 1
    d498:	08 95       	ret
    d49a:	0c 94 0f 6b 	jmp	0xd61e	; 0xd61e <__fp_zero>
    d49e:	67 2f       	mov	r22, r23
    d4a0:	78 2f       	mov	r23, r24
    d4a2:	88 27       	eor	r24, r24
    d4a4:	b8 5f       	subi	r27, 0xF8	; 248
    d4a6:	39 f0       	breq	.+14     	; 0xd4b6 <__fixunssfsi+0x4c>
    d4a8:	b9 3f       	cpi	r27, 0xF9	; 249
    d4aa:	cc f3       	brlt	.-14     	; 0xd49e <__fixunssfsi+0x34>
    d4ac:	86 95       	lsr	r24
    d4ae:	77 95       	ror	r23
    d4b0:	67 95       	ror	r22
    d4b2:	b3 95       	inc	r27
    d4b4:	d9 f7       	brne	.-10     	; 0xd4ac <__fixunssfsi+0x42>
    d4b6:	3e f4       	brtc	.+14     	; 0xd4c6 <__fixunssfsi+0x5c>
    d4b8:	90 95       	com	r25
    d4ba:	80 95       	com	r24
    d4bc:	70 95       	com	r23
    d4be:	61 95       	neg	r22
    d4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    d4c2:	8f 4f       	sbci	r24, 0xFF	; 255
    d4c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d4c6:	08 95       	ret

0000d4c8 <__floatunsisf>:
    d4c8:	e8 94       	clt
    d4ca:	09 c0       	rjmp	.+18     	; 0xd4de <__floatsisf+0x12>

0000d4cc <__floatsisf>:
    d4cc:	97 fb       	bst	r25, 7
    d4ce:	3e f4       	brtc	.+14     	; 0xd4de <__floatsisf+0x12>
    d4d0:	90 95       	com	r25
    d4d2:	80 95       	com	r24
    d4d4:	70 95       	com	r23
    d4d6:	61 95       	neg	r22
    d4d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d4da:	8f 4f       	sbci	r24, 0xFF	; 255
    d4dc:	9f 4f       	sbci	r25, 0xFF	; 255
    d4de:	99 23       	and	r25, r25
    d4e0:	a9 f0       	breq	.+42     	; 0xd50c <__floatsisf+0x40>
    d4e2:	f9 2f       	mov	r31, r25
    d4e4:	96 e9       	ldi	r25, 0x96	; 150
    d4e6:	bb 27       	eor	r27, r27
    d4e8:	93 95       	inc	r25
    d4ea:	f6 95       	lsr	r31
    d4ec:	87 95       	ror	r24
    d4ee:	77 95       	ror	r23
    d4f0:	67 95       	ror	r22
    d4f2:	b7 95       	ror	r27
    d4f4:	f1 11       	cpse	r31, r1
    d4f6:	f8 cf       	rjmp	.-16     	; 0xd4e8 <__floatsisf+0x1c>
    d4f8:	fa f4       	brpl	.+62     	; 0xd538 <__floatsisf+0x6c>
    d4fa:	bb 0f       	add	r27, r27
    d4fc:	11 f4       	brne	.+4      	; 0xd502 <__floatsisf+0x36>
    d4fe:	60 ff       	sbrs	r22, 0
    d500:	1b c0       	rjmp	.+54     	; 0xd538 <__floatsisf+0x6c>
    d502:	6f 5f       	subi	r22, 0xFF	; 255
    d504:	7f 4f       	sbci	r23, 0xFF	; 255
    d506:	8f 4f       	sbci	r24, 0xFF	; 255
    d508:	9f 4f       	sbci	r25, 0xFF	; 255
    d50a:	16 c0       	rjmp	.+44     	; 0xd538 <__floatsisf+0x6c>
    d50c:	88 23       	and	r24, r24
    d50e:	11 f0       	breq	.+4      	; 0xd514 <__floatsisf+0x48>
    d510:	96 e9       	ldi	r25, 0x96	; 150
    d512:	11 c0       	rjmp	.+34     	; 0xd536 <__floatsisf+0x6a>
    d514:	77 23       	and	r23, r23
    d516:	21 f0       	breq	.+8      	; 0xd520 <__floatsisf+0x54>
    d518:	9e e8       	ldi	r25, 0x8E	; 142
    d51a:	87 2f       	mov	r24, r23
    d51c:	76 2f       	mov	r23, r22
    d51e:	05 c0       	rjmp	.+10     	; 0xd52a <__floatsisf+0x5e>
    d520:	66 23       	and	r22, r22
    d522:	71 f0       	breq	.+28     	; 0xd540 <__floatsisf+0x74>
    d524:	96 e8       	ldi	r25, 0x86	; 134
    d526:	86 2f       	mov	r24, r22
    d528:	70 e0       	ldi	r23, 0x00	; 0
    d52a:	60 e0       	ldi	r22, 0x00	; 0
    d52c:	2a f0       	brmi	.+10     	; 0xd538 <__floatsisf+0x6c>
    d52e:	9a 95       	dec	r25
    d530:	66 0f       	add	r22, r22
    d532:	77 1f       	adc	r23, r23
    d534:	88 1f       	adc	r24, r24
    d536:	da f7       	brpl	.-10     	; 0xd52e <__floatsisf+0x62>
    d538:	88 0f       	add	r24, r24
    d53a:	96 95       	lsr	r25
    d53c:	87 95       	ror	r24
    d53e:	97 f9       	bld	r25, 7
    d540:	08 95       	ret

0000d542 <__fp_cmp>:
    d542:	99 0f       	add	r25, r25
    d544:	00 08       	sbc	r0, r0
    d546:	55 0f       	add	r21, r21
    d548:	aa 0b       	sbc	r26, r26
    d54a:	e0 e8       	ldi	r30, 0x80	; 128
    d54c:	fe ef       	ldi	r31, 0xFE	; 254
    d54e:	16 16       	cp	r1, r22
    d550:	17 06       	cpc	r1, r23
    d552:	e8 07       	cpc	r30, r24
    d554:	f9 07       	cpc	r31, r25
    d556:	c0 f0       	brcs	.+48     	; 0xd588 <__fp_cmp+0x46>
    d558:	12 16       	cp	r1, r18
    d55a:	13 06       	cpc	r1, r19
    d55c:	e4 07       	cpc	r30, r20
    d55e:	f5 07       	cpc	r31, r21
    d560:	98 f0       	brcs	.+38     	; 0xd588 <__fp_cmp+0x46>
    d562:	62 1b       	sub	r22, r18
    d564:	73 0b       	sbc	r23, r19
    d566:	84 0b       	sbc	r24, r20
    d568:	95 0b       	sbc	r25, r21
    d56a:	39 f4       	brne	.+14     	; 0xd57a <__fp_cmp+0x38>
    d56c:	0a 26       	eor	r0, r26
    d56e:	61 f0       	breq	.+24     	; 0xd588 <__fp_cmp+0x46>
    d570:	23 2b       	or	r18, r19
    d572:	24 2b       	or	r18, r20
    d574:	25 2b       	or	r18, r21
    d576:	21 f4       	brne	.+8      	; 0xd580 <__fp_cmp+0x3e>
    d578:	08 95       	ret
    d57a:	0a 26       	eor	r0, r26
    d57c:	09 f4       	brne	.+2      	; 0xd580 <__fp_cmp+0x3e>
    d57e:	a1 40       	sbci	r26, 0x01	; 1
    d580:	a6 95       	lsr	r26
    d582:	8f ef       	ldi	r24, 0xFF	; 255
    d584:	81 1d       	adc	r24, r1
    d586:	81 1d       	adc	r24, r1
    d588:	08 95       	ret

0000d58a <__fp_inf>:
    d58a:	97 f9       	bld	r25, 7
    d58c:	9f 67       	ori	r25, 0x7F	; 127
    d58e:	80 e8       	ldi	r24, 0x80	; 128
    d590:	70 e0       	ldi	r23, 0x00	; 0
    d592:	60 e0       	ldi	r22, 0x00	; 0
    d594:	08 95       	ret

0000d596 <__fp_nan>:
    d596:	9f ef       	ldi	r25, 0xFF	; 255
    d598:	80 ec       	ldi	r24, 0xC0	; 192
    d59a:	08 95       	ret

0000d59c <__fp_pscA>:
    d59c:	00 24       	eor	r0, r0
    d59e:	0a 94       	dec	r0
    d5a0:	16 16       	cp	r1, r22
    d5a2:	17 06       	cpc	r1, r23
    d5a4:	18 06       	cpc	r1, r24
    d5a6:	09 06       	cpc	r0, r25
    d5a8:	08 95       	ret

0000d5aa <__fp_pscB>:
    d5aa:	00 24       	eor	r0, r0
    d5ac:	0a 94       	dec	r0
    d5ae:	12 16       	cp	r1, r18
    d5b0:	13 06       	cpc	r1, r19
    d5b2:	14 06       	cpc	r1, r20
    d5b4:	05 06       	cpc	r0, r21
    d5b6:	08 95       	ret

0000d5b8 <__fp_round>:
    d5b8:	09 2e       	mov	r0, r25
    d5ba:	03 94       	inc	r0
    d5bc:	00 0c       	add	r0, r0
    d5be:	11 f4       	brne	.+4      	; 0xd5c4 <__fp_round+0xc>
    d5c0:	88 23       	and	r24, r24
    d5c2:	52 f0       	brmi	.+20     	; 0xd5d8 <__fp_round+0x20>
    d5c4:	bb 0f       	add	r27, r27
    d5c6:	40 f4       	brcc	.+16     	; 0xd5d8 <__fp_round+0x20>
    d5c8:	bf 2b       	or	r27, r31
    d5ca:	11 f4       	brne	.+4      	; 0xd5d0 <__fp_round+0x18>
    d5cc:	60 ff       	sbrs	r22, 0
    d5ce:	04 c0       	rjmp	.+8      	; 0xd5d8 <__fp_round+0x20>
    d5d0:	6f 5f       	subi	r22, 0xFF	; 255
    d5d2:	7f 4f       	sbci	r23, 0xFF	; 255
    d5d4:	8f 4f       	sbci	r24, 0xFF	; 255
    d5d6:	9f 4f       	sbci	r25, 0xFF	; 255
    d5d8:	08 95       	ret

0000d5da <__fp_split3>:
    d5da:	57 fd       	sbrc	r21, 7
    d5dc:	90 58       	subi	r25, 0x80	; 128
    d5de:	44 0f       	add	r20, r20
    d5e0:	55 1f       	adc	r21, r21
    d5e2:	59 f0       	breq	.+22     	; 0xd5fa <__fp_splitA+0x10>
    d5e4:	5f 3f       	cpi	r21, 0xFF	; 255
    d5e6:	71 f0       	breq	.+28     	; 0xd604 <__fp_splitA+0x1a>
    d5e8:	47 95       	ror	r20

0000d5ea <__fp_splitA>:
    d5ea:	88 0f       	add	r24, r24
    d5ec:	97 fb       	bst	r25, 7
    d5ee:	99 1f       	adc	r25, r25
    d5f0:	61 f0       	breq	.+24     	; 0xd60a <__fp_splitA+0x20>
    d5f2:	9f 3f       	cpi	r25, 0xFF	; 255
    d5f4:	79 f0       	breq	.+30     	; 0xd614 <__fp_splitA+0x2a>
    d5f6:	87 95       	ror	r24
    d5f8:	08 95       	ret
    d5fa:	12 16       	cp	r1, r18
    d5fc:	13 06       	cpc	r1, r19
    d5fe:	14 06       	cpc	r1, r20
    d600:	55 1f       	adc	r21, r21
    d602:	f2 cf       	rjmp	.-28     	; 0xd5e8 <__fp_split3+0xe>
    d604:	46 95       	lsr	r20
    d606:	f1 df       	rcall	.-30     	; 0xd5ea <__fp_splitA>
    d608:	08 c0       	rjmp	.+16     	; 0xd61a <__fp_splitA+0x30>
    d60a:	16 16       	cp	r1, r22
    d60c:	17 06       	cpc	r1, r23
    d60e:	18 06       	cpc	r1, r24
    d610:	99 1f       	adc	r25, r25
    d612:	f1 cf       	rjmp	.-30     	; 0xd5f6 <__fp_splitA+0xc>
    d614:	86 95       	lsr	r24
    d616:	71 05       	cpc	r23, r1
    d618:	61 05       	cpc	r22, r1
    d61a:	08 94       	sec
    d61c:	08 95       	ret

0000d61e <__fp_zero>:
    d61e:	e8 94       	clt

0000d620 <__fp_szero>:
    d620:	bb 27       	eor	r27, r27
    d622:	66 27       	eor	r22, r22
    d624:	77 27       	eor	r23, r23
    d626:	cb 01       	movw	r24, r22
    d628:	97 f9       	bld	r25, 7
    d62a:	08 95       	ret

0000d62c <__gesf2>:
    d62c:	0e 94 a1 6a 	call	0xd542	; 0xd542 <__fp_cmp>
    d630:	08 f4       	brcc	.+2      	; 0xd634 <__gesf2+0x8>
    d632:	8f ef       	ldi	r24, 0xFF	; 255
    d634:	08 95       	ret

0000d636 <__mulsf3>:
    d636:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <__mulsf3x>
    d63a:	0c 94 dc 6a 	jmp	0xd5b8	; 0xd5b8 <__fp_round>
    d63e:	0e 94 ce 6a 	call	0xd59c	; 0xd59c <__fp_pscA>
    d642:	38 f0       	brcs	.+14     	; 0xd652 <__mulsf3+0x1c>
    d644:	0e 94 d5 6a 	call	0xd5aa	; 0xd5aa <__fp_pscB>
    d648:	20 f0       	brcs	.+8      	; 0xd652 <__mulsf3+0x1c>
    d64a:	95 23       	and	r25, r21
    d64c:	11 f0       	breq	.+4      	; 0xd652 <__mulsf3+0x1c>
    d64e:	0c 94 c5 6a 	jmp	0xd58a	; 0xd58a <__fp_inf>
    d652:	0c 94 cb 6a 	jmp	0xd596	; 0xd596 <__fp_nan>
    d656:	11 24       	eor	r1, r1
    d658:	0c 94 10 6b 	jmp	0xd620	; 0xd620 <__fp_szero>

0000d65c <__mulsf3x>:
    d65c:	0e 94 ed 6a 	call	0xd5da	; 0xd5da <__fp_split3>
    d660:	70 f3       	brcs	.-36     	; 0xd63e <__mulsf3+0x8>

0000d662 <__mulsf3_pse>:
    d662:	95 9f       	mul	r25, r21
    d664:	c1 f3       	breq	.-16     	; 0xd656 <__mulsf3+0x20>
    d666:	95 0f       	add	r25, r21
    d668:	50 e0       	ldi	r21, 0x00	; 0
    d66a:	55 1f       	adc	r21, r21
    d66c:	62 9f       	mul	r22, r18
    d66e:	f0 01       	movw	r30, r0
    d670:	72 9f       	mul	r23, r18
    d672:	bb 27       	eor	r27, r27
    d674:	f0 0d       	add	r31, r0
    d676:	b1 1d       	adc	r27, r1
    d678:	63 9f       	mul	r22, r19
    d67a:	aa 27       	eor	r26, r26
    d67c:	f0 0d       	add	r31, r0
    d67e:	b1 1d       	adc	r27, r1
    d680:	aa 1f       	adc	r26, r26
    d682:	64 9f       	mul	r22, r20
    d684:	66 27       	eor	r22, r22
    d686:	b0 0d       	add	r27, r0
    d688:	a1 1d       	adc	r26, r1
    d68a:	66 1f       	adc	r22, r22
    d68c:	82 9f       	mul	r24, r18
    d68e:	22 27       	eor	r18, r18
    d690:	b0 0d       	add	r27, r0
    d692:	a1 1d       	adc	r26, r1
    d694:	62 1f       	adc	r22, r18
    d696:	73 9f       	mul	r23, r19
    d698:	b0 0d       	add	r27, r0
    d69a:	a1 1d       	adc	r26, r1
    d69c:	62 1f       	adc	r22, r18
    d69e:	83 9f       	mul	r24, r19
    d6a0:	a0 0d       	add	r26, r0
    d6a2:	61 1d       	adc	r22, r1
    d6a4:	22 1f       	adc	r18, r18
    d6a6:	74 9f       	mul	r23, r20
    d6a8:	33 27       	eor	r19, r19
    d6aa:	a0 0d       	add	r26, r0
    d6ac:	61 1d       	adc	r22, r1
    d6ae:	23 1f       	adc	r18, r19
    d6b0:	84 9f       	mul	r24, r20
    d6b2:	60 0d       	add	r22, r0
    d6b4:	21 1d       	adc	r18, r1
    d6b6:	82 2f       	mov	r24, r18
    d6b8:	76 2f       	mov	r23, r22
    d6ba:	6a 2f       	mov	r22, r26
    d6bc:	11 24       	eor	r1, r1
    d6be:	9f 57       	subi	r25, 0x7F	; 127
    d6c0:	50 40       	sbci	r21, 0x00	; 0
    d6c2:	9a f0       	brmi	.+38     	; 0xd6ea <__mulsf3_pse+0x88>
    d6c4:	f1 f0       	breq	.+60     	; 0xd702 <__mulsf3_pse+0xa0>
    d6c6:	88 23       	and	r24, r24
    d6c8:	4a f0       	brmi	.+18     	; 0xd6dc <__mulsf3_pse+0x7a>
    d6ca:	ee 0f       	add	r30, r30
    d6cc:	ff 1f       	adc	r31, r31
    d6ce:	bb 1f       	adc	r27, r27
    d6d0:	66 1f       	adc	r22, r22
    d6d2:	77 1f       	adc	r23, r23
    d6d4:	88 1f       	adc	r24, r24
    d6d6:	91 50       	subi	r25, 0x01	; 1
    d6d8:	50 40       	sbci	r21, 0x00	; 0
    d6da:	a9 f7       	brne	.-22     	; 0xd6c6 <__mulsf3_pse+0x64>
    d6dc:	9e 3f       	cpi	r25, 0xFE	; 254
    d6de:	51 05       	cpc	r21, r1
    d6e0:	80 f0       	brcs	.+32     	; 0xd702 <__mulsf3_pse+0xa0>
    d6e2:	0c 94 c5 6a 	jmp	0xd58a	; 0xd58a <__fp_inf>
    d6e6:	0c 94 10 6b 	jmp	0xd620	; 0xd620 <__fp_szero>
    d6ea:	5f 3f       	cpi	r21, 0xFF	; 255
    d6ec:	e4 f3       	brlt	.-8      	; 0xd6e6 <__mulsf3_pse+0x84>
    d6ee:	98 3e       	cpi	r25, 0xE8	; 232
    d6f0:	d4 f3       	brlt	.-12     	; 0xd6e6 <__mulsf3_pse+0x84>
    d6f2:	86 95       	lsr	r24
    d6f4:	77 95       	ror	r23
    d6f6:	67 95       	ror	r22
    d6f8:	b7 95       	ror	r27
    d6fa:	f7 95       	ror	r31
    d6fc:	e7 95       	ror	r30
    d6fe:	9f 5f       	subi	r25, 0xFF	; 255
    d700:	c1 f7       	brne	.-16     	; 0xd6f2 <__mulsf3_pse+0x90>
    d702:	fe 2b       	or	r31, r30
    d704:	88 0f       	add	r24, r24
    d706:	91 1d       	adc	r25, r1
    d708:	96 95       	lsr	r25
    d70a:	87 95       	ror	r24
    d70c:	97 f9       	bld	r25, 7
    d70e:	08 95       	ret

0000d710 <__divmodhi4>:
    d710:	97 fb       	bst	r25, 7
    d712:	07 2e       	mov	r0, r23
    d714:	16 f4       	brtc	.+4      	; 0xd71a <__divmodhi4+0xa>
    d716:	00 94       	com	r0
    d718:	07 d0       	rcall	.+14     	; 0xd728 <__divmodhi4_neg1>
    d71a:	77 fd       	sbrc	r23, 7
    d71c:	09 d0       	rcall	.+18     	; 0xd730 <__divmodhi4_neg2>
    d71e:	0e 94 b5 6b 	call	0xd76a	; 0xd76a <__udivmodhi4>
    d722:	07 fc       	sbrc	r0, 7
    d724:	05 d0       	rcall	.+10     	; 0xd730 <__divmodhi4_neg2>
    d726:	3e f4       	brtc	.+14     	; 0xd736 <__divmodhi4_exit>

0000d728 <__divmodhi4_neg1>:
    d728:	90 95       	com	r25
    d72a:	81 95       	neg	r24
    d72c:	9f 4f       	sbci	r25, 0xFF	; 255
    d72e:	08 95       	ret

0000d730 <__divmodhi4_neg2>:
    d730:	70 95       	com	r23
    d732:	61 95       	neg	r22
    d734:	7f 4f       	sbci	r23, 0xFF	; 255

0000d736 <__divmodhi4_exit>:
    d736:	08 95       	ret

0000d738 <__tablejump2__>:
    d738:	ee 0f       	add	r30, r30
    d73a:	ff 1f       	adc	r31, r31
    d73c:	00 24       	eor	r0, r0
    d73e:	00 1c       	adc	r0, r0
    d740:	0b be       	out	0x3b, r0	; 59
    d742:	07 90       	elpm	r0, Z+
    d744:	f6 91       	elpm	r31, Z
    d746:	e0 2d       	mov	r30, r0
    d748:	1b be       	out	0x3b, r1	; 59
    d74a:	09 94       	ijmp

0000d74c <__umulhisi3>:
    d74c:	a2 9f       	mul	r26, r18
    d74e:	b0 01       	movw	r22, r0
    d750:	b3 9f       	mul	r27, r19
    d752:	c0 01       	movw	r24, r0
    d754:	a3 9f       	mul	r26, r19
    d756:	70 0d       	add	r23, r0
    d758:	81 1d       	adc	r24, r1
    d75a:	11 24       	eor	r1, r1
    d75c:	91 1d       	adc	r25, r1
    d75e:	b2 9f       	mul	r27, r18
    d760:	70 0d       	add	r23, r0
    d762:	81 1d       	adc	r24, r1
    d764:	11 24       	eor	r1, r1
    d766:	91 1d       	adc	r25, r1
    d768:	08 95       	ret

0000d76a <__udivmodhi4>:
    d76a:	aa 1b       	sub	r26, r26
    d76c:	bb 1b       	sub	r27, r27
    d76e:	51 e1       	ldi	r21, 0x11	; 17
    d770:	07 c0       	rjmp	.+14     	; 0xd780 <__udivmodhi4_ep>

0000d772 <__udivmodhi4_loop>:
    d772:	aa 1f       	adc	r26, r26
    d774:	bb 1f       	adc	r27, r27
    d776:	a6 17       	cp	r26, r22
    d778:	b7 07       	cpc	r27, r23
    d77a:	10 f0       	brcs	.+4      	; 0xd780 <__udivmodhi4_ep>
    d77c:	a6 1b       	sub	r26, r22
    d77e:	b7 0b       	sbc	r27, r23

0000d780 <__udivmodhi4_ep>:
    d780:	88 1f       	adc	r24, r24
    d782:	99 1f       	adc	r25, r25
    d784:	5a 95       	dec	r21
    d786:	a9 f7       	brne	.-22     	; 0xd772 <__udivmodhi4_loop>
    d788:	80 95       	com	r24
    d78a:	90 95       	com	r25
    d78c:	bc 01       	movw	r22, r24
    d78e:	cd 01       	movw	r24, r26
    d790:	08 95       	ret

0000d792 <strncpy>:
    d792:	fb 01       	movw	r30, r22
    d794:	dc 01       	movw	r26, r24
    d796:	41 50       	subi	r20, 0x01	; 1
    d798:	50 40       	sbci	r21, 0x00	; 0
    d79a:	48 f0       	brcs	.+18     	; 0xd7ae <strncpy+0x1c>
    d79c:	01 90       	ld	r0, Z+
    d79e:	0d 92       	st	X+, r0
    d7a0:	00 20       	and	r0, r0
    d7a2:	c9 f7       	brne	.-14     	; 0xd796 <strncpy+0x4>
    d7a4:	01 c0       	rjmp	.+2      	; 0xd7a8 <strncpy+0x16>
    d7a6:	1d 92       	st	X+, r1
    d7a8:	41 50       	subi	r20, 0x01	; 1
    d7aa:	50 40       	sbci	r21, 0x00	; 0
    d7ac:	e0 f7       	brcc	.-8      	; 0xd7a6 <strncpy+0x14>
    d7ae:	08 95       	ret

0000d7b0 <sprintf>:
    d7b0:	0f 93       	push	r16
    d7b2:	1f 93       	push	r17
    d7b4:	cf 93       	push	r28
    d7b6:	df 93       	push	r29
    d7b8:	cd b7       	in	r28, 0x3d	; 61
    d7ba:	de b7       	in	r29, 0x3e	; 62
    d7bc:	2e 97       	sbiw	r28, 0x0e	; 14
    d7be:	cd bf       	out	0x3d, r28	; 61
    d7c0:	de bf       	out	0x3e, r29	; 62
    d7c2:	0d 89       	ldd	r16, Y+21	; 0x15
    d7c4:	1e 89       	ldd	r17, Y+22	; 0x16
    d7c6:	86 e0       	ldi	r24, 0x06	; 6
    d7c8:	8c 83       	std	Y+4, r24	; 0x04
    d7ca:	09 83       	std	Y+1, r16	; 0x01
    d7cc:	1a 83       	std	Y+2, r17	; 0x02
    d7ce:	8f ef       	ldi	r24, 0xFF	; 255
    d7d0:	9f e7       	ldi	r25, 0x7F	; 127
    d7d2:	8d 83       	std	Y+5, r24	; 0x05
    d7d4:	9e 83       	std	Y+6, r25	; 0x06
    d7d6:	ae 01       	movw	r20, r28
    d7d8:	47 5e       	subi	r20, 0xE7	; 231
    d7da:	5f 4f       	sbci	r21, 0xFF	; 255
    d7dc:	6f 89       	ldd	r22, Y+23	; 0x17
    d7de:	78 8d       	ldd	r23, Y+24	; 0x18
    d7e0:	ce 01       	movw	r24, r28
    d7e2:	01 96       	adiw	r24, 0x01	; 1
    d7e4:	0e 94 01 6c 	call	0xd802	; 0xd802 <vfprintf>
    d7e8:	ef 81       	ldd	r30, Y+7	; 0x07
    d7ea:	f8 85       	ldd	r31, Y+8	; 0x08
    d7ec:	e0 0f       	add	r30, r16
    d7ee:	f1 1f       	adc	r31, r17
    d7f0:	10 82       	st	Z, r1
    d7f2:	2e 96       	adiw	r28, 0x0e	; 14
    d7f4:	cd bf       	out	0x3d, r28	; 61
    d7f6:	de bf       	out	0x3e, r29	; 62
    d7f8:	df 91       	pop	r29
    d7fa:	cf 91       	pop	r28
    d7fc:	1f 91       	pop	r17
    d7fe:	0f 91       	pop	r16
    d800:	08 95       	ret

0000d802 <vfprintf>:
    d802:	2f 92       	push	r2
    d804:	3f 92       	push	r3
    d806:	4f 92       	push	r4
    d808:	5f 92       	push	r5
    d80a:	6f 92       	push	r6
    d80c:	7f 92       	push	r7
    d80e:	8f 92       	push	r8
    d810:	9f 92       	push	r9
    d812:	af 92       	push	r10
    d814:	bf 92       	push	r11
    d816:	cf 92       	push	r12
    d818:	df 92       	push	r13
    d81a:	ef 92       	push	r14
    d81c:	ff 92       	push	r15
    d81e:	0f 93       	push	r16
    d820:	1f 93       	push	r17
    d822:	cf 93       	push	r28
    d824:	df 93       	push	r29
    d826:	cd b7       	in	r28, 0x3d	; 61
    d828:	de b7       	in	r29, 0x3e	; 62
    d82a:	2b 97       	sbiw	r28, 0x0b	; 11
    d82c:	cd bf       	out	0x3d, r28	; 61
    d82e:	de bf       	out	0x3e, r29	; 62
    d830:	6c 01       	movw	r12, r24
    d832:	7b 01       	movw	r14, r22
    d834:	8a 01       	movw	r16, r20
    d836:	fc 01       	movw	r30, r24
    d838:	16 82       	std	Z+6, r1	; 0x06
    d83a:	17 82       	std	Z+7, r1	; 0x07
    d83c:	83 81       	ldd	r24, Z+3	; 0x03
    d83e:	81 ff       	sbrs	r24, 1
    d840:	cc c1       	rjmp	.+920    	; 0xdbda <vfprintf+0x3d8>
    d842:	ce 01       	movw	r24, r28
    d844:	01 96       	adiw	r24, 0x01	; 1
    d846:	3c 01       	movw	r6, r24
    d848:	f6 01       	movw	r30, r12
    d84a:	93 81       	ldd	r25, Z+3	; 0x03
    d84c:	f7 01       	movw	r30, r14
    d84e:	93 fd       	sbrc	r25, 3
    d850:	85 91       	lpm	r24, Z+
    d852:	93 ff       	sbrs	r25, 3
    d854:	81 91       	ld	r24, Z+
    d856:	7f 01       	movw	r14, r30
    d858:	88 23       	and	r24, r24
    d85a:	09 f4       	brne	.+2      	; 0xd85e <vfprintf+0x5c>
    d85c:	ba c1       	rjmp	.+884    	; 0xdbd2 <vfprintf+0x3d0>
    d85e:	85 32       	cpi	r24, 0x25	; 37
    d860:	39 f4       	brne	.+14     	; 0xd870 <vfprintf+0x6e>
    d862:	93 fd       	sbrc	r25, 3
    d864:	85 91       	lpm	r24, Z+
    d866:	93 ff       	sbrs	r25, 3
    d868:	81 91       	ld	r24, Z+
    d86a:	7f 01       	movw	r14, r30
    d86c:	85 32       	cpi	r24, 0x25	; 37
    d86e:	29 f4       	brne	.+10     	; 0xd87a <vfprintf+0x78>
    d870:	b6 01       	movw	r22, r12
    d872:	90 e0       	ldi	r25, 0x00	; 0
    d874:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    d878:	e7 cf       	rjmp	.-50     	; 0xd848 <vfprintf+0x46>
    d87a:	91 2c       	mov	r9, r1
    d87c:	21 2c       	mov	r2, r1
    d87e:	31 2c       	mov	r3, r1
    d880:	ff e1       	ldi	r31, 0x1F	; 31
    d882:	f3 15       	cp	r31, r3
    d884:	d8 f0       	brcs	.+54     	; 0xd8bc <vfprintf+0xba>
    d886:	8b 32       	cpi	r24, 0x2B	; 43
    d888:	79 f0       	breq	.+30     	; 0xd8a8 <vfprintf+0xa6>
    d88a:	38 f4       	brcc	.+14     	; 0xd89a <vfprintf+0x98>
    d88c:	80 32       	cpi	r24, 0x20	; 32
    d88e:	79 f0       	breq	.+30     	; 0xd8ae <vfprintf+0xac>
    d890:	83 32       	cpi	r24, 0x23	; 35
    d892:	a1 f4       	brne	.+40     	; 0xd8bc <vfprintf+0xba>
    d894:	23 2d       	mov	r18, r3
    d896:	20 61       	ori	r18, 0x10	; 16
    d898:	1d c0       	rjmp	.+58     	; 0xd8d4 <vfprintf+0xd2>
    d89a:	8d 32       	cpi	r24, 0x2D	; 45
    d89c:	61 f0       	breq	.+24     	; 0xd8b6 <vfprintf+0xb4>
    d89e:	80 33       	cpi	r24, 0x30	; 48
    d8a0:	69 f4       	brne	.+26     	; 0xd8bc <vfprintf+0xba>
    d8a2:	23 2d       	mov	r18, r3
    d8a4:	21 60       	ori	r18, 0x01	; 1
    d8a6:	16 c0       	rjmp	.+44     	; 0xd8d4 <vfprintf+0xd2>
    d8a8:	83 2d       	mov	r24, r3
    d8aa:	82 60       	ori	r24, 0x02	; 2
    d8ac:	38 2e       	mov	r3, r24
    d8ae:	e3 2d       	mov	r30, r3
    d8b0:	e4 60       	ori	r30, 0x04	; 4
    d8b2:	3e 2e       	mov	r3, r30
    d8b4:	2a c0       	rjmp	.+84     	; 0xd90a <vfprintf+0x108>
    d8b6:	f3 2d       	mov	r31, r3
    d8b8:	f8 60       	ori	r31, 0x08	; 8
    d8ba:	1d c0       	rjmp	.+58     	; 0xd8f6 <vfprintf+0xf4>
    d8bc:	37 fc       	sbrc	r3, 7
    d8be:	2d c0       	rjmp	.+90     	; 0xd91a <vfprintf+0x118>
    d8c0:	20 ed       	ldi	r18, 0xD0	; 208
    d8c2:	28 0f       	add	r18, r24
    d8c4:	2a 30       	cpi	r18, 0x0A	; 10
    d8c6:	40 f0       	brcs	.+16     	; 0xd8d8 <vfprintf+0xd6>
    d8c8:	8e 32       	cpi	r24, 0x2E	; 46
    d8ca:	b9 f4       	brne	.+46     	; 0xd8fa <vfprintf+0xf8>
    d8cc:	36 fc       	sbrc	r3, 6
    d8ce:	81 c1       	rjmp	.+770    	; 0xdbd2 <vfprintf+0x3d0>
    d8d0:	23 2d       	mov	r18, r3
    d8d2:	20 64       	ori	r18, 0x40	; 64
    d8d4:	32 2e       	mov	r3, r18
    d8d6:	19 c0       	rjmp	.+50     	; 0xd90a <vfprintf+0x108>
    d8d8:	36 fe       	sbrs	r3, 6
    d8da:	06 c0       	rjmp	.+12     	; 0xd8e8 <vfprintf+0xe6>
    d8dc:	8a e0       	ldi	r24, 0x0A	; 10
    d8de:	98 9e       	mul	r9, r24
    d8e0:	20 0d       	add	r18, r0
    d8e2:	11 24       	eor	r1, r1
    d8e4:	92 2e       	mov	r9, r18
    d8e6:	11 c0       	rjmp	.+34     	; 0xd90a <vfprintf+0x108>
    d8e8:	ea e0       	ldi	r30, 0x0A	; 10
    d8ea:	2e 9e       	mul	r2, r30
    d8ec:	20 0d       	add	r18, r0
    d8ee:	11 24       	eor	r1, r1
    d8f0:	22 2e       	mov	r2, r18
    d8f2:	f3 2d       	mov	r31, r3
    d8f4:	f0 62       	ori	r31, 0x20	; 32
    d8f6:	3f 2e       	mov	r3, r31
    d8f8:	08 c0       	rjmp	.+16     	; 0xd90a <vfprintf+0x108>
    d8fa:	8c 36       	cpi	r24, 0x6C	; 108
    d8fc:	21 f4       	brne	.+8      	; 0xd906 <vfprintf+0x104>
    d8fe:	83 2d       	mov	r24, r3
    d900:	80 68       	ori	r24, 0x80	; 128
    d902:	38 2e       	mov	r3, r24
    d904:	02 c0       	rjmp	.+4      	; 0xd90a <vfprintf+0x108>
    d906:	88 36       	cpi	r24, 0x68	; 104
    d908:	41 f4       	brne	.+16     	; 0xd91a <vfprintf+0x118>
    d90a:	f7 01       	movw	r30, r14
    d90c:	93 fd       	sbrc	r25, 3
    d90e:	85 91       	lpm	r24, Z+
    d910:	93 ff       	sbrs	r25, 3
    d912:	81 91       	ld	r24, Z+
    d914:	7f 01       	movw	r14, r30
    d916:	81 11       	cpse	r24, r1
    d918:	b3 cf       	rjmp	.-154    	; 0xd880 <vfprintf+0x7e>
    d91a:	98 2f       	mov	r25, r24
    d91c:	9f 7d       	andi	r25, 0xDF	; 223
    d91e:	95 54       	subi	r25, 0x45	; 69
    d920:	93 30       	cpi	r25, 0x03	; 3
    d922:	28 f4       	brcc	.+10     	; 0xd92e <vfprintf+0x12c>
    d924:	0c 5f       	subi	r16, 0xFC	; 252
    d926:	1f 4f       	sbci	r17, 0xFF	; 255
    d928:	9f e3       	ldi	r25, 0x3F	; 63
    d92a:	99 83       	std	Y+1, r25	; 0x01
    d92c:	0d c0       	rjmp	.+26     	; 0xd948 <vfprintf+0x146>
    d92e:	83 36       	cpi	r24, 0x63	; 99
    d930:	31 f0       	breq	.+12     	; 0xd93e <vfprintf+0x13c>
    d932:	83 37       	cpi	r24, 0x73	; 115
    d934:	71 f0       	breq	.+28     	; 0xd952 <vfprintf+0x150>
    d936:	83 35       	cpi	r24, 0x53	; 83
    d938:	09 f0       	breq	.+2      	; 0xd93c <vfprintf+0x13a>
    d93a:	59 c0       	rjmp	.+178    	; 0xd9ee <vfprintf+0x1ec>
    d93c:	21 c0       	rjmp	.+66     	; 0xd980 <vfprintf+0x17e>
    d93e:	f8 01       	movw	r30, r16
    d940:	80 81       	ld	r24, Z
    d942:	89 83       	std	Y+1, r24	; 0x01
    d944:	0e 5f       	subi	r16, 0xFE	; 254
    d946:	1f 4f       	sbci	r17, 0xFF	; 255
    d948:	88 24       	eor	r8, r8
    d94a:	83 94       	inc	r8
    d94c:	91 2c       	mov	r9, r1
    d94e:	53 01       	movw	r10, r6
    d950:	13 c0       	rjmp	.+38     	; 0xd978 <vfprintf+0x176>
    d952:	28 01       	movw	r4, r16
    d954:	f2 e0       	ldi	r31, 0x02	; 2
    d956:	4f 0e       	add	r4, r31
    d958:	51 1c       	adc	r5, r1
    d95a:	f8 01       	movw	r30, r16
    d95c:	a0 80       	ld	r10, Z
    d95e:	b1 80       	ldd	r11, Z+1	; 0x01
    d960:	36 fe       	sbrs	r3, 6
    d962:	03 c0       	rjmp	.+6      	; 0xd96a <vfprintf+0x168>
    d964:	69 2d       	mov	r22, r9
    d966:	70 e0       	ldi	r23, 0x00	; 0
    d968:	02 c0       	rjmp	.+4      	; 0xd96e <vfprintf+0x16c>
    d96a:	6f ef       	ldi	r22, 0xFF	; 255
    d96c:	7f ef       	ldi	r23, 0xFF	; 255
    d96e:	c5 01       	movw	r24, r10
    d970:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <strnlen>
    d974:	4c 01       	movw	r8, r24
    d976:	82 01       	movw	r16, r4
    d978:	f3 2d       	mov	r31, r3
    d97a:	ff 77       	andi	r31, 0x7F	; 127
    d97c:	3f 2e       	mov	r3, r31
    d97e:	16 c0       	rjmp	.+44     	; 0xd9ac <vfprintf+0x1aa>
    d980:	28 01       	movw	r4, r16
    d982:	22 e0       	ldi	r18, 0x02	; 2
    d984:	42 0e       	add	r4, r18
    d986:	51 1c       	adc	r5, r1
    d988:	f8 01       	movw	r30, r16
    d98a:	a0 80       	ld	r10, Z
    d98c:	b1 80       	ldd	r11, Z+1	; 0x01
    d98e:	36 fe       	sbrs	r3, 6
    d990:	03 c0       	rjmp	.+6      	; 0xd998 <vfprintf+0x196>
    d992:	69 2d       	mov	r22, r9
    d994:	70 e0       	ldi	r23, 0x00	; 0
    d996:	02 c0       	rjmp	.+4      	; 0xd99c <vfprintf+0x19a>
    d998:	6f ef       	ldi	r22, 0xFF	; 255
    d99a:	7f ef       	ldi	r23, 0xFF	; 255
    d99c:	c5 01       	movw	r24, r10
    d99e:	0e 94 05 6e 	call	0xdc0a	; 0xdc0a <strnlen_P>
    d9a2:	4c 01       	movw	r8, r24
    d9a4:	f3 2d       	mov	r31, r3
    d9a6:	f0 68       	ori	r31, 0x80	; 128
    d9a8:	3f 2e       	mov	r3, r31
    d9aa:	82 01       	movw	r16, r4
    d9ac:	33 fc       	sbrc	r3, 3
    d9ae:	1b c0       	rjmp	.+54     	; 0xd9e6 <vfprintf+0x1e4>
    d9b0:	82 2d       	mov	r24, r2
    d9b2:	90 e0       	ldi	r25, 0x00	; 0
    d9b4:	88 16       	cp	r8, r24
    d9b6:	99 06       	cpc	r9, r25
    d9b8:	b0 f4       	brcc	.+44     	; 0xd9e6 <vfprintf+0x1e4>
    d9ba:	b6 01       	movw	r22, r12
    d9bc:	80 e2       	ldi	r24, 0x20	; 32
    d9be:	90 e0       	ldi	r25, 0x00	; 0
    d9c0:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    d9c4:	2a 94       	dec	r2
    d9c6:	f4 cf       	rjmp	.-24     	; 0xd9b0 <vfprintf+0x1ae>
    d9c8:	f5 01       	movw	r30, r10
    d9ca:	37 fc       	sbrc	r3, 7
    d9cc:	85 91       	lpm	r24, Z+
    d9ce:	37 fe       	sbrs	r3, 7
    d9d0:	81 91       	ld	r24, Z+
    d9d2:	5f 01       	movw	r10, r30
    d9d4:	b6 01       	movw	r22, r12
    d9d6:	90 e0       	ldi	r25, 0x00	; 0
    d9d8:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    d9dc:	21 10       	cpse	r2, r1
    d9de:	2a 94       	dec	r2
    d9e0:	21 e0       	ldi	r18, 0x01	; 1
    d9e2:	82 1a       	sub	r8, r18
    d9e4:	91 08       	sbc	r9, r1
    d9e6:	81 14       	cp	r8, r1
    d9e8:	91 04       	cpc	r9, r1
    d9ea:	71 f7       	brne	.-36     	; 0xd9c8 <vfprintf+0x1c6>
    d9ec:	e8 c0       	rjmp	.+464    	; 0xdbbe <vfprintf+0x3bc>
    d9ee:	84 36       	cpi	r24, 0x64	; 100
    d9f0:	11 f0       	breq	.+4      	; 0xd9f6 <vfprintf+0x1f4>
    d9f2:	89 36       	cpi	r24, 0x69	; 105
    d9f4:	41 f5       	brne	.+80     	; 0xda46 <vfprintf+0x244>
    d9f6:	f8 01       	movw	r30, r16
    d9f8:	37 fe       	sbrs	r3, 7
    d9fa:	07 c0       	rjmp	.+14     	; 0xda0a <vfprintf+0x208>
    d9fc:	60 81       	ld	r22, Z
    d9fe:	71 81       	ldd	r23, Z+1	; 0x01
    da00:	82 81       	ldd	r24, Z+2	; 0x02
    da02:	93 81       	ldd	r25, Z+3	; 0x03
    da04:	0c 5f       	subi	r16, 0xFC	; 252
    da06:	1f 4f       	sbci	r17, 0xFF	; 255
    da08:	08 c0       	rjmp	.+16     	; 0xda1a <vfprintf+0x218>
    da0a:	60 81       	ld	r22, Z
    da0c:	71 81       	ldd	r23, Z+1	; 0x01
    da0e:	07 2e       	mov	r0, r23
    da10:	00 0c       	add	r0, r0
    da12:	88 0b       	sbc	r24, r24
    da14:	99 0b       	sbc	r25, r25
    da16:	0e 5f       	subi	r16, 0xFE	; 254
    da18:	1f 4f       	sbci	r17, 0xFF	; 255
    da1a:	f3 2d       	mov	r31, r3
    da1c:	ff 76       	andi	r31, 0x6F	; 111
    da1e:	3f 2e       	mov	r3, r31
    da20:	97 ff       	sbrs	r25, 7
    da22:	09 c0       	rjmp	.+18     	; 0xda36 <vfprintf+0x234>
    da24:	90 95       	com	r25
    da26:	80 95       	com	r24
    da28:	70 95       	com	r23
    da2a:	61 95       	neg	r22
    da2c:	7f 4f       	sbci	r23, 0xFF	; 255
    da2e:	8f 4f       	sbci	r24, 0xFF	; 255
    da30:	9f 4f       	sbci	r25, 0xFF	; 255
    da32:	f0 68       	ori	r31, 0x80	; 128
    da34:	3f 2e       	mov	r3, r31
    da36:	2a e0       	ldi	r18, 0x0A	; 10
    da38:	30 e0       	ldi	r19, 0x00	; 0
    da3a:	a3 01       	movw	r20, r6
    da3c:	0e 94 57 6e 	call	0xdcae	; 0xdcae <__ultoa_invert>
    da40:	88 2e       	mov	r8, r24
    da42:	86 18       	sub	r8, r6
    da44:	45 c0       	rjmp	.+138    	; 0xdad0 <vfprintf+0x2ce>
    da46:	85 37       	cpi	r24, 0x75	; 117
    da48:	31 f4       	brne	.+12     	; 0xda56 <vfprintf+0x254>
    da4a:	23 2d       	mov	r18, r3
    da4c:	2f 7e       	andi	r18, 0xEF	; 239
    da4e:	b2 2e       	mov	r11, r18
    da50:	2a e0       	ldi	r18, 0x0A	; 10
    da52:	30 e0       	ldi	r19, 0x00	; 0
    da54:	25 c0       	rjmp	.+74     	; 0xdaa0 <vfprintf+0x29e>
    da56:	93 2d       	mov	r25, r3
    da58:	99 7f       	andi	r25, 0xF9	; 249
    da5a:	b9 2e       	mov	r11, r25
    da5c:	8f 36       	cpi	r24, 0x6F	; 111
    da5e:	c1 f0       	breq	.+48     	; 0xda90 <vfprintf+0x28e>
    da60:	18 f4       	brcc	.+6      	; 0xda68 <vfprintf+0x266>
    da62:	88 35       	cpi	r24, 0x58	; 88
    da64:	79 f0       	breq	.+30     	; 0xda84 <vfprintf+0x282>
    da66:	b5 c0       	rjmp	.+362    	; 0xdbd2 <vfprintf+0x3d0>
    da68:	80 37       	cpi	r24, 0x70	; 112
    da6a:	19 f0       	breq	.+6      	; 0xda72 <vfprintf+0x270>
    da6c:	88 37       	cpi	r24, 0x78	; 120
    da6e:	21 f0       	breq	.+8      	; 0xda78 <vfprintf+0x276>
    da70:	b0 c0       	rjmp	.+352    	; 0xdbd2 <vfprintf+0x3d0>
    da72:	e9 2f       	mov	r30, r25
    da74:	e0 61       	ori	r30, 0x10	; 16
    da76:	be 2e       	mov	r11, r30
    da78:	b4 fe       	sbrs	r11, 4
    da7a:	0d c0       	rjmp	.+26     	; 0xda96 <vfprintf+0x294>
    da7c:	fb 2d       	mov	r31, r11
    da7e:	f4 60       	ori	r31, 0x04	; 4
    da80:	bf 2e       	mov	r11, r31
    da82:	09 c0       	rjmp	.+18     	; 0xda96 <vfprintf+0x294>
    da84:	34 fe       	sbrs	r3, 4
    da86:	0a c0       	rjmp	.+20     	; 0xda9c <vfprintf+0x29a>
    da88:	29 2f       	mov	r18, r25
    da8a:	26 60       	ori	r18, 0x06	; 6
    da8c:	b2 2e       	mov	r11, r18
    da8e:	06 c0       	rjmp	.+12     	; 0xda9c <vfprintf+0x29a>
    da90:	28 e0       	ldi	r18, 0x08	; 8
    da92:	30 e0       	ldi	r19, 0x00	; 0
    da94:	05 c0       	rjmp	.+10     	; 0xdaa0 <vfprintf+0x29e>
    da96:	20 e1       	ldi	r18, 0x10	; 16
    da98:	30 e0       	ldi	r19, 0x00	; 0
    da9a:	02 c0       	rjmp	.+4      	; 0xdaa0 <vfprintf+0x29e>
    da9c:	20 e1       	ldi	r18, 0x10	; 16
    da9e:	32 e0       	ldi	r19, 0x02	; 2
    daa0:	f8 01       	movw	r30, r16
    daa2:	b7 fe       	sbrs	r11, 7
    daa4:	07 c0       	rjmp	.+14     	; 0xdab4 <vfprintf+0x2b2>
    daa6:	60 81       	ld	r22, Z
    daa8:	71 81       	ldd	r23, Z+1	; 0x01
    daaa:	82 81       	ldd	r24, Z+2	; 0x02
    daac:	93 81       	ldd	r25, Z+3	; 0x03
    daae:	0c 5f       	subi	r16, 0xFC	; 252
    dab0:	1f 4f       	sbci	r17, 0xFF	; 255
    dab2:	06 c0       	rjmp	.+12     	; 0xdac0 <vfprintf+0x2be>
    dab4:	60 81       	ld	r22, Z
    dab6:	71 81       	ldd	r23, Z+1	; 0x01
    dab8:	80 e0       	ldi	r24, 0x00	; 0
    daba:	90 e0       	ldi	r25, 0x00	; 0
    dabc:	0e 5f       	subi	r16, 0xFE	; 254
    dabe:	1f 4f       	sbci	r17, 0xFF	; 255
    dac0:	a3 01       	movw	r20, r6
    dac2:	0e 94 57 6e 	call	0xdcae	; 0xdcae <__ultoa_invert>
    dac6:	88 2e       	mov	r8, r24
    dac8:	86 18       	sub	r8, r6
    daca:	fb 2d       	mov	r31, r11
    dacc:	ff 77       	andi	r31, 0x7F	; 127
    dace:	3f 2e       	mov	r3, r31
    dad0:	36 fe       	sbrs	r3, 6
    dad2:	0d c0       	rjmp	.+26     	; 0xdaee <vfprintf+0x2ec>
    dad4:	23 2d       	mov	r18, r3
    dad6:	2e 7f       	andi	r18, 0xFE	; 254
    dad8:	a2 2e       	mov	r10, r18
    dada:	89 14       	cp	r8, r9
    dadc:	58 f4       	brcc	.+22     	; 0xdaf4 <vfprintf+0x2f2>
    dade:	34 fe       	sbrs	r3, 4
    dae0:	0b c0       	rjmp	.+22     	; 0xdaf8 <vfprintf+0x2f6>
    dae2:	32 fc       	sbrc	r3, 2
    dae4:	09 c0       	rjmp	.+18     	; 0xdaf8 <vfprintf+0x2f6>
    dae6:	83 2d       	mov	r24, r3
    dae8:	8e 7e       	andi	r24, 0xEE	; 238
    daea:	a8 2e       	mov	r10, r24
    daec:	05 c0       	rjmp	.+10     	; 0xdaf8 <vfprintf+0x2f6>
    daee:	b8 2c       	mov	r11, r8
    daf0:	a3 2c       	mov	r10, r3
    daf2:	03 c0       	rjmp	.+6      	; 0xdafa <vfprintf+0x2f8>
    daf4:	b8 2c       	mov	r11, r8
    daf6:	01 c0       	rjmp	.+2      	; 0xdafa <vfprintf+0x2f8>
    daf8:	b9 2c       	mov	r11, r9
    dafa:	a4 fe       	sbrs	r10, 4
    dafc:	0f c0       	rjmp	.+30     	; 0xdb1c <vfprintf+0x31a>
    dafe:	fe 01       	movw	r30, r28
    db00:	e8 0d       	add	r30, r8
    db02:	f1 1d       	adc	r31, r1
    db04:	80 81       	ld	r24, Z
    db06:	80 33       	cpi	r24, 0x30	; 48
    db08:	21 f4       	brne	.+8      	; 0xdb12 <vfprintf+0x310>
    db0a:	9a 2d       	mov	r25, r10
    db0c:	99 7e       	andi	r25, 0xE9	; 233
    db0e:	a9 2e       	mov	r10, r25
    db10:	09 c0       	rjmp	.+18     	; 0xdb24 <vfprintf+0x322>
    db12:	a2 fe       	sbrs	r10, 2
    db14:	06 c0       	rjmp	.+12     	; 0xdb22 <vfprintf+0x320>
    db16:	b3 94       	inc	r11
    db18:	b3 94       	inc	r11
    db1a:	04 c0       	rjmp	.+8      	; 0xdb24 <vfprintf+0x322>
    db1c:	8a 2d       	mov	r24, r10
    db1e:	86 78       	andi	r24, 0x86	; 134
    db20:	09 f0       	breq	.+2      	; 0xdb24 <vfprintf+0x322>
    db22:	b3 94       	inc	r11
    db24:	a3 fc       	sbrc	r10, 3
    db26:	11 c0       	rjmp	.+34     	; 0xdb4a <vfprintf+0x348>
    db28:	a0 fe       	sbrs	r10, 0
    db2a:	06 c0       	rjmp	.+12     	; 0xdb38 <vfprintf+0x336>
    db2c:	b2 14       	cp	r11, r2
    db2e:	88 f4       	brcc	.+34     	; 0xdb52 <vfprintf+0x350>
    db30:	28 0c       	add	r2, r8
    db32:	92 2c       	mov	r9, r2
    db34:	9b 18       	sub	r9, r11
    db36:	0e c0       	rjmp	.+28     	; 0xdb54 <vfprintf+0x352>
    db38:	b2 14       	cp	r11, r2
    db3a:	60 f4       	brcc	.+24     	; 0xdb54 <vfprintf+0x352>
    db3c:	b6 01       	movw	r22, r12
    db3e:	80 e2       	ldi	r24, 0x20	; 32
    db40:	90 e0       	ldi	r25, 0x00	; 0
    db42:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    db46:	b3 94       	inc	r11
    db48:	f7 cf       	rjmp	.-18     	; 0xdb38 <vfprintf+0x336>
    db4a:	b2 14       	cp	r11, r2
    db4c:	18 f4       	brcc	.+6      	; 0xdb54 <vfprintf+0x352>
    db4e:	2b 18       	sub	r2, r11
    db50:	02 c0       	rjmp	.+4      	; 0xdb56 <vfprintf+0x354>
    db52:	98 2c       	mov	r9, r8
    db54:	21 2c       	mov	r2, r1
    db56:	a4 fe       	sbrs	r10, 4
    db58:	10 c0       	rjmp	.+32     	; 0xdb7a <vfprintf+0x378>
    db5a:	b6 01       	movw	r22, r12
    db5c:	80 e3       	ldi	r24, 0x30	; 48
    db5e:	90 e0       	ldi	r25, 0x00	; 0
    db60:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    db64:	a2 fe       	sbrs	r10, 2
    db66:	17 c0       	rjmp	.+46     	; 0xdb96 <vfprintf+0x394>
    db68:	a1 fc       	sbrc	r10, 1
    db6a:	03 c0       	rjmp	.+6      	; 0xdb72 <vfprintf+0x370>
    db6c:	88 e7       	ldi	r24, 0x78	; 120
    db6e:	90 e0       	ldi	r25, 0x00	; 0
    db70:	02 c0       	rjmp	.+4      	; 0xdb76 <vfprintf+0x374>
    db72:	88 e5       	ldi	r24, 0x58	; 88
    db74:	90 e0       	ldi	r25, 0x00	; 0
    db76:	b6 01       	movw	r22, r12
    db78:	0c c0       	rjmp	.+24     	; 0xdb92 <vfprintf+0x390>
    db7a:	8a 2d       	mov	r24, r10
    db7c:	86 78       	andi	r24, 0x86	; 134
    db7e:	59 f0       	breq	.+22     	; 0xdb96 <vfprintf+0x394>
    db80:	a1 fe       	sbrs	r10, 1
    db82:	02 c0       	rjmp	.+4      	; 0xdb88 <vfprintf+0x386>
    db84:	8b e2       	ldi	r24, 0x2B	; 43
    db86:	01 c0       	rjmp	.+2      	; 0xdb8a <vfprintf+0x388>
    db88:	80 e2       	ldi	r24, 0x20	; 32
    db8a:	a7 fc       	sbrc	r10, 7
    db8c:	8d e2       	ldi	r24, 0x2D	; 45
    db8e:	b6 01       	movw	r22, r12
    db90:	90 e0       	ldi	r25, 0x00	; 0
    db92:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    db96:	89 14       	cp	r8, r9
    db98:	38 f4       	brcc	.+14     	; 0xdba8 <vfprintf+0x3a6>
    db9a:	b6 01       	movw	r22, r12
    db9c:	80 e3       	ldi	r24, 0x30	; 48
    db9e:	90 e0       	ldi	r25, 0x00	; 0
    dba0:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    dba4:	9a 94       	dec	r9
    dba6:	f7 cf       	rjmp	.-18     	; 0xdb96 <vfprintf+0x394>
    dba8:	8a 94       	dec	r8
    dbaa:	f3 01       	movw	r30, r6
    dbac:	e8 0d       	add	r30, r8
    dbae:	f1 1d       	adc	r31, r1
    dbb0:	80 81       	ld	r24, Z
    dbb2:	b6 01       	movw	r22, r12
    dbb4:	90 e0       	ldi	r25, 0x00	; 0
    dbb6:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    dbba:	81 10       	cpse	r8, r1
    dbbc:	f5 cf       	rjmp	.-22     	; 0xdba8 <vfprintf+0x3a6>
    dbbe:	22 20       	and	r2, r2
    dbc0:	09 f4       	brne	.+2      	; 0xdbc4 <vfprintf+0x3c2>
    dbc2:	42 ce       	rjmp	.-892    	; 0xd848 <vfprintf+0x46>
    dbc4:	b6 01       	movw	r22, r12
    dbc6:	80 e2       	ldi	r24, 0x20	; 32
    dbc8:	90 e0       	ldi	r25, 0x00	; 0
    dbca:	0e 94 1b 6e 	call	0xdc36	; 0xdc36 <fputc>
    dbce:	2a 94       	dec	r2
    dbd0:	f6 cf       	rjmp	.-20     	; 0xdbbe <vfprintf+0x3bc>
    dbd2:	f6 01       	movw	r30, r12
    dbd4:	86 81       	ldd	r24, Z+6	; 0x06
    dbd6:	97 81       	ldd	r25, Z+7	; 0x07
    dbd8:	02 c0       	rjmp	.+4      	; 0xdbde <vfprintf+0x3dc>
    dbda:	8f ef       	ldi	r24, 0xFF	; 255
    dbdc:	9f ef       	ldi	r25, 0xFF	; 255
    dbde:	2b 96       	adiw	r28, 0x0b	; 11
    dbe0:	cd bf       	out	0x3d, r28	; 61
    dbe2:	de bf       	out	0x3e, r29	; 62
    dbe4:	df 91       	pop	r29
    dbe6:	cf 91       	pop	r28
    dbe8:	1f 91       	pop	r17
    dbea:	0f 91       	pop	r16
    dbec:	ff 90       	pop	r15
    dbee:	ef 90       	pop	r14
    dbf0:	df 90       	pop	r13
    dbf2:	cf 90       	pop	r12
    dbf4:	bf 90       	pop	r11
    dbf6:	af 90       	pop	r10
    dbf8:	9f 90       	pop	r9
    dbfa:	8f 90       	pop	r8
    dbfc:	7f 90       	pop	r7
    dbfe:	6f 90       	pop	r6
    dc00:	5f 90       	pop	r5
    dc02:	4f 90       	pop	r4
    dc04:	3f 90       	pop	r3
    dc06:	2f 90       	pop	r2
    dc08:	08 95       	ret

0000dc0a <strnlen_P>:
    dc0a:	fc 01       	movw	r30, r24
    dc0c:	05 90       	lpm	r0, Z+
    dc0e:	61 50       	subi	r22, 0x01	; 1
    dc10:	70 40       	sbci	r23, 0x00	; 0
    dc12:	01 10       	cpse	r0, r1
    dc14:	d8 f7       	brcc	.-10     	; 0xdc0c <strnlen_P+0x2>
    dc16:	80 95       	com	r24
    dc18:	90 95       	com	r25
    dc1a:	8e 0f       	add	r24, r30
    dc1c:	9f 1f       	adc	r25, r31
    dc1e:	08 95       	ret

0000dc20 <strnlen>:
    dc20:	fc 01       	movw	r30, r24
    dc22:	61 50       	subi	r22, 0x01	; 1
    dc24:	70 40       	sbci	r23, 0x00	; 0
    dc26:	01 90       	ld	r0, Z+
    dc28:	01 10       	cpse	r0, r1
    dc2a:	d8 f7       	brcc	.-10     	; 0xdc22 <strnlen+0x2>
    dc2c:	80 95       	com	r24
    dc2e:	90 95       	com	r25
    dc30:	8e 0f       	add	r24, r30
    dc32:	9f 1f       	adc	r25, r31
    dc34:	08 95       	ret

0000dc36 <fputc>:
    dc36:	0f 93       	push	r16
    dc38:	1f 93       	push	r17
    dc3a:	cf 93       	push	r28
    dc3c:	df 93       	push	r29
    dc3e:	fb 01       	movw	r30, r22
    dc40:	23 81       	ldd	r18, Z+3	; 0x03
    dc42:	21 fd       	sbrc	r18, 1
    dc44:	03 c0       	rjmp	.+6      	; 0xdc4c <fputc+0x16>
    dc46:	8f ef       	ldi	r24, 0xFF	; 255
    dc48:	9f ef       	ldi	r25, 0xFF	; 255
    dc4a:	2c c0       	rjmp	.+88     	; 0xdca4 <fputc+0x6e>
    dc4c:	22 ff       	sbrs	r18, 2
    dc4e:	16 c0       	rjmp	.+44     	; 0xdc7c <fputc+0x46>
    dc50:	46 81       	ldd	r20, Z+6	; 0x06
    dc52:	57 81       	ldd	r21, Z+7	; 0x07
    dc54:	24 81       	ldd	r18, Z+4	; 0x04
    dc56:	35 81       	ldd	r19, Z+5	; 0x05
    dc58:	42 17       	cp	r20, r18
    dc5a:	53 07       	cpc	r21, r19
    dc5c:	44 f4       	brge	.+16     	; 0xdc6e <fputc+0x38>
    dc5e:	a0 81       	ld	r26, Z
    dc60:	b1 81       	ldd	r27, Z+1	; 0x01
    dc62:	9d 01       	movw	r18, r26
    dc64:	2f 5f       	subi	r18, 0xFF	; 255
    dc66:	3f 4f       	sbci	r19, 0xFF	; 255
    dc68:	20 83       	st	Z, r18
    dc6a:	31 83       	std	Z+1, r19	; 0x01
    dc6c:	8c 93       	st	X, r24
    dc6e:	26 81       	ldd	r18, Z+6	; 0x06
    dc70:	37 81       	ldd	r19, Z+7	; 0x07
    dc72:	2f 5f       	subi	r18, 0xFF	; 255
    dc74:	3f 4f       	sbci	r19, 0xFF	; 255
    dc76:	26 83       	std	Z+6, r18	; 0x06
    dc78:	37 83       	std	Z+7, r19	; 0x07
    dc7a:	14 c0       	rjmp	.+40     	; 0xdca4 <fputc+0x6e>
    dc7c:	8b 01       	movw	r16, r22
    dc7e:	ec 01       	movw	r28, r24
    dc80:	fb 01       	movw	r30, r22
    dc82:	00 84       	ldd	r0, Z+8	; 0x08
    dc84:	f1 85       	ldd	r31, Z+9	; 0x09
    dc86:	e0 2d       	mov	r30, r0
    dc88:	09 95       	icall
    dc8a:	89 2b       	or	r24, r25
    dc8c:	e1 f6       	brne	.-72     	; 0xdc46 <fputc+0x10>
    dc8e:	d8 01       	movw	r26, r16
    dc90:	16 96       	adiw	r26, 0x06	; 6
    dc92:	8d 91       	ld	r24, X+
    dc94:	9c 91       	ld	r25, X
    dc96:	17 97       	sbiw	r26, 0x07	; 7
    dc98:	01 96       	adiw	r24, 0x01	; 1
    dc9a:	16 96       	adiw	r26, 0x06	; 6
    dc9c:	8d 93       	st	X+, r24
    dc9e:	9c 93       	st	X, r25
    dca0:	17 97       	sbiw	r26, 0x07	; 7
    dca2:	ce 01       	movw	r24, r28
    dca4:	df 91       	pop	r29
    dca6:	cf 91       	pop	r28
    dca8:	1f 91       	pop	r17
    dcaa:	0f 91       	pop	r16
    dcac:	08 95       	ret

0000dcae <__ultoa_invert>:
    dcae:	fa 01       	movw	r30, r20
    dcb0:	aa 27       	eor	r26, r26
    dcb2:	28 30       	cpi	r18, 0x08	; 8
    dcb4:	51 f1       	breq	.+84     	; 0xdd0a <__ultoa_invert+0x5c>
    dcb6:	20 31       	cpi	r18, 0x10	; 16
    dcb8:	81 f1       	breq	.+96     	; 0xdd1a <__ultoa_invert+0x6c>
    dcba:	e8 94       	clt
    dcbc:	6f 93       	push	r22
    dcbe:	6e 7f       	andi	r22, 0xFE	; 254
    dcc0:	6e 5f       	subi	r22, 0xFE	; 254
    dcc2:	7f 4f       	sbci	r23, 0xFF	; 255
    dcc4:	8f 4f       	sbci	r24, 0xFF	; 255
    dcc6:	9f 4f       	sbci	r25, 0xFF	; 255
    dcc8:	af 4f       	sbci	r26, 0xFF	; 255
    dcca:	b1 e0       	ldi	r27, 0x01	; 1
    dccc:	3e d0       	rcall	.+124    	; 0xdd4a <__ultoa_invert+0x9c>
    dcce:	b4 e0       	ldi	r27, 0x04	; 4
    dcd0:	3c d0       	rcall	.+120    	; 0xdd4a <__ultoa_invert+0x9c>
    dcd2:	67 0f       	add	r22, r23
    dcd4:	78 1f       	adc	r23, r24
    dcd6:	89 1f       	adc	r24, r25
    dcd8:	9a 1f       	adc	r25, r26
    dcda:	a1 1d       	adc	r26, r1
    dcdc:	68 0f       	add	r22, r24
    dcde:	79 1f       	adc	r23, r25
    dce0:	8a 1f       	adc	r24, r26
    dce2:	91 1d       	adc	r25, r1
    dce4:	a1 1d       	adc	r26, r1
    dce6:	6a 0f       	add	r22, r26
    dce8:	71 1d       	adc	r23, r1
    dcea:	81 1d       	adc	r24, r1
    dcec:	91 1d       	adc	r25, r1
    dcee:	a1 1d       	adc	r26, r1
    dcf0:	20 d0       	rcall	.+64     	; 0xdd32 <__ultoa_invert+0x84>
    dcf2:	09 f4       	brne	.+2      	; 0xdcf6 <__ultoa_invert+0x48>
    dcf4:	68 94       	set
    dcf6:	3f 91       	pop	r19
    dcf8:	2a e0       	ldi	r18, 0x0A	; 10
    dcfa:	26 9f       	mul	r18, r22
    dcfc:	11 24       	eor	r1, r1
    dcfe:	30 19       	sub	r19, r0
    dd00:	30 5d       	subi	r19, 0xD0	; 208
    dd02:	31 93       	st	Z+, r19
    dd04:	de f6       	brtc	.-74     	; 0xdcbc <__ultoa_invert+0xe>
    dd06:	cf 01       	movw	r24, r30
    dd08:	08 95       	ret
    dd0a:	46 2f       	mov	r20, r22
    dd0c:	47 70       	andi	r20, 0x07	; 7
    dd0e:	40 5d       	subi	r20, 0xD0	; 208
    dd10:	41 93       	st	Z+, r20
    dd12:	b3 e0       	ldi	r27, 0x03	; 3
    dd14:	0f d0       	rcall	.+30     	; 0xdd34 <__ultoa_invert+0x86>
    dd16:	c9 f7       	brne	.-14     	; 0xdd0a <__ultoa_invert+0x5c>
    dd18:	f6 cf       	rjmp	.-20     	; 0xdd06 <__ultoa_invert+0x58>
    dd1a:	46 2f       	mov	r20, r22
    dd1c:	4f 70       	andi	r20, 0x0F	; 15
    dd1e:	40 5d       	subi	r20, 0xD0	; 208
    dd20:	4a 33       	cpi	r20, 0x3A	; 58
    dd22:	18 f0       	brcs	.+6      	; 0xdd2a <__ultoa_invert+0x7c>
    dd24:	49 5d       	subi	r20, 0xD9	; 217
    dd26:	31 fd       	sbrc	r19, 1
    dd28:	40 52       	subi	r20, 0x20	; 32
    dd2a:	41 93       	st	Z+, r20
    dd2c:	02 d0       	rcall	.+4      	; 0xdd32 <__ultoa_invert+0x84>
    dd2e:	a9 f7       	brne	.-22     	; 0xdd1a <__ultoa_invert+0x6c>
    dd30:	ea cf       	rjmp	.-44     	; 0xdd06 <__ultoa_invert+0x58>
    dd32:	b4 e0       	ldi	r27, 0x04	; 4
    dd34:	a6 95       	lsr	r26
    dd36:	97 95       	ror	r25
    dd38:	87 95       	ror	r24
    dd3a:	77 95       	ror	r23
    dd3c:	67 95       	ror	r22
    dd3e:	ba 95       	dec	r27
    dd40:	c9 f7       	brne	.-14     	; 0xdd34 <__ultoa_invert+0x86>
    dd42:	00 97       	sbiw	r24, 0x00	; 0
    dd44:	61 05       	cpc	r22, r1
    dd46:	71 05       	cpc	r23, r1
    dd48:	08 95       	ret
    dd4a:	9b 01       	movw	r18, r22
    dd4c:	ac 01       	movw	r20, r24
    dd4e:	0a 2e       	mov	r0, r26
    dd50:	06 94       	lsr	r0
    dd52:	57 95       	ror	r21
    dd54:	47 95       	ror	r20
    dd56:	37 95       	ror	r19
    dd58:	27 95       	ror	r18
    dd5a:	ba 95       	dec	r27
    dd5c:	c9 f7       	brne	.-14     	; 0xdd50 <__ultoa_invert+0xa2>
    dd5e:	62 0f       	add	r22, r18
    dd60:	73 1f       	adc	r23, r19
    dd62:	84 1f       	adc	r24, r20
    dd64:	95 1f       	adc	r25, r21
    dd66:	a0 1d       	adc	r26, r0
    dd68:	08 95       	ret

0000dd6a <eeprom_read_block>:
    dd6a:	e0 ec       	ldi	r30, 0xC0	; 192
    dd6c:	f1 e0       	ldi	r31, 0x01	; 1
    dd6e:	a7 85       	ldd	r26, Z+15	; 0x0f
    dd70:	a7 fd       	sbrc	r26, 7
    dd72:	fd cf       	rjmp	.-6      	; 0xdd6e <eeprom_read_block+0x4>
    dd74:	a4 85       	ldd	r26, Z+12	; 0x0c
    dd76:	a8 60       	ori	r26, 0x08	; 8
    dd78:	a4 87       	std	Z+12, r26	; 0x0c
    dd7a:	60 50       	subi	r22, 0x00	; 0
    dd7c:	70 4f       	sbci	r23, 0xF0	; 240
    dd7e:	0c 94 19 6f 	jmp	0xde32	; 0xde32 <memcpy>

0000dd82 <eeprom_read_byte>:
    dd82:	03 d0       	rcall	.+6      	; 0xdd8a <eeprom_mapen>
    dd84:	80 81       	ld	r24, Z
    dd86:	99 27       	eor	r25, r25
    dd88:	08 95       	ret

0000dd8a <eeprom_mapen>:
    dd8a:	e0 ec       	ldi	r30, 0xC0	; 192
    dd8c:	f1 e0       	ldi	r31, 0x01	; 1
    dd8e:	37 85       	ldd	r19, Z+15	; 0x0f
    dd90:	37 fd       	sbrc	r19, 7
    dd92:	fd cf       	rjmp	.-6      	; 0xdd8e <eeprom_mapen+0x4>
    dd94:	34 85       	ldd	r19, Z+12	; 0x0c
    dd96:	38 60       	ori	r19, 0x08	; 8
    dd98:	34 87       	std	Z+12, r19	; 0x0c
    dd9a:	fc 01       	movw	r30, r24
    dd9c:	e0 50       	subi	r30, 0x00	; 0
    dd9e:	f0 4f       	sbci	r31, 0xF0	; 240
    dda0:	08 95       	ret

0000dda2 <eeprom_read_word>:
    dda2:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <eeprom_mapen>
    dda6:	80 81       	ld	r24, Z
    dda8:	91 81       	ldd	r25, Z+1	; 0x01
    ddaa:	08 95       	ret

0000ddac <eeprom_update_block>:
    ddac:	dc 01       	movw	r26, r24
    ddae:	a4 0f       	add	r26, r20
    ddb0:	b5 1f       	adc	r27, r21
    ddb2:	41 50       	subi	r20, 0x01	; 1
    ddb4:	50 40       	sbci	r21, 0x00	; 0
    ddb6:	48 f0       	brcs	.+18     	; 0xddca <eeprom_update_block+0x1e>
    ddb8:	cb 01       	movw	r24, r22
    ddba:	84 0f       	add	r24, r20
    ddbc:	95 1f       	adc	r25, r21
    ddbe:	2e 91       	ld	r18, -X
    ddc0:	0e 94 e7 6e 	call	0xddce	; 0xddce <eeprom_update_r18>
    ddc4:	41 50       	subi	r20, 0x01	; 1
    ddc6:	50 40       	sbci	r21, 0x00	; 0
    ddc8:	d0 f7       	brcc	.-12     	; 0xddbe <eeprom_update_block+0x12>
    ddca:	08 95       	ret

0000ddcc <eeprom_update_byte>:
    ddcc:	26 2f       	mov	r18, r22

0000ddce <eeprom_update_r18>:
    ddce:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <eeprom_mapen>
    ddd2:	00 80       	ld	r0, Z
    ddd4:	02 16       	cp	r0, r18
    ddd6:	19 f0       	breq	.+6      	; 0xddde <eeprom_update_r18+0x10>
    ddd8:	0e 94 f2 6e 	call	0xdde4	; 0xdde4 <eeprom_write_r18>
    dddc:	01 97       	sbiw	r24, 0x01	; 1
    ddde:	01 97       	sbiw	r24, 0x01	; 1
    dde0:	08 95       	ret

0000dde2 <eeprom_write_byte>:
    dde2:	26 2f       	mov	r18, r22

0000dde4 <eeprom_write_r18>:
    dde4:	e0 ec       	ldi	r30, 0xC0	; 192
    dde6:	f1 e0       	ldi	r31, 0x01	; 1
    dde8:	37 85       	ldd	r19, Z+15	; 0x0f
    ddea:	37 fd       	sbrc	r19, 7
    ddec:	fd cf       	rjmp	.-6      	; 0xdde8 <eeprom_write_r18+0x4>
    ddee:	34 85       	ldd	r19, Z+12	; 0x0c
    ddf0:	37 7f       	andi	r19, 0xF7	; 247
    ddf2:	34 87       	std	Z+12, r19	; 0x0c
    ddf4:	37 85       	ldd	r19, Z+15	; 0x0f
    ddf6:	31 ff       	sbrs	r19, 1
    ddf8:	09 c0       	rjmp	.+18     	; 0xde0c <eeprom_write_r18+0x28>
    ddfa:	36 e3       	ldi	r19, 0x36	; 54
    ddfc:	32 87       	std	Z+10, r19	; 0x0a
    ddfe:	38 ed       	ldi	r19, 0xD8	; 216
    de00:	34 bf       	out	0x34, r19	; 52
    de02:	31 e0       	ldi	r19, 0x01	; 1
    de04:	33 87       	std	Z+11, r19	; 0x0b
    de06:	37 85       	ldd	r19, Z+15	; 0x0f
    de08:	37 fd       	sbrc	r19, 7
    de0a:	fd cf       	rjmp	.-6      	; 0xde06 <eeprom_write_r18+0x22>
    de0c:	33 e3       	ldi	r19, 0x33	; 51
    de0e:	32 87       	std	Z+10, r19	; 0x0a
    de10:	80 83       	st	Z, r24
    de12:	91 83       	std	Z+1, r25	; 0x01
    de14:	12 82       	std	Z+2, r1	; 0x02
    de16:	24 83       	std	Z+4, r18	; 0x04
    de18:	25 e3       	ldi	r18, 0x35	; 53
    de1a:	22 87       	std	Z+10, r18	; 0x0a
    de1c:	28 ed       	ldi	r18, 0xD8	; 216
    de1e:	31 e0       	ldi	r19, 0x01	; 1
    de20:	24 bf       	out	0x34, r18	; 52
    de22:	33 87       	std	Z+11, r19	; 0x0b
    de24:	01 96       	adiw	r24, 0x01	; 1
    de26:	08 95       	ret

0000de28 <eeprom_write_word>:
    de28:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <eeprom_write_byte>
    de2c:	27 2f       	mov	r18, r23
    de2e:	0c 94 f2 6e 	jmp	0xdde4	; 0xdde4 <eeprom_write_r18>

0000de32 <memcpy>:
    de32:	fb 01       	movw	r30, r22
    de34:	dc 01       	movw	r26, r24
    de36:	02 c0       	rjmp	.+4      	; 0xde3c <memcpy+0xa>
    de38:	01 90       	ld	r0, Z+
    de3a:	0d 92       	st	X+, r0
    de3c:	41 50       	subi	r20, 0x01	; 1
    de3e:	50 40       	sbci	r21, 0x00	; 0
    de40:	d8 f7       	brcc	.-10     	; 0xde38 <memcpy+0x6>
    de42:	08 95       	ret

0000de44 <_exit>:
    de44:	f8 94       	cli

0000de46 <__stop_program>:
    de46:	ff cf       	rjmp	.-2      	; 0xde46 <__stop_program>
