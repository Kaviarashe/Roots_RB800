
A2_RB_800_M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00006ac8  00006b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009e0  00802024  00802024  00006b80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000648  00000000  00000000  00006c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019968  00000000  00000000  00007268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005bd0  00000000  00000000  00020bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006831  00000000  00000000  000267a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001338  00000000  00000000  0002cfd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000049d7  00000000  00000000  0002e30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005777  00000000  00000000  00032ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0003845a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <__vector_13>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 01 2e 	jmp	0x5c02	; 0x5c02 <__vector_16>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 3c 2a 	jmp	0x5478	; 0x5478 <__vector_22>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      70:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      74:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      78:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      7c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      80:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      84:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      88:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_34>
      8c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      90:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      94:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      98:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      9c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      a0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      a4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      a8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      ac:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_43>
      b0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      b4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      b8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      bc:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      c0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      c4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      c8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      cc:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      d0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      d4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      d8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      dc:	0c 94 84 2b 	jmp	0x5708	; 0x5708 <__vector_55>
      e0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      e4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      e8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      ec:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      f0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      f4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      f8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      fc:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     100:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__vector_64>
     104:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     108:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_66>
     10c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     110:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     114:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     118:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     11c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     120:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     124:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     128:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     12c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     130:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     134:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     138:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     13c:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__vector_79>
     140:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     144:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     148:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     14c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     150:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     154:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__vector_85>
     158:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     15c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     160:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     164:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     168:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     16c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     170:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     174:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     178:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     17c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     180:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     184:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     188:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     18c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     190:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__vector_100>
     194:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     198:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     19c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1a0:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__vector_104>
     1a4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1a8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1ac:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1b0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1b4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1b8:	0c 94 99 29 	jmp	0x5332	; 0x5332 <__vector_110>
     1bc:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1c0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1c4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1c8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1cc:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1d0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1d4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1d8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1dc:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1e0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1e4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1e8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1ec:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1f0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1f4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1f8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
     1fc:	ee 17       	cp	r30, r30
     1fe:	88 19       	sub	r24, r8
     200:	88 19       	sub	r24, r8
     202:	88 19       	sub	r24, r8
     204:	88 19       	sub	r24, r8
     206:	88 19       	sub	r24, r8
     208:	88 19       	sub	r24, r8
     20a:	42 19       	sub	r20, r2
     20c:	88 19       	sub	r24, r8
     20e:	88 19       	sub	r24, r8
     210:	88 19       	sub	r24, r8
     212:	88 19       	sub	r24, r8
     214:	88 19       	sub	r24, r8
     216:	88 19       	sub	r24, r8
     218:	88 19       	sub	r24, r8
     21a:	88 19       	sub	r24, r8
     21c:	88 19       	sub	r24, r8
     21e:	88 19       	sub	r24, r8
     220:	e5 18       	sub	r14, r5
     222:	88 19       	sub	r24, r8
     224:	88 19       	sub	r24, r8
     226:	88 19       	sub	r24, r8
     228:	88 19       	sub	r24, r8
     22a:	88 19       	sub	r24, r8
     22c:	88 19       	sub	r24, r8
     22e:	88 19       	sub	r24, r8
     230:	88 19       	sub	r24, r8
     232:	88 19       	sub	r24, r8
     234:	88 19       	sub	r24, r8
     236:	88 19       	sub	r24, r8
     238:	88 19       	sub	r24, r8
     23a:	88 19       	sub	r24, r8
     23c:	88 19       	sub	r24, r8
     23e:	88 19       	sub	r24, r8
     240:	88 19       	sub	r24, r8
     242:	88 19       	sub	r24, r8
     244:	88 19       	sub	r24, r8
     246:	88 19       	sub	r24, r8
     248:	88 19       	sub	r24, r8
     24a:	88 19       	sub	r24, r8
     24c:	88 19       	sub	r24, r8
     24e:	88 19       	sub	r24, r8
     250:	88 19       	sub	r24, r8
     252:	88 19       	sub	r24, r8
     254:	88 19       	sub	r24, r8
     256:	88 19       	sub	r24, r8
     258:	88 19       	sub	r24, r8
     25a:	88 19       	sub	r24, r8
     25c:	88 19       	sub	r24, r8
     25e:	88 19       	sub	r24, r8
     260:	88 19       	sub	r24, r8
     262:	88 19       	sub	r24, r8
     264:	88 19       	sub	r24, r8
     266:	88 19       	sub	r24, r8
     268:	88 19       	sub	r24, r8
     26a:	88 19       	sub	r24, r8
     26c:	88 19       	sub	r24, r8
     26e:	88 19       	sub	r24, r8
     270:	88 19       	sub	r24, r8
     272:	88 19       	sub	r24, r8
     274:	88 19       	sub	r24, r8
     276:	88 19       	sub	r24, r8
     278:	88 19       	sub	r24, r8
     27a:	88 19       	sub	r24, r8
     27c:	88 19       	sub	r24, r8
     27e:	52 19       	sub	r21, r2
     280:	48 19       	sub	r20, r8
     282:	5c 19       	sub	r21, r12
     284:	88 19       	sub	r24, r8
     286:	88 19       	sub	r24, r8
     288:	88 19       	sub	r24, r8
     28a:	88 19       	sub	r24, r8
     28c:	88 19       	sub	r24, r8
     28e:	88 19       	sub	r24, r8
     290:	88 19       	sub	r24, r8
     292:	88 19       	sub	r24, r8
     294:	88 19       	sub	r24, r8
     296:	88 19       	sub	r24, r8
     298:	88 19       	sub	r24, r8
     29a:	88 19       	sub	r24, r8
     29c:	88 19       	sub	r24, r8
     29e:	45 19       	sub	r20, r5
     2a0:	88 19       	sub	r24, r8
     2a2:	e2 18       	sub	r14, r2
     2a4:	77 19       	sub	r23, r7
     2a6:	88 19       	sub	r24, r8
     2a8:	88 19       	sub	r24, r8
     2aa:	88 19       	sub	r24, r8
     2ac:	88 19       	sub	r24, r8
     2ae:	66 19       	sub	r22, r6
     2b0:	88 19       	sub	r24, r8
     2b2:	88 19       	sub	r24, r8
     2b4:	88 19       	sub	r24, r8
     2b6:	88 19       	sub	r24, r8
     2b8:	88 19       	sub	r24, r8
     2ba:	88 19       	sub	r24, r8
     2bc:	13 18       	sub	r1, r3
     2be:	0b 18       	sub	r0, r11
     2c0:	88 19       	sub	r24, r8
     2c2:	8c 18       	sub	r8, r12
     2c4:	88 19       	sub	r24, r8
     2c6:	df 18       	sub	r13, r15
     2c8:	36 19       	sub	r19, r6
     2ca:	3c 19       	sub	r19, r12
     2cc:	88 19       	sub	r24, r8
     2ce:	88 19       	sub	r24, r8
     2d0:	6a 18       	sub	r6, r10
     2d2:	88 19       	sub	r24, r8
     2d4:	bb 18       	sub	r11, r11
     2d6:	88 19       	sub	r24, r8
     2d8:	88 19       	sub	r24, r8
     2da:	88 19       	sub	r24, r8
     2dc:	88 19       	sub	r24, r8
     2de:	88 19       	sub	r24, r8
     2e0:	88 19       	sub	r24, r8
     2e2:	88 19       	sub	r24, r8
     2e4:	88 19       	sub	r24, r8
     2e6:	88 19       	sub	r24, r8
     2e8:	88 19       	sub	r24, r8
     2ea:	88 19       	sub	r24, r8
     2ec:	88 19       	sub	r24, r8
     2ee:	88 19       	sub	r24, r8
     2f0:	eb 17       	cp	r30, r27
     2f2:	88 19       	sub	r24, r8
     2f4:	88 19       	sub	r24, r8
     2f6:	88 19       	sub	r24, r8
     2f8:	88 19       	sub	r24, r8
     2fa:	88 19       	sub	r24, r8
     2fc:	88 19       	sub	r24, r8
     2fe:	88 19       	sub	r24, r8
     300:	88 19       	sub	r24, r8
     302:	88 19       	sub	r24, r8
     304:	88 19       	sub	r24, r8
     306:	88 19       	sub	r24, r8
     308:	88 19       	sub	r24, r8
     30a:	88 19       	sub	r24, r8
     30c:	88 19       	sub	r24, r8
     30e:	88 19       	sub	r24, r8
     310:	88 19       	sub	r24, r8
     312:	88 19       	sub	r24, r8
     314:	e7 17       	cp	r30, r23
     316:	9f 18       	sub	r9, r15
     318:	88 19       	sub	r24, r8
     31a:	88 19       	sub	r24, r8
     31c:	88 19       	sub	r24, r8
     31e:	88 19       	sub	r24, r8
     320:	88 19       	sub	r24, r8
     322:	88 19       	sub	r24, r8
     324:	88 19       	sub	r24, r8
     326:	88 19       	sub	r24, r8
     328:	88 19       	sub	r24, r8
     32a:	88 19       	sub	r24, r8
     32c:	88 19       	sub	r24, r8
     32e:	88 19       	sub	r24, r8
     330:	88 19       	sub	r24, r8
     332:	88 19       	sub	r24, r8
     334:	88 19       	sub	r24, r8
     336:	88 19       	sub	r24, r8
     338:	d5 18       	sub	r13, r5
     33a:	88 19       	sub	r24, r8
     33c:	88 19       	sub	r24, r8
     33e:	88 19       	sub	r24, r8
     340:	88 19       	sub	r24, r8
     342:	88 19       	sub	r24, r8
     344:	88 19       	sub	r24, r8
     346:	88 19       	sub	r24, r8
     348:	88 19       	sub	r24, r8
     34a:	88 19       	sub	r24, r8
     34c:	88 19       	sub	r24, r8
     34e:	88 19       	sub	r24, r8
     350:	88 19       	sub	r24, r8
     352:	88 19       	sub	r24, r8
     354:	88 19       	sub	r24, r8
     356:	88 19       	sub	r24, r8
     358:	95 18       	sub	r9, r5

0000035a <__ctors_end>:
     35a:	11 24       	eor	r1, r1
     35c:	1f be       	out	0x3f, r1	; 63
     35e:	cf ef       	ldi	r28, 0xFF	; 255
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df e2       	ldi	r29, 0x2F	; 47
     364:	de bf       	out	0x3e, r29	; 62
     366:	18 be       	out	0x38, r1	; 56
     368:	19 be       	out	0x39, r1	; 57
     36a:	1a be       	out	0x3a, r1	; 58
     36c:	1b be       	out	0x3b, r1	; 59

0000036e <__do_copy_data>:
     36e:	10 e2       	ldi	r17, 0x20	; 32
     370:	a0 e0       	ldi	r26, 0x00	; 0
     372:	b0 e2       	ldi	r27, 0x20	; 32
     374:	e8 ec       	ldi	r30, 0xC8	; 200
     376:	fa e6       	ldi	r31, 0x6A	; 106
     378:	00 e0       	ldi	r16, 0x00	; 0
     37a:	0b bf       	out	0x3b, r16	; 59
     37c:	02 c0       	rjmp	.+4      	; 0x382 <__do_copy_data+0x14>
     37e:	07 90       	elpm	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	a4 32       	cpi	r26, 0x24	; 36
     384:	b1 07       	cpc	r27, r17
     386:	d9 f7       	brne	.-10     	; 0x37e <__do_copy_data+0x10>
     388:	1b be       	out	0x3b, r1	; 59

0000038a <__do_clear_bss>:
     38a:	2a e2       	ldi	r18, 0x2A	; 42
     38c:	a4 e2       	ldi	r26, 0x24	; 36
     38e:	b0 e2       	ldi	r27, 0x20	; 32
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 30       	cpi	r26, 0x04	; 4
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <main>
     39e:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <initialize_ADC>:
	//ADC A Setup
	//DMASEL - 00 - DMA Combined Requests off
	//CHSTART - 0000 - Do not start any conversions
	//FLUSH - 0 - Do not flush
	//ENABLE - 1 - Enable the ADC
	ADCA_CTRLA = 0b0000001;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	//CURRLIMIT - 00 - No current limit
	//CONVMODE - 0 - ADC in unsigned mode
	//FREERUN - 0 - Freerun mode off
	//RESOLUTION - 00 - 12 bits
	//RESERVED - 0
	ADCA_CTRLB = 0b0000000;
     3ac:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	//RESERVED - 0
	//REFSEL - 010 - AREF pin on PORTA
	//RESERVED - 00
	//BANDGAP - 0 - Bandgap off
	//TEMPREF - 0 - Temperature reference disabled
	ADCA_REFCTRL = 0b00100000;
     3b0:	90 e2       	ldi	r25, 0x20	; 32
     3b2:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>

	//RSERVED - 00000
	//PRESCALAR - 101 - CLK /128 for ADC clock = 250KHz
	ADCA_PRESCALER = 0b00000101;
     3b6:	25 e0       	ldi	r18, 0x05	; 5
     3b8:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
	//ADC B Setup
	//DMASEL - 00 - DMA Combined Requests off
	//CHSTART - 0000 - Do not start any conversions
	//FLUSH - 0 - Do not flush
	//ENABLE - 1 - Enable the ADC
	ADCB_CTRLA = 0b0000001;
     3bc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x700240>
	//CURRLIMIT - 00 - No current limit
	//CONVMODE - 0 - ADC in unsigned mode
	//FREERUN - 0 - Freerun mode off
	//RESOLUTION - 00 - 12 bits
	//RESERVED - 0
	ADCB_CTRLB = 0b0000000;
     3c0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <__TEXT_REGION_LENGTH__+0x700241>
	//RESERVED - 0
	//REFSEL - 010 - AREF pin on PORTA
	//RESERVED - 00
	//BANDGAP - 0 - Bandgap off
	//TEMPREF - 0 - Temperature reference disabled
	ADCB_REFCTRL = 0b00100000;
     3c4:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <__TEXT_REGION_LENGTH__+0x700242>

	//RSERVED - 00000
	//PRESCALAR - 101 - CLK /128 for ADC clock = 250KHz
	ADCB_PRESCALER = 0b00000101;
     3c8:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <__TEXT_REGION_LENGTH__+0x700244>
	//ADC A CH0 - Battery Voltage
	//START - 0 - Do not start conversion
	//RESERVED - 00
	//GAIN - 000 - x1 Gain
	//INPUTMODE - 01 - Single-ended input measurement
	ADCA_CH0_CTRL = 0b00000001;
     3cc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>

	//RESERVED - 0
	//MUXPOS - XXXX - Read from ADC 11/PB3
	//MUXNEG - 000 - Not used for single-ended measurement
	ADCA_CH0_MUXCTRL = 0b01011000;
     3d0:	28 e5       	ldi	r18, 0x58	; 88
     3d2:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	//ADC A CH0 - Battery Voltage
	//START - 0 - Do not start conversion
	//RESERVED - 00
	//GAIN - 000 - x1 Gain
	//INPUTMODE - 01 - Single-ended input measurement
	ADCA_CH1_CTRL = 0b00000001;
     3d6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>

	//RESERVED - 0
	//MUXPOS - XXXX - Read from ADC 10/PB2
	//MUXNEG - 000 - Not used for single-ended measurement
	ADCA_CH1_MUXCTRL = 0b01010000;
     3da:	20 e5       	ldi	r18, 0x50	; 80
     3dc:	20 93 29 02 	sts	0x0229, r18	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
	//ADC B CH0 - Brush 1 Motor Current
	//START - 0 - Do not start conversion
	//RESERVED - 00
	//GAIN - 000 - x1 Gain
	//INPUTMODE - 01 - Single-ended input measurement
	ADCB_CH0_CTRL = 0b00000001;
     3e0:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>

	//RESERVED - 0
	//MUXPOS - XXXX - Read from ADC 12
	//MUXNEG - 000 - Not used for single-ended measurement
	ADCB_CH0_MUXCTRL = 0b00100000;
     3e4:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
	//ADC B CH1 - Brush 2 Motor Current
	//START - 0 - Do not start conversion
	//RESERVED - 00
	//GAIN - 000 - x1 Gain
	//INPUTMODE - 01 - Single-ended input measurement
	ADCB_CH1_CTRL = 0b00000001;
     3e8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__TEXT_REGION_LENGTH__+0x700268>

	//RESERVED - 0
	//MUXPOS - XXXX - Read from ADC 13
	//MUXNEG - 000 - Not used for single-ended measurement
	ADCB_CH1_MUXCTRL = 0b00101000;
     3ec:	98 e2       	ldi	r25, 0x28	; 40
     3ee:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__TEXT_REGION_LENGTH__+0x700269>
	//ADC B CH2 - Vacuum Motor Current
	//START - 0 - Do not start conversion
	//RESERVED - 00
	//GAIN - 000 - x1 Gain
	//INPUTMODE - 01 - Single-ended input measurement
	ADCB_CH2_CTRL = 0b00000001;
     3f2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__TEXT_REGION_LENGTH__+0x700270>

	//RESERVED - 0
	//MUXPOS - XXXX - Read from ADC 14
	//MUXNEG - 000 - Not used for single-ended measurement
	ADCB_CH2_MUXCTRL = 0b00110000;
     3f6:	90 e3       	ldi	r25, 0x30	; 48
     3f8:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__TEXT_REGION_LENGTH__+0x700271>
	//ADC B CH3 - Presweep Motor Current
	//START - 0 - Do not start conversion
	//RESERVED - 00
	//GAIN - 000 - x1 Gain
	//INPUTMODE - 01 - Single-ended input measurement
	ADCB_CH3_CTRL = 0b00000001;
     3fc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__TEXT_REGION_LENGTH__+0x700278>

	//RESERVED - 0
	//MUXPOS - XXXX - Read from ADC 15
	//MUXNEG - 000 - Not used for single-ended measurement
	ADCB_CH3_MUXCTRL = 0b00111000;
     400:	88 e3       	ldi	r24, 0x38	; 56
     402:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__TEXT_REGION_LENGTH__+0x700279>
     406:	08 95       	ret

00000408 <send_battery_voltage>:
}

void send_battery_voltage(void)
{
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	00 d0       	rcall	.+0      	; 0x412 <send_battery_voltage+0xa>
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	4a e0       	ldi	r20, 0x0A	; 10
     418:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t total = 0;
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
	uint32_t total_vol = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 0
		ADCA_CTRLA |= (1 << 2);
     41e:	e0 e0       	ldi	r30, 0x00	; 0
     420:	f2 e0       	ldi	r31, 0x02	; 2
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 2))YIELD_ADC("10_BATVOLT", ADCA_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCA_CH0RES;
     422:	a0 e1       	ldi	r26, 0x10	; 16
     424:	b2 e0       	ldi	r27, 0x02	; 2
	uint32_t total_vol = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 0
		ADCA_CTRLA |= (1 << 2);
     426:	80 81       	ld	r24, Z
     428:	84 60       	ori	r24, 0x04	; 4
     42a:	80 83       	st	Z, r24
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 2))YIELD_ADC("10_BATVOLT", ADCA_CTRLA);
     42c:	80 81       	ld	r24, Z
     42e:	82 fd       	sbrc	r24, 2
     430:	fd cf       	rjmp	.-6      	; 0x42c <send_battery_voltage+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     432:	8f e3       	ldi	r24, 0x3F	; 63
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <send_battery_voltage+0x2e>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <send_battery_voltage+0x34>
     43c:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCA_CH0RES;
     43e:	8d 91       	ld	r24, X+
     440:	9c 91       	ld	r25, X
     442:	11 97       	sbiw	r26, 0x01	; 1
     444:	28 0f       	add	r18, r24
     446:	39 1f       	adc	r19, r25
     448:	41 50       	subi	r20, 0x01	; 1
     44a:	51 09       	sbc	r21, r1
void send_battery_voltage(void)
{
	uint16_t total = 0;
	uint32_t total_vol = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
     44c:	61 f7       	brne	.-40     	; 0x426 <send_battery_voltage+0x1e>
		//Add result to total
		_delay_us(40);
		total += ADCA_CH0RES;
	}
	//Get average of total
	total /= NUM_SAMPLES;
     44e:	ad ec       	ldi	r26, 0xCD	; 205
     450:	bc ec       	ldi	r27, 0xCC	; 204
     452:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
     45e:	96 95       	lsr	r25
     460:	87 95       	ror	r24
	if (batt_index != 8)
     462:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <batt_index>
     466:	28 30       	cpi	r18, 0x08	; 8
     468:	a1 f0       	breq	.+40     	; 0x492 <send_battery_voltage+0x8a>
	{
		batt_vol[batt_index] = total;
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	ee 0f       	add	r30, r30
     470:	ff 1f       	adc	r31, r31
     472:	ef 5a       	subi	r30, 0xAF	; 175
     474:	ff 4d       	sbci	r31, 0xDF	; 223
     476:	80 83       	st	Z, r24
     478:	91 83       	std	Z+1, r25	; 0x01
		batt_index++;
     47a:	2f 5f       	subi	r18, 0xFF	; 255
     47c:	20 93 4b 23 	sts	0x234B, r18	; 0x80234b <batt_index>
			batt_vol[i - 1] = batt_vol[i];
		}
		batt_vol[7] = total;

	}
	for (int i = 0; i < batt_index; i++)
     480:	02 2f       	mov	r16, r18
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	10 16       	cp	r1, r16
     486:	11 06       	cpc	r1, r17
     488:	ac f0       	brlt	.+42     	; 0x4b4 <send_battery_voltage+0xac>
}

void send_battery_voltage(void)
{
	uint16_t total = 0;
	uint32_t total_vol = 0;
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	ba 01       	movw	r22, r20
     490:	22 c0       	rjmp	.+68     	; 0x4d6 <send_battery_voltage+0xce>
     492:	e1 e5       	ldi	r30, 0x51	; 81
     494:	f0 e2       	ldi	r31, 0x20	; 32
     496:	6f e5       	ldi	r22, 0x5F	; 95
     498:	70 e2       	ldi	r23, 0x20	; 32
	}
	else
	{
		for (int i = 1; i < 8; i++)
		{
			batt_vol[i - 1] = batt_vol[i];
     49a:	42 81       	ldd	r20, Z+2	; 0x02
     49c:	53 81       	ldd	r21, Z+3	; 0x03
     49e:	41 93       	st	Z+, r20
     4a0:	51 93       	st	Z+, r21
		batt_vol[batt_index] = total;
		batt_index++;
	}
	else
	{
		for (int i = 1; i < 8; i++)
     4a2:	e6 17       	cp	r30, r22
     4a4:	f7 07       	cpc	r31, r23
     4a6:	c9 f7       	brne	.-14     	; 0x49a <send_battery_voltage+0x92>
		{
			batt_vol[i - 1] = batt_vol[i];
		}
		batt_vol[7] = total;
     4a8:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <batt_vol+0xe>
     4ac:	90 93 60 20 	sts	0x2060, r25	; 0x802060 <batt_vol+0xf>

	}
	for (int i = 0; i < batt_index; i++)
     4b0:	08 e0       	ldi	r16, 0x08	; 8
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	e1 e5       	ldi	r30, 0x51	; 81
     4b6:	f0 e2       	ldi	r31, 0x20	; 32
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	ba 01       	movw	r22, r20
	{
		total_vol += batt_vol[i];
     4c2:	a1 91       	ld	r26, Z+
     4c4:	b1 91       	ld	r27, Z+
     4c6:	4a 0f       	add	r20, r26
     4c8:	5b 1f       	adc	r21, r27
     4ca:	61 1d       	adc	r22, r1
     4cc:	71 1d       	adc	r23, r1
			batt_vol[i - 1] = batt_vol[i];
		}
		batt_vol[7] = total;

	}
	for (int i = 0; i < batt_index; i++)
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	80 17       	cp	r24, r16
     4d2:	91 07       	cpc	r25, r17
     4d4:	b4 f3       	brlt	.-20     	; 0x4c2 <send_battery_voltage+0xba>
	{
		total_vol += batt_vol[i];
	}
	total = total_vol / batt_index;
     4d6:	02 2f       	mov	r16, r18
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	cb 01       	movw	r24, r22
     4e0:	ba 01       	movw	r22, r20
     4e2:	a9 01       	movw	r20, r18
     4e4:	98 01       	movw	r18, r16
     4e6:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
     4ea:	82 2f       	mov	r24, r18
     4ec:	93 2f       	mov	r25, r19
     4ee:	e2 2f       	mov	r30, r18
	if (battery_total > (total + 5) || battery_total < (total - 5))
     4f0:	40 91 4c 20 	lds	r20, 0x204C	; 0x80204c <battery_total>
     4f4:	50 91 4d 20 	lds	r21, 0x204D	; 0x80204d <battery_total+0x1>
     4f8:	bc 01       	movw	r22, r24
     4fa:	6b 5f       	subi	r22, 0xFB	; 251
     4fc:	7f 4f       	sbci	r23, 0xFF	; 255
     4fe:	64 17       	cp	r22, r20
     500:	75 07       	cpc	r23, r21
     502:	20 f0       	brcs	.+8      	; 0x50c <send_battery_voltage+0x104>
     504:	05 97       	sbiw	r24, 0x05	; 5
     506:	48 17       	cp	r20, r24
     508:	59 07       	cpc	r21, r25
     50a:	28 f4       	brcc	.+10     	; 0x516 <send_battery_voltage+0x10e>
	{
		battery_total = total;
     50c:	e0 93 4c 20 	sts	0x204C, r30	; 0x80204c <battery_total>
     510:	30 93 4d 20 	sts	0x204D, r19	; 0x80204d <battery_total+0x1>
     514:	0f c0       	rjmp	.+30     	; 0x534 <send_battery_voltage+0x12c>
	}
	else
	{
		battery_total = total;
     516:	e0 93 4c 20 	sts	0x204C, r30	; 0x80204c <battery_total>
     51a:	30 93 4d 20 	sts	0x204D, r19	; 0x80204d <battery_total+0x1>
		//Send the average ADC value
		uint8_t message[2];
		message[0] = total;
     51e:	29 83       	std	Y+1, r18	; 0x01
		message[1] = total >> 8;
     520:	3a 83       	std	Y+2, r19	; 0x02
		transmit_CAN(BATTERY_CAN, 0, 2, message);
     522:	9e 01       	movw	r18, r28
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	42 e0       	ldi	r20, 0x02	; 2
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	8a eb       	ldi	r24, 0xBA	; 186
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
	}
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <check_fuses>:

void check_fuses(void)
{
     542:	4a e0       	ldi	r20, 0x0A	; 10
     544:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t total = 0;
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 1
		ADCA_CTRLA |= (1 << 3);
     54a:	e0 e0       	ldi	r30, 0x00	; 0
     54c:	f2 e0       	ldi	r31, 0x02	; 2
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 3))YIELD_ADC("11_FUSES", ADCA_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCA_CH1RES;
     54e:	a2 e1       	ldi	r26, 0x12	; 18
     550:	b2 e0       	ldi	r27, 0x02	; 2
	uint16_t total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 1
		ADCA_CTRLA |= (1 << 3);
     552:	80 81       	ld	r24, Z
     554:	88 60       	ori	r24, 0x08	; 8
     556:	80 83       	st	Z, r24
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 3))YIELD_ADC("11_FUSES", ADCA_CTRLA);
     558:	80 81       	ld	r24, Z
     55a:	83 fd       	sbrc	r24, 3
     55c:	fd cf       	rjmp	.-6      	; 0x558 <check_fuses+0x16>
     55e:	8f e3       	ldi	r24, 0x3F	; 63
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <check_fuses+0x20>
     566:	00 c0       	rjmp	.+0      	; 0x568 <check_fuses+0x26>
     568:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCA_CH1RES;
     56a:	8d 91       	ld	r24, X+
     56c:	9c 91       	ld	r25, X
     56e:	11 97       	sbiw	r26, 0x01	; 1
     570:	28 0f       	add	r18, r24
     572:	39 1f       	adc	r19, r25
     574:	41 50       	subi	r20, 0x01	; 1
     576:	51 09       	sbc	r21, r1

void check_fuses(void)
{
	uint16_t total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
     578:	61 f7       	brne	.-40     	; 0x552 <check_fuses+0x10>
		//Add result to total
		_delay_us(40);
		total += ADCA_CH1RES;
	}
	//Get average of total
	total /= NUM_SAMPLES;
     57a:	ad ec       	ldi	r26, 0xCD	; 205
     57c:	bc ec       	ldi	r27, 0xCC	; 204
     57e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
     582:	bc 01       	movw	r22, r24
     584:	76 95       	lsr	r23
     586:	67 95       	ror	r22
     588:	76 95       	lsr	r23
     58a:	67 95       	ror	r22
     58c:	76 95       	lsr	r23
     58e:	67 95       	ror	r22

	if (total == 0) return; //IVA001: check for div/0
     590:	61 15       	cp	r22, r1
     592:	71 05       	cpc	r23, r1
     594:	f9 f0       	breq	.+62     	; 0x5d4 <check_fuses+0x92>

	//If fuse fail pin is shows a ratio less than 20 to battery voltage, start a debounce timer of 500 ms to make sure ratio is correct
	if (((uint16_t)battery_total * 20 / total) > 22)
     596:	20 91 4c 20 	lds	r18, 0x204C	; 0x80204c <battery_total>
     59a:	30 91 4d 20 	lds	r19, 0x204D	; 0x80204d <battery_total+0x1>
     59e:	44 e1       	ldi	r20, 0x14	; 20
     5a0:	42 9f       	mul	r20, r18
     5a2:	c0 01       	movw	r24, r0
     5a4:	43 9f       	mul	r20, r19
     5a6:	90 0d       	add	r25, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	0e 94 a0 31 	call	0x6340	; 0x6340 <__udivmodhi4>
     5ae:	67 31       	cpi	r22, 0x17	; 23
     5b0:	71 05       	cpc	r23, r1
     5b2:	60 f0       	brcs	.+24     	; 0x5cc <check_fuses+0x8a>
	{
		if (fuse_debounce_timer == OFF)
     5b4:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <fuse_debounce_timer>
     5b8:	81 11       	cpse	r24, r1
     5ba:	0c c0       	rjmp	.+24     	; 0x5d4 <check_fuses+0x92>
		{
			fuse_debounce_timer = ON;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 8d 25 	sts	0x258D, r24	; 0x80258d <fuse_debounce_timer>
			fuse_debounce_count = 0;
     5c2:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <fuse_debounce_count>
			start_100_ms_timer();
     5c6:	0e 94 49 29 	call	0x5292	; 0x5292 <start_100_ms_timer>
     5ca:	08 95       	ret
		}
	}
	else
	{
		fuse_debounce_timer = OFF;
     5cc:	10 92 8d 25 	sts	0x258D, r1	; 0x80258d <fuse_debounce_timer>
		fuse_debounce_count = 0;
     5d0:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <fuse_debounce_count>
     5d4:	08 95       	ret

000005d6 <measure_currents>:
	sprintf(message, "%d", ((uint16_t)battery_total * 20 / total));
	lcd_write_new(message);*/
}

void measure_currents(void)
{
     5d6:	4f 92       	push	r4
     5d8:	5f 92       	push	r5
     5da:	6f 92       	push	r6
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	0f 2e       	mov	r0, r31
     5f8:	fa e0       	ldi	r31, 0x0A	; 10
     5fa:	ef 2e       	mov	r14, r31
     5fc:	f1 2c       	mov	r15, r1
     5fe:	f0 2d       	mov	r31, r0
	measure_presweep_motor_current();
}

static void measure_brush_1_motor_current(void)
{
	float total = 0;
     600:	81 2c       	mov	r8, r1
     602:	91 2c       	mov	r9, r1
     604:	54 01       	movw	r10, r8

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 0
		ADCB_CTRLA |= (1 << 2);
     606:	c0 e4       	ldi	r28, 0x40	; 64
     608:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 2))YIELD_ADC("20_BRMTR1", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH0RES;
     60a:	00 e5       	ldi	r16, 0x50	; 80
     60c:	12 e0       	ldi	r17, 0x02	; 2
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 0
		ADCB_CTRLA |= (1 << 2);
     60e:	88 81       	ld	r24, Y
     610:	84 60       	ori	r24, 0x04	; 4
     612:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 2))YIELD_ADC("20_BRMTR1", ADCB_CTRLA);
     614:	88 81       	ld	r24, Y
     616:	82 fd       	sbrc	r24, 2
     618:	fd cf       	rjmp	.-6      	; 0x614 <measure_currents+0x3e>
		//Add result to total
		total += ADCB_CH0RES;
     61a:	f8 01       	movw	r30, r16
     61c:	60 81       	ld	r22, Z
     61e:	71 81       	ldd	r23, Z+1	; 0x01
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     634:	4b 01       	movw	r8, r22
     636:	5c 01       	movw	r10, r24
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	ef 1a       	sub	r14, r31
     63c:	f1 08       	sbc	r15, r1

static void measure_brush_1_motor_current(void)
{
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
     63e:	39 f7       	brne	.-50     	; 0x60e <measure_currents+0x38>
		while (ADCB_CTRLA & (1 << 2))YIELD_ADC("20_BRMTR1", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH0RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES);
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e2       	ldi	r20, 0x20	; 32
     646:	51 e4       	ldi	r21, 0x41	; 65
     648:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     64c:	4b 01       	movw	r8, r22
     64e:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4e e3       	ldi	r20, 0x3E	; 62
     656:	53 e4       	ldi	r21, 0x43	; 67
     658:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
     65c:	18 16       	cp	r1, r24
     65e:	0c f0       	brlt	.+2      	; 0x662 <measure_currents+0x8c>
     660:	78 c0       	rjmp	.+240    	; 0x752 <measure_currents+0x17c>
	{
		total -= ADC_NEG_ADJ;
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	4e e3       	ldi	r20, 0x3E	; 62
     668:	53 e4       	ldi	r21, 0x43	; 67
     66a:	c5 01       	movw	r24, r10
     66c:	b4 01       	movw	r22, r8
     66e:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     672:	4b 01       	movw	r8, r22
     674:	5c 01       	movw	r10, r24
		//If the shunt output voltage is less than the off voltage, set current to 0
		float so = total * 0.0005; // 0.0005 = 2.048V/4096 counts
     676:	2f e6       	ldi	r18, 0x6F	; 111
     678:	32 e1       	ldi	r19, 0x12	; 18
     67a:	43 e0       	ldi	r20, 0x03	; 3
     67c:	5a e3       	ldi	r21, 0x3A	; 58
     67e:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
		test16_1 = total / 2;
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	c5 01       	movw	r24, r10
     690:	b4 01       	movw	r22, r8
     692:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     696:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     69a:	60 93 80 20 	sts	0x2080, r22	; 0x802080 <test16_1>
     69e:	70 93 81 20 	sts	0x2081, r23	; 0x802081 <test16_1+0x1>
		if (so < (brush_1_v_off + 0.005))
     6a2:	40 90 99 20 	lds	r4, 0x2099	; 0x802099 <brush_1_v_off>
     6a6:	50 90 9a 20 	lds	r5, 0x209A	; 0x80209a <brush_1_v_off+0x1>
     6aa:	60 90 9b 20 	lds	r6, 0x209B	; 0x80209b <brush_1_v_off+0x2>
     6ae:	70 90 9c 20 	lds	r7, 0x209C	; 0x80209c <brush_1_v_off+0x3>
     6b2:	2a e0       	ldi	r18, 0x0A	; 10
     6b4:	37 ed       	ldi	r19, 0xD7	; 215
     6b6:	43 ea       	ldi	r20, 0xA3	; 163
     6b8:	5b e3       	ldi	r21, 0x3B	; 59
     6ba:	c3 01       	movw	r24, r6
     6bc:	b2 01       	movw	r22, r4
     6be:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
     6ce:	88 23       	and	r24, r24
     6d0:	8c f4       	brge	.+34     	; 0x6f4 <measure_currents+0x11e>
		{
			total = 0;
			motor_current = 0;
     6d2:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     6d6:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     6da:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     6de:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
			testf = 0;
     6e2:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     6e6:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     6ea:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     6ee:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
     6f2:	3f c0       	rjmp	.+126    	; 0x772 <measure_currents+0x19c>
		}
		//Otherwise calculate the motor current
		else
		{
			motor_current = (so - brush_1_v_off) / AV * R_SENSE_INV;
     6f4:	a3 01       	movw	r20, r6
     6f6:	92 01       	movw	r18, r4
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 ea       	ldi	r20, 0xA0	; 160
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	4a ef       	ldi	r20, 0xFA	; 250
     712:	53 e4       	ldi	r21, 0x43	; 67
     714:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     718:	60 93 40 21 	sts	0x2140, r22	; 0x802140 <motor_current>
     71c:	70 93 41 21 	sts	0x2141, r23	; 0x802141 <motor_current+0x1>
     720:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <motor_current+0x2>
     724:	90 93 43 21 	sts	0x2143, r25	; 0x802143 <motor_current+0x3>

			test16 = (uint16_t)(motor_current * 1000);
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	4a e7       	ldi	r20, 0x7A	; 122
     72e:	54 e4       	ldi	r21, 0x44	; 68
     730:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     734:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     738:	60 93 5f 23 	sts	0x235F, r22	; 0x80235f <test16>
     73c:	70 93 60 23 	sts	0x2360, r23	; 0x802360 <test16+0x1>
			testf = total;
     740:	80 92 9d 20 	sts	0x209D, r8	; 0x80209d <testf>
     744:	90 92 9e 20 	sts	0x209E, r9	; 0x80209e <testf+0x1>
     748:	a0 92 9f 20 	sts	0x209F, r10	; 0x80209f <testf+0x2>
     74c:	b0 92 a0 20 	sts	0x20A0, r11	; 0x8020a0 <testf+0x3>
     750:	10 c0       	rjmp	.+32     	; 0x772 <measure_currents+0x19c>
		}
	}
	else
	{
		total = 0;
		motor_current = 0;
     752:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     756:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     75a:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     75e:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
		testf = 0;
     762:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     766:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     76a:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     76e:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
	}

	//A complementary filter to filter out noise from current readings
	//Also since current readings will vary largely when PWMing this filter will average out the readings
	if (eco_mode)
     772:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
     776:	88 23       	and	r24, r24
     778:	99 f1       	breq	.+102    	; 0x7e0 <measure_currents+0x20a>
	{
		brush1_current = (brush1_current * 95 + motor_current * 5) / 100;
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	4e eb       	ldi	r20, 0xBE	; 190
     780:	52 e4       	ldi	r21, 0x42	; 66
     782:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <brush1_current>
     786:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <brush1_current+0x1>
     78a:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <brush1_current+0x2>
     78e:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <brush1_current+0x3>
     792:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 ea       	ldi	r20, 0xA0	; 160
     7a0:	50 e4       	ldi	r21, 0x40	; 64
     7a2:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     7a6:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     7aa:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     7ae:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     7b2:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	c7 01       	movw	r24, r14
     7bc:	b6 01       	movw	r22, r12
     7be:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	48 ec       	ldi	r20, 0xC8	; 200
     7c8:	52 e4       	ldi	r21, 0x42	; 66
     7ca:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     7ce:	60 93 58 23 	sts	0x2358, r22	; 0x802358 <brush1_current>
     7d2:	70 93 59 23 	sts	0x2359, r23	; 0x802359 <brush1_current+0x1>
     7d6:	80 93 5a 23 	sts	0x235A, r24	; 0x80235a <brush1_current+0x2>
     7da:	90 93 5b 23 	sts	0x235B, r25	; 0x80235b <brush1_current+0x3>
     7de:	87 c3       	rjmp	.+1806   	; 0xeee <measure_currents+0x918>
	}
	else
	{
		brush1_current = (brush1_current * 90 + motor_current * 10) / 100;
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	44 eb       	ldi	r20, 0xB4	; 180
     7e6:	52 e4       	ldi	r21, 0x42	; 66
     7e8:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <brush1_current>
     7ec:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <brush1_current+0x1>
     7f0:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <brush1_current+0x2>
     7f4:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <brush1_current+0x3>
     7f8:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     7fc:	6b 01       	movw	r12, r22
     7fe:	7c 01       	movw	r14, r24
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e2       	ldi	r20, 0x20	; 32
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     80c:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     810:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     814:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     818:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c7 01       	movw	r24, r14
     822:	b6 01       	movw	r22, r12
     824:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	48 ec       	ldi	r20, 0xC8	; 200
     82e:	52 e4       	ldi	r21, 0x42	; 66
     830:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     834:	60 93 58 23 	sts	0x2358, r22	; 0x802358 <brush1_current>
     838:	70 93 59 23 	sts	0x2359, r23	; 0x802359 <brush1_current+0x1>
     83c:	80 93 5a 23 	sts	0x235A, r24	; 0x80235a <brush1_current+0x2>
     840:	90 93 5b 23 	sts	0x235B, r25	; 0x80235b <brush1_current+0x3>
     844:	54 c3       	rjmp	.+1704   	; 0xeee <measure_currents+0x918>
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 1
		ADCB_CTRLA |= (1 << 3);
     846:	88 81       	ld	r24, Y
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 3))YIELD_ADC("21_BRMTR2", ADCB_CTRLA);
     84c:	88 81       	ld	r24, Y
     84e:	83 fd       	sbrc	r24, 3
     850:	fd cf       	rjmp	.-6      	; 0x84c <measure_currents+0x276>
		//Add result to total
		total += ADCB_CH1RES;
     852:	f8 01       	movw	r30, r16
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     86c:	4b 01       	movw	r8, r22
     86e:	5c 01       	movw	r10, r24
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	ef 1a       	sub	r14, r31
     874:	f1 08       	sbc	r15, r1

void measure_brush_2_motor_current(void)
{
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
     876:	39 f7       	brne	.-50     	; 0x846 <measure_currents+0x270>
		while (ADCB_CTRLA & (1 << 3))YIELD_ADC("21_BRMTR2", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH1RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES);
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e2       	ldi	r20, 0x20	; 32
     87e:	51 e4       	ldi	r21, 0x41	; 65
     880:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     884:	4b 01       	movw	r8, r22
     886:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	4e e3       	ldi	r20, 0x3E	; 62
     88e:	53 e4       	ldi	r21, 0x43	; 67
     890:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
     894:	18 16       	cp	r1, r24
     896:	0c f0       	brlt	.+2      	; 0x89a <measure_currents+0x2c4>
     898:	78 c0       	rjmp	.+240    	; 0x98a <measure_currents+0x3b4>
	{
		total -= ADC_NEG_ADJ;
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	4e e3       	ldi	r20, 0x3E	; 62
     8a0:	53 e4       	ldi	r21, 0x43	; 67
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     8aa:	4b 01       	movw	r8, r22
     8ac:	5c 01       	movw	r10, r24
		//If the shunt output voltage is less than the off voltage, set current to 0
		float so = total * 0.0005; // 0.0005 = 2.048V/4096 counts
     8ae:	2f e6       	ldi	r18, 0x6F	; 111
     8b0:	32 e1       	ldi	r19, 0x12	; 18
     8b2:	43 e0       	ldi	r20, 0x03	; 3
     8b4:	5a e3       	ldi	r21, 0x3A	; 58
     8b6:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
		test16_2 = total / 2;
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	5f e3       	ldi	r21, 0x3F	; 63
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     8ce:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     8d2:	60 93 56 23 	sts	0x2356, r22	; 0x802356 <test16_2>
     8d6:	70 93 57 23 	sts	0x2357, r23	; 0x802357 <test16_2+0x1>
		if (so < (brush_2_v_off + 0.005))
     8da:	40 90 76 20 	lds	r4, 0x2076	; 0x802076 <brush_2_v_off>
     8de:	50 90 77 20 	lds	r5, 0x2077	; 0x802077 <brush_2_v_off+0x1>
     8e2:	60 90 78 20 	lds	r6, 0x2078	; 0x802078 <brush_2_v_off+0x2>
     8e6:	70 90 79 20 	lds	r7, 0x2079	; 0x802079 <brush_2_v_off+0x3>
     8ea:	2a e0       	ldi	r18, 0x0A	; 10
     8ec:	37 ed       	ldi	r19, 0xD7	; 215
     8ee:	43 ea       	ldi	r20, 0xA3	; 163
     8f0:	5b e3       	ldi	r21, 0x3B	; 59
     8f2:	c3 01       	movw	r24, r6
     8f4:	b2 01       	movw	r22, r4
     8f6:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	c7 01       	movw	r24, r14
     900:	b6 01       	movw	r22, r12
     902:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
     906:	88 23       	and	r24, r24
     908:	8c f4       	brge	.+34     	; 0x92c <measure_currents+0x356>
		{
			total = 0;
			motor_current = 0;
     90a:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     90e:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     912:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     916:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
			testf = 0;
     91a:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     91e:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     922:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     926:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
     92a:	3f c0       	rjmp	.+126    	; 0x9aa <measure_currents+0x3d4>
		}
		//Otherwise calculate the motor current
		else
		{
			motor_current = (so - brush_2_v_off) / AV * R_SENSE_INV;
     92c:	a3 01       	movw	r20, r6
     92e:	92 01       	movw	r18, r4
     930:	c7 01       	movw	r24, r14
     932:	b6 01       	movw	r22, r12
     934:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 ea       	ldi	r20, 0xA0	; 160
     93e:	51 e4       	ldi	r21, 0x41	; 65
     940:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4a ef       	ldi	r20, 0xFA	; 250
     94a:	53 e4       	ldi	r21, 0x43	; 67
     94c:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     950:	60 93 40 21 	sts	0x2140, r22	; 0x802140 <motor_current>
     954:	70 93 41 21 	sts	0x2141, r23	; 0x802141 <motor_current+0x1>
     958:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <motor_current+0x2>
     95c:	90 93 43 21 	sts	0x2143, r25	; 0x802143 <motor_current+0x3>

			test16 = (uint16_t)(motor_current * 1000);
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	4a e7       	ldi	r20, 0x7A	; 122
     966:	54 e4       	ldi	r21, 0x44	; 68
     968:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     96c:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     970:	60 93 5f 23 	sts	0x235F, r22	; 0x80235f <test16>
     974:	70 93 60 23 	sts	0x2360, r23	; 0x802360 <test16+0x1>
			testf = total;
     978:	80 92 9d 20 	sts	0x209D, r8	; 0x80209d <testf>
     97c:	90 92 9e 20 	sts	0x209E, r9	; 0x80209e <testf+0x1>
     980:	a0 92 9f 20 	sts	0x209F, r10	; 0x80209f <testf+0x2>
     984:	b0 92 a0 20 	sts	0x20A0, r11	; 0x8020a0 <testf+0x3>
     988:	10 c0       	rjmp	.+32     	; 0x9aa <measure_currents+0x3d4>
		}
	}
	else
	{
		total = 0;
		motor_current = 0;
     98a:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     98e:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     992:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     996:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
		testf = 0;
     99a:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     99e:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     9a2:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     9a6:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
	}

	//A complementary filter to filter out noise from current readings
	//Also since current readings will vary largely when PWMing this filter will average out the readings
	if (eco_mode)
     9aa:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
     9ae:	88 23       	and	r24, r24
     9b0:	99 f1       	breq	.+102    	; 0xa18 <measure_currents+0x442>
	{
		brush2_current = (brush2_current * 95 + motor_current * 5) / 100;
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	4e eb       	ldi	r20, 0xBE	; 190
     9b8:	52 e4       	ldi	r21, 0x42	; 66
     9ba:	60 91 6b 23 	lds	r22, 0x236B	; 0x80236b <brush2_current>
     9be:	70 91 6c 23 	lds	r23, 0x236C	; 0x80236c <brush2_current+0x1>
     9c2:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <brush2_current+0x2>
     9c6:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <brush2_current+0x3>
     9ca:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     9ce:	6b 01       	movw	r12, r22
     9d0:	7c 01       	movw	r14, r24
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 ea       	ldi	r20, 0xA0	; 160
     9d8:	50 e4       	ldi	r21, 0x40	; 64
     9da:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     9de:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     9e2:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     9e6:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     9ea:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     9ee:	9b 01       	movw	r18, r22
     9f0:	ac 01       	movw	r20, r24
     9f2:	c7 01       	movw	r24, r14
     9f4:	b6 01       	movw	r22, r12
     9f6:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	48 ec       	ldi	r20, 0xC8	; 200
     a00:	52 e4       	ldi	r21, 0x42	; 66
     a02:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     a06:	60 93 6b 23 	sts	0x236B, r22	; 0x80236b <brush2_current>
     a0a:	70 93 6c 23 	sts	0x236C, r23	; 0x80236c <brush2_current+0x1>
     a0e:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <brush2_current+0x2>
     a12:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <brush2_current+0x3>
     a16:	78 c2       	rjmp	.+1264   	; 0xf08 <measure_currents+0x932>
	}
	else
	{
		brush2_current = (brush2_current * 90 + motor_current * 10) / 100;
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	44 eb       	ldi	r20, 0xB4	; 180
     a1e:	52 e4       	ldi	r21, 0x42	; 66
     a20:	60 91 6b 23 	lds	r22, 0x236B	; 0x80236b <brush2_current>
     a24:	70 91 6c 23 	lds	r23, 0x236C	; 0x80236c <brush2_current+0x1>
     a28:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <brush2_current+0x2>
     a2c:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <brush2_current+0x3>
     a30:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     a34:	6b 01       	movw	r12, r22
     a36:	7c 01       	movw	r14, r24
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e2       	ldi	r20, 0x20	; 32
     a3e:	51 e4       	ldi	r21, 0x41	; 65
     a40:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     a44:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     a48:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     a4c:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     a50:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	48 ec       	ldi	r20, 0xC8	; 200
     a66:	52 e4       	ldi	r21, 0x42	; 66
     a68:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     a6c:	60 93 6b 23 	sts	0x236B, r22	; 0x80236b <brush2_current>
     a70:	70 93 6c 23 	sts	0x236C, r23	; 0x80236c <brush2_current+0x1>
     a74:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <brush2_current+0x2>
     a78:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <brush2_current+0x3>
     a7c:	45 c2       	rjmp	.+1162   	; 0xf08 <measure_currents+0x932>
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 2
		ADCB_CTRLA |= (1 << 4);
     a7e:	88 81       	ld	r24, Y
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 4))YIELD_ADC("22_VACMTR", ADCB_CTRLA);
     a84:	88 81       	ld	r24, Y
     a86:	84 fd       	sbrc	r24, 4
     a88:	fd cf       	rjmp	.-6      	; 0xa84 <measure_currents+0x4ae>
		//Add result to total
		total += ADCB_CH2RES;
     a8a:	f8 01       	movw	r30, r16
     a8c:	60 81       	ld	r22, Z
     a8e:	71 81       	ldd	r23, Z+1	; 0x01
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	c5 01       	movw	r24, r10
     a9e:	b4 01       	movw	r22, r8
     aa0:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     aa4:	4b 01       	movw	r8, r22
     aa6:	5c 01       	movw	r10, r24
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	ef 1a       	sub	r14, r31
     aac:	f1 08       	sbc	r15, r1

void measure_vacuum_motor_current(void)
{
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
     aae:	39 f7       	brne	.-50     	; 0xa7e <measure_currents+0x4a8>
		while (ADCB_CTRLA & (1 << 4))YIELD_ADC("22_VACMTR", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH2RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES);
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e2       	ldi	r20, 0x20	; 32
     ab6:	51 e4       	ldi	r21, 0x41	; 65
     ab8:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4e e3       	ldi	r20, 0x3E	; 62
     ac6:	53 e4       	ldi	r21, 0x43	; 67
     ac8:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
     acc:	18 16       	cp	r1, r24
     ace:	0c f0       	brlt	.+2      	; 0xad2 <measure_currents+0x4fc>
     ad0:	78 c0       	rjmp	.+240    	; 0xbc2 <measure_currents+0x5ec>
	{
		total -= ADC_NEG_ADJ;
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4e e3       	ldi	r20, 0x3E	; 62
     ad8:	53 e4       	ldi	r21, 0x43	; 67
     ada:	c5 01       	movw	r24, r10
     adc:	b4 01       	movw	r22, r8
     ade:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     ae2:	4b 01       	movw	r8, r22
     ae4:	5c 01       	movw	r10, r24

		//If the shunt output voltage is less than the off voltage, set current to 0
		float so = total * 0.0005; // 0.0005 = 2.048V/4096 counts
     ae6:	2f e6       	ldi	r18, 0x6F	; 111
     ae8:	32 e1       	ldi	r19, 0x12	; 18
     aea:	43 e0       	ldi	r20, 0x03	; 3
     aec:	5a e3       	ldi	r21, 0x3A	; 58
     aee:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
		test16_3 = total / 2;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	5f e3       	ldi	r21, 0x3F	; 63
     afe:	c5 01       	movw	r24, r10
     b00:	b4 01       	movw	r22, r8
     b02:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     b06:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     b0a:	60 93 97 20 	sts	0x2097, r22	; 0x802097 <test16_3>
     b0e:	70 93 98 20 	sts	0x2098, r23	; 0x802098 <test16_3+0x1>
		if (so < (vacuum_v_off + 0.005))
     b12:	40 90 a9 20 	lds	r4, 0x20A9	; 0x8020a9 <vacuum_v_off>
     b16:	50 90 aa 20 	lds	r5, 0x20AA	; 0x8020aa <vacuum_v_off+0x1>
     b1a:	60 90 ab 20 	lds	r6, 0x20AB	; 0x8020ab <vacuum_v_off+0x2>
     b1e:	70 90 ac 20 	lds	r7, 0x20AC	; 0x8020ac <vacuum_v_off+0x3>
     b22:	2a e0       	ldi	r18, 0x0A	; 10
     b24:	37 ed       	ldi	r19, 0xD7	; 215
     b26:	43 ea       	ldi	r20, 0xA3	; 163
     b28:	5b e3       	ldi	r21, 0x3B	; 59
     b2a:	c3 01       	movw	r24, r6
     b2c:	b2 01       	movw	r22, r4
     b2e:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
     b3e:	88 23       	and	r24, r24
     b40:	8c f4       	brge	.+34     	; 0xb64 <measure_currents+0x58e>
		{
			total = 0;
			motor_current = 0;
     b42:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     b46:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     b4a:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     b4e:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
			testf = 0;
     b52:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     b56:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     b5a:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     b5e:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
     b62:	3f c0       	rjmp	.+126    	; 0xbe2 <measure_currents+0x60c>
		}
		//Otherwise calculate the motor current
		else
		{
			motor_current = (so - vacuum_v_off) / AV * R_SENSE_INV;
     b64:	a3 01       	movw	r20, r6
     b66:	92 01       	movw	r18, r4
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 ea       	ldi	r20, 0xA0	; 160
     b76:	51 e4       	ldi	r21, 0x41	; 65
     b78:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a ef       	ldi	r20, 0xFA	; 250
     b82:	53 e4       	ldi	r21, 0x43	; 67
     b84:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     b88:	60 93 40 21 	sts	0x2140, r22	; 0x802140 <motor_current>
     b8c:	70 93 41 21 	sts	0x2141, r23	; 0x802141 <motor_current+0x1>
     b90:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <motor_current+0x2>
     b94:	90 93 43 21 	sts	0x2143, r25	; 0x802143 <motor_current+0x3>

			test16 = (uint16_t)(motor_current * 1000);
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	4a e7       	ldi	r20, 0x7A	; 122
     b9e:	54 e4       	ldi	r21, 0x44	; 68
     ba0:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     ba4:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     ba8:	60 93 5f 23 	sts	0x235F, r22	; 0x80235f <test16>
     bac:	70 93 60 23 	sts	0x2360, r23	; 0x802360 <test16+0x1>
			testf = total;
     bb0:	80 92 9d 20 	sts	0x209D, r8	; 0x80209d <testf>
     bb4:	90 92 9e 20 	sts	0x209E, r9	; 0x80209e <testf+0x1>
     bb8:	a0 92 9f 20 	sts	0x209F, r10	; 0x80209f <testf+0x2>
     bbc:	b0 92 a0 20 	sts	0x20A0, r11	; 0x8020a0 <testf+0x3>
     bc0:	10 c0       	rjmp	.+32     	; 0xbe2 <measure_currents+0x60c>
		}
	}
	else
	{
		total = 0;
		motor_current = 0;
     bc2:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     bc6:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     bca:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     bce:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
		testf = 0;
     bd2:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     bd6:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     bda:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     bde:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
	}

	//A complementary filter to filter out noise from current readings
	//Also since current readings will vary largely when PWMing this filter will average out the readings
	if (eco_mode)
     be2:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
     be6:	88 23       	and	r24, r24
     be8:	99 f1       	breq	.+102    	; 0xc50 <measure_currents+0x67a>
	{
		vacuum_current = (vacuum_current * 95 + motor_current * 5) / 100;
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	4e eb       	ldi	r20, 0xBE	; 190
     bf0:	52 e4       	ldi	r21, 0x42	; 66
     bf2:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <vacuum_current>
     bf6:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <vacuum_current+0x1>
     bfa:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <vacuum_current+0x2>
     bfe:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <vacuum_current+0x3>
     c02:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     c06:	6b 01       	movw	r12, r22
     c08:	7c 01       	movw	r14, r24
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 ea       	ldi	r20, 0xA0	; 160
     c10:	50 e4       	ldi	r21, 0x40	; 64
     c12:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     c16:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     c1a:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     c1e:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     c22:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	c7 01       	movw	r24, r14
     c2c:	b6 01       	movw	r22, r12
     c2e:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	48 ec       	ldi	r20, 0xC8	; 200
     c38:	52 e4       	ldi	r21, 0x42	; 66
     c3a:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     c3e:	60 93 4a 21 	sts	0x214A, r22	; 0x80214a <vacuum_current>
     c42:	70 93 4b 21 	sts	0x214B, r23	; 0x80214b <vacuum_current+0x1>
     c46:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <vacuum_current+0x2>
     c4a:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <vacuum_current+0x3>
     c4e:	69 c1       	rjmp	.+722    	; 0xf22 <measure_currents+0x94c>
	}
	else
	{
		vacuum_current = (vacuum_current * 90 + motor_current * 10) / 100;
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	44 eb       	ldi	r20, 0xB4	; 180
     c56:	52 e4       	ldi	r21, 0x42	; 66
     c58:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <vacuum_current>
     c5c:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <vacuum_current+0x1>
     c60:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <vacuum_current+0x2>
     c64:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <vacuum_current+0x3>
     c68:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     c6c:	6b 01       	movw	r12, r22
     c6e:	7c 01       	movw	r14, r24
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e2       	ldi	r20, 0x20	; 32
     c76:	51 e4       	ldi	r21, 0x41	; 65
     c78:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     c7c:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     c80:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     c84:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     c88:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     c8c:	9b 01       	movw	r18, r22
     c8e:	ac 01       	movw	r20, r24
     c90:	c7 01       	movw	r24, r14
     c92:	b6 01       	movw	r22, r12
     c94:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	48 ec       	ldi	r20, 0xC8	; 200
     c9e:	52 e4       	ldi	r21, 0x42	; 66
     ca0:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     ca4:	60 93 4a 21 	sts	0x214A, r22	; 0x80214a <vacuum_current>
     ca8:	70 93 4b 21 	sts	0x214B, r23	; 0x80214b <vacuum_current+0x1>
     cac:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <vacuum_current+0x2>
     cb0:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <vacuum_current+0x3>
     cb4:	36 c1       	rjmp	.+620    	; 0xf22 <measure_currents+0x94c>
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 3
		ADCB_CTRLA |= (1 << 5);
     cb6:	88 81       	ld	r24, Y
     cb8:	80 62       	ori	r24, 0x20	; 32
     cba:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 5))YIELD_ADC("23_PRSWPMTR", ADCB_CTRLA);
     cbc:	88 81       	ld	r24, Y
     cbe:	85 fd       	sbrc	r24, 5
     cc0:	fd cf       	rjmp	.-6      	; 0xcbc <measure_currents+0x6e6>
		//Add result to total
		total += ADCB_CH3RES;
     cc2:	f8 01       	movw	r30, r16
     cc4:	60 81       	ld	r22, Z
     cc6:	71 81       	ldd	r23, Z+1	; 0x01
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
     cd0:	9b 01       	movw	r18, r22
     cd2:	ac 01       	movw	r20, r24
     cd4:	c5 01       	movw	r24, r10
     cd6:	b4 01       	movw	r22, r8
     cd8:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     cdc:	4b 01       	movw	r8, r22
     cde:	5c 01       	movw	r10, r24
     ce0:	f1 e0       	ldi	r31, 0x01	; 1
     ce2:	ef 1a       	sub	r14, r31
     ce4:	f1 08       	sbc	r15, r1

void measure_presweep_motor_current(void)
{
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
     ce6:	39 f7       	brne	.-50     	; 0xcb6 <measure_currents+0x6e0>
		while (ADCB_CTRLA & (1 << 5))YIELD_ADC("23_PRSWPMTR", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH3RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES);
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e2       	ldi	r20, 0x20	; 32
     cee:	51 e4       	ldi	r21, 0x41	; 65
     cf0:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     cf4:	4b 01       	movw	r8, r22
     cf6:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4e e3       	ldi	r20, 0x3E	; 62
     cfe:	53 e4       	ldi	r21, 0x43	; 67
     d00:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
     d04:	18 16       	cp	r1, r24
     d06:	0c f0       	brlt	.+2      	; 0xd0a <measure_currents+0x734>
     d08:	78 c0       	rjmp	.+240    	; 0xdfa <measure_currents+0x824>
	{
		total -= ADC_NEG_ADJ;
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	4e e3       	ldi	r20, 0x3E	; 62
     d10:	53 e4       	ldi	r21, 0x43	; 67
     d12:	c5 01       	movw	r24, r10
     d14:	b4 01       	movw	r22, r8
     d16:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     d1a:	4b 01       	movw	r8, r22
     d1c:	5c 01       	movw	r10, r24
		//If the shunt output voltage is less than the off voltage, set current to 0
		float so = total * 0.0005; // 0.0005 = 2.048V/4096 counts
     d1e:	2f e6       	ldi	r18, 0x6F	; 111
     d20:	32 e1       	ldi	r19, 0x12	; 18
     d22:	43 e0       	ldi	r20, 0x03	; 3
     d24:	5a e3       	ldi	r21, 0x3A	; 58
     d26:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     d2a:	6b 01       	movw	r12, r22
     d2c:	7c 01       	movw	r14, r24
		test16_4 = total / 2;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	5f e3       	ldi	r21, 0x3F	; 63
     d36:	c5 01       	movw	r24, r10
     d38:	b4 01       	movw	r22, r8
     d3a:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     d3e:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     d42:	60 93 33 20 	sts	0x2033, r22	; 0x802033 <test16_4>
     d46:	70 93 34 20 	sts	0x2034, r23	; 0x802034 <test16_4+0x1>
		if (so < (presweep_v_off + 0.005))
     d4a:	40 90 b2 20 	lds	r4, 0x20B2	; 0x8020b2 <presweep_v_off>
     d4e:	50 90 b3 20 	lds	r5, 0x20B3	; 0x8020b3 <presweep_v_off+0x1>
     d52:	60 90 b4 20 	lds	r6, 0x20B4	; 0x8020b4 <presweep_v_off+0x2>
     d56:	70 90 b5 20 	lds	r7, 0x20B5	; 0x8020b5 <presweep_v_off+0x3>
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	37 ed       	ldi	r19, 0xD7	; 215
     d5e:	43 ea       	ldi	r20, 0xA3	; 163
     d60:	5b e3       	ldi	r21, 0x3B	; 59
     d62:	c3 01       	movw	r24, r6
     d64:	b2 01       	movw	r22, r4
     d66:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
     d6e:	c7 01       	movw	r24, r14
     d70:	b6 01       	movw	r22, r12
     d72:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
     d76:	88 23       	and	r24, r24
     d78:	8c f4       	brge	.+34     	; 0xd9c <measure_currents+0x7c6>
		{
			total = 0;
			motor_current = 0;
     d7a:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     d7e:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     d82:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     d86:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
			testf = 0;
     d8a:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     d8e:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     d92:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     d96:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
     d9a:	3f c0       	rjmp	.+126    	; 0xe1a <measure_currents+0x844>
		}
		//Otherwise calculate the motor current
		else
		{
			motor_current = (so - presweep_v_off) / AV * R_SENSE_INV;
     d9c:	a3 01       	movw	r20, r6
     d9e:	92 01       	movw	r18, r4
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 ea       	ldi	r20, 0xA0	; 160
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a ef       	ldi	r20, 0xFA	; 250
     dba:	53 e4       	ldi	r21, 0x43	; 67
     dbc:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     dc0:	60 93 40 21 	sts	0x2140, r22	; 0x802140 <motor_current>
     dc4:	70 93 41 21 	sts	0x2141, r23	; 0x802141 <motor_current+0x1>
     dc8:	80 93 42 21 	sts	0x2142, r24	; 0x802142 <motor_current+0x2>
     dcc:	90 93 43 21 	sts	0x2143, r25	; 0x802143 <motor_current+0x3>

			test16 = (uint16_t)(motor_current * 1000);
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a e7       	ldi	r20, 0x7A	; 122
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     ddc:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
     de0:	60 93 5f 23 	sts	0x235F, r22	; 0x80235f <test16>
     de4:	70 93 60 23 	sts	0x2360, r23	; 0x802360 <test16+0x1>
			testf = total;
     de8:	80 92 9d 20 	sts	0x209D, r8	; 0x80209d <testf>
     dec:	90 92 9e 20 	sts	0x209E, r9	; 0x80209e <testf+0x1>
     df0:	a0 92 9f 20 	sts	0x209F, r10	; 0x80209f <testf+0x2>
     df4:	b0 92 a0 20 	sts	0x20A0, r11	; 0x8020a0 <testf+0x3>
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <measure_currents+0x844>
		}
	}
	else
	{
		total = 0;
		motor_current = 0;
     dfa:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <motor_current>
     dfe:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <motor_current+0x1>
     e02:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <motor_current+0x2>
     e06:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <motor_current+0x3>
		testf = 0;
     e0a:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <testf>
     e0e:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <testf+0x1>
     e12:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <testf+0x2>
     e16:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <testf+0x3>
	}

	//A complementary filter to filter out noise from current readings
	//Also since current readings will vary largely when PWMing this filter will average out the readings
	if (eco_mode)
     e1a:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
     e1e:	88 23       	and	r24, r24
     e20:	99 f1       	breq	.+102    	; 0xe88 <measure_currents+0x8b2>
	{
		presweep_current = (presweep_current * 95 + motor_current * 5) / 100;
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4e eb       	ldi	r20, 0xBE	; 190
     e28:	52 e4       	ldi	r21, 0x42	; 66
     e2a:	60 91 6b 20 	lds	r22, 0x206B	; 0x80206b <presweep_current>
     e2e:	70 91 6c 20 	lds	r23, 0x206C	; 0x80206c <presweep_current+0x1>
     e32:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <presweep_current+0x2>
     e36:	90 91 6e 20 	lds	r25, 0x206E	; 0x80206e <presweep_current+0x3>
     e3a:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     e3e:	6b 01       	movw	r12, r22
     e40:	7c 01       	movw	r14, r24
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 ea       	ldi	r20, 0xA0	; 160
     e48:	50 e4       	ldi	r21, 0x40	; 64
     e4a:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     e4e:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     e52:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     e56:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     e5a:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	48 ec       	ldi	r20, 0xC8	; 200
     e70:	52 e4       	ldi	r21, 0x42	; 66
     e72:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     e76:	60 93 6b 20 	sts	0x206B, r22	; 0x80206b <presweep_current>
     e7a:	70 93 6c 20 	sts	0x206C, r23	; 0x80206c <presweep_current+0x1>
     e7e:	80 93 6d 20 	sts	0x206D, r24	; 0x80206d <presweep_current+0x2>
     e82:	90 93 6e 20 	sts	0x206E, r25	; 0x80206e <presweep_current+0x3>
     e86:	5a c0       	rjmp	.+180    	; 0xf3c <measure_currents+0x966>
	}
	else
	{
		presweep_current = (presweep_current * 90 + motor_current * 10) / 100;
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	44 eb       	ldi	r20, 0xB4	; 180
     e8e:	52 e4       	ldi	r21, 0x42	; 66
     e90:	60 91 6b 20 	lds	r22, 0x206B	; 0x80206b <presweep_current>
     e94:	70 91 6c 20 	lds	r23, 0x206C	; 0x80206c <presweep_current+0x1>
     e98:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <presweep_current+0x2>
     e9c:	90 91 6e 20 	lds	r25, 0x206E	; 0x80206e <presweep_current+0x3>
     ea0:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     ea4:	4b 01       	movw	r8, r22
     ea6:	5c 01       	movw	r10, r24
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	60 91 40 21 	lds	r22, 0x2140	; 0x802140 <motor_current>
     eb4:	70 91 41 21 	lds	r23, 0x2141	; 0x802141 <motor_current+0x1>
     eb8:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <motor_current+0x2>
     ebc:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <motor_current+0x3>
     ec0:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
     ec4:	9b 01       	movw	r18, r22
     ec6:	ac 01       	movw	r20, r24
     ec8:	c5 01       	movw	r24, r10
     eca:	b4 01       	movw	r22, r8
     ecc:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	48 ec       	ldi	r20, 0xC8	; 200
     ed6:	52 e4       	ldi	r21, 0x42	; 66
     ed8:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     edc:	60 93 6b 20 	sts	0x206B, r22	; 0x80206b <presweep_current>
     ee0:	70 93 6c 20 	sts	0x206C, r23	; 0x80206c <presweep_current+0x1>
     ee4:	80 93 6d 20 	sts	0x206D, r24	; 0x80206d <presweep_current+0x2>
     ee8:	90 93 6e 20 	sts	0x206E, r25	; 0x80206e <presweep_current+0x3>
{
	measure_brush_1_motor_current();
	measure_brush_2_motor_current();
	measure_vacuum_motor_current();
	measure_presweep_motor_current();
}
     eec:	27 c0       	rjmp	.+78     	; 0xf3c <measure_currents+0x966>

static void measure_brush_1_motor_current(void)
{
	float total = 0;
     eee:	0f 2e       	mov	r0, r31
     ef0:	fa e0       	ldi	r31, 0x0A	; 10
     ef2:	ef 2e       	mov	r14, r31
     ef4:	f1 2c       	mov	r15, r1
     ef6:	f0 2d       	mov	r31, r0
     ef8:	81 2c       	mov	r8, r1
     efa:	91 2c       	mov	r9, r1
     efc:	54 01       	movw	r10, r8
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 1
		ADCB_CTRLA |= (1 << 3);
     efe:	c0 e4       	ldi	r28, 0x40	; 64
     f00:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 3))YIELD_ADC("21_BRMTR2", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH1RES;
     f02:	02 e5       	ldi	r16, 0x52	; 82
     f04:	12 e0       	ldi	r17, 0x02	; 2
     f06:	9f cc       	rjmp	.-1730   	; 0x846 <measure_currents+0x270>
	measure_presweep_motor_current();
}

static void measure_brush_1_motor_current(void)
{
	float total = 0;
     f08:	0f 2e       	mov	r0, r31
     f0a:	fa e0       	ldi	r31, 0x0A	; 10
     f0c:	ef 2e       	mov	r14, r31
     f0e:	f1 2c       	mov	r15, r1
     f10:	f0 2d       	mov	r31, r0
     f12:	81 2c       	mov	r8, r1
     f14:	91 2c       	mov	r9, r1
     f16:	54 01       	movw	r10, r8
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 2
		ADCB_CTRLA |= (1 << 4);
     f18:	c0 e4       	ldi	r28, 0x40	; 64
     f1a:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 4))YIELD_ADC("22_VACMTR", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH2RES;
     f1c:	04 e5       	ldi	r16, 0x54	; 84
     f1e:	12 e0       	ldi	r17, 0x02	; 2
     f20:	ae cd       	rjmp	.-1188   	; 0xa7e <measure_currents+0x4a8>
	measure_presweep_motor_current();
}

static void measure_brush_1_motor_current(void)
{
	float total = 0;
     f22:	0f 2e       	mov	r0, r31
     f24:	fa e0       	ldi	r31, 0x0A	; 10
     f26:	ef 2e       	mov	r14, r31
     f28:	f1 2c       	mov	r15, r1
     f2a:	f0 2d       	mov	r31, r0
     f2c:	81 2c       	mov	r8, r1
     f2e:	91 2c       	mov	r9, r1
     f30:	54 01       	movw	r10, r8
	float total = 0;

	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 3
		ADCB_CTRLA |= (1 << 5);
     f32:	c0 e4       	ldi	r28, 0x40	; 64
     f34:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 5))YIELD_ADC("23_PRSWPMTR", ADCB_CTRLA);
		//Add result to total
		total += ADCB_CH3RES;
     f36:	06 e5       	ldi	r16, 0x56	; 86
     f38:	12 e0       	ldi	r17, 0x02	; 2
     f3a:	bd ce       	rjmp	.-646    	; 0xcb6 <measure_currents+0x6e0>
{
	measure_brush_1_motor_current();
	measure_brush_2_motor_current();
	measure_vacuum_motor_current();
	measure_presweep_motor_current();
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	9f 90       	pop	r9
     f52:	8f 90       	pop	r8
     f54:	7f 90       	pop	r7
     f56:	6f 90       	pop	r6
     f58:	5f 90       	pop	r5
     f5a:	4f 90       	pop	r4
     f5c:	08 95       	ret

00000f5e <measure_v_off>:
		presweep_current = (presweep_current * 90 + motor_current * 10) / 100;
	}
}

void measure_v_off(void)
{
     f5e:	8f 92       	push	r8
     f60:	9f 92       	push	r9
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	0f 2e       	mov	r0, r31
     f74:	f4 e6       	ldi	r31, 0x64	; 100
     f76:	ef 2e       	mov	r14, r31
     f78:	f1 2c       	mov	r15, r1
     f7a:	f0 2d       	mov	r31, r0
	float total = 0;
     f7c:	81 2c       	mov	r8, r1
     f7e:	91 2c       	mov	r9, r1
     f80:	54 01       	movw	r10, r8

	//Measure voff for brush 1
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 0
		ADCB_CTRLA |= (1 << 2);
     f82:	c0 e4       	ldi	r28, 0x40	; 64
     f84:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 2))YIELD_ADC("20_BR1_VOFF", ADCB_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCB_CH0RES;
     f86:	00 e5       	ldi	r16, 0x50	; 80
     f88:	12 e0       	ldi	r17, 0x02	; 2

	//Measure voff for brush 1
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 0
		ADCB_CTRLA |= (1 << 2);
     f8a:	88 81       	ld	r24, Y
     f8c:	84 60       	ori	r24, 0x04	; 4
     f8e:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 2))YIELD_ADC("20_BR1_VOFF", ADCB_CTRLA);
     f90:	88 81       	ld	r24, Y
     f92:	82 fd       	sbrc	r24, 2
     f94:	fd cf       	rjmp	.-6      	; 0xf90 <measure_v_off+0x32>
     f96:	8f e3       	ldi	r24, 0x3F	; 63
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <measure_v_off+0x3c>
     f9e:	00 c0       	rjmp	.+0      	; 0xfa0 <measure_v_off+0x42>
     fa0:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCB_CH0RES;
     fa2:	f8 01       	movw	r30, r16
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	c5 01       	movw	r24, r10
     fb6:	b4 01       	movw	r22, r8
     fb8:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
     fbc:	4b 01       	movw	r8, r22
     fbe:	5c 01       	movw	r10, r24
     fc0:	f1 e0       	ldi	r31, 0x01	; 1
     fc2:	ef 1a       	sub	r14, r31
     fc4:	f1 08       	sbc	r15, r1
void measure_v_off(void)
{
	float total = 0;

	//Measure voff for brush 1
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
     fc6:	09 f7       	brne	.-62     	; 0xf8a <measure_v_off+0x2c>
		//Add result to total
		_delay_us(40);
		total += ADCB_CH0RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES_VOFF);
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	48 ec       	ldi	r20, 0xC8	; 200
     fce:	52 e4       	ldi	r21, 0x42	; 66
     fd0:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
     fd4:	4b 01       	movw	r8, r22
     fd6:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4e e3       	ldi	r20, 0x3E	; 62
     fde:	53 e4       	ldi	r21, 0x43	; 67
     fe0:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	bc f4       	brge	.+46     	; 0x1016 <measure_v_off+0xb8>
	{
		total -= ADC_NEG_ADJ;
		brush_1_v_off = total * 0.0005; //0.0005 = 2.048V / 4096 counts
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4e e3       	ldi	r20, 0x3E	; 62
     fee:	53 e4       	ldi	r21, 0x43	; 67
     ff0:	c5 01       	movw	r24, r10
     ff2:	b4 01       	movw	r22, r8
     ff4:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
     ff8:	2f e6       	ldi	r18, 0x6F	; 111
     ffa:	32 e1       	ldi	r19, 0x12	; 18
     ffc:	43 e0       	ldi	r20, 0x03	; 3
     ffe:	5a e3       	ldi	r21, 0x3A	; 58
    1000:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    1004:	60 93 99 20 	sts	0x2099, r22	; 0x802099 <brush_1_v_off>
    1008:	70 93 9a 20 	sts	0x209A, r23	; 0x80209a <brush_1_v_off+0x1>
    100c:	80 93 9b 20 	sts	0x209B, r24	; 0x80209b <brush_1_v_off+0x2>
    1010:	90 93 9c 20 	sts	0x209C, r25	; 0x80209c <brush_1_v_off+0x3>
    1014:	f6 c0       	rjmp	.+492    	; 0x1202 <measure_v_off+0x2a4>
	}
	else
	{
		brush_1_v_off = 0;
    1016:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <brush_1_v_off>
    101a:	10 92 9a 20 	sts	0x209A, r1	; 0x80209a <brush_1_v_off+0x1>
    101e:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <brush_1_v_off+0x2>
    1022:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <brush_1_v_off+0x3>
    1026:	ed c0       	rjmp	.+474    	; 0x1202 <measure_v_off+0x2a4>

	//Measure voff for brush 2
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 2
		ADCB_CTRLA |= (1 << 3);
    1028:	88 81       	ld	r24, Y
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 3))YIELD_ADC("21_BR2_VOFF", ADCB_CTRLA);
    102e:	88 81       	ld	r24, Y
    1030:	83 fd       	sbrc	r24, 3
    1032:	fd cf       	rjmp	.-6      	; 0x102e <measure_v_off+0xd0>
    1034:	8f e3       	ldi	r24, 0x3F	; 63
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <measure_v_off+0xda>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <measure_v_off+0xe0>
    103e:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCB_CH1RES;
    1040:	f8 01       	movw	r30, r16
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	c5 01       	movw	r24, r10
    1054:	b4 01       	movw	r22, r8
    1056:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    105a:	4b 01       	movw	r8, r22
    105c:	5c 01       	movw	r10, r24
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	ef 1a       	sub	r14, r31
    1062:	f1 08       	sbc	r15, r1
	}

	total = 0;

	//Measure voff for brush 2
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
    1064:	09 f7       	brne	.-62     	; 0x1028 <measure_v_off+0xca>
		//Add result to total
		_delay_us(40);
		total += ADCB_CH1RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES_VOFF);
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	48 ec       	ldi	r20, 0xC8	; 200
    106c:	52 e4       	ldi	r21, 0x42	; 66
    106e:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    1072:	4b 01       	movw	r8, r22
    1074:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4e e3       	ldi	r20, 0x3E	; 62
    107c:	53 e4       	ldi	r21, 0x43	; 67
    107e:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    1082:	18 16       	cp	r1, r24
    1084:	bc f4       	brge	.+46     	; 0x10b4 <measure_v_off+0x156>
	{
		total -= ADC_NEG_ADJ;
		brush_2_v_off = total * 0.0005; //0.0005 = 2.048V / 4096 counts
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4e e3       	ldi	r20, 0x3E	; 62
    108c:	53 e4       	ldi	r21, 0x43	; 67
    108e:	c5 01       	movw	r24, r10
    1090:	b4 01       	movw	r22, r8
    1092:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
    1096:	2f e6       	ldi	r18, 0x6F	; 111
    1098:	32 e1       	ldi	r19, 0x12	; 18
    109a:	43 e0       	ldi	r20, 0x03	; 3
    109c:	5a e3       	ldi	r21, 0x3A	; 58
    109e:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    10a2:	60 93 76 20 	sts	0x2076, r22	; 0x802076 <brush_2_v_off>
    10a6:	70 93 77 20 	sts	0x2077, r23	; 0x802077 <brush_2_v_off+0x1>
    10aa:	80 93 78 20 	sts	0x2078, r24	; 0x802078 <brush_2_v_off+0x2>
    10ae:	90 93 79 20 	sts	0x2079, r25	; 0x802079 <brush_2_v_off+0x3>
    10b2:	b4 c0       	rjmp	.+360    	; 0x121c <measure_v_off+0x2be>
	}
	else
	{
		brush_2_v_off = 0;
    10b4:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <brush_2_v_off>
    10b8:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <brush_2_v_off+0x1>
    10bc:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <brush_2_v_off+0x2>
    10c0:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <brush_2_v_off+0x3>
    10c4:	ab c0       	rjmp	.+342    	; 0x121c <measure_v_off+0x2be>

	//Measure voff for vacuum
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 2
		ADCB_CTRLA |= (1 << 4);
    10c6:	88 81       	ld	r24, Y
    10c8:	80 61       	ori	r24, 0x10	; 16
    10ca:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 4))YIELD_ADC("22_VAC_VOFF", ADCB_CTRLA);
    10cc:	88 81       	ld	r24, Y
    10ce:	84 fd       	sbrc	r24, 4
    10d0:	fd cf       	rjmp	.-6      	; 0x10cc <measure_v_off+0x16e>
    10d2:	8f e3       	ldi	r24, 0x3F	; 63
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <measure_v_off+0x178>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <measure_v_off+0x17e>
    10dc:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCB_CH2RES;
    10de:	f8 01       	movw	r30, r16
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	c5 01       	movw	r24, r10
    10f2:	b4 01       	movw	r22, r8
    10f4:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    10f8:	4b 01       	movw	r8, r22
    10fa:	5c 01       	movw	r10, r24
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	ef 1a       	sub	r14, r31
    1100:	f1 08       	sbc	r15, r1
	}

	total = 0;

	//Measure voff for vacuum
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
    1102:	09 f7       	brne	.-62     	; 0x10c6 <measure_v_off+0x168>
		//Add result to total
		_delay_us(40);
		total += ADCB_CH2RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES_VOFF);
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	48 ec       	ldi	r20, 0xC8	; 200
    110a:	52 e4       	ldi	r21, 0x42	; 66
    110c:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    1110:	4b 01       	movw	r8, r22
    1112:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	4e e3       	ldi	r20, 0x3E	; 62
    111a:	53 e4       	ldi	r21, 0x43	; 67
    111c:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    1120:	18 16       	cp	r1, r24
    1122:	bc f4       	brge	.+46     	; 0x1152 <measure_v_off+0x1f4>
	{
		total -= ADC_NEG_ADJ;
		vacuum_v_off = total * 0.0005; //0.0005 = 2.048V / 4096 counts
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4e e3       	ldi	r20, 0x3E	; 62
    112a:	53 e4       	ldi	r21, 0x43	; 67
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
    1134:	2f e6       	ldi	r18, 0x6F	; 111
    1136:	32 e1       	ldi	r19, 0x12	; 18
    1138:	43 e0       	ldi	r20, 0x03	; 3
    113a:	5a e3       	ldi	r21, 0x3A	; 58
    113c:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    1140:	60 93 a9 20 	sts	0x20A9, r22	; 0x8020a9 <vacuum_v_off>
    1144:	70 93 aa 20 	sts	0x20AA, r23	; 0x8020aa <vacuum_v_off+0x1>
    1148:	80 93 ab 20 	sts	0x20AB, r24	; 0x8020ab <vacuum_v_off+0x2>
    114c:	90 93 ac 20 	sts	0x20AC, r25	; 0x8020ac <vacuum_v_off+0x3>
    1150:	72 c0       	rjmp	.+228    	; 0x1236 <measure_v_off+0x2d8>
	}
	else
	{
		vacuum_v_off = 0;
    1152:	10 92 a9 20 	sts	0x20A9, r1	; 0x8020a9 <vacuum_v_off>
    1156:	10 92 aa 20 	sts	0x20AA, r1	; 0x8020aa <vacuum_v_off+0x1>
    115a:	10 92 ab 20 	sts	0x20AB, r1	; 0x8020ab <vacuum_v_off+0x2>
    115e:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <vacuum_v_off+0x3>
    1162:	69 c0       	rjmp	.+210    	; 0x1236 <measure_v_off+0x2d8>

	//Measure voff for presweep
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 3
		ADCB_CTRLA |= (1 << 5);
    1164:	88 81       	ld	r24, Y
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 5))YIELD_ADC("23_PRSWP_VOFF", ADCB_CTRLA);
    116a:	88 81       	ld	r24, Y
    116c:	85 fd       	sbrc	r24, 5
    116e:	fd cf       	rjmp	.-6      	; 0x116a <measure_v_off+0x20c>
    1170:	8f e3       	ldi	r24, 0x3F	; 63
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <measure_v_off+0x216>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <measure_v_off+0x21c>
    117a:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCB_CH3RES;
    117c:	f8 01       	movw	r30, r16
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    118a:	9b 01       	movw	r18, r22
    118c:	ac 01       	movw	r20, r24
    118e:	c5 01       	movw	r24, r10
    1190:	b4 01       	movw	r22, r8
    1192:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    1196:	4b 01       	movw	r8, r22
    1198:	5c 01       	movw	r10, r24
    119a:	f1 e0       	ldi	r31, 0x01	; 1
    119c:	ef 1a       	sub	r14, r31
    119e:	f1 08       	sbc	r15, r1
	}

	total = 0;

	//Measure voff for presweep
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
    11a0:	09 f7       	brne	.-62     	; 0x1164 <measure_v_off+0x206>
		//Add result to total
		_delay_us(40);
		total += ADCB_CH3RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES_VOFF);
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	48 ec       	ldi	r20, 0xC8	; 200
    11a8:	52 e4       	ldi	r21, 0x42	; 66
    11aa:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    11ae:	4b 01       	movw	r8, r22
    11b0:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4e e3       	ldi	r20, 0x3E	; 62
    11b8:	53 e4       	ldi	r21, 0x43	; 67
    11ba:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    11be:	18 16       	cp	r1, r24
    11c0:	bc f4       	brge	.+46     	; 0x11f0 <measure_v_off+0x292>
	{
		total -= ADC_NEG_ADJ;
		presweep_v_off = total * 0.0005; //0.0005 = 2.048V / 4096 counts
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4e e3       	ldi	r20, 0x3E	; 62
    11c8:	53 e4       	ldi	r21, 0x43	; 67
    11ca:	c5 01       	movw	r24, r10
    11cc:	b4 01       	movw	r22, r8
    11ce:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
    11d2:	2f e6       	ldi	r18, 0x6F	; 111
    11d4:	32 e1       	ldi	r19, 0x12	; 18
    11d6:	43 e0       	ldi	r20, 0x03	; 3
    11d8:	5a e3       	ldi	r21, 0x3A	; 58
    11da:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    11de:	60 93 b2 20 	sts	0x20B2, r22	; 0x8020b2 <presweep_v_off>
    11e2:	70 93 b3 20 	sts	0x20B3, r23	; 0x8020b3 <presweep_v_off+0x1>
    11e6:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <presweep_v_off+0x2>
    11ea:	90 93 b5 20 	sts	0x20B5, r25	; 0x8020b5 <presweep_v_off+0x3>
    11ee:	30 c0       	rjmp	.+96     	; 0x1250 <measure_v_off+0x2f2>
	}
	else
	{
		presweep_v_off = 0;
    11f0:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <presweep_v_off>
    11f4:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <presweep_v_off+0x1>
    11f8:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <presweep_v_off+0x2>
    11fc:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <presweep_v_off+0x3>
	}
}
    1200:	27 c0       	rjmp	.+78     	; 0x1250 <measure_v_off+0x2f2>
	}
}

void measure_v_off(void)
{
	float total = 0;
    1202:	0f 2e       	mov	r0, r31
    1204:	f4 e6       	ldi	r31, 0x64	; 100
    1206:	ef 2e       	mov	r14, r31
    1208:	f1 2c       	mov	r15, r1
    120a:	f0 2d       	mov	r31, r0
    120c:	81 2c       	mov	r8, r1
    120e:	91 2c       	mov	r9, r1
    1210:	54 01       	movw	r10, r8

	//Measure voff for brush 2
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 2
		ADCB_CTRLA |= (1 << 3);
    1212:	c0 e4       	ldi	r28, 0x40	; 64
    1214:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 3))YIELD_ADC("21_BR2_VOFF", ADCB_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCB_CH1RES;
    1216:	02 e5       	ldi	r16, 0x52	; 82
    1218:	12 e0       	ldi	r17, 0x02	; 2
    121a:	06 cf       	rjmp	.-500    	; 0x1028 <measure_v_off+0xca>
	}
}

void measure_v_off(void)
{
	float total = 0;
    121c:	0f 2e       	mov	r0, r31
    121e:	f4 e6       	ldi	r31, 0x64	; 100
    1220:	ef 2e       	mov	r14, r31
    1222:	f1 2c       	mov	r15, r1
    1224:	f0 2d       	mov	r31, r0
    1226:	81 2c       	mov	r8, r1
    1228:	91 2c       	mov	r9, r1
    122a:	54 01       	movw	r10, r8

	//Measure voff for vacuum
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 2
		ADCB_CTRLA |= (1 << 4);
    122c:	c0 e4       	ldi	r28, 0x40	; 64
    122e:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 4))YIELD_ADC("22_VAC_VOFF", ADCB_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCB_CH2RES;
    1230:	04 e5       	ldi	r16, 0x54	; 84
    1232:	12 e0       	ldi	r17, 0x02	; 2
    1234:	48 cf       	rjmp	.-368    	; 0x10c6 <measure_v_off+0x168>
	}
}

void measure_v_off(void)
{
	float total = 0;
    1236:	0f 2e       	mov	r0, r31
    1238:	f4 e6       	ldi	r31, 0x64	; 100
    123a:	ef 2e       	mov	r14, r31
    123c:	f1 2c       	mov	r15, r1
    123e:	f0 2d       	mov	r31, r0
    1240:	81 2c       	mov	r8, r1
    1242:	91 2c       	mov	r9, r1
    1244:	54 01       	movw	r10, r8

	//Measure voff for presweep
	for (uint16_t i = 0; i < NUM_SAMPLES_VOFF; i++)
	{
		//Start channel 3
		ADCB_CTRLA |= (1 << 5);
    1246:	c0 e4       	ldi	r28, 0x40	; 64
    1248:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCB_CTRLA & (1 << 5))YIELD_ADC("23_PRSWP_VOFF", ADCB_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCB_CH3RES;
    124a:	06 e5       	ldi	r16, 0x56	; 86
    124c:	12 e0       	ldi	r17, 0x02	; 2
    124e:	8a cf       	rjmp	.-236    	; 0x1164 <measure_v_off+0x206>
	}
	else
	{
		presweep_v_off = 0;
	}
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	bf 90       	pop	r11
    125e:	af 90       	pop	r10
    1260:	9f 90       	pop	r9
    1262:	8f 90       	pop	r8
    1264:	08 95       	ret

00001266 <initialize_alarms>:

//Start alarm timer for debouncing the alarms
void start_alarm_timer(void)
{
	start_100_ms_timer();
	alarm_timer_count = 0;
    1266:	10 92 a6 25 	sts	0x25A6, r1	; 0x8025a6 <send_top_flag>
    126a:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <log_top_event>
    126e:	80 ee       	ldi	r24, 0xE0	; 224
    1270:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    1274:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    1278:	86 ff       	sbrs	r24, 6
    127a:	07 c0       	rjmp	.+14     	; 0x128a <initialize_alarms+0x24>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 4f 20 	sts	0x204F, r24	; 0x80204f <top_debounce_timer>
    1282:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <top_debounce_count>
    1286:	0e 94 49 29 	call	0x5292	; 0x5292 <start_100_ms_timer>
    128a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    128e:	88 23       	and	r24, r24
    1290:	1c f0       	brlt	.+6      	; 0x1298 <initialize_alarms+0x32>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 97 25 	sts	0x2597, r24	; 0x802597 <float_sensor_timer>
    1298:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    129c:	85 fd       	sbrc	r24, 5
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <initialize_alarms+0x40>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 89 20 	sts	0x2089, r24	; 0x802089 <fault_timer>
    12a6:	80 ee       	ldi	r24, 0xE0	; 224
    12a8:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <__TEXT_REGION_LENGTH__+0x70068a>
    12ac:	95 e0       	ldi	r25, 0x05	; 5
    12ae:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <__TEXT_REGION_LENGTH__+0x700689>
    12b2:	89 e1       	ldi	r24, 0x19	; 25
    12b4:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <__TEXT_REGION_LENGTH__+0x700695>
    12b8:	2a e1       	ldi	r18, 0x1A	; 26
    12ba:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <__TEXT_REGION_LENGTH__+0x700696>
    12be:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <__TEXT_REGION_LENGTH__+0x700697>
    12c2:	86 e0       	ldi	r24, 0x06	; 6
    12c4:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
    12ce:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <__TEXT_REGION_LENGTH__+0x700629>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <__TEXT_REGION_LENGTH__+0x700631>
    12d8:	2e e1       	ldi	r18, 0x1E	; 30
    12da:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    12de:	20 93 0a 06 	sts	0x060A, r18	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    12e2:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
    12e6:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    12ea:	10 92 12 06 	sts	0x0612, r1	; 0x800612 <__TEXT_REGION_LENGTH__+0x700612>
    12ee:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <__TEXT_REGION_LENGTH__+0x700613>
    12f2:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <__TEXT_REGION_LENGTH__+0x700614>
    12f6:	2f e0       	ldi	r18, 0x0F	; 15
    12f8:	20 93 62 06 	sts	0x0662, r18	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    12fc:	20 93 6a 06 	sts	0x066A, r18	; 0x80066a <__TEXT_REGION_LENGTH__+0x70066a>
    1300:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <__TEXT_REGION_LENGTH__+0x700669>
    1304:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    1308:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <__TEXT_REGION_LENGTH__+0x700671>
    130c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    1310:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <__TEXT_REGION_LENGTH__+0x700673>
    1314:	08 95       	ret

00001316 <send_alarm>:
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	1f 92       	push	r1
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	9e 01       	movw	r18, r28
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	8c ea       	ldi	r24, 0xAC	; 172
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    1334:	0f 90       	pop	r0
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <send_top_error>:
}

//If TOP error is detected, inform the other boards
void send_top_error(void)
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	1f 92       	push	r1
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = A2_CAN;
    1346:	82 ea       	ldi	r24, 0xA2	; 162
    1348:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(TOP_CAN, 0, 1, message);
    134a:	9e 01       	movw	r18, r28
    134c:	2f 5f       	subi	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	8a ea       	ldi	r24, 0xAA	; 170
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	83 ed       	ldi	r24, 0xD3	; 211
    1360:	90 e3       	ldi	r25, 0x30	; 48
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <send_top_error+0x26>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <send_top_error+0x30>
    136c:	00 00       	nop
	_delay_ms(500);
}
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <send_fuse_error>:

//If fuse error is detected, inform the other boards
void send_fuse_error(void)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	1f 92       	push	r1
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = FUSE_FAIL;
    1380:	8c e0       	ldi	r24, 0x0C	; 12
    1382:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    1384:	9e 01       	movw	r18, r28
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	8c ea       	ldi	r24, 0xAC	; 172
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    1396:	2f ef       	ldi	r18, 0xFF	; 255
    1398:	83 ed       	ldi	r24, 0xD3	; 211
    139a:	90 e3       	ldi	r25, 0x30	; 48
    139c:	21 50       	subi	r18, 0x01	; 1
    139e:	80 40       	sbci	r24, 0x00	; 0
    13a0:	90 40       	sbci	r25, 0x00	; 0
    13a2:	e1 f7       	brne	.-8      	; 0x139c <send_fuse_error+0x26>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <send_fuse_error+0x30>
    13a6:	00 00       	nop
	_delay_ms(500);
}
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <send_fault_error>:

//If 8701 fault is detected, inform the other boards
void send_fault_error(void)
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	1f 92       	push	r1
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = FAULT_FAIL;
    13ba:	8f e0       	ldi	r24, 0x0F	; 15
    13bc:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    13be:	9e 01       	movw	r18, r28
    13c0:	2f 5f       	subi	r18, 0xFF	; 255
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	8c ea       	ldi	r24, 0xAC	; 172
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    13d0:	2f ef       	ldi	r18, 0xFF	; 255
    13d2:	83 ed       	ldi	r24, 0xD3	; 211
    13d4:	90 e3       	ldi	r25, 0x30	; 48
    13d6:	21 50       	subi	r18, 0x01	; 1
    13d8:	80 40       	sbci	r24, 0x00	; 0
    13da:	90 40       	sbci	r25, 0x00	; 0
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <send_fault_error+0x26>
    13de:	00 c0       	rjmp	.+0      	; 0x13e0 <send_fault_error+0x30>
    13e0:	00 00       	nop
	_delay_ms(500);
}
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <send_bm_overcurrent_error>:

//If brush motor overcurrent is detected through sns_out pin
void send_bm_overcurrent_error(void)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	1f 92       	push	r1
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = BM_OVERCURRENT;
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    13f8:	9e 01       	movw	r18, r28
    13fa:	2f 5f       	subi	r18, 0xFF	; 255
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	8c ea       	ldi	r24, 0xAC	; 172
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	83 ed       	ldi	r24, 0xD3	; 211
    140e:	90 e3       	ldi	r25, 0x30	; 48
    1410:	21 50       	subi	r18, 0x01	; 1
    1412:	80 40       	sbci	r24, 0x00	; 0
    1414:	90 40       	sbci	r25, 0x00	; 0
    1416:	e1 f7       	brne	.-8      	; 0x1410 <send_bm_overcurrent_error+0x26>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <send_bm_overcurrent_error+0x30>
    141a:	00 00       	nop
	_delay_ms(500);
}
    141c:	0f 90       	pop	r0
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <send_tank_full>:

//If tank full is detected, inform the other boards
void send_tank_full(void)
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	1f 92       	push	r1
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	transmit_CAN(FLOAT_CAN, 0, 0, message);
    142e:	9e 01       	movw	r18, r28
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	8b ea       	ldi	r24, 0xAB	; 171
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    1440:	0f 90       	pop	r0
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <__vector_43>:

ISR(TOP_FLOAT_INT)
{
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	08 b6       	in	r0, 0x38	; 56
    1454:	0f 92       	push	r0
    1456:	18 be       	out	0x38, r1	; 56
    1458:	09 b6       	in	r0, 0x39	; 57
    145a:	0f 92       	push	r0
    145c:	19 be       	out	0x39, r1	; 57
    145e:	0b b6       	in	r0, 0x3b	; 59
    1460:	0f 92       	push	r0
    1462:	1b be       	out	0x3b, r1	; 59
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
	//If TOP pin is low, start a debounce timer of 500 ms to make sure pin went low
	if (PORTE_IN & (1 << TOP_PIN))
    147c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    1480:	86 ff       	sbrs	r24, 6
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <__vector_43+0x4a>
	{
#ifndef BENCH_TEST //IVA002: Suppress the error in bench testing
		top_debounce_timer = ON;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 4f 20 	sts	0x204F, r24	; 0x80204f <top_debounce_timer>
		top_debounce_count = 0;
    148a:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <top_debounce_count>
		start_100_ms_timer();
    148e:	0e 94 49 29 	call	0x5292	; 0x5292 <start_100_ms_timer>
#endif
	}
	//If FLOAT pin is low, start an 8 second timer to make sure float sensor is reading full tank
	if (!(PORTE_IN & (1 << FLOAT_PIN)))
    1492:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    1496:	88 23       	and	r24, r24
    1498:	1c f0       	brlt	.+6      	; 0x14a0 <__vector_43+0x58>
	{
		float_sensor_timer = ON;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 93 97 25 	sts	0x2597, r24	; 0x802597 <float_sensor_timer>
	}
	if (!(PORTE_IN & (1 << FAULT_8701)))
    14a0:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    14a4:	85 fd       	sbrc	r24, 5
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <__vector_43+0x6a>
	{
		fault_timer = ON;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 89 20 	sts	0x2089, r24	; 0x802089 <fault_timer>
		fault_timer_count = 0;
    14ae:	10 92 79 25 	sts	0x2579, r1	; 0x802579 <fault_timer_count>
	}
}
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0b be       	out	0x3b, r0	; 59
    14ce:	0f 90       	pop	r0
    14d0:	09 be       	out	0x39, r0	; 57
    14d2:	0f 90       	pop	r0
    14d4:	08 be       	out	0x38, r0	; 56
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_64>:

ISR(SNS_OUT_INT)
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	08 b6       	in	r0, 0x38	; 56
    14ec:	0f 92       	push	r0
    14ee:	18 be       	out	0x38, r1	; 56
    14f0:	09 b6       	in	r0, 0x39	; 57
    14f2:	0f 92       	push	r0
    14f4:	19 be       	out	0x39, r1	; 57
    14f6:	0b b6       	in	r0, 0x3b	; 59
    14f8:	0f 92       	push	r0
    14fa:	1b be       	out	0x3b, r1	; 59
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
	//horn_set(TGL);
	if ((PORTD_IN & ((1 << SNS_OUT_BM1) | (1 << SNS_OUT_BM2))) && brush_sns_out_count <= MAX_SNS_OUT_COUNT)
    1514:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    1518:	83 70       	andi	r24, 0x03	; 3
    151a:	09 f4       	brne	.+2      	; 0x151e <__vector_64+0x3e>
    151c:	8b c0       	rjmp	.+278    	; 0x1634 <__vector_64+0x154>
    151e:	60 91 98 25 	lds	r22, 0x2598	; 0x802598 <brush_sns_out_count>
    1522:	70 91 99 25 	lds	r23, 0x2599	; 0x802599 <brush_sns_out_count+0x1>
    1526:	80 91 9a 25 	lds	r24, 0x259A	; 0x80259a <brush_sns_out_count+0x2>
    152a:	90 91 9b 25 	lds	r25, 0x259B	; 0x80259b <brush_sns_out_count+0x3>
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e6       	ldi	r19, 0x60	; 96
    1532:	4a e6       	ldi	r20, 0x6A	; 106
    1534:	56 e4       	ldi	r21, 0x46	; 70
    1536:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
    153a:	18 16       	cp	r1, r24
    153c:	0c f4       	brge	.+2      	; 0x1540 <__vector_64+0x60>
    153e:	7a c0       	rjmp	.+244    	; 0x1634 <__vector_64+0x154>
	{
		if (brush_sns_out_count < MAX_SNS_OUT_COUNT)
    1540:	60 91 98 25 	lds	r22, 0x2598	; 0x802598 <brush_sns_out_count>
    1544:	70 91 99 25 	lds	r23, 0x2599	; 0x802599 <brush_sns_out_count+0x1>
    1548:	80 91 9a 25 	lds	r24, 0x259A	; 0x80259a <brush_sns_out_count+0x2>
    154c:	90 91 9b 25 	lds	r25, 0x259B	; 0x80259b <brush_sns_out_count+0x3>
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e6       	ldi	r19, 0x60	; 96
    1554:	4a e6       	ldi	r20, 0x6A	; 106
    1556:	56 e4       	ldi	r21, 0x46	; 70
    1558:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
    155c:	88 23       	and	r24, r24
    155e:	b4 f4       	brge	.+44     	; 0x158c <__vector_64+0xac>
			brush_sns_out_count++;
    1560:	60 91 98 25 	lds	r22, 0x2598	; 0x802598 <brush_sns_out_count>
    1564:	70 91 99 25 	lds	r23, 0x2599	; 0x802599 <brush_sns_out_count+0x1>
    1568:	80 91 9a 25 	lds	r24, 0x259A	; 0x80259a <brush_sns_out_count+0x2>
    156c:	90 91 9b 25 	lds	r25, 0x259B	; 0x80259b <brush_sns_out_count+0x3>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    157c:	60 93 98 25 	sts	0x2598, r22	; 0x802598 <brush_sns_out_count>
    1580:	70 93 99 25 	sts	0x2599, r23	; 0x802599 <brush_sns_out_count+0x1>
    1584:	80 93 9a 25 	sts	0x259A, r24	; 0x80259a <brush_sns_out_count+0x2>
    1588:	90 93 9b 25 	sts	0x259B, r25	; 0x80259b <brush_sns_out_count+0x3>
		brush_sns_out_timer = ON;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 8b 20 	sts	0x208B, r24	; 0x80208b <brush_sns_out_timer>
		if ((brush_sns_out_count >= MAX_SNS_OUT_COUNT) && (brush_sns_out_timer_count == 5))
    1592:	60 91 98 25 	lds	r22, 0x2598	; 0x802598 <brush_sns_out_count>
    1596:	70 91 99 25 	lds	r23, 0x2599	; 0x802599 <brush_sns_out_count+0x1>
    159a:	80 91 9a 25 	lds	r24, 0x259A	; 0x80259a <brush_sns_out_count+0x2>
    159e:	90 91 9b 25 	lds	r25, 0x259B	; 0x80259b <brush_sns_out_count+0x3>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e6       	ldi	r19, 0x60	; 96
    15a6:	4a e6       	ldi	r20, 0x6A	; 106
    15a8:	56 e4       	ldi	r21, 0x46	; 70
    15aa:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    15ae:	88 23       	and	r24, r24
    15b0:	0c f1       	brlt	.+66     	; 0x15f4 <__vector_64+0x114>
    15b2:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <brush_sns_out_timer_count>
    15b6:	85 30       	cpi	r24, 0x05	; 5
    15b8:	e9 f4       	brne	.+58     	; 0x15f4 <__vector_64+0x114>
		{
			send_brush_overcurrent_alarm = TRUE;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 54 23 	sts	0x2354, r24	; 0x802354 <send_brush_overcurrent_alarm>
			brush_sns_out_count = 0;
    15c0:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <brush_sns_out_count>
    15c4:	10 92 99 25 	sts	0x2599, r1	; 0x802599 <brush_sns_out_count+0x1>
    15c8:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <brush_sns_out_count+0x2>
    15cc:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <brush_sns_out_count+0x3>

			//Disable all 9201 devices
			PORTF_OUTSET = (1 << DISABLE_9201);
    15d0:	80 e4       	ldi	r24, 0x40	; 64
    15d2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

			//Disable all 8701 devices
			PORTE_OUTCLR = (1 << ENABLE_8701);
    15d6:	80 e1       	ldi	r24, 0x10	; 16
    15d8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

			water_pump_set(OFF, OFF);
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
			Solenoid_set(OFF);
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
			detergent_pump_set(OFF, OFF);
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    15f2:	20 c0       	rjmp	.+64     	; 0x1634 <__vector_64+0x154>

		}
		else if ((brush_sns_out_count < MAX_SNS_OUT_COUNT) && (brush_sns_out_timer_count == 5))
    15f4:	60 91 98 25 	lds	r22, 0x2598	; 0x802598 <brush_sns_out_count>
    15f8:	70 91 99 25 	lds	r23, 0x2599	; 0x802599 <brush_sns_out_count+0x1>
    15fc:	80 91 9a 25 	lds	r24, 0x259A	; 0x80259a <brush_sns_out_count+0x2>
    1600:	90 91 9b 25 	lds	r25, 0x259B	; 0x80259b <brush_sns_out_count+0x3>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e6       	ldi	r19, 0x60	; 96
    1608:	4a e6       	ldi	r20, 0x6A	; 106
    160a:	56 e4       	ldi	r21, 0x46	; 70
    160c:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
    1610:	88 23       	and	r24, r24
    1612:	84 f4       	brge	.+32     	; 0x1634 <__vector_64+0x154>
    1614:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <brush_sns_out_timer_count>
    1618:	85 30       	cpi	r24, 0x05	; 5
    161a:	61 f4       	brne	.+24     	; 0x1634 <__vector_64+0x154>
		{

			brush_sns_out_timer_count = 0;
    161c:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <brush_sns_out_timer_count>
			brush_sns_out_timer = OFF;
    1620:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <brush_sns_out_timer>
			brush_sns_out_count = 0;
    1624:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <brush_sns_out_count>
    1628:	10 92 99 25 	sts	0x2599, r1	; 0x802599 <brush_sns_out_count+0x1>
    162c:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <brush_sns_out_count+0x2>
    1630:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <brush_sns_out_count+0x3>
			//horn_set(TGL);

		}
	}

}
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0b be       	out	0x3b, r0	; 59
    1650:	0f 90       	pop	r0
    1652:	09 be       	out	0x39, r0	; 57
    1654:	0f 90       	pop	r0
    1656:	08 be       	out	0x38, r0	; 56
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_34>:

//If pin that checks for very low voltage goes high, wait in this interrupt
ISR(POWER_DOWN_INT)
{
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	08 b6       	in	r0, 0x38	; 56
    166e:	0f 92       	push	r0
    1670:	18 be       	out	0x38, r1	; 56
    1672:	0b b6       	in	r0, 0x3b	; 59
    1674:	0f 92       	push	r0
    1676:	1b be       	out	0x3b, r1	; 59
    1678:	8f 93       	push	r24
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
	while (POWERING_DOWN) {};
    167e:	e8 e2       	ldi	r30, 0x28	; 40
    1680:	f6 e0       	ldi	r31, 0x06	; 6
    1682:	80 81       	ld	r24, Z
    1684:	81 fd       	sbrc	r24, 1
    1686:	fd cf       	rjmp	.-6      	; 0x1682 <__vector_34+0x20>
}
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	8f 91       	pop	r24
    168e:	0f 90       	pop	r0
    1690:	0b be       	out	0x3b, r0	; 59
    1692:	0f 90       	pop	r0
    1694:	08 be       	out	0x38, r0	; 56
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_66>:

//Check current sense pins
ISR(IS_INT)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	08 b6       	in	r0, 0x38	; 56
    16ac:	0f 92       	push	r0
    16ae:	18 be       	out	0x38, r1	; 56
    16b0:	0b b6       	in	r0, 0x3b	; 59
    16b2:	0f 92       	push	r0
    16b4:	1b be       	out	0x3b, r1	; 59
    16b6:	8f 93       	push	r24
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
	is_1_flag = PORTA_IN & (1 << IS_1_PIN);
    16bc:	e8 e0       	ldi	r30, 0x08	; 8
    16be:	f6 e0       	ldi	r31, 0x06	; 6
    16c0:	80 81       	ld	r24, Z
    16c2:	82 70       	andi	r24, 0x02	; 2
    16c4:	80 93 83 20 	sts	0x2083, r24	; 0x802083 <is_1_flag>
	is_2_flag = PORTA_IN & (1 << IS_2_PIN);
    16c8:	80 81       	ld	r24, Z
    16ca:	84 70       	andi	r24, 0x04	; 4
    16cc:	80 93 77 23 	sts	0x2377, r24	; 0x802377 <is_2_flag>
	is_3_flag = PORTA_IN & (1 << IS_3_PIN);
    16d0:	80 81       	ld	r24, Z
    16d2:	88 70       	andi	r24, 0x08	; 8
    16d4:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <is_3_flag>
	is_4_flag = PORTA_IN & (1 << IS_4_PIN);
    16d8:	80 81       	ld	r24, Z
    16da:	80 71       	andi	r24, 0x10	; 16
    16dc:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <is_4_flag>
	is_reset = FALSE;
    16e0:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <is_reset>
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	8f 91       	pop	r24
    16ea:	0f 90       	pop	r0
    16ec:	0b be       	out	0x3b, r0	; 59
    16ee:	0f 90       	pop	r0
    16f0:	08 be       	out	0x38, r0	; 56
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <write_bytes_CAN>:
	DBG("Stop CAN");
	CQ_initialize();
}
//Writes the specified number of bytes to the specified address to the CAN controller
void write_bytes_CAN(uint8_t address, uint8_t bytes[], uint8_t num_bytes)
{
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	d8 2e       	mov	r13, r24
    170c:	7b 01       	movw	r14, r22
    170e:	d4 2f       	mov	r29, r20
	CAN_CHIP_SELECT_LOW;
    1710:	01 e4       	ldi	r16, 0x41	; 65
    1712:	16 e0       	ldi	r17, 0x06	; 6
    1714:	c0 e1       	ldi	r28, 0x10	; 16
    1716:	f8 01       	movw	r30, r16
    1718:	c0 83       	st	Z, r28
    171a:	c0 93 46 06 	sts	0x0646, r28	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI_SD_CAN(WRITE_CAN);
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(address);
    1724:	8d 2d       	mov	r24, r13
    1726:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_bytes_SPI_SD_CAN(bytes, num_bytes);
    172a:	6d 2f       	mov	r22, r29
    172c:	c7 01       	movw	r24, r14
    172e:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <write_bytes_SPI_SD_CAN>
	CAN_CHIP_SELECT_HIGH;
    1732:	f8 01       	movw	r30, r16
    1734:	c0 83       	st	Z, r28
    1736:	c0 93 45 06 	sts	0x0645, r28	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	08 95       	ret

0000174a <initialize_CAN>:
#include <emu_CAN.h>
#endif // __SIM__

//Initializes the CAN controller
void initialize_CAN(void)
{
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	00 d0       	rcall	.+0      	; 0x1756 <initialize_CAN+0xc>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <initialize_CAN+0xe>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	DBG("Init CAN");
	//IVA002: Standardized code
	CQ_initialize();
    175c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <CQ_initialize>
	//stop_CAN();

	/*Reset pin 1 and pin 2 since my board has uses a different pin than roots*/
	PORTA_OUTCLR = (1 << CAN_RST) | (1 << (CAN_RST - 1));
    1760:	80 ec       	ldi	r24, 0xC0	; 192
    1762:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1766:	2f ef       	ldi	r18, 0xFF	; 255
    1768:	39 ef       	ldi	r19, 0xF9	; 249
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	21 50       	subi	r18, 0x01	; 1
    176e:	30 40       	sbci	r19, 0x00	; 0
    1770:	90 40       	sbci	r25, 0x00	; 0
    1772:	e1 f7       	brne	.-8      	; 0x176c <initialize_CAN+0x22>
    1774:	00 c0       	rjmp	.+0      	; 0x1776 <initialize_CAN+0x2c>
    1776:	00 00       	nop
	_delay_ms(10);
	PORTA_OUTSET = (1 << CAN_RST) | (1 << (CAN_RST - 1));
    1778:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>

	//Reset CAN controller
	CAN_CHIP_SELECT_LOW;
    177c:	0f 2e       	mov	r0, r31
    177e:	f1 e4       	ldi	r31, 0x41	; 65
    1780:	ef 2e       	mov	r14, r31
    1782:	f6 e0       	ldi	r31, 0x06	; 6
    1784:	ff 2e       	mov	r15, r31
    1786:	f0 2d       	mov	r31, r0
    1788:	10 e1       	ldi	r17, 0x10	; 16
    178a:	f7 01       	movw	r30, r14
    178c:	10 83       	st	Z, r17
    178e:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI_SD_CAN(RESET_CAN);
    1792:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	CAN_CHIP_SELECT_HIGH;
    1796:	f7 01       	movw	r30, r14
    1798:	10 83       	st	Z, r17
    179a:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	uint8_t config_bytes[4] = { 0 };
    179e:	19 82       	std	Y+1, r1	; 0x01
    17a0:	1a 82       	std	Y+2, r1	; 0x02
    17a2:	1b 82       	std	Y+3, r1	; 0x03
    17a4:	1c 82       	std	Y+4, r1	; 0x04
	//TXRTSCTRL - Sets pin states of RTS pins
	//RTS pins are not used in this application
	config_bytes[0] = 0b00000000;
	write_bytes_CAN(TXRTSCTRL, config_bytes, 1);	//TXRTSCTRL
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	be 01       	movw	r22, r28
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8d e0       	ldi	r24, 0x0D	; 13
    17b0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>
	//If this buffer is full messages will rollover to RXB1
	//RXB1CTRL - Control for receive buffer 0
	//This buffer only receives only standard identifier messages
	//BFPCTRL - Sets pin states of RXBF pins
	//RXBF pins not used
	config_bytes[0] = 0b00100100;	//RXB0CTRL
    17b4:	84 e2       	ldi	r24, 0x24	; 36
    17b6:	89 83       	std	Y+1, r24	; 0x01
	config_bytes[1] = 0b00100000;	//RXB1CTRL
    17b8:	80 e2       	ldi	r24, 0x20	; 32
    17ba:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[2] = 0b00000000;	//BFPCTRL
    17bc:	1b 82       	std	Y+3, r1	; 0x03
	write_bytes_CAN(RXB0CTRL, config_bytes, 3);
    17be:	43 e0       	ldi	r20, 0x03	; 3
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	80 e6       	ldi	r24, 0x60	; 96
    17c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>

	/*config_bytes[2] = 0b10000001;	//CNF1 /// BRP=1;SJW=3TQ
	config_bytes[1] = 0b11101001;	//CNF2 // BTLMODE=1;SAM=1;;PHSEG1=5;PRSEG=1; //250KBPS   //Received_250Kbps
	config_bytes[0] = 0b00000110;	//CNF3 // PHSEG2=6;*/

	config_bytes[2] = 0b10000011;	//CNF1 /// BRP=3;SJW=3TQ
    17cc:	13 e8       	ldi	r17, 0x83	; 131
    17ce:	1b 83       	std	Y+3, r17	; 0x03
	config_bytes[1] = 0b01110000;	//CNF2 // BTLMODE=0;SAM=1;;PHSEG1=6;PRSEG=0; //125Kbps  //Received_125Kbps
    17d0:	80 e7       	ldi	r24, 0x70	; 112
    17d2:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[0] = 0b00000110;	//CNF3 // PHSEG2=6;
    17d4:	86 e0       	ldi	r24, 0x06	; 6
    17d6:	89 83       	std	Y+1, r24	; 0x01

	write_bytes_CAN(CNF3, config_bytes, 3);
    17d8:	43 e0       	ldi	r20, 0x03	; 3
    17da:	be 01       	movw	r22, r28
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	88 e2       	ldi	r24, 0x28	; 40
    17e2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>
	//Interrupts Enabled:
	//Message Error Interrupt
	//Transmit Buffer 0 Empty Interrupt
	//Receive Buffer 0 Full Interrupt
	//Receive Buffer 1 Full Interrupt
	config_bytes[0] = 0b10000011;	//CANINTE  ////////CODE CHANGED BY BOSCH
    17e6:	19 83       	std	Y+1, r17	; 0x01
	write_bytes_CAN(CANINTE, config_bytes, 1);
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	be 01       	movw	r22, r28
    17ec:	6f 5f       	subi	r22, 0xFF	; 255
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8b e2       	ldi	r24, 0x2B	; 43
    17f2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>


	config_bytes[0] = 0b00000000;
    17f6:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(TXB0CTRL, config_bytes, 1);
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	be 01       	movw	r22, r28
    17fc:	6f 5f       	subi	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	80 e3       	ldi	r24, 0x30	; 48
    1802:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>
	write_bytes_CAN(TXB1CTRL, config_bytes, 1);
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	be 01       	movw	r22, r28
    180a:	6f 5f       	subi	r22, 0xFF	; 255
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	80 e4       	ldi	r24, 0x40	; 64
    1810:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>


	//CANCTRL - Sets operation modes
	//Normal operation mode
	config_bytes[0] = 0b00000000;	//CANCTRL
    1814:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANCTRL, config_bytes, 1);
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	be 01       	movw	r22, r28
    181a:	6f 5f       	subi	r22, 0xFF	; 255
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f e0       	ldi	r24, 0x0F	; 15
    1820:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>

	//Setup interrupt line for MCP25625
	PORTC_DIRCLR = (1 << CAN_INT);
    1824:	88 e0       	ldi	r24, 0x08	; 8
    1826:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	PORTC_INT0MASK = (1 << CAN_INT);	//Turn on interrupt
    182a:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
	PORTC_INTCTRL = 0x05;				//Low level interrupts
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__TEXT_REGION_LENGTH__+0x700649>
	PORTC_PIN3CTRL = 0x02;				//Falling Edge
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <__TEXT_REGION_LENGTH__+0x700653>

	can_functioning = FALSE;
    183a:	10 92 71 25 	sts	0x2571, r1	; 0x802571 <can_functioning>
	A1_ack_received = FALSE;
    183e:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <A1_ack_received>
	A3_ack_received = FALSE;
    1842:	10 92 a7 25 	sts	0x25A7, r1	; 0x8025a7 <A3_ack_received>
}
    1846:	24 96       	adiw	r28, 0x04	; 4
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	08 95       	ret

00001858 <read_bytes_CAN>:
}

#ifndef  __SIM__
//Reads the specified number of bytes to the specified address to the CAN controller
void read_bytes_CAN(uint8_t address, uint8_t bytes[], uint8_t num_bytes)
{
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	d8 2e       	mov	r13, r24
    1868:	7b 01       	movw	r14, r22
    186a:	d4 2f       	mov	r29, r20
	CAN_CHIP_SELECT_LOW;
    186c:	01 e4       	ldi	r16, 0x41	; 65
    186e:	16 e0       	ldi	r17, 0x06	; 6
    1870:	c0 e1       	ldi	r28, 0x10	; 16
    1872:	f8 01       	movw	r30, r16
    1874:	c0 83       	st	Z, r28
    1876:	c0 93 46 06 	sts	0x0646, r28	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI_SD_CAN(READ_CAN);
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(address);
    1880:	8d 2d       	mov	r24, r13
    1882:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	read_bytes_SPI_SD_CAN(bytes, num_bytes);
    1886:	6d 2f       	mov	r22, r29
    1888:	c7 01       	movw	r24, r14
    188a:	0e 94 fe 28 	call	0x51fc	; 0x51fc <read_bytes_SPI_SD_CAN>
	CAN_CHIP_SELECT_HIGH;
    188e:	f8 01       	movw	r30, r16
    1890:	c0 83       	st	Z, r28
    1892:	c0 93 45 06 	sts	0x0645, r28	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	08 95       	ret

000018a6 <read_byte_CAN>:

//Reads the specified register from the CAN controller
uint8_t read_byte_CAN(uint8_t address)
{
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	1f 92       	push	r1
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	08 2f       	mov	r16, r24
	CAN_CHIP_SELECT_LOW;
    18ba:	0f 2e       	mov	r0, r31
    18bc:	f1 e4       	ldi	r31, 0x41	; 65
    18be:	ef 2e       	mov	r14, r31
    18c0:	f6 e0       	ldi	r31, 0x06	; 6
    18c2:	ff 2e       	mov	r15, r31
    18c4:	f0 2d       	mov	r31, r0
    18c6:	10 e1       	ldi	r17, 0x10	; 16
    18c8:	f7 01       	movw	r30, r14
    18ca:	10 83       	st	Z, r17
    18cc:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI_SD_CAN(READ_CAN);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(address);
    18d6:	80 2f       	mov	r24, r16
    18d8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	uint8_t bytes[1];
	read_bytes_SPI_SD_CAN(bytes, 1);
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 fe 28 	call	0x51fc	; 0x51fc <read_bytes_SPI_SD_CAN>
	CAN_CHIP_SELECT_HIGH;
    18e6:	f7 01       	movw	r30, r14
    18e8:	10 83       	st	Z, r17
    18ea:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	return bytes[0];
}
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	08 95       	ret

00001900 <transmit_CAN>:

//IVA002: Added CAN Transmit Queue
//Adds a CAN message on the Tx queue
void transmit_CAN(uint16_t dataID, uint8_t remote_transmission_request,
	uint8_t data_length, uint8_t data[])
{
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	2b 97       	sbiw	r28, 0x0b	; 11
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	de bf       	out	0x3e, r29	; 62
	uint8_t buff[TX_BLOCK_SIZE];
	buff[0] = dataID;
    190e:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = remote_transmission_request;
    1910:	6a 83       	std	Y+2, r22	; 0x02
	buff[2] = data_length;
    1912:	4b 83       	std	Y+3, r20	; 0x03
	for (uint8_t i = 0; i < data_length; i++)
    1914:	44 23       	and	r20, r20
    1916:	79 f0       	breq	.+30     	; 0x1936 <transmit_CAN+0x36>
    1918:	a2 2f       	mov	r26, r18
    191a:	b3 2f       	mov	r27, r19
    191c:	fe 01       	movw	r30, r28
    191e:	34 96       	adiw	r30, 0x04	; 4
    1920:	41 50       	subi	r20, 0x01	; 1
    1922:	9e 01       	movw	r18, r28
    1924:	24 0f       	add	r18, r20
    1926:	31 1d       	adc	r19, r1
    1928:	2b 5f       	subi	r18, 0xFB	; 251
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
		buff[i + 3] = data[i];
    192c:	8d 91       	ld	r24, X+
    192e:	81 93       	st	Z+, r24
{
	uint8_t buff[TX_BLOCK_SIZE];
	buff[0] = dataID;
	buff[1] = remote_transmission_request;
	buff[2] = data_length;
	for (uint8_t i = 0; i < data_length; i++)
    1930:	e2 17       	cp	r30, r18
    1932:	f3 07       	cpc	r31, r19
    1934:	d9 f7       	brne	.-10     	; 0x192c <transmit_CAN+0x2c>
		buff[i + 3] = data[i];
	CQTx_enqueue(buff);
    1936:	ce 01       	movw	r24, r28
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <CQTx_enqueue>
}
    193e:	2b 96       	adiw	r28, 0x0b	; 11
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <transmit_CAN_>:

//IVA002: Added CAN Transmit Queue
//Transmits a CAN message on the CAN bus
void transmit_CAN_(uint8_t dataID, uint8_t remote_transmission_request,
	uint8_t data_length, uint8_t data[])
{
    194a:	2f 92       	push	r2
    194c:	3f 92       	push	r3
    194e:	4f 92       	push	r4
    1950:	5f 92       	push	r5
    1952:	6f 92       	push	r6
    1954:	7f 92       	push	r7
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	00 d0       	rcall	.+0      	; 0x1970 <transmit_CAN_+0x26>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <transmit_CAN_+0x28>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	28 2e       	mov	r2, r24
    1978:	46 2e       	mov	r4, r22
    197a:	54 2e       	mov	r5, r20
    197c:	59 01       	movw	r10, r18
	uint8_t retry = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01

jump_retry:
	Check_flag = 1;
    1982:	33 24       	eor	r3, r3
    1984:	33 94       	inc	r3
	CAN_CHIP_SELECT_LOW;
    1986:	01 e4       	ldi	r16, 0x41	; 65
    1988:	16 e0       	ldi	r17, 0x06	; 6
    198a:	68 94       	set
    198c:	77 24       	eor	r7, r7
    198e:	74 f8       	bld	r7, 4
    1990:	67 2c       	mov	r6, r7
    1992:	0f 2e       	mov	r0, r31
    1994:	f6 e4       	ldi	r31, 0x46	; 70
    1996:	ef 2e       	mov	r14, r31
    1998:	f6 e0       	ldi	r31, 0x06	; 6
    199a:	ff 2e       	mov	r15, r31
    199c:	f0 2d       	mov	r31, r0
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	94 0f       	add	r25, r20
    19a2:	e9 2f       	mov	r30, r25
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	31 96       	adiw	r30, 0x01	; 1
    19a8:	e2 0f       	add	r30, r18
    19aa:	f3 1f       	adc	r31, r19
    19ac:	eb 83       	std	Y+3, r30	; 0x03
    19ae:	fc 83       	std	Y+4, r31	; 0x04
		for (uint8_t i = 0; i < data_length; i++)
		{
			write_byte_SPI_SD_CAN(data[i]);
		}
	}
	CAN_CHIP_SELECT_HIGH;
    19b0:	0f 2e       	mov	r0, r31
    19b2:	f5 e4       	ldi	r31, 0x45	; 69
    19b4:	cf 2e       	mov	r12, r31
    19b6:	f6 e0       	ldi	r31, 0x06	; 6
    19b8:	df 2e       	mov	r13, r31
    19ba:	f0 2d       	mov	r31, r0
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <transmit_CAN_+0x76>
	}
	else
	{
		if (retry == 1)
		{
			retry--;
    19be:	19 82       	std	Y+1, r1	; 0x01
	uint8_t data_length, uint8_t data[])
{
	uint8_t retry = 1;

jump_retry:
	Check_flag = 1;
    19c0:	30 92 47 21 	sts	0x2147, r3	; 0x802147 <Check_flag>
	CAN_CHIP_SELECT_LOW;
    19c4:	f8 01       	movw	r30, r16
    19c6:	60 82       	st	Z, r6
    19c8:	f7 01       	movw	r30, r14
    19ca:	60 82       	st	Z, r6
	write_byte_SPI_SD_CAN(LOAD_TX_BUFFER_CAN | LOAD_BUFFER_0);
    19cc:	80 e4       	ldi	r24, 0x40	; 64
    19ce:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	//   10 ..................03.......00  .... .......................
	//   28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	//    1  0  0  0  0  1  1  1  1  1  1  1  1  x  x  x  x  x  x  x  x  1  0  1  0  0  0  1  0

	//Bits 10-3 of standard identifier
	write_byte_SPI_SD_CAN(0b10000111);
    19d2:	87 e8       	ldi	r24, 0x87	; 135
    19d4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	//Bits 2-0 of standard identifier
	//& extended identifier enable bit & bits 17-16 of extended identifier
	//Extended identifier is used
	write_byte_SPI_SD_CAN(0b11101011);
    19d8:	8b ee       	ldi	r24, 0xEB	; 235
    19da:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	//Bits 15-8 of extended identifier
	write_byte_SPI_SD_CAN(dataID);
    19de:	82 2d       	mov	r24, r2
    19e0:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	//Bits 7-0 of extended identifier
	write_byte_SPI_SD_CAN(0xA2);
    19e4:	82 ea       	ldi	r24, 0xA2	; 162
    19e6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	//If remote transmission request is required
	//set RTR bit as 1, and set data length to 0
	if (remote_transmission_request)
    19ea:	44 20       	and	r4, r4
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <transmit_CAN_+0xac>
	{
		uint8_t rtr_dlc = 0x40;
		write_byte_SPI_SD_CAN(rtr_dlc);
    19ee:	80 e4       	ldi	r24, 0x40	; 64
    19f0:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    19f4:	10 c0       	rjmp	.+32     	; 0x1a16 <transmit_CAN_+0xcc>
	}
	//Else set data length and write the data bytes
	else
	{
		uint8_t rtr_dlc = data_length;
		write_byte_SPI_SD_CAN(rtr_dlc);
    19f6:	85 2d       	mov	r24, r5
    19f8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		for (uint8_t i = 0; i < data_length; i++)
    19fc:	55 20       	and	r5, r5
    19fe:	59 f0       	breq	.+22     	; 0x1a16 <transmit_CAN_+0xcc>
    1a00:	45 01       	movw	r8, r10
		{
			write_byte_SPI_SD_CAN(data[i]);
    1a02:	f4 01       	movw	r30, r8
    1a04:	81 91       	ld	r24, Z+
    1a06:	4f 01       	movw	r8, r30
    1a08:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	//Else set data length and write the data bytes
	else
	{
		uint8_t rtr_dlc = data_length;
		write_byte_SPI_SD_CAN(rtr_dlc);
		for (uint8_t i = 0; i < data_length; i++)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	88 16       	cp	r8, r24
    1a12:	99 06       	cpc	r9, r25
    1a14:	b1 f7       	brne	.-20     	; 0x1a02 <transmit_CAN_+0xb8>
		{
			write_byte_SPI_SD_CAN(data[i]);
		}
	}
	CAN_CHIP_SELECT_HIGH;
    1a16:	f8 01       	movw	r30, r16
    1a18:	70 82       	st	Z, r7
    1a1a:	f6 01       	movw	r30, r12
    1a1c:	70 82       	st	Z, r7

	//Send off data through CAN bus
	CAN_CHIP_SELECT_LOW;
    1a1e:	f8 01       	movw	r30, r16
    1a20:	70 82       	st	Z, r7
    1a22:	f7 01       	movw	r30, r14
    1a24:	70 82       	st	Z, r7
	write_byte_SPI_SD_CAN(WRITE_CAN);
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(TXB0CTRL);
    1a2c:	80 e3       	ldi	r24, 0x30	; 48
    1a2e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	if (Check_flag)
    1a32:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <Check_flag>
    1a36:	88 23       	and	r24, r24
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <transmit_CAN_+0xf8>
	{
		write_byte_SPI_SD_CAN(0x08);
    1a3a:	88 e0       	ldi	r24, 0x08	; 8
    1a3c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <transmit_CAN_+0x100>
	}
	else
	{
		if (retry == 1)
    1a42:	f9 81       	ldd	r31, Y+1	; 0x01
    1a44:	f1 30       	cpi	r31, 0x01	; 1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <transmit_CAN_+0x100>
    1a48:	ba cf       	rjmp	.-140    	; 0x19be <transmit_CAN_+0x74>
		{
			retry--;
			goto jump_retry;
		}
	}
	Check_flag = 0;
    1a4a:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <Check_flag>
	CAN_CHIP_SELECT_HIGH;
    1a4e:	80 e1       	ldi	r24, 0x10	; 16
    1a50:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    1a54:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
    1a58:	24 96       	adiw	r28, 0x04	; 4
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	bf 90       	pop	r11
    1a70:	af 90       	pop	r10
    1a72:	9f 90       	pop	r9
    1a74:	8f 90       	pop	r8
    1a76:	7f 90       	pop	r7
    1a78:	6f 90       	pop	r6
    1a7a:	5f 90       	pop	r5
    1a7c:	4f 90       	pop	r4
    1a7e:	3f 90       	pop	r3
    1a80:	2f 90       	pop	r2
    1a82:	08 95       	ret

00001a84 <reset_CAN_error>:

//Reset CAN controller if errors have shut down transreceiver
void reset_CAN_error(void)
{
    1a84:	cf 93       	push	r28
	//IVA002: Fix for CAN SPI Corruption
	CAN_MX_LOCK();
    1a86:	f8 94       	cli
	uint8_t t_error = read_byte_CAN(TEC);
    1a88:	8c e1       	ldi	r24, 0x1C	; 28
    1a8a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <read_byte_CAN>
    1a8e:	c8 2f       	mov	r28, r24
	uint8_t r_error = read_byte_CAN(REC);
    1a90:	8d e1       	ldi	r24, 0x1D	; 29
    1a92:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <read_byte_CAN>

	if (t_error > 120 || r_error > 120)
    1a96:	c9 37       	cpi	r28, 0x79	; 121
    1a98:	10 f4       	brcc	.+4      	; 0x1a9e <reset_CAN_error+0x1a>
    1a9a:	89 37       	cpi	r24, 0x79	; 121
    1a9c:	10 f0       	brcs	.+4      	; 0x1aa2 <reset_CAN_error+0x1e>
	{
		initialize_CAN();
    1a9e:	0e 94 a5 0b 	call	0x174a	; 0x174a <initialize_CAN>
	}
	CAN_MX_UNLOCK();
    1aa2:	78 94       	sei
}
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <__vector_2>:


ISR(CAN_INTERRUPT)
{
    1aa8:	1f 92       	push	r1
    1aaa:	0f 92       	push	r0
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	0f 92       	push	r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	08 b6       	in	r0, 0x38	; 56
    1ab4:	0f 92       	push	r0
    1ab6:	18 be       	out	0x38, r1	; 56
    1ab8:	09 b6       	in	r0, 0x39	; 57
    1aba:	0f 92       	push	r0
    1abc:	19 be       	out	0x39, r1	; 57
    1abe:	0a b6       	in	r0, 0x3a	; 58
    1ac0:	0f 92       	push	r0
    1ac2:	1a be       	out	0x3a, r1	; 58
    1ac4:	0b b6       	in	r0, 0x3b	; 59
    1ac6:	0f 92       	push	r0
    1ac8:	1b be       	out	0x3b, r1	; 59
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	2d 97       	sbiw	r28, 0x0d	; 13
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	de bf       	out	0x3e, r29	; 62
	if (Check_flag)
    1af4:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <Check_flag>
    1af8:	81 11       	cpse	r24, r1
	{
		Check_flag = 0;
    1afa:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <Check_flag>
	}

	uint8_t int_flags;
	int_flags = read_byte_CAN(CANINTF);
    1afe:	8c e2       	ldi	r24, 0x2C	; 44
    1b00:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <read_byte_CAN>
    1b04:	18 2f       	mov	r17, r24

	//If either error interrupt flag is raised, notify the user
	if (int_flags & ERRIF)
    1b06:	85 ff       	sbrs	r24, 5
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <__vector_2+0x68>
	{
		PORTQ_OUTSET = (1 << 2);
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
	}
	if (int_flags & MERRF)
    1b10:	11 23       	and	r17, r17
    1b12:	1c f4       	brge	.+6      	; 0x1b1a <__vector_2+0x72>
	{
		PORTQ_OUTSET = (1 << 2);
    1b14:	84 e0       	ldi	r24, 0x04	; 4
    1b16:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
	}

	//If either receive buffer is full read the data and perform accordingly
	if (int_flags & RXB0_FULL)
    1b1a:	10 ff       	sbrs	r17, 0
    1b1c:	2a c0       	rjmp	.+84     	; 0x1b72 <__vector_2+0xca>
	{
		uint8_t data[8] = { 0 };
    1b1e:	fe 01       	movw	r30, r28
    1b20:	32 96       	adiw	r30, 0x02	; 2
    1b22:	88 e0       	ldi	r24, 0x08	; 8
    1b24:	df 01       	movw	r26, r30
    1b26:	1d 92       	st	X+, r1
    1b28:	8a 95       	dec	r24
    1b2a:	e9 f7       	brne	.-6      	; 0x1b26 <__vector_2+0x7e>
		//Read only bits 3-0 of RXB0DLC to get the data length code
		uint8_t data_length = read_byte_CAN(RXB0DLC) & 0x0F;
    1b2c:	85 e6       	ldi	r24, 0x65	; 101
    1b2e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <read_byte_CAN>
    1b32:	08 2f       	mov	r16, r24
    1b34:	0f 70       	andi	r16, 0x0F	; 15
		if (data_length > 8) //IVA001: Incase of corruption do not process the data
    1b36:	09 30       	cpi	r16, 0x09	; 9
    1b38:	e0 f4       	brcc	.+56     	; 0x1b72 <__vector_2+0xca>
		{
			DBG1("A2 CAN Corruption CH0 %d", data_length);
		}
		else
		{
			read_bytes_CAN(RXB0D0, data, data_length);
    1b3a:	40 2f       	mov	r20, r16
    1b3c:	be 01       	movw	r22, r28
    1b3e:	6e 5f       	subi	r22, 0xFE	; 254
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	86 e6       	ldi	r24, 0x66	; 102
    1b44:	0e 94 2c 0c 	call	0x1858	; 0x1858 <read_bytes_CAN>

			//IVA002: J1939 Implementation
			uint8_t ids[4] = { 0 };
    1b48:	1a 86       	std	Y+10, r1	; 0x0a
    1b4a:	1b 86       	std	Y+11, r1	; 0x0b
    1b4c:	1c 86       	std	Y+12, r1	; 0x0c
    1b4e:	1d 86       	std	Y+13, r1	; 0x0d
			read_bytes_CAN(RXB0SIDH, ids, 4);
    1b50:	44 e0       	ldi	r20, 0x04	; 4
    1b52:	be 01       	movw	r22, r28
    1b54:	66 5f       	subi	r22, 0xF6	; 246
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	81 e6       	ldi	r24, 0x61	; 97
    1b5a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <read_bytes_CAN>

			if ((ids[1] && 0b00001000) != 0) // ignore std ids
    1b5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b60:	88 23       	and	r24, r24
    1b62:	39 f0       	breq	.+14     	; 0x1b72 <__vector_2+0xca>
			{
				uint16_t can_id = ids[2];
				CQRx_enqueue(data, can_id, data_length);
    1b64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	40 2f       	mov	r20, r16
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	02 96       	adiw	r24, 0x02	; 2
    1b6e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <CQRx_enqueue>
			}
		}
	}
	if (int_flags & RXB1_FULL)
    1b72:	11 ff       	sbrs	r17, 1
    1b74:	2a c0       	rjmp	.+84     	; 0x1bca <__vector_2+0x122>
	{
		uint8_t data[8] = { 0 };
    1b76:	fe 01       	movw	r30, r28
    1b78:	32 96       	adiw	r30, 0x02	; 2
    1b7a:	88 e0       	ldi	r24, 0x08	; 8
    1b7c:	df 01       	movw	r26, r30
    1b7e:	1d 92       	st	X+, r1
    1b80:	8a 95       	dec	r24
    1b82:	e9 f7       	brne	.-6      	; 0x1b7e <__vector_2+0xd6>
		uint8_t data_length = read_byte_CAN(RXB1DLC) & 0x0F;
    1b84:	85 e7       	ldi	r24, 0x75	; 117
    1b86:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <read_byte_CAN>
    1b8a:	18 2f       	mov	r17, r24
    1b8c:	1f 70       	andi	r17, 0x0F	; 15
		if (data_length > 8) //IVA001: Incase of corruption do not process the data
    1b8e:	19 30       	cpi	r17, 0x09	; 9
    1b90:	e0 f4       	brcc	.+56     	; 0x1bca <__vector_2+0x122>
		{
			DBG1("A2 CAN Corruption CH1 %d", data_length);
		}
		else
		{
			read_bytes_CAN(RXB1D0, data, data_length);
    1b92:	41 2f       	mov	r20, r17
    1b94:	be 01       	movw	r22, r28
    1b96:	6e 5f       	subi	r22, 0xFE	; 254
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	86 e7       	ldi	r24, 0x76	; 118
    1b9c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <read_bytes_CAN>

			//IVA002: J1939 Implementation
			uint8_t ids[4] = { 0 };
    1ba0:	1a 86       	std	Y+10, r1	; 0x0a
    1ba2:	1b 86       	std	Y+11, r1	; 0x0b
    1ba4:	1c 86       	std	Y+12, r1	; 0x0c
    1ba6:	1d 86       	std	Y+13, r1	; 0x0d
			read_bytes_CAN(RXB1SIDH, ids, 4);
    1ba8:	44 e0       	ldi	r20, 0x04	; 4
    1baa:	be 01       	movw	r22, r28
    1bac:	66 5f       	subi	r22, 0xF6	; 246
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	81 e7       	ldi	r24, 0x71	; 113
    1bb2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <read_bytes_CAN>
			if ((ids[1] && 0b00001000) != 0) // ignore std ids
    1bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb8:	88 23       	and	r24, r24
    1bba:	39 f0       	breq	.+14     	; 0x1bca <__vector_2+0x122>
			{
				uint16_t can_id = ids[2];
				CQRx_enqueue(data, can_id, data_length);
    1bbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	41 2f       	mov	r20, r17
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	02 96       	adiw	r24, 0x02	; 2
    1bc6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <CQRx_enqueue>
			}
		}
	}

	//Clear the flags
	uint8_t clear[1] = { 0x00 };
    1bca:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANINTF, clear, 1);
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	be 01       	movw	r22, r28
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	8c e2       	ldi	r24, 0x2C	; 44
    1bd6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <write_bytes_CAN>
}
    1bda:	2d 96       	adiw	r28, 0x0d	; 13
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	0f 90       	pop	r0
    1c02:	0b be       	out	0x3b, r0	; 59
    1c04:	0f 90       	pop	r0
    1c06:	0a be       	out	0x3a, r0	; 58
    1c08:	0f 90       	pop	r0
    1c0a:	09 be       	out	0x39, r0	; 57
    1c0c:	0f 90       	pop	r0
    1c0e:	08 be       	out	0x38, r0	; 56
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <CQ_initialize>:
	CQ_MX_UNLOCK();

	if (tmp == 0)
		return TRUE;
	return FALSE;
}
    1c1a:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <CQRx_size>
    1c1e:	10 92 a9 25 	sts	0x25A9, r1	; 0x8025a9 <CQRx_front>
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	80 93 aa 25 	sts	0x25AA, r24	; 0x8025aa <CQRx_rear>
    1c28:	10 92 ac 25 	sts	0x25AC, r1	; 0x8025ac <CQTx_size>
    1c2c:	10 92 a8 25 	sts	0x25A8, r1	; 0x8025a8 <CQTx_front>
    1c30:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <CQTx_rear>
    1c34:	08 95       	ret

00001c36 <CQRx_queueIsEmpty>:
    1c36:	f8 94       	cli
    1c38:	90 91 1b 26 	lds	r25, 0x261B	; 0x80261b <CQRx_size>
    1c3c:	78 94       	sei
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	91 11       	cpse	r25, r1
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	08 95       	ret

00001c46 <CQRx_enqueue>:
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	f8 2e       	mov	r15, r24
    1c52:	09 2f       	mov	r16, r25
    1c54:	eb 01       	movw	r28, r22
    1c56:	14 2f       	mov	r17, r20
    1c58:	f8 94       	cli
    1c5a:	80 91 aa 25 	lds	r24, 0x25AA	; 0x8025aa <CQRx_rear>
    1c5e:	08 2e       	mov	r0, r24
    1c60:	00 0c       	add	r0, r0
    1c62:	99 0b       	sbc	r25, r25
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	64 e6       	ldi	r22, 0x64	; 100
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    1c6e:	80 93 aa 25 	sts	0x25AA, r24	; 0x8025aa <CQRx_rear>
    1c72:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <CQRx_size>
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	80 93 1b 26 	sts	0x261B, r24	; 0x80261b <CQRx_size>
    1c7c:	78 94       	sei
    1c7e:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <CQRx_size>
    1c82:	84 36       	cpi	r24, 0x64	; 100
    1c84:	58 f1       	brcs	.+86     	; 0x1cdc <CQRx_enqueue+0x96>
    1c86:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <send_CAN_buffer_overflow>
    1c8a:	28 c0       	rjmp	.+80     	; 0x1cdc <CQRx_enqueue+0x96>
    1c8c:	81 17       	cp	r24, r17
    1c8e:	68 f4       	brcc	.+26     	; 0x1caa <CQRx_enqueue+0x64>
    1c90:	30 91 aa 25 	lds	r19, 0x25AA	; 0x8025aa <CQRx_rear>
    1c94:	20 81       	ld	r18, Z
    1c96:	dc 01       	movw	r26, r24
    1c98:	48 e0       	ldi	r20, 0x08	; 8
    1c9a:	34 02       	muls	r19, r20
    1c9c:	a0 0d       	add	r26, r0
    1c9e:	b1 1d       	adc	r27, r1
    1ca0:	11 24       	eor	r1, r1
    1ca2:	ac 51       	subi	r26, 0x1C	; 28
    1ca4:	b9 4d       	sbci	r27, 0xD9	; 217
    1ca6:	2c 93       	st	X, r18
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <CQRx_enqueue+0x7a>
    1caa:	20 91 aa 25 	lds	r18, 0x25AA	; 0x8025aa <CQRx_rear>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	38 e0       	ldi	r19, 0x08	; 8
    1cb2:	23 02       	muls	r18, r19
    1cb4:	a0 0d       	add	r26, r0
    1cb6:	b1 1d       	adc	r27, r1
    1cb8:	11 24       	eor	r1, r1
    1cba:	ac 51       	subi	r26, 0x1C	; 28
    1cbc:	b9 4d       	sbci	r27, 0xD9	; 217
    1cbe:	1c 92       	st	X, r1
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	31 96       	adiw	r30, 0x01	; 1
    1cc4:	88 30       	cpi	r24, 0x08	; 8
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	09 f7       	brne	.-62     	; 0x1c8c <CQRx_enqueue+0x46>
    1cca:	e0 91 aa 25 	lds	r30, 0x25AA	; 0x8025aa <CQRx_rear>
    1cce:	ee 0f       	add	r30, r30
    1cd0:	ff 0b       	sbc	r31, r31
    1cd2:	e4 5e       	subi	r30, 0xE4	; 228
    1cd4:	f9 4d       	sbci	r31, 0xD9	; 217
    1cd6:	c0 83       	st	Z, r28
    1cd8:	d1 83       	std	Z+1, r29	; 0x01
    1cda:	05 c0       	rjmp	.+10     	; 0x1ce6 <CQRx_enqueue+0xa0>
    1cdc:	ef 2d       	mov	r30, r15
    1cde:	f0 2f       	mov	r31, r16
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	d3 cf       	rjmp	.-90     	; 0x1c8c <CQRx_enqueue+0x46>
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	08 95       	ret

00001cf2 <CQRx_dequeue>:
    1cf2:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <CQRx_size>
    1cf6:	88 23       	and	r24, r24
    1cf8:	31 f1       	breq	.+76     	; 0x1d46 <CQRx_dequeue+0x54>
    1cfa:	f8 94       	cli
    1cfc:	e0 91 a9 25 	lds	r30, 0x25A9	; 0x8025a9 <CQRx_front>
    1d00:	ee 0f       	add	r30, r30
    1d02:	ff 0b       	sbc	r31, r31
    1d04:	e4 5e       	subi	r30, 0xE4	; 228
    1d06:	f9 4d       	sbci	r31, 0xD9	; 217
    1d08:	30 81       	ld	r19, Z
    1d0a:	20 91 a9 25 	lds	r18, 0x25A9	; 0x8025a9 <CQRx_front>
    1d0e:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <CQRx_size>
    1d12:	81 50       	subi	r24, 0x01	; 1
    1d14:	80 93 1b 26 	sts	0x261B, r24	; 0x80261b <CQRx_size>
    1d18:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <CQRx_front>
    1d1c:	08 2e       	mov	r0, r24
    1d1e:	00 0c       	add	r0, r0
    1d20:	99 0b       	sbc	r25, r25
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	64 e6       	ldi	r22, 0x64	; 100
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    1d2c:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <CQRx_front>
    1d30:	78 94       	sei
    1d32:	88 e0       	ldi	r24, 0x08	; 8
    1d34:	28 02       	muls	r18, r24
    1d36:	b0 01       	movw	r22, r0
    1d38:	11 24       	eor	r1, r1
    1d3a:	6c 51       	subi	r22, 0x1C	; 28
    1d3c:	79 4d       	sbci	r23, 0xD9	; 217
    1d3e:	83 2f       	mov	r24, r19
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <processCAN>
    1d46:	08 95       	ret

00001d48 <CQTx_enqueue>:

//Add unprocessed communication to queue
void CQTx_enqueue(uint8_t* data)
{
    1d48:	fc 01       	movw	r30, r24
	DBG1("A2:CQTx: %d", CQTx_size);

	CQ_MX_LOCK();
    1d4a:	f8 94       	cli
	//Get position of new data
	CQTx_rear = (CQTx_rear + 1) % TX_QUEUE_SIZE;
    1d4c:	80 91 ab 25 	lds	r24, 0x25AB	; 0x8025ab <CQTx_rear>
    1d50:	08 2e       	mov	r0, r24
    1d52:	00 0c       	add	r0, r0
    1d54:	99 0b       	sbc	r25, r25
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	6a e0       	ldi	r22, 0x0A	; 10
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    1d60:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <CQTx_rear>
	CQTx_size++;
    1d64:	80 91 ac 25 	lds	r24, 0x25AC	; 0x8025ac <CQTx_size>
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <CQTx_size>
	CQ_MX_UNLOCK();
    1d6e:	78 94       	sei

	//DBG2("EnQ %d, 0x%X", CQ_Size, &CQ_Size);
	//Print error message to screen if CAn buffer overflow
	//Buffer overflow should not occur in the field, increase size if buffer ever overflows
	if (CQTx_size >= TX_QUEUE_SIZE)
    1d70:	80 91 ac 25 	lds	r24, 0x25AC	; 0x8025ac <CQTx_size>
	{
	}

	uint8_t *p = CQTx_data_queue[CQTx_rear];
    1d74:	a0 91 ab 25 	lds	r26, 0x25AB	; 0x8025ab <CQTx_rear>
	//Copy over data
	memcpy(&p[0], &data[0], TX_BLOCK_SIZE);
    1d78:	8b e0       	ldi	r24, 0x0B	; 11
    1d7a:	a8 02       	muls	r26, r24
    1d7c:	d0 01       	movw	r26, r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	a3 55       	subi	r26, 0x53	; 83
    1d82:	ba 4d       	sbci	r27, 0xDA	; 218
    1d84:	8b e0       	ldi	r24, 0x0B	; 11
    1d86:	01 90       	ld	r0, Z+
    1d88:	0d 92       	st	X+, r0
    1d8a:	8a 95       	dec	r24
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <CQTx_enqueue+0x3e>
    1d8e:	08 95       	ret

00001d90 <CQTx_dequeue>:
}

//Get the communication data at the front of the queue
void CQTx_dequeue(void)
{
	if (CQTx_size == 0)
    1d90:	80 91 ac 25 	lds	r24, 0x25AC	; 0x8025ac <CQTx_size>
    1d94:	88 23       	and	r24, r24
    1d96:	09 f1       	breq	.+66     	; 0x1dda <CQTx_dequeue+0x4a>
		return;

	uint8_t*  data;

	data = CQTx_data_queue[CQTx_front];
    1d98:	e0 91 a8 25 	lds	r30, 0x25A8	; 0x8025a8 <CQTx_front>
    1d9c:	8b e0       	ldi	r24, 0x0B	; 11
    1d9e:	e8 02       	muls	r30, r24
    1da0:	f0 01       	movw	r30, r0
    1da2:	11 24       	eor	r1, r1
    1da4:	e3 55       	subi	r30, 0x53	; 83
    1da6:	fa 4d       	sbci	r31, 0xDA	; 218
	//Update new front
	CQTx_size--;
    1da8:	80 91 ac 25 	lds	r24, 0x25AC	; 0x8025ac <CQTx_size>
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <CQTx_size>
	CQTx_front = (CQTx_front + 1) % TX_QUEUE_SIZE;
    1db2:	80 91 a8 25 	lds	r24, 0x25A8	; 0x8025a8 <CQTx_front>
    1db6:	08 2e       	mov	r0, r24
    1db8:	00 0c       	add	r0, r0
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	6a e0       	ldi	r22, 0x0A	; 10
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    1dc6:	80 93 a8 25 	sts	0x25A8, r24	; 0x8025a8 <CQTx_front>
	transmit_CAN_((uint16_t)data[0], data[1], data[2], &data[3]);
    1dca:	9f 01       	movw	r18, r30
    1dcc:	2d 5f       	subi	r18, 0xFD	; 253
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	42 81       	ldd	r20, Z+2	; 0x02
    1dd2:	61 81       	ldd	r22, Z+1	; 0x01
    1dd4:	80 81       	ld	r24, Z
    1dd6:	0e 94 a5 0c 	call	0x194a	; 0x194a <transmit_CAN_>
    1dda:	08 95       	ret

00001ddc <ReadU32BE>:
		{
			sd_card_passed = FALSE;
			return;
		}
	}
}
    1ddc:	fc 01       	movw	r30, r24
    1dde:	ac 01       	movw	r20, r24
    1de0:	4c 5f       	subi	r20, 0xFC	; 252
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	cb 01       	movw	r24, r22
    1dea:	b8 2f       	mov	r27, r24
    1dec:	a7 2f       	mov	r26, r23
    1dee:	96 2f       	mov	r25, r22
    1df0:	88 27       	eor	r24, r24
    1df2:	21 91       	ld	r18, Z+
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	62 0f       	add	r22, r18
    1dfa:	71 1d       	adc	r23, r1
    1dfc:	81 1d       	adc	r24, r1
    1dfe:	91 1d       	adc	r25, r1
    1e00:	e4 17       	cp	r30, r20
    1e02:	f5 07       	cpc	r31, r21
    1e04:	91 f7       	brne	.-28     	; 0x1dea <ReadU32BE+0xe>
    1e06:	08 95       	ret

00001e08 <ReadU16BE>:
    1e08:	fc 01       	movw	r30, r24
    1e0a:	20 81       	ld	r18, Z
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	32 2f       	mov	r19, r18
    1e10:	22 27       	eor	r18, r18
    1e12:	81 81       	ldd	r24, Z+1	; 0x01
    1e14:	a9 01       	movw	r20, r18
    1e16:	48 0f       	add	r20, r24
    1e18:	51 1d       	adc	r21, r1
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	08 95       	ret

00001e1e <log_event>:
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	ec 01       	movw	r28, r24
    1e2e:	f8 94       	cli
    1e30:	10 e0       	ldi	r17, 0x00	; 0
    1e32:	0f 2e       	mov	r0, r31
    1e34:	f8 e2       	ldi	r31, 0x28	; 40
    1e36:	cf 2e       	mov	r12, r31
    1e38:	d1 2c       	mov	r13, r1
    1e3a:	e1 2c       	mov	r14, r1
    1e3c:	f1 2c       	mov	r15, r1
    1e3e:	f0 2d       	mov	r31, r0
    1e40:	0a c0       	rjmp	.+20     	; 0x1e56 <log_event+0x38>
    1e42:	2f ef       	ldi	r18, 0xFF	; 255
    1e44:	86 e7       	ldi	r24, 0x76	; 118
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	21 50       	subi	r18, 0x01	; 1
    1e4a:	80 40       	sbci	r24, 0x00	; 0
    1e4c:	90 40       	sbci	r25, 0x00	; 0
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <log_event+0x2a>
    1e50:	00 c0       	rjmp	.+0      	; 0x1e52 <log_event+0x34>
    1e52:	00 00       	nop
    1e54:	1f 5f       	subi	r17, 0xFF	; 255
    1e56:	60 91 71 23 	lds	r22, 0x2371	; 0x802371 <num_entries>
    1e5a:	70 91 72 23 	lds	r23, 0x2372	; 0x802372 <num_entries+0x1>
    1e5e:	80 91 73 23 	lds	r24, 0x2373	; 0x802373 <num_entries+0x2>
    1e62:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <num_entries+0x3>
    1e66:	a7 01       	movw	r20, r14
    1e68:	96 01       	movw	r18, r12
    1e6a:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    1e6e:	ca 01       	movw	r24, r20
    1e70:	b9 01       	movw	r22, r18
    1e72:	6e 5f       	subi	r22, 0xFE	; 254
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	8f 4f       	sbci	r24, 0xFF	; 255
    1e78:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7a:	0e 94 33 28 	call	0x5066	; 0x5066 <read_block_SD>
    1e7e:	81 11       	cpse	r24, r1
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <log_event+0x6a>
    1e82:	13 30       	cpi	r17, 0x03	; 3
    1e84:	f1 f6       	brne	.-68     	; 0x1e42 <log_event+0x24>
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <log_event+0x6e>
    1e88:	13 30       	cpi	r17, 0x03	; 3
    1e8a:	d1 f4       	brne	.+52     	; 0x1ec0 <log_event+0xa2>
    1e8c:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
    1e90:	78 94       	sei
    1e92:	80 e4       	ldi	r24, 0x40	; 64
    1e94:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    1e98:	80 e1       	ldi	r24, 0x10	; 16
    1e9a:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
    1eba:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <send_SD_card_fail>
    1ebe:	32 c2       	rjmp	.+1124   	; 0x2324 <log_event+0x506>
    1ec0:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1ec4:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1ec8:	88 81       	ld	r24, Y
    1eca:	ec 5a       	subi	r30, 0xAC	; 172
    1ecc:	fe 4d       	sbci	r31, 0xDE	; 222
    1ece:	80 83       	st	Z, r24
    1ed0:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1ed4:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	eb 5a       	subi	r30, 0xAB	; 171
    1edc:	fe 4d       	sbci	r31, 0xDE	; 222
    1ede:	80 83       	st	Z, r24
    1ee0:	19 81       	ldd	r17, Y+1	; 0x01
    1ee2:	11 23       	and	r17, r17
    1ee4:	b1 f0       	breq	.+44     	; 0x1f12 <log_event+0xf4>
    1ee6:	32 e0       	ldi	r19, 0x02	; 2
    1ee8:	31 0f       	add	r19, r17
    1eea:	22 e0       	ldi	r18, 0x02	; 2
    1eec:	82 2f       	mov	r24, r18
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1ef4:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1ef8:	e8 0f       	add	r30, r24
    1efa:	f9 1f       	adc	r31, r25
    1efc:	de 01       	movw	r26, r28
    1efe:	a8 0f       	add	r26, r24
    1f00:	b9 1f       	adc	r27, r25
    1f02:	8c 91       	ld	r24, X
    1f04:	ec 5a       	subi	r30, 0xAC	; 172
    1f06:	fe 4d       	sbci	r31, 0xDE	; 222
    1f08:	80 83       	st	Z, r24
    1f0a:	2f 5f       	subi	r18, 0xFF	; 255
    1f0c:	23 13       	cpse	r18, r19
    1f0e:	ee cf       	rjmp	.-36     	; 0x1eec <log_event+0xce>
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <log_event+0xf6>
    1f12:	32 e0       	ldi	r19, 0x02	; 2
    1f14:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1f18:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    1f1c:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1f20:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1f24:	e3 0f       	add	r30, r19
    1f26:	f1 1d       	adc	r31, r1
    1f28:	ec 5a       	subi	r30, 0xAC	; 172
    1f2a:	fe 4d       	sbci	r31, 0xDE	; 222
    1f2c:	90 83       	st	Z, r25
    1f2e:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1f32:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	93 0f       	add	r25, r19
    1f3a:	e9 0f       	add	r30, r25
    1f3c:	f1 1d       	adc	r31, r1
    1f3e:	ec 5a       	subi	r30, 0xAC	; 172
    1f40:	fe 4d       	sbci	r31, 0xDE	; 222
    1f42:	80 83       	st	Z, r24
    1f44:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1f48:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	83 0f       	add	r24, r19
    1f50:	e8 0f       	add	r30, r24
    1f52:	f1 1d       	adc	r31, r1
    1f54:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <hours>
    1f58:	90 91 91 25 	lds	r25, 0x2591	; 0x802591 <hours+0x1>
    1f5c:	ec 5a       	subi	r30, 0xAC	; 172
    1f5e:	fe 4d       	sbci	r31, 0xDE	; 222
    1f60:	90 83       	st	Z, r25
    1f62:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1f66:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	83 0f       	add	r24, r19
    1f6e:	e8 0f       	add	r30, r24
    1f70:	f1 1d       	adc	r31, r1
    1f72:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <hours>
    1f76:	90 91 91 25 	lds	r25, 0x2591	; 0x802591 <hours+0x1>
    1f7a:	ec 5a       	subi	r30, 0xAC	; 172
    1f7c:	fe 4d       	sbci	r31, 0xDE	; 222
    1f7e:	80 83       	st	Z, r24
    1f80:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <current_position>
    1f84:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <current_position+0x1>
    1f88:	3c 5f       	subi	r19, 0xFC	; 252
    1f8a:	e3 0f       	add	r30, r19
    1f8c:	f1 1d       	adc	r31, r1
    1f8e:	80 91 89 25 	lds	r24, 0x2589	; 0x802589 <minutes>
    1f92:	ec 5a       	subi	r30, 0xAC	; 172
    1f94:	fe 4d       	sbci	r31, 0xDE	; 222
    1f96:	80 83       	st	Z, r24
    1f98:	c0 e0       	ldi	r28, 0x00	; 0
    1f9a:	0f 2e       	mov	r0, r31
    1f9c:	f8 e2       	ldi	r31, 0x28	; 40
    1f9e:	cf 2e       	mov	r12, r31
    1fa0:	d1 2c       	mov	r13, r1
    1fa2:	e1 2c       	mov	r14, r1
    1fa4:	f1 2c       	mov	r15, r1
    1fa6:	f0 2d       	mov	r31, r0
    1fa8:	0a c0       	rjmp	.+20     	; 0x1fbe <log_event+0x1a0>
    1faa:	2f ef       	ldi	r18, 0xFF	; 255
    1fac:	86 e7       	ldi	r24, 0x76	; 118
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	21 50       	subi	r18, 0x01	; 1
    1fb2:	80 40       	sbci	r24, 0x00	; 0
    1fb4:	90 40       	sbci	r25, 0x00	; 0
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <log_event+0x192>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <log_event+0x19c>
    1fba:	00 00       	nop
    1fbc:	cf 5f       	subi	r28, 0xFF	; 255
    1fbe:	60 91 71 23 	lds	r22, 0x2371	; 0x802371 <num_entries>
    1fc2:	70 91 72 23 	lds	r23, 0x2372	; 0x802372 <num_entries+0x1>
    1fc6:	80 91 73 23 	lds	r24, 0x2373	; 0x802373 <num_entries+0x2>
    1fca:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <num_entries+0x3>
    1fce:	a7 01       	movw	r20, r14
    1fd0:	96 01       	movw	r18, r12
    1fd2:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	b9 01       	movw	r22, r18
    1fda:	6e 5f       	subi	r22, 0xFE	; 254
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <write_block_SD>
    1fe6:	81 11       	cpse	r24, r1
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <log_event+0x1d2>
    1fea:	c3 30       	cpi	r28, 0x03	; 3
    1fec:	f1 f6       	brne	.-68     	; 0x1faa <log_event+0x18c>
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <log_event+0x1d6>
    1ff0:	c3 30       	cpi	r28, 0x03	; 3
    1ff2:	29 f5       	brne	.+74     	; 0x203e <log_event+0x220>
    1ff4:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
    1ff8:	78 94       	sei
    1ffa:	80 e4       	ldi	r24, 0x40	; 64
    1ffc:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    2000:	80 e1       	ldi	r24, 0x10	; 16
    2002:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
    2022:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <send_SD_card_fail>
    2026:	7e c1       	rjmp	.+764    	; 0x2324 <log_event+0x506>
    2028:	2f ef       	ldi	r18, 0xFF	; 255
    202a:	86 e7       	ldi	r24, 0x76	; 118
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	21 50       	subi	r18, 0x01	; 1
    2030:	80 40       	sbci	r24, 0x00	; 0
    2032:	90 40       	sbci	r25, 0x00	; 0
    2034:	e1 f7       	brne	.-8      	; 0x202e <log_event+0x210>
    2036:	00 c0       	rjmp	.+0      	; 0x2038 <log_event+0x21a>
    2038:	00 00       	nop
    203a:	cf 5f       	subi	r28, 0xFF	; 255
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <log_event+0x222>
    203e:	c0 e0       	ldi	r28, 0x00	; 0
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 33 28 	call	0x5066	; 0x5066 <read_block_SD>
    204c:	81 11       	cpse	r24, r1
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <log_event+0x238>
    2050:	c3 30       	cpi	r28, 0x03	; 3
    2052:	51 f7       	brne	.-44     	; 0x2028 <log_event+0x20a>
    2054:	02 c0       	rjmp	.+4      	; 0x205a <log_event+0x23c>
    2056:	c3 30       	cpi	r28, 0x03	; 3
    2058:	d1 f4       	brne	.+52     	; 0x208e <log_event+0x270>
    205a:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
    205e:	78 94       	sei
    2060:	80 e4       	ldi	r24, 0x40	; 64
    2062:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    2066:	80 e1       	ldi	r24, 0x10	; 16
    2068:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
    2088:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <send_SD_card_fail>
    208c:	4b c1       	rjmp	.+662    	; 0x2324 <log_event+0x506>
    208e:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <num_entries>
    2092:	90 91 72 23 	lds	r25, 0x2372	; 0x802372 <num_entries+0x1>
    2096:	a0 91 73 23 	lds	r26, 0x2373	; 0x802373 <num_entries+0x2>
    209a:	b0 91 74 23 	lds	r27, 0x2374	; 0x802374 <num_entries+0x3>
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	a1 1d       	adc	r26, r1
    20a2:	b1 1d       	adc	r27, r1
    20a4:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <num_entries>
    20a8:	90 93 72 23 	sts	0x2372, r25	; 0x802372 <num_entries+0x1>
    20ac:	a0 93 73 23 	sts	0x2373, r26	; 0x802373 <num_entries+0x2>
    20b0:	b0 93 74 23 	sts	0x2374, r27	; 0x802374 <num_entries+0x3>
    20b4:	c0 91 a5 20 	lds	r28, 0x20A5	; 0x8020a5 <num_entries_pos>
    20b8:	d0 e0       	ldi	r29, 0x00	; 0
    20ba:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <num_entries>
    20be:	90 91 72 23 	lds	r25, 0x2372	; 0x802372 <num_entries+0x1>
    20c2:	a0 91 73 23 	lds	r26, 0x2373	; 0x802373 <num_entries+0x2>
    20c6:	b0 91 74 23 	lds	r27, 0x2374	; 0x802374 <num_entries+0x3>
    20ca:	8b 2f       	mov	r24, r27
    20cc:	99 27       	eor	r25, r25
    20ce:	aa 27       	eor	r26, r26
    20d0:	bb 27       	eor	r27, r27
    20d2:	fe 01       	movw	r30, r28
    20d4:	ec 5a       	subi	r30, 0xAC	; 172
    20d6:	fe 4d       	sbci	r31, 0xDE	; 222
    20d8:	80 83       	st	Z, r24
    20da:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <num_entries>
    20de:	90 91 72 23 	lds	r25, 0x2372	; 0x802372 <num_entries+0x1>
    20e2:	a0 91 73 23 	lds	r26, 0x2373	; 0x802373 <num_entries+0x2>
    20e6:	b0 91 74 23 	lds	r27, 0x2374	; 0x802374 <num_entries+0x3>
    20ea:	cd 01       	movw	r24, r26
    20ec:	aa 27       	eor	r26, r26
    20ee:	bb 27       	eor	r27, r27
    20f0:	fe 01       	movw	r30, r28
    20f2:	eb 5a       	subi	r30, 0xAB	; 171
    20f4:	fe 4d       	sbci	r31, 0xDE	; 222
    20f6:	80 83       	st	Z, r24
    20f8:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <num_entries>
    20fc:	90 91 72 23 	lds	r25, 0x2372	; 0x802372 <num_entries+0x1>
    2100:	a0 91 73 23 	lds	r26, 0x2373	; 0x802373 <num_entries+0x2>
    2104:	b0 91 74 23 	lds	r27, 0x2374	; 0x802374 <num_entries+0x3>
    2108:	89 2f       	mov	r24, r25
    210a:	9a 2f       	mov	r25, r26
    210c:	ab 2f       	mov	r26, r27
    210e:	bb 27       	eor	r27, r27
    2110:	fe 01       	movw	r30, r28
    2112:	ea 5a       	subi	r30, 0xAA	; 170
    2114:	fe 4d       	sbci	r31, 0xDE	; 222
    2116:	80 83       	st	Z, r24
    2118:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <num_entries>
    211c:	90 91 72 23 	lds	r25, 0x2372	; 0x802372 <num_entries+0x1>
    2120:	a0 91 73 23 	lds	r26, 0x2373	; 0x802373 <num_entries+0x2>
    2124:	b0 91 74 23 	lds	r27, 0x2374	; 0x802374 <num_entries+0x3>
    2128:	fe 01       	movw	r30, r28
    212a:	e9 5a       	subi	r30, 0xA9	; 169
    212c:	fe 4d       	sbci	r31, 0xDE	; 222
    212e:	80 83       	st	Z, r24
    2130:	60 91 71 23 	lds	r22, 0x2371	; 0x802371 <num_entries>
    2134:	70 91 72 23 	lds	r23, 0x2372	; 0x802372 <num_entries+0x1>
    2138:	80 91 73 23 	lds	r24, 0x2373	; 0x802373 <num_entries+0x2>
    213c:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <num_entries+0x3>
    2140:	28 e2       	ldi	r18, 0x28	; 40
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    214c:	67 2b       	or	r22, r23
    214e:	68 2b       	or	r22, r24
    2150:	69 2b       	or	r22, r25
    2152:	61 f4       	brne	.+24     	; 0x216c <log_event+0x34e>
    2154:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <current_position>
    2158:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <current_position+0x1>
    215c:	fe 01       	movw	r30, r28
    215e:	e7 5a       	subi	r30, 0xA7	; 167
    2160:	fe 4d       	sbci	r31, 0xDE	; 222
    2162:	10 82       	st	Z, r1
    2164:	c6 5a       	subi	r28, 0xA6	; 166
    2166:	de 4d       	sbci	r29, 0xDE	; 222
    2168:	18 82       	st	Y, r1
    216a:	1a c0       	rjmp	.+52     	; 0x21a0 <log_event+0x382>
    216c:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <current_position>
    2170:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <current_position+0x1>
    2174:	07 96       	adiw	r24, 0x07	; 7
    2176:	81 0f       	add	r24, r17
    2178:	91 1d       	adc	r25, r1
    217a:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <current_position>
    217e:	90 93 50 23 	sts	0x2350, r25	; 0x802350 <current_position+0x1>
    2182:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <current_position>
    2186:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <current_position+0x1>
    218a:	fe 01       	movw	r30, r28
    218c:	e7 5a       	subi	r30, 0xA7	; 167
    218e:	fe 4d       	sbci	r31, 0xDE	; 222
    2190:	90 83       	st	Z, r25
    2192:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <current_position>
    2196:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <current_position+0x1>
    219a:	c6 5a       	subi	r28, 0xA6	; 166
    219c:	de 4d       	sbci	r29, 0xDE	; 222
    219e:	88 83       	st	Y, r24
    21a0:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <brush_hours>
    21a4:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <brush_hours+0x1>
    21a8:	e4 e5       	ldi	r30, 0x54	; 84
    21aa:	f1 e2       	ldi	r31, 0x21	; 33
    21ac:	97 8b       	std	Z+23, r25	; 0x17
    21ae:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <brush_hours>
    21b2:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <brush_hours+0x1>
    21b6:	80 8f       	std	Z+24, r24	; 0x18
    21b8:	80 91 80 25 	lds	r24, 0x2580	; 0x802580 <vacuum_hours>
    21bc:	90 91 81 25 	lds	r25, 0x2581	; 0x802581 <vacuum_hours+0x1>
    21c0:	91 8f       	std	Z+25, r25	; 0x19
    21c2:	80 91 80 25 	lds	r24, 0x2580	; 0x802580 <vacuum_hours>
    21c6:	90 91 81 25 	lds	r25, 0x2581	; 0x802581 <vacuum_hours+0x1>
    21ca:	82 8f       	std	Z+26, r24	; 0x1a
    21cc:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <presweep_hours>
    21d0:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <presweep_hours+0x1>
    21d4:	93 8f       	std	Z+27, r25	; 0x1b
    21d6:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <presweep_hours>
    21da:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <presweep_hours+0x1>
    21de:	84 8f       	std	Z+28, r24	; 0x1c
    21e0:	80 91 a1 20 	lds	r24, 0x20A1	; 0x8020a1 <eco_hours>
    21e4:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <eco_hours+0x1>
    21e8:	95 8f       	std	Z+29, r25	; 0x1d
    21ea:	80 91 a1 20 	lds	r24, 0x20A1	; 0x8020a1 <eco_hours>
    21ee:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <eco_hours+0x1>
    21f2:	86 8f       	std	Z+30, r24	; 0x1e
    21f4:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <water_pump_hours>
    21f8:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <water_pump_hours+0x1>
    21fc:	97 8f       	std	Z+31, r25	; 0x1f
    21fe:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <water_pump_hours>
    2202:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <water_pump_hours+0x1>
    2206:	80 a3       	std	Z+32, r24	; 0x20
    2208:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <detergent_pump_hours>
    220c:	90 91 8b 25 	lds	r25, 0x258B	; 0x80258b <detergent_pump_hours+0x1>
    2210:	91 a3       	std	Z+33, r25	; 0x21
    2212:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <detergent_pump_hours>
    2216:	90 91 8b 25 	lds	r25, 0x258B	; 0x80258b <detergent_pump_hours+0x1>
    221a:	82 a3       	std	Z+34, r24	; 0x22
    221c:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <brush1_average_current>
    2220:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <brush1_average_current+0x1>
    2224:	93 a3       	std	Z+35, r25	; 0x23
    2226:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <brush1_average_current>
    222a:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <brush1_average_current+0x1>
    222e:	84 a3       	std	Z+36, r24	; 0x24
    2230:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <brush2_average_current>
    2234:	90 91 90 20 	lds	r25, 0x2090	; 0x802090 <brush2_average_current+0x1>
    2238:	95 a3       	std	Z+37, r25	; 0x25
    223a:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <brush2_average_current>
    223e:	90 91 90 20 	lds	r25, 0x2090	; 0x802090 <brush2_average_current+0x1>
    2242:	86 a3       	std	Z+38, r24	; 0x26
    2244:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <vacuum_average_current>
    2248:	90 91 95 25 	lds	r25, 0x2595	; 0x802595 <vacuum_average_current+0x1>
    224c:	97 a3       	std	Z+39, r25	; 0x27
    224e:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <vacuum_average_current>
    2252:	90 91 95 25 	lds	r25, 0x2595	; 0x802595 <vacuum_average_current+0x1>
    2256:	80 a7       	std	Z+40, r24	; 0x28
    2258:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <presweep_average_current>
    225c:	90 91 7f 25 	lds	r25, 0x257F	; 0x80257f <presweep_average_current+0x1>
    2260:	91 a7       	std	Z+41, r25	; 0x29
    2262:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <presweep_average_current>
    2266:	90 91 7f 25 	lds	r25, 0x257F	; 0x80257f <presweep_average_current+0x1>
    226a:	82 a7       	std	Z+42, r24	; 0x2a
    226c:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <max_brush1_overall_current>
    2270:	90 91 6a 20 	lds	r25, 0x206A	; 0x80206a <max_brush1_overall_current+0x1>
    2274:	93 a7       	std	Z+43, r25	; 0x2b
    2276:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <max_brush1_overall_current>
    227a:	90 91 6a 20 	lds	r25, 0x206A	; 0x80206a <max_brush1_overall_current+0x1>
    227e:	84 a7       	std	Z+44, r24	; 0x2c
    2280:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <max_brush2_overall_current>
    2284:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <max_brush2_overall_current+0x1>
    2288:	95 a7       	std	Z+45, r25	; 0x2d
    228a:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <max_brush2_overall_current>
    228e:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <max_brush2_overall_current+0x1>
    2292:	86 a7       	std	Z+46, r24	; 0x2e
    2294:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <max_vacuum_overall_current>
    2298:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <max_vacuum_overall_current+0x1>
    229c:	97 a7       	std	Z+47, r25	; 0x2f
    229e:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <max_vacuum_overall_current>
    22a2:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <max_vacuum_overall_current+0x1>
    22a6:	80 ab       	std	Z+48, r24	; 0x30
    22a8:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <max_presweep_overall_current>
    22ac:	90 91 64 23 	lds	r25, 0x2364	; 0x802364 <max_presweep_overall_current+0x1>
    22b0:	91 ab       	std	Z+49, r25	; 0x31
    22b2:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <max_presweep_overall_current>
    22b6:	90 91 64 23 	lds	r25, 0x2364	; 0x802364 <max_presweep_overall_current+0x1>
    22ba:	82 ab       	std	Z+50, r24	; 0x32
    22bc:	c0 e0       	ldi	r28, 0x00	; 0
    22be:	0a c0       	rjmp	.+20     	; 0x22d4 <log_event+0x4b6>
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	86 e7       	ldi	r24, 0x76	; 118
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	21 50       	subi	r18, 0x01	; 1
    22c8:	80 40       	sbci	r24, 0x00	; 0
    22ca:	90 40       	sbci	r25, 0x00	; 0
    22cc:	e1 f7       	brne	.-8      	; 0x22c6 <log_event+0x4a8>
    22ce:	00 c0       	rjmp	.+0      	; 0x22d0 <log_event+0x4b2>
    22d0:	00 00       	nop
    22d2:	cf 5f       	subi	r28, 0xFF	; 255
    22d4:	61 e0       	ldi	r22, 0x01	; 1
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <write_block_SD>
    22e0:	81 11       	cpse	r24, r1
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <log_event+0x4cc>
    22e4:	c3 30       	cpi	r28, 0x03	; 3
    22e6:	61 f7       	brne	.-40     	; 0x22c0 <log_event+0x4a2>
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <log_event+0x4d0>
    22ea:	c3 30       	cpi	r28, 0x03	; 3
    22ec:	d1 f4       	brne	.+52     	; 0x2322 <log_event+0x504>
    22ee:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
    22f2:	78 94       	sei
    22f4:	80 e4       	ldi	r24, 0x40	; 64
    22f6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    22fa:	80 e1       	ldi	r24, 0x10	; 16
    22fc:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
    231c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <send_SD_card_fail>
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <log_event+0x506>
    2322:	78 94       	sei
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	08 95       	ret

00002334 <clear_event_buffer>:

//Clear the event buffer array
void clear_event_buffer(void)
{
	for (uint16_t i = 0; i < ENTRY_BYTES_PER_BLOCK; i++)
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
	{
		event_buffer[i] = 0;
    2338:	fc 01       	movw	r30, r24
    233a:	ec 5a       	subi	r30, 0xAC	; 172
    233c:	fe 4d       	sbci	r31, 0xDE	; 222
    233e:	10 82       	st	Z, r1
}

//Clear the event buffer array
void clear_event_buffer(void)
{
	for (uint16_t i = 0; i < ENTRY_BYTES_PER_BLOCK; i++)
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	84 3f       	cpi	r24, 0xF4	; 244
    2344:	21 e0       	ldi	r18, 0x01	; 1
    2346:	92 07       	cpc	r25, r18
    2348:	b9 f7       	brne	.-18     	; 0x2338 <clear_event_buffer+0x4>
	{
		event_buffer[i] = 0;
	}
}
    234a:	08 95       	ret

0000234c <initialize_event_logging>:
		v >>= 8;
	}
}

void initialize_event_logging(void)
{
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	65 97       	sbiw	r28, 0x15	; 21
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	de bf       	out	0x3e, r29	; 62
	///*Testing without log data*/
	//return;

	//Read first block of SD card which contains logging info
	uint8_t counter = 0;
    235e:	10 e0       	ldi	r17, 0x00	; 0
	while (!read_block_SD(EVENT_LOGGING_INFO_ADDR) && counter < 3)
    2360:	0a c0       	rjmp	.+20     	; 0x2376 <initialize_event_logging+0x2a>
    2362:	2f ef       	ldi	r18, 0xFF	; 255
    2364:	80 e7       	ldi	r24, 0x70	; 112
    2366:	92 e0       	ldi	r25, 0x02	; 2
    2368:	21 50       	subi	r18, 0x01	; 1
    236a:	80 40       	sbci	r24, 0x00	; 0
    236c:	90 40       	sbci	r25, 0x00	; 0
    236e:	e1 f7       	brne	.-8      	; 0x2368 <initialize_event_logging+0x1c>
    2370:	00 c0       	rjmp	.+0      	; 0x2372 <initialize_event_logging+0x26>
    2372:	00 00       	nop
	{
		_delay_ms(25);
		counter++;
    2374:	1f 5f       	subi	r17, 0xFF	; 255
	///*Testing without log data*/
	//return;

	//Read first block of SD card which contains logging info
	uint8_t counter = 0;
	while (!read_block_SD(EVENT_LOGGING_INFO_ADDR) && counter < 3)
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 33 28 	call	0x5066	; 0x5066 <read_block_SD>
    2382:	81 11       	cpse	r24, r1
    2384:	03 c0       	rjmp	.+6      	; 0x238c <initialize_event_logging+0x40>
    2386:	13 30       	cpi	r17, 0x03	; 3
    2388:	61 f7       	brne	.-40     	; 0x2362 <initialize_event_logging+0x16>
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <initialize_event_logging+0x44>
	{
		_delay_ms(25);
		counter++;
	}
	//If reading the SD card fails 3 times, label it non functioning
	if (counter == 3)
    238c:	13 30       	cpi	r17, 0x03	; 3
    238e:	19 f4       	brne	.+6      	; 0x2396 <initialize_event_logging+0x4a>
	{
		sd_card_passed = FALSE;
    2390:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
		return;
    2394:	ff c0       	rjmp	.+510    	; 0x2594 <initialize_event_logging+0x248>
	}

	//Get the position of the number of entries byte
	num_entries_pos = (uint8_t)strlen(EVENT_LOGGING_HEADER) + 1;// +strlen(SERIAL_HEADER) + 1;
    2396:	8f e0       	ldi	r24, 0x0F	; 15
    2398:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <num_entries_pos>

	//Check if the OPUS SOLUTIONS header exists in the SD Card
	char header[21];
	sprintf(header, "%.20s", event_buffer);
    239c:	84 e5       	ldi	r24, 0x54	; 84
    239e:	91 e2       	ldi	r25, 0x21	; 33
    23a0:	9f 93       	push	r25
    23a2:	8f 93       	push	r24
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e2       	ldi	r25, 0x20	; 32
    23a8:	9f 93       	push	r25
    23aa:	8f 93       	push	r24
    23ac:	8e 01       	movw	r16, r28
    23ae:	0f 5f       	subi	r16, 0xFF	; 255
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	1f 93       	push	r17
    23b4:	0f 93       	push	r16
    23b6:	0e 94 17 32 	call	0x642e	; 0x642e <sprintf>
	if (strcmp(header, EVENT_LOGGING_HEADER) != 0)
    23ba:	66 e0       	ldi	r22, 0x06	; 6
    23bc:	70 e2       	ldi	r23, 0x20	; 32
    23be:	c8 01       	movw	r24, r16
    23c0:	0e 94 0e 32 	call	0x641c	; 0x641c <strcmp>
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	89 2b       	or	r24, r25
    23d2:	59 f1       	breq	.+86     	; 0x242a <initialize_event_logging+0xde>
	{
		//Otherwise clear block and write the header
		clear_event_buffer();
    23d4:	0e 94 9a 11 	call	0x2334	; 0x2334 <clear_event_buffer>
		sprintf((char*)event_buffer, EVENT_LOGGING_HEADER);
    23d8:	8f e0       	ldi	r24, 0x0F	; 15
    23da:	e6 e0       	ldi	r30, 0x06	; 6
    23dc:	f0 e2       	ldi	r31, 0x20	; 32
    23de:	a4 e5       	ldi	r26, 0x54	; 84
    23e0:	b1 e2       	ldi	r27, 0x21	; 33
    23e2:	01 90       	ld	r0, Z+
    23e4:	0d 92       	st	X+, r0
    23e6:	8a 95       	dec	r24
    23e8:	e1 f7       	brne	.-8      	; 0x23e2 <initialize_event_logging+0x96>
		event_buffer[i++ + 4] = 1;
		event_buffer[i++ + 4] = 2;
		event_buffer[i++ + 4] = 3;
		event_buffer[i++ + 4] = 4;
		event_buffer[i++ + 4] = 5;	*/
		current_position = 0;
    23ea:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <current_position>
    23ee:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <current_position+0x1>

		counter = 0;
    23f2:	10 e0       	ldi	r17, 0x00	; 0
		while (!write_block_SD(EVENT_LOGGING_INFO_ADDR) && counter < 3)
    23f4:	0a c0       	rjmp	.+20     	; 0x240a <initialize_event_logging+0xbe>
    23f6:	2f ef       	ldi	r18, 0xFF	; 255
    23f8:	80 e7       	ldi	r24, 0x70	; 112
    23fa:	92 e0       	ldi	r25, 0x02	; 2
    23fc:	21 50       	subi	r18, 0x01	; 1
    23fe:	80 40       	sbci	r24, 0x00	; 0
    2400:	90 40       	sbci	r25, 0x00	; 0
    2402:	e1 f7       	brne	.-8      	; 0x23fc <initialize_event_logging+0xb0>
    2404:	00 c0       	rjmp	.+0      	; 0x2406 <initialize_event_logging+0xba>
    2406:	00 00       	nop
		{
			_delay_ms(25);
			counter++;
    2408:	1f 5f       	subi	r17, 0xFF	; 255
		event_buffer[i++ + 4] = 4;
		event_buffer[i++ + 4] = 5;	*/
		current_position = 0;

		counter = 0;
		while (!write_block_SD(EVENT_LOGGING_INFO_ADDR) && counter < 3)
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <write_block_SD>
    2416:	81 11       	cpse	r24, r1
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <initialize_event_logging+0xd4>
    241a:	13 30       	cpi	r17, 0x03	; 3
    241c:	61 f7       	brne	.-40     	; 0x23f6 <initialize_event_logging+0xaa>
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <initialize_event_logging+0xd8>
		{
			_delay_ms(25);
			counter++;
		}

		if (counter == 3)
    2420:	13 30       	cpi	r17, 0x03	; 3
    2422:	d1 f4       	brne	.+52     	; 0x2458 <initialize_event_logging+0x10c>
		{
			sd_card_passed = FALSE;
    2424:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
			return;
    2428:	b5 c0       	rjmp	.+362    	; 0x2594 <initialize_event_logging+0x248>

	}
	else
	{
		//Read total num entries and current position
		num_entries = ReadU32BE((uint8_t*)&event_buffer[num_entries_pos]);		//IVA002: Code standardization
    242a:	00 91 a5 20 	lds	r16, 0x20A5	; 0x8020a5 <num_entries_pos>
    242e:	10 e0       	ldi	r17, 0x00	; 0
    2430:	0c 5a       	subi	r16, 0xAC	; 172
    2432:	1e 4d       	sbci	r17, 0xDE	; 222
    2434:	c8 01       	movw	r24, r16
    2436:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ReadU32BE>
    243a:	60 93 71 23 	sts	0x2371, r22	; 0x802371 <num_entries>
    243e:	70 93 72 23 	sts	0x2372, r23	; 0x802372 <num_entries+0x1>
    2442:	80 93 73 23 	sts	0x2373, r24	; 0x802373 <num_entries+0x2>
    2446:	90 93 74 23 	sts	0x2374, r25	; 0x802374 <num_entries+0x3>
		current_position = ReadU16BE((uint8_t*)&event_buffer[num_entries_pos]);	//IVA002: Code standardization
    244a:	c8 01       	movw	r24, r16
    244c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <ReadU16BE>
    2450:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <current_position>
    2454:	90 93 50 23 	sts	0x2350, r25	; 0x802350 <current_position+0x1>


	uint8_t position = 23;

	//Read all the statistics from the SD card
	brush_hours = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    2458:	e4 e5       	ldi	r30, 0x54	; 84
    245a:	f1 e2       	ldi	r31, 0x21	; 33
    245c:	87 89       	ldd	r24, Z+23	; 0x17
    245e:	20 8d       	ldd	r18, Z+24	; 0x18
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	98 2f       	mov	r25, r24
    2464:	88 27       	eor	r24, r24
    2466:	82 0f       	add	r24, r18
    2468:	91 1d       	adc	r25, r1
    246a:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <brush_hours>
    246e:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <brush_hours+0x1>
	vacuum_hours = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    2472:	81 8d       	ldd	r24, Z+25	; 0x19
    2474:	22 8d       	ldd	r18, Z+26	; 0x1a
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	98 2f       	mov	r25, r24
    247a:	88 27       	eor	r24, r24
    247c:	82 0f       	add	r24, r18
    247e:	91 1d       	adc	r25, r1
    2480:	80 93 80 25 	sts	0x2580, r24	; 0x802580 <vacuum_hours>
    2484:	90 93 81 25 	sts	0x2581, r25	; 0x802581 <vacuum_hours+0x1>
	presweep_hours = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    2488:	83 8d       	ldd	r24, Z+27	; 0x1b
    248a:	24 8d       	ldd	r18, Z+28	; 0x1c
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	98 2f       	mov	r25, r24
    2490:	88 27       	eor	r24, r24
    2492:	82 0f       	add	r24, r18
    2494:	91 1d       	adc	r25, r1
    2496:	80 93 78 23 	sts	0x2378, r24	; 0x802378 <presweep_hours>
    249a:	90 93 79 23 	sts	0x2379, r25	; 0x802379 <presweep_hours+0x1>
	eco_hours = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    249e:	85 8d       	ldd	r24, Z+29	; 0x1d
    24a0:	26 8d       	ldd	r18, Z+30	; 0x1e
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	98 2f       	mov	r25, r24
    24a6:	88 27       	eor	r24, r24
    24a8:	82 0f       	add	r24, r18
    24aa:	91 1d       	adc	r25, r1
    24ac:	80 93 a1 20 	sts	0x20A1, r24	; 0x8020a1 <eco_hours>
    24b0:	90 93 a2 20 	sts	0x20A2, r25	; 0x8020a2 <eco_hours+0x1>
	water_pump_hours = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    24b4:	87 8d       	ldd	r24, Z+31	; 0x1f
    24b6:	20 a1       	ldd	r18, Z+32	; 0x20
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	98 2f       	mov	r25, r24
    24bc:	88 27       	eor	r24, r24
    24be:	82 0f       	add	r24, r18
    24c0:	91 1d       	adc	r25, r1
    24c2:	80 93 3d 20 	sts	0x203D, r24	; 0x80203d <water_pump_hours>
    24c6:	90 93 3e 20 	sts	0x203E, r25	; 0x80203e <water_pump_hours+0x1>
	detergent_pump_hours = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    24ca:	81 a1       	ldd	r24, Z+33	; 0x21
    24cc:	22 a1       	ldd	r18, Z+34	; 0x22
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	98 2f       	mov	r25, r24
    24d2:	88 27       	eor	r24, r24
    24d4:	82 0f       	add	r24, r18
    24d6:	91 1d       	adc	r25, r1
    24d8:	80 93 8a 25 	sts	0x258A, r24	; 0x80258a <detergent_pump_hours>
    24dc:	90 93 8b 25 	sts	0x258B, r25	; 0x80258b <detergent_pump_hours+0x1>

	brush1_average_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    24e0:	83 a1       	ldd	r24, Z+35	; 0x23
    24e2:	24 a1       	ldd	r18, Z+36	; 0x24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	98 2f       	mov	r25, r24
    24e8:	88 27       	eor	r24, r24
    24ea:	82 0f       	add	r24, r18
    24ec:	91 1d       	adc	r25, r1
    24ee:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <brush1_average_current>
    24f2:	90 93 49 21 	sts	0x2149, r25	; 0x802149 <brush1_average_current+0x1>
	brush2_average_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    24f6:	85 a1       	ldd	r24, Z+37	; 0x25
    24f8:	26 a1       	ldd	r18, Z+38	; 0x26
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	98 2f       	mov	r25, r24
    24fe:	88 27       	eor	r24, r24
    2500:	82 0f       	add	r24, r18
    2502:	91 1d       	adc	r25, r1
    2504:	80 93 8f 20 	sts	0x208F, r24	; 0x80208f <brush2_average_current>
    2508:	90 93 90 20 	sts	0x2090, r25	; 0x802090 <brush2_average_current+0x1>
	vacuum_average_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    250c:	87 a1       	ldd	r24, Z+39	; 0x27
    250e:	20 a5       	ldd	r18, Z+40	; 0x28
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	98 2f       	mov	r25, r24
    2514:	88 27       	eor	r24, r24
    2516:	82 0f       	add	r24, r18
    2518:	91 1d       	adc	r25, r1
    251a:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <vacuum_average_current>
    251e:	90 93 95 25 	sts	0x2595, r25	; 0x802595 <vacuum_average_current+0x1>
	presweep_average_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    2522:	81 a5       	ldd	r24, Z+41	; 0x29
    2524:	22 a5       	ldd	r18, Z+42	; 0x2a
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	98 2f       	mov	r25, r24
    252a:	88 27       	eor	r24, r24
    252c:	82 0f       	add	r24, r18
    252e:	91 1d       	adc	r25, r1
    2530:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <presweep_average_current>
    2534:	90 93 7f 25 	sts	0x257F, r25	; 0x80257f <presweep_average_current+0x1>

	max_brush1_overall_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    2538:	83 a5       	ldd	r24, Z+43	; 0x2b
    253a:	24 a5       	ldd	r18, Z+44	; 0x2c
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	98 2f       	mov	r25, r24
    2540:	88 27       	eor	r24, r24
    2542:	82 0f       	add	r24, r18
    2544:	91 1d       	adc	r25, r1
    2546:	80 93 69 20 	sts	0x2069, r24	; 0x802069 <max_brush1_overall_current>
    254a:	90 93 6a 20 	sts	0x206A, r25	; 0x80206a <max_brush1_overall_current+0x1>
	max_brush2_overall_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    254e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2550:	26 a5       	ldd	r18, Z+46	; 0x2e
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	98 2f       	mov	r25, r24
    2556:	88 27       	eor	r24, r24
    2558:	82 0f       	add	r24, r18
    255a:	91 1d       	adc	r25, r1
    255c:	80 93 a4 25 	sts	0x25A4, r24	; 0x8025a4 <max_brush2_overall_current>
    2560:	90 93 a5 25 	sts	0x25A5, r25	; 0x8025a5 <max_brush2_overall_current+0x1>
	max_vacuum_overall_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    2564:	87 a5       	ldd	r24, Z+47	; 0x2f
    2566:	20 a9       	ldd	r18, Z+48	; 0x30
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	98 2f       	mov	r25, r24
    256c:	88 27       	eor	r24, r24
    256e:	82 0f       	add	r24, r18
    2570:	91 1d       	adc	r25, r1
    2572:	80 93 49 20 	sts	0x2049, r24	; 0x802049 <max_vacuum_overall_current>
    2576:	90 93 4a 20 	sts	0x204A, r25	; 0x80204a <max_vacuum_overall_current+0x1>
	max_presweep_overall_current = ((uint16_t)event_buffer[position] << 8) + event_buffer[position + 1]; position += 2;
    257a:	81 a9       	ldd	r24, Z+49	; 0x31
    257c:	22 a9       	ldd	r18, Z+50	; 0x32
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	98 2f       	mov	r25, r24
    2582:	88 27       	eor	r24, r24
    2584:	82 0f       	add	r24, r18
    2586:	91 1d       	adc	r25, r1
    2588:	80 93 63 23 	sts	0x2363, r24	; 0x802363 <max_presweep_overall_current>
    258c:	90 93 64 23 	sts	0x2364, r25	; 0x802364 <max_presweep_overall_current+0x1>

	event_logging = OFF;
    2590:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <event_logging>
}
    2594:	65 96       	adiw	r28, 0x15	; 21
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	08 95       	ret

000025a4 <initialize_event_log_queue>:

//Check if there are any more events to log in the queue
uint8_t log_queue_is_empty(void)
{
	return size_log == 0;
}
    25a4:	10 92 7b 23 	sts	0x237B, r1	; 0x80237b <size_log>
    25a8:	10 92 6f 20 	sts	0x206F, r1	; 0x80206f <front_log>
    25ac:	8f ef       	ldi	r24, 0xFF	; 255
    25ae:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <rear_log>
    25b2:	08 95       	ret

000025b4 <log_enqueue_data>:

//Add event with data into queue
void log_enqueue_data(uint8_t event_code, uint8_t num_data_bytes, uint8_t* data)
{
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
	///*Testing without log data*/
   //return;

	if (!sd_card_passed)
    25bc:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <sd_card_passed>
    25c0:	99 23       	and	r25, r25
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <log_enqueue_data+0x12>
    25c4:	67 c0       	rjmp	.+206    	; 0x2694 <log_enqueue_data+0xe0>
    25c6:	d5 2f       	mov	r29, r21
    25c8:	14 2f       	mov	r17, r20
    25ca:	c6 2f       	mov	r28, r22
    25cc:	08 2f       	mov	r16, r24
		return;

	//Update event position in the queue
	rear_log = (rear_log + 1) % MAX_LOG_QUEUE_SIZE;
    25ce:	80 91 82 25 	lds	r24, 0x2582	; 0x802582 <rear_log>
    25d2:	08 2e       	mov	r0, r24
    25d4:	00 0c       	add	r0, r0
    25d6:	99 0b       	sbc	r25, r25
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	62 e3       	ldi	r22, 0x32	; 50
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    25e2:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <rear_log>
	size_log++;
    25e6:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <size_log>
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	80 93 7b 23 	sts	0x237B, r24	; 0x80237b <size_log>

	//If the log queue overflow inform user through A1
	if (size_log >= MAX_LOG_QUEUE_SIZE)
    25f0:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <size_log>
    25f4:	82 33       	cpi	r24, 0x32	; 50
    25f6:	10 f0       	brcs	.+4      	; 0x25fc <log_enqueue_data+0x48>
	{
		send_SD_buffer_overflow();
    25f8:	0e 94 77 16 	call	0x2cee	; 0x2cee <send_SD_buffer_overflow>
	}

	//Copy over data to queue
	log_queue[rear_log][0] = event_code;
    25fc:	20 91 82 25 	lds	r18, 0x2582	; 0x802582 <rear_log>
    2600:	02 2e       	mov	r0, r18
    2602:	00 0c       	add	r0, r0
    2604:	33 0b       	sbc	r19, r19
    2606:	f9 01       	movw	r30, r18
    2608:	ee 0f       	add	r30, r30
    260a:	ff 1f       	adc	r31, r31
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
    2610:	22 0f       	add	r18, r18
    2612:	33 1f       	adc	r19, r19
    2614:	22 0f       	add	r18, r18
    2616:	33 1f       	adc	r19, r19
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	e3 58       	subi	r30, 0x83	; 131
    261e:	fc 4d       	sbci	r31, 0xDC	; 220
    2620:	00 83       	st	Z, r16
	log_queue[rear_log][1] = num_data_bytes;
    2622:	80 91 82 25 	lds	r24, 0x2582	; 0x802582 <rear_log>
    2626:	08 2e       	mov	r0, r24
    2628:	00 0c       	add	r0, r0
    262a:	99 0b       	sbc	r25, r25
    262c:	fc 01       	movw	r30, r24
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	e8 0f       	add	r30, r24
    2640:	f9 1f       	adc	r31, r25
    2642:	e3 58       	subi	r30, 0x83	; 131
    2644:	fc 4d       	sbci	r31, 0xDC	; 220
    2646:	c1 83       	std	Z+1, r28	; 0x01
	for (uint8_t j = 0; j < num_data_bytes; j++)
    2648:	cc 23       	and	r28, r28
    264a:	21 f1       	breq	.+72     	; 0x2694 <log_enqueue_data+0xe0>
    264c:	a1 2f       	mov	r26, r17
    264e:	bd 2f       	mov	r27, r29
    2650:	c1 50       	subi	r28, 0x01	; 1
    2652:	4c 2f       	mov	r20, r28
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	4d 5f       	subi	r20, 0xFD	; 253
    2658:	5f 4f       	sbci	r21, 0xFF	; 255
    265a:	22 e0       	ldi	r18, 0x02	; 2
    265c:	30 e0       	ldi	r19, 0x00	; 0
	{
		log_queue[rear_log][j + 2] = data[j];
    265e:	80 91 82 25 	lds	r24, 0x2582	; 0x802582 <rear_log>
    2662:	08 2e       	mov	r0, r24
    2664:	00 0c       	add	r0, r0
    2666:	99 0b       	sbc	r25, r25
    2668:	6d 91       	ld	r22, X+
    266a:	fc 01       	movw	r30, r24
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	e8 0f       	add	r30, r24
    267e:	f9 1f       	adc	r31, r25
    2680:	e3 58       	subi	r30, 0x83	; 131
    2682:	fc 4d       	sbci	r31, 0xDC	; 220
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	60 83       	st	Z, r22
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	//Copy over data to queue
	log_queue[rear_log][0] = event_code;
	log_queue[rear_log][1] = num_data_bytes;
	for (uint8_t j = 0; j < num_data_bytes; j++)
    268e:	24 17       	cp	r18, r20
    2690:	35 07       	cpc	r19, r21
    2692:	29 f7       	brne	.-54     	; 0x265e <log_enqueue_data+0xaa>
	{
		log_queue[rear_log][j + 2] = data[j];
	}
}
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	08 95       	ret

0000269e <log_enqueue>:

//Add event to queue
void log_enqueue(uint8_t event_code)
{
    269e:	cf 93       	push	r28
	///*Testing without log data*/
	//return;

	if (!sd_card_passed)
    26a0:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <sd_card_passed>
    26a4:	99 23       	and	r25, r25
    26a6:	f1 f1       	breq	.+124    	; 0x2724 <log_enqueue+0x86>
    26a8:	c8 2f       	mov	r28, r24
		return;

	rear_log = (rear_log + 1) % MAX_LOG_QUEUE_SIZE;
    26aa:	80 91 82 25 	lds	r24, 0x2582	; 0x802582 <rear_log>
    26ae:	08 2e       	mov	r0, r24
    26b0:	00 0c       	add	r0, r0
    26b2:	99 0b       	sbc	r25, r25
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	62 e3       	ldi	r22, 0x32	; 50
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    26be:	80 93 82 25 	sts	0x2582, r24	; 0x802582 <rear_log>
	size_log++;
    26c2:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <size_log>
    26c6:	9f 5f       	subi	r25, 0xFF	; 255
    26c8:	90 93 7b 23 	sts	0x237B, r25	; 0x80237b <size_log>

	if (size_log >= MAX_LOG_QUEUE_SIZE)
    26cc:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <size_log>
    26d0:	82 33       	cpi	r24, 0x32	; 50
    26d2:	10 f0       	brcs	.+4      	; 0x26d8 <log_enqueue+0x3a>
	{
		send_SD_buffer_overflow();
    26d4:	0e 94 77 16 	call	0x2cee	; 0x2cee <send_SD_buffer_overflow>
	}

	log_queue[rear_log][0] = event_code;
    26d8:	20 91 82 25 	lds	r18, 0x2582	; 0x802582 <rear_log>
    26dc:	02 2e       	mov	r0, r18
    26de:	00 0c       	add	r0, r0
    26e0:	33 0b       	sbc	r19, r19
    26e2:	f9 01       	movw	r30, r18
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	22 0f       	add	r18, r18
    26ea:	33 1f       	adc	r19, r19
    26ec:	22 0f       	add	r18, r18
    26ee:	33 1f       	adc	r19, r19
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	e2 0f       	add	r30, r18
    26f6:	f3 1f       	adc	r31, r19
    26f8:	e3 58       	subi	r30, 0x83	; 131
    26fa:	fc 4d       	sbci	r31, 0xDC	; 220
    26fc:	c0 83       	st	Z, r28
	log_queue[rear_log][1] = 0;
    26fe:	80 91 82 25 	lds	r24, 0x2582	; 0x802582 <rear_log>
    2702:	08 2e       	mov	r0, r24
    2704:	00 0c       	add	r0, r0
    2706:	99 0b       	sbc	r25, r25
    2708:	fc 01       	movw	r30, r24
    270a:	ee 0f       	add	r30, r30
    270c:	ff 1f       	adc	r31, r31
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	e8 0f       	add	r30, r24
    271c:	f9 1f       	adc	r31, r25
    271e:	e3 58       	subi	r30, 0x83	; 131
    2720:	fc 4d       	sbci	r31, 0xDC	; 220
    2722:	11 82       	std	Z+1, r1	; 0x01
}
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <log_dequeue>:

//Remove front event from queue and write to SD card
void log_dequeue(void)
{
	if (size_log == 0 || event_logging == OFF)
    2728:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <size_log>
    272c:	88 23       	and	r24, r24
    272e:	49 f1       	breq	.+82     	; 0x2782 <log_dequeue+0x5a>
    2730:	80 91 62 23 	lds	r24, 0x2362	; 0x802362 <event_logging>
    2734:	88 23       	and	r24, r24
    2736:	29 f1       	breq	.+74     	; 0x2782 <log_dequeue+0x5a>
		return;

	log_event((uint8_t*)log_queue[front_log]);
    2738:	20 91 6f 20 	lds	r18, 0x206F	; 0x80206f <front_log>
    273c:	02 2e       	mov	r0, r18
    273e:	00 0c       	add	r0, r0
    2740:	33 0b       	sbc	r19, r19
    2742:	c9 01       	movw	r24, r18
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	22 0f       	add	r18, r18
    274a:	33 1f       	adc	r19, r19
    274c:	22 0f       	add	r18, r18
    274e:	33 1f       	adc	r19, r19
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	82 0f       	add	r24, r18
    2756:	93 1f       	adc	r25, r19
    2758:	83 58       	subi	r24, 0x83	; 131
    275a:	9c 4d       	sbci	r25, 0xDC	; 220
    275c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <log_event>

	//Update front event of queue
	size_log--;
    2760:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <size_log>
    2764:	81 50       	subi	r24, 0x01	; 1
    2766:	80 93 7b 23 	sts	0x237B, r24	; 0x80237b <size_log>
	front_log = (front_log + 1) % MAX_LOG_QUEUE_SIZE;
    276a:	80 91 6f 20 	lds	r24, 0x206F	; 0x80206f <front_log>
    276e:	08 2e       	mov	r0, r24
    2770:	00 0c       	add	r0, r0
    2772:	99 0b       	sbc	r25, r25
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	62 e3       	ldi	r22, 0x32	; 50
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	0e 94 b4 31 	call	0x6368	; 0x6368 <__divmodhi4>
    277e:	80 93 6f 20 	sts	0x206F, r24	; 0x80206f <front_log>
    2782:	08 95       	ret

00002784 <update_brush_state>:

}

//Send the brush state
void update_brush_state(void)
{
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	1f 92       	push	r1
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = brush_state;
    278e:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    2792:	89 83       	std	Y+1, r24	; 0x01

	transmit_CAN(BRUSH_STATE, 0, 1, message);
    2794:	9e 01       	movw	r18, r28
    2796:	2f 5f       	subi	r18, 0xFF	; 255
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	8d ea       	ldi	r24, 0xAD	; 173
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    27a6:	0f 90       	pop	r0
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	08 95       	ret

000027ae <update_vacuum_state>:

//Send the vacuum state
void update_vacuum_state(void)
{
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	1f 92       	push	r1
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = vacuum_state;
    27b8:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    27bc:	89 83       	std	Y+1, r24	; 0x01

	transmit_CAN(VACUUM_STATE, 0, 1, message);
    27be:	9e 01       	movw	r18, r28
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	8e ea       	ldi	r24, 0xAE	; 174
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    27d0:	0f 90       	pop	r0
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	08 95       	ret

000027d8 <update_all_settings>:
		break;
	}
}

void update_all_settings(uint8_t* data)
{
    27d8:	dc 01       	movw	r26, r24
    27da:	fc 01       	movw	r30, r24
    27dc:	bc 01       	movw	r22, r24
    27de:	69 5f       	subi	r22, 0xF9	; 249
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
	//Checksum to make sure data is not corrupted
	uint8_t i = 0;
	uint8_t checksum1 = 0xFF;
	uint16_t checksum2 = 0;
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	50 e0       	ldi	r21, 0x00	; 0

void update_all_settings(uint8_t* data)
{
	//Checksum to make sure data is not corrupted
	uint8_t i = 0;
	uint8_t checksum1 = 0xFF;
    27e6:	2f ef       	ldi	r18, 0xFF	; 255
	uint16_t checksum2 = 0;

	for (i = 0; i < 7; i++)
	{
		checksum1 ^= data[i];
    27e8:	91 91       	ld	r25, Z+
    27ea:	29 27       	eor	r18, r25
		checksum2 += data[i];
    27ec:	49 0f       	add	r20, r25
    27ee:	51 1d       	adc	r21, r1
	//Checksum to make sure data is not corrupted
	uint8_t i = 0;
	uint8_t checksum1 = 0xFF;
	uint16_t checksum2 = 0;

	for (i = 0; i < 7; i++)
    27f0:	e6 17       	cp	r30, r22
    27f2:	f7 07       	cpc	r31, r23
    27f4:	c9 f7       	brne	.-14     	; 0x27e8 <update_all_settings+0x10>
	{
		checksum1 ^= data[i];
		checksum2 += data[i];
	}

	if ((checksum1 == current_checksum1) && (checksum2 == current_checksum2))
    27f6:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <current_checksum1>
    27fa:	28 13       	cpse	r18, r24
    27fc:	08 c0       	rjmp	.+16     	; 0x280e <update_all_settings+0x36>
    27fe:	80 91 7d 20 	lds	r24, 0x207D	; 0x80207d <current_checksum2>
    2802:	90 91 7e 20 	lds	r25, 0x207E	; 0x80207e <current_checksum2+0x1>
    2806:	48 17       	cp	r20, r24
    2808:	59 07       	cpc	r21, r25
    280a:	09 f4       	brne	.+2      	; 0x280e <update_all_settings+0x36>
    280c:	9a c1       	rjmp	.+820    	; 0x2b42 <update_all_settings+0x36a>
    280e:	fd 01       	movw	r30, r26
	{
		return;
	}
	else
	{
		current_checksum1 = checksum1;
    2810:	20 93 68 20 	sts	0x2068, r18	; 0x802068 <current_checksum1>
		current_checksum2 = checksum2;
    2814:	40 93 7d 20 	sts	0x207D, r20	; 0x80207d <current_checksum2>
    2818:	50 93 7e 20 	sts	0x207E, r21	; 0x80207e <current_checksum2+0x1>

	i = 0;

	//Separate out settings from data bytes
	//brush = data[i++];
	brush = data[i++];//>> 4;
    281c:	80 81       	ld	r24, Z
    281e:	80 93 5c 23 	sts	0x235C, r24	; 0x80235c <brush>
	//solenoid_valve = data[i++] & 0x0F;	
	vacuum = data[i++];
    2822:	81 81       	ldd	r24, Z+1	; 0x01
    2824:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <vacuum>
	detergent_pump = data[i] >> 7;
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	98 2f       	mov	r25, r24
    282c:	99 1f       	adc	r25, r25
    282e:	99 27       	eor	r25, r25
    2830:	99 1f       	adc	r25, r25
    2832:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <detergent_pump>
	detergent_pump_dc = data[i++] & 0x7F;
    2836:	8f 77       	andi	r24, 0x7F	; 127
    2838:	80 93 4e 20 	sts	0x204E, r24	; 0x80204e <detergent_pump_dc>
	water_pump = data[i] >> 7;
    283c:	83 81       	ldd	r24, Z+3	; 0x03
    283e:	98 2f       	mov	r25, r24
    2840:	99 1f       	adc	r25, r25
    2842:	99 27       	eor	r25, r25
    2844:	99 1f       	adc	r25, r25
    2846:	90 93 82 20 	sts	0x2082, r25	; 0x802082 <water_pump>
	water_pump_dc = data[i++] & 0x7F;
    284a:	8f 77       	andi	r24, 0x7F	; 127
    284c:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <water_pump_dc>
	headlights = data[i] >> 4;
    2850:	84 81       	ldd	r24, Z+4	; 0x04
    2852:	98 2f       	mov	r25, r24
    2854:	92 95       	swap	r25
    2856:	9f 70       	andi	r25, 0x0F	; 15
    2858:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <headlights>
	solenoid_valve = (data[i] & 0x0c) >> 2;
    285c:	28 2f       	mov	r18, r24
    285e:	2c 70       	andi	r18, 0x0C	; 12
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	35 95       	asr	r19
    2864:	27 95       	ror	r18
    2866:	35 95       	asr	r19
    2868:	27 95       	ror	r18
    286a:	20 93 75 20 	sts	0x2075, r18	; 0x802075 <solenoid_valve>
	horn = data[i++] & 0x03;
    286e:	83 70       	andi	r24, 0x03	; 3
    2870:	80 93 75 23 	sts	0x2375, r24	; 0x802375 <horn>
	extra_pressure = data[i] >> 4;
    2874:	95 81       	ldd	r25, Z+5	; 0x05
    2876:	29 2f       	mov	r18, r25
    2878:	22 95       	swap	r18
    287a:	2f 70       	andi	r18, 0x0F	; 15
    287c:	20 93 88 25 	sts	0x2588, r18	; 0x802588 <extra_pressure>
	reverse = data[i++] & 0x0F;
    2880:	9f 70       	andi	r25, 0x0F	; 15
    2882:	90 93 45 20 	sts	0x2045, r25	; 0x802045 <reverse>
	transport = data[i] >> 4;
    2886:	96 81       	ldd	r25, Z+6	; 0x06
    2888:	29 2f       	mov	r18, r25
    288a:	22 95       	swap	r18
    288c:	2f 70       	andi	r18, 0x0F	; 15
    288e:	20 93 af 20 	sts	0x20AF, r18	; 0x8020af <transport>
	fr_speed = data[i++] & 0x0F;
    2892:	9f 70       	andi	r25, 0x0F	; 15
    2894:	90 93 4a 23 	sts	0x234A, r25	; 0x80234a <fr_speed>


	//Headlights and horn can be turned on immediately
	horn_set(horn);
    2898:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <horn_set>
	headlights_set(headlights);
    289c:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    28a0:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <headlights_set>

	//Only headlights and horn work during emergency off
	if (emergency_off)
    28a4:	80 91 a3 25 	lds	r24, 0x25A3	; 0x8025a3 <emergency_off>
    28a8:	81 11       	cpse	r24, r1
    28aa:	4b c1       	rjmp	.+662    	; 0x2b42 <update_all_settings+0x36a>
		return;

	extra_pressure_set(extra_pressure);
    28ac:	80 91 88 25 	lds	r24, 0x2588	; 0x802588 <extra_pressure>
    28b0:	0e 94 93 1c 	call	0x3926	; 0x3926 <extra_pressure_set>

	//Switching between forward and reverse
	if (reverse && current_dir == FORWARD)
    28b4:	80 91 45 20 	lds	r24, 0x2045	; 0x802045 <reverse>
    28b8:	88 23       	and	r24, r24
    28ba:	c9 f0       	breq	.+50     	; 0x28ee <update_all_settings+0x116>
    28bc:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <current_dir>
    28c0:	81 11       	cpse	r24, r1
    28c2:	38 c0       	rjmp	.+112    	; 0x2934 <update_all_settings+0x15c>
	{
		switch_motor_forward = FALSE;
    28c4:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <switch_motor_forward>
		switch_motor_reverse = TRUE;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	80 93 44 20 	sts	0x2044, r24	; 0x802044 <switch_motor_reverse>

		if (squeegee_down)
    28ce:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <squeegee_down>
    28d2:	88 23       	and	r24, r24
    28d4:	79 f1       	breq	.+94     	; 0x2934 <update_all_settings+0x15c>
		{
			SQ_UP;
    28d6:	84 e0       	ldi	r24, 0x04	; 4
    28d8:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    28dc:	88 e0       	ldi	r24, 0x08	; 8
    28de:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			squeegee_timer = ON;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <squeegee_timer>
			squeegee_down = FALSE;
    28e8:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <squeegee_down>
    28ec:	23 c0       	rjmp	.+70     	; 0x2934 <update_all_settings+0x15c>
		}
	}
	else if (!reverse && current_dir == REVERSE)
    28ee:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <current_dir>
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	f9 f4       	brne	.+62     	; 0x2934 <update_all_settings+0x15c>
	{
		switch_motor_reverse = FALSE;
    28f6:	10 92 44 20 	sts	0x2044, r1	; 0x802044 <switch_motor_reverse>
		switch_motor_forward = TRUE;
    28fa:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <switch_motor_forward>

		if (vacuum && !tank_full && !squeegee_down && !transport)
    28fe:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <vacuum>
    2902:	88 23       	and	r24, r24
    2904:	b9 f0       	breq	.+46     	; 0x2934 <update_all_settings+0x15c>
    2906:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <tank_full>
    290a:	81 11       	cpse	r24, r1
    290c:	13 c0       	rjmp	.+38     	; 0x2934 <update_all_settings+0x15c>
    290e:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <squeegee_down>
    2912:	81 11       	cpse	r24, r1
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <update_all_settings+0x15c>
    2916:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <transport>
    291a:	81 11       	cpse	r24, r1
    291c:	0b c0       	rjmp	.+22     	; 0x2934 <update_all_settings+0x15c>
		{
			SQ_DN;
    291e:	e5 ea       	ldi	r30, 0xA5	; 165
    2920:	f6 e0       	ldi	r31, 0x06	; 6
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	80 83       	st	Z, r24
    2926:	88 e0       	ldi	r24, 0x08	; 8
    2928:	80 83       	st	Z, r24
			squeegee_timer = ON;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <squeegee_timer>
			squeegee_down = TRUE;
    2930:	80 93 7a 23 	sts	0x237A, r24	; 0x80237a <squeegee_down>
		}
	}

	//Change drive motor speed
	if (fr_speed == SLOW)
    2934:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <fr_speed>
    2938:	81 11       	cpse	r24, r1
    293a:	04 c0       	rjmp	.+8      	; 0x2944 <update_all_settings+0x16c>
	{
		SET_DRIVE_SPEED_SLOW;
    293c:	80 e4       	ldi	r24, 0x40	; 64
    293e:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2942:	03 c0       	rjmp	.+6      	; 0x294a <update_all_settings+0x172>
	}
	else
	{
		SET_DRIVE_SPEED_FAST;
    2944:	80 e4       	ldi	r24, 0x40	; 64
    2946:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
	}

	//In transport mode turn off everything
	if (transport)
    294a:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <transport>
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <update_all_settings+0x17c>
    2952:	48 c0       	rjmp	.+144    	; 0x29e4 <update_all_settings+0x20c>
	{
		transport_timer = ON;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <transport_timer>
		brush_state = BRUSH_OFF;
    295a:	8b eb       	ldi	r24, 0xBB	; 187
    295c:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <brush_state>
		update_brush_state();
    2960:	0e 94 c2 13 	call	0x2784	; 0x2784 <update_brush_state>
		brush_motor_set(0);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	0e 94 d7 19 	call	0x33ae	; 0x33ae <brush_motor_set>
		water_pump_set(OFF, water_pump_dc);
    296a:	60 91 36 20 	lds	r22, 0x2036	; 0x802036 <water_pump_dc>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
		Solenoid_set(OFF);
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
		detergent_pump_set(OFF, detergent_pump_dc);
    297a:	60 91 4e 20 	lds	r22, 0x204E	; 0x80204e <detergent_pump_dc>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

		if (runtimer_on && accelerator == ACCEL_UP && vacuum_state == VACUUM_OFF && horn == OFF && headlights == OFF)
    2984:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    2988:	88 23       	and	r24, r24
    298a:	99 f0       	breq	.+38     	; 0x29b2 <update_all_settings+0x1da>
    298c:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    2990:	81 11       	cpse	r24, r1
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <update_all_settings+0x1da>
    2994:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    2998:	8c 3c       	cpi	r24, 0xCC	; 204
    299a:	59 f4       	brne	.+22     	; 0x29b2 <update_all_settings+0x1da>
    299c:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    29a0:	81 11       	cpse	r24, r1
    29a2:	07 c0       	rjmp	.+14     	; 0x29b2 <update_all_settings+0x1da>
    29a4:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    29a8:	81 11       	cpse	r24, r1
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <update_all_settings+0x1da>
		{
			send_runtime_timer(OFF);
    29ac:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    29b0:	08 95       	ret
		}
		else if (!runtimer_on && (accelerator == ACCEL_DN || vacuum_state != VACUUM_OFF || horn != OFF || headlights != OFF))
    29b2:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    29b6:	81 11       	cpse	r24, r1
    29b8:	c4 c0       	rjmp	.+392    	; 0x2b42 <update_all_settings+0x36a>
    29ba:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	69 f0       	breq	.+26     	; 0x29dc <update_all_settings+0x204>
    29c2:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    29c6:	8c 3c       	cpi	r24, 0xCC	; 204
    29c8:	49 f4       	brne	.+18     	; 0x29dc <update_all_settings+0x204>
    29ca:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    29ce:	81 11       	cpse	r24, r1
    29d0:	05 c0       	rjmp	.+10     	; 0x29dc <update_all_settings+0x204>
    29d2:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    29d6:	88 23       	and	r24, r24
    29d8:	09 f4       	brne	.+2      	; 0x29dc <update_all_settings+0x204>
    29da:	b3 c0       	rjmp	.+358    	; 0x2b42 <update_all_settings+0x36a>
		{
			send_runtime_timer(ON);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    29e2:	08 95       	ret

		return;
	}

	//Vacuum motor can be turned on immediately
	if ((vacuum == VAC_ON_ECO || vacuum == VAC_ON_NORMAL) && !tank_full)
    29e4:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <vacuum>
    29e8:	8b 34       	cpi	r24, 0x4B	; 75
    29ea:	11 f0       	breq	.+4      	; 0x29f0 <update_all_settings+0x218>
    29ec:	84 36       	cpi	r24, 0x64	; 100
    29ee:	09 f5       	brne	.+66     	; 0x2a32 <update_all_settings+0x25a>
    29f0:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <tank_full>
    29f4:	91 11       	cpse	r25, r1
    29f6:	1d c0       	rjmp	.+58     	; 0x2a32 <update_all_settings+0x25a>
	{
		vacuum_motor_set(vacuum);
    29f8:	0e 94 c7 1a 	call	0x358e	; 0x358e <vacuum_motor_set>

		if (!reverse && !squeegee_down)
    29fc:	80 91 45 20 	lds	r24, 0x2045	; 0x802045 <reverse>
    2a00:	81 11       	cpse	r24, r1
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <update_all_settings+0x24a>
    2a04:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <squeegee_down>
    2a08:	81 11       	cpse	r24, r1
    2a0a:	0b c0       	rjmp	.+22     	; 0x2a22 <update_all_settings+0x24a>
		{
			SQ_DN;
    2a0c:	e5 ea       	ldi	r30, 0xA5	; 165
    2a0e:	f6 e0       	ldi	r31, 0x06	; 6
    2a10:	84 e0       	ldi	r24, 0x04	; 4
    2a12:	80 83       	st	Z, r24
    2a14:	88 e0       	ldi	r24, 0x08	; 8
    2a16:	80 83       	st	Z, r24
			squeegee_timer = ON;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <squeegee_timer>
			squeegee_down = TRUE;
    2a1e:	80 93 7a 23 	sts	0x237A, r24	; 0x80237a <squeegee_down>
		}
		vacuum_off_timer = OFF;
    2a22:	10 92 7d 25 	sts	0x257D, r1	; 0x80257d <vacuum_off_timer>
		vacuum_state = VACUUM_RUNNING;
    2a26:	8a ea       	ldi	r24, 0xAA	; 170
    2a28:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <vacuum_state>
		update_vacuum_state();
    2a2c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <update_vacuum_state>
    2a30:	1f c0       	rjmp	.+62     	; 0x2a70 <update_all_settings+0x298>
	}

	//Turning off vacuum motor will start a 15 sec timer before turning it off
	else if (vacuum_off_timer == OFF && vacuum_state == VACUUM_RUNNING)
    2a32:	80 91 7d 25 	lds	r24, 0x257D	; 0x80257d <vacuum_off_timer>
    2a36:	81 11       	cpse	r24, r1
    2a38:	1b c0       	rjmp	.+54     	; 0x2a70 <update_all_settings+0x298>
    2a3a:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    2a3e:	8a 3a       	cpi	r24, 0xAA	; 170
    2a40:	b9 f4       	brne	.+46     	; 0x2a70 <update_all_settings+0x298>
	{
		vacuum_state = VACUUM_RUNNING_OFF;
    2a42:	8b eb       	ldi	r24, 0xBB	; 187
    2a44:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <vacuum_state>
		update_vacuum_state();
    2a48:	0e 94 d7 13 	call	0x27ae	; 0x27ae <update_vacuum_state>
		vacuum_off_timer = ON;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	80 93 7d 25 	sts	0x257D, r24	; 0x80257d <vacuum_off_timer>
		if (squeegee_down)
    2a52:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <squeegee_down>
    2a56:	88 23       	and	r24, r24
    2a58:	59 f0       	breq	.+22     	; 0x2a70 <update_all_settings+0x298>
		{
			SQ_UP;
    2a5a:	84 e0       	ldi	r24, 0x04	; 4
    2a5c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    2a60:	88 e0       	ldi	r24, 0x08	; 8
    2a62:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			squeegee_timer = ON;
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <squeegee_timer>
			squeegee_down = FALSE;
    2a6c:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <squeegee_down>
		}
	}

	//If the accelerator is already down, check for any changes to brush, water pump, or det pump
	if (accelerator == ACCEL_DN)
    2a70:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	b9 f5       	brne	.+110    	; 0x2ae6 <update_all_settings+0x30e>
	{
		//Set brush motor
		brush_motor_set(brush);
    2a78:	80 91 5c 23 	lds	r24, 0x235C	; 0x80235c <brush>
    2a7c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <brush_motor_set>

		if (presweep)
    2a80:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <presweep>
    2a84:	88 23       	and	r24, r24
    2a86:	51 f0       	breq	.+20     	; 0x2a9c <update_all_settings+0x2c4>
		{
			//Record and set pre sweep
			if (presweep_state == OFF)
    2a88:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <presweep_state>
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	03 c0       	rjmp	.+6      	; 0x2a96 <update_all_settings+0x2be>
			{
				/*log_enqueue(PRE_SWP_ON_EVENT);*/
				presweep_state = ON;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <presweep_state>
			}
			pre_swp_set(ON);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <pre_swp_set>
		}

		//If brush is off turn off pumps, otherwise update the pumps
		if (!brush)
    2a9c:	80 91 5c 23 	lds	r24, 0x235C	; 0x80235c <brush>
    2aa0:	81 11       	cpse	r24, r1
    2aa2:	12 c0       	rjmp	.+36     	; 0x2ac8 <update_all_settings+0x2f0>
		{
			water_pump_set(OFF, water_pump_dc);
    2aa4:	60 91 36 20 	lds	r22, 0x2036	; 0x802036 <water_pump_dc>
    2aa8:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
			Solenoid_set(OFF);
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
			detergent_pump_set(OFF, detergent_pump_dc);
    2ab2:	60 91 4e 20 	lds	r22, 0x204E	; 0x80204e <detergent_pump_dc>
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

			brush_state = BRUSH_OFF;
    2abc:	8b eb       	ldi	r24, 0xBB	; 187
    2abe:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <brush_state>
			update_brush_state();
    2ac2:	0e 94 c2 13 	call	0x2784	; 0x2784 <update_brush_state>
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <update_all_settings+0x30e>
		}
		else
		{
			update_pumps();
    2ac8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <update_pumps>
			if (!water_pump)
    2acc:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <water_pump>
    2ad0:	81 11       	cpse	r24, r1
    2ad2:	04 c0       	rjmp	.+8      	; 0x2adc <update_all_settings+0x304>
			{
				Solenoid_set(solenoid_valve);
    2ad4:	80 91 75 20 	lds	r24, 0x2075	; 0x802075 <solenoid_valve>
    2ad8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
			}
			brush_state = BRUSH_RUNNING;
    2adc:	8a ea       	ldi	r24, 0xAA	; 170
    2ade:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <brush_state>
			update_brush_state();
    2ae2:	0e 94 c2 13 	call	0x2784	; 0x2784 <update_brush_state>
		}
	}

	//Check if runtimer should be off or on
	if (runtimer_on && accelerator == ACCEL_UP && vacuum_state == VACUUM_OFF && horn == OFF && headlights == OFF)
    2ae6:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    2aea:	88 23       	and	r24, r24
    2aec:	99 f0       	breq	.+38     	; 0x2b14 <update_all_settings+0x33c>
    2aee:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    2af2:	81 11       	cpse	r24, r1
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <update_all_settings+0x33c>
    2af6:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    2afa:	8c 3c       	cpi	r24, 0xCC	; 204
    2afc:	59 f4       	brne	.+22     	; 0x2b14 <update_all_settings+0x33c>
    2afe:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    2b02:	81 11       	cpse	r24, r1
    2b04:	07 c0       	rjmp	.+14     	; 0x2b14 <update_all_settings+0x33c>
    2b06:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    2b0a:	81 11       	cpse	r24, r1
    2b0c:	03 c0       	rjmp	.+6      	; 0x2b14 <update_all_settings+0x33c>
	{
		send_runtime_timer(OFF);
    2b0e:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    2b12:	08 95       	ret
	}
	else if (!runtimer_on && (accelerator == ACCEL_DN || vacuum_state != VACUUM_OFF || horn != OFF || headlights != OFF))
    2b14:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    2b18:	81 11       	cpse	r24, r1
    2b1a:	13 c0       	rjmp	.+38     	; 0x2b42 <update_all_settings+0x36a>
    2b1c:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	61 f0       	breq	.+24     	; 0x2b3c <update_all_settings+0x364>
    2b24:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    2b28:	8c 3c       	cpi	r24, 0xCC	; 204
    2b2a:	41 f4       	brne	.+16     	; 0x2b3c <update_all_settings+0x364>
    2b2c:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    2b30:	81 11       	cpse	r24, r1
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <update_all_settings+0x364>
    2b34:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    2b38:	88 23       	and	r24, r24
    2b3a:	19 f0       	breq	.+6      	; 0x2b42 <update_all_settings+0x36a>
	{
		send_runtime_timer(ON);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    2b42:	08 95       	ret

00002b44 <send_CAN_ACK>:
	transmit_CAN(VACUUM_STATE, 0, 1, message);
}

//Send ACK
void send_CAN_ACK(void)
{
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	1f 92       	push	r1
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = A2_CAN;
    2b4e:	82 ea       	ldi	r24, 0xA2	; 162
    2b50:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ACK_CAN, 0, 1, message);
    2b52:	9e 01       	movw	r18, r28
    2b54:	2f 5f       	subi	r18, 0xFF	; 255
    2b56:	3f 4f       	sbci	r19, 0xFF	; 255
    2b58:	41 e0       	ldi	r20, 0x01	; 1
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	8e ed       	ldi	r24, 0xDE	; 222
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    2b64:	0f 90       	pop	r0
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <send_serial_num>:

//Send serial number to A1
void send_serial_num(void)
{
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	28 97       	sbiw	r28, 0x08	; 8
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	2f ef       	ldi	r18, 0xFF	; 255
    2b80:	81 ee       	ldi	r24, 0xE1	; 225
    2b82:	94 e0       	ldi	r25, 0x04	; 4
    2b84:	21 50       	subi	r18, 0x01	; 1
    2b86:	80 40       	sbci	r24, 0x00	; 0
    2b88:	90 40       	sbci	r25, 0x00	; 0
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <send_serial_num+0x18>
    2b8c:	00 c0       	rjmp	.+0      	; 0x2b8e <send_serial_num+0x22>
    2b8e:	00 00       	nop
	uint8_t i = 0;
	uint8_t message[8];
	_delay_ms(50);
	message[i++] = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	89 83       	std	Y+1, r24	; 0x01
	message[i++] = A2_serial_num[0];
    2b94:	04 e2       	ldi	r16, 0x24	; 36
    2b96:	10 e2       	ldi	r17, 0x20	; 32
    2b98:	f8 01       	movw	r30, r16
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = A2_serial_num[1];
    2b9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
	message[i++] = A2_serial_num[2];
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	8c 83       	std	Y+4, r24	; 0x04
	message[i++] = A2_serial_num[3];
    2ba6:	83 81       	ldd	r24, Z+3	; 0x03
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
	message[i++] = A2_serial_num[4];
    2baa:	84 81       	ldd	r24, Z+4	; 0x04
    2bac:	8e 83       	std	Y+6, r24	; 0x06
	message[i++] = A2_serial_num[5];
    2bae:	85 81       	ldd	r24, Z+5	; 0x05
    2bb0:	8f 83       	std	Y+7, r24	; 0x07
    2bb2:	ff ef       	ldi	r31, 0xFF	; 255
    2bb4:	23 ef       	ldi	r18, 0xF3	; 243
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	f1 50       	subi	r31, 0x01	; 1
    2bba:	20 40       	sbci	r18, 0x00	; 0
    2bbc:	80 40       	sbci	r24, 0x00	; 0
    2bbe:	e1 f7       	brne	.-8      	; 0x2bb8 <send_serial_num+0x4c>
    2bc0:	00 c0       	rjmp	.+0      	; 0x2bc2 <send_serial_num+0x56>
    2bc2:	00 00       	nop
	_delay_ms(20);
	transmit_CAN(A2_SERIAL_NUM_CAN, 0, 7, message);
    2bc4:	9e 01       	movw	r18, r28
    2bc6:	2f 5f       	subi	r18, 0xFF	; 255
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	47 e0       	ldi	r20, 0x07	; 7
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	82 e5       	ldi	r24, 0x52	; 82
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    2bd6:	9f ef       	ldi	r25, 0xFF	; 255
    2bd8:	e3 ef       	ldi	r30, 0xF3	; 243
    2bda:	f1 e0       	ldi	r31, 0x01	; 1
    2bdc:	91 50       	subi	r25, 0x01	; 1
    2bde:	e0 40       	sbci	r30, 0x00	; 0
    2be0:	f0 40       	sbci	r31, 0x00	; 0
    2be2:	e1 f7       	brne	.-8      	; 0x2bdc <send_serial_num+0x70>
    2be4:	00 c0       	rjmp	.+0      	; 0x2be6 <send_serial_num+0x7a>
    2be6:	00 00       	nop
	_delay_ms(20);

	i = 0;
	message[i++] = 2;
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	89 83       	std	Y+1, r24	; 0x01
	message[i++] = A2_serial_num[6];
    2bec:	f8 01       	movw	r30, r16
    2bee:	86 81       	ldd	r24, Z+6	; 0x06
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = A2_serial_num[7];
    2bf2:	87 81       	ldd	r24, Z+7	; 0x07
    2bf4:	8b 83       	std	Y+3, r24	; 0x03
	message[i++] = A2_serial_num[8];
    2bf6:	80 85       	ldd	r24, Z+8	; 0x08
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
	message[i++] = A2_serial_num[9];
    2bfa:	81 85       	ldd	r24, Z+9	; 0x09
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
	message[i++] = A2_serial_num[10];
    2bfe:	82 85       	ldd	r24, Z+10	; 0x0a
    2c00:	8e 83       	std	Y+6, r24	; 0x06
	message[i++] = A2_serial_num[11];
    2c02:	83 85       	ldd	r24, Z+11	; 0x0b
    2c04:	8f 83       	std	Y+7, r24	; 0x07
    2c06:	ff ef       	ldi	r31, 0xFF	; 255
    2c08:	23 ef       	ldi	r18, 0xF3	; 243
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	f1 50       	subi	r31, 0x01	; 1
    2c0e:	20 40       	sbci	r18, 0x00	; 0
    2c10:	80 40       	sbci	r24, 0x00	; 0
    2c12:	e1 f7       	brne	.-8      	; 0x2c0c <send_serial_num+0xa0>
    2c14:	00 c0       	rjmp	.+0      	; 0x2c16 <send_serial_num+0xaa>
    2c16:	00 00       	nop
	_delay_ms(20);
	transmit_CAN(A2_SERIAL_NUM_CAN, 0, 7, message);
    2c18:	9e 01       	movw	r18, r28
    2c1a:	2f 5f       	subi	r18, 0xFF	; 255
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	47 e0       	ldi	r20, 0x07	; 7
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	82 e5       	ldi	r24, 0x52	; 82
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    2c2a:	9f ef       	ldi	r25, 0xFF	; 255
    2c2c:	e3 ef       	ldi	r30, 0xF3	; 243
    2c2e:	f1 e0       	ldi	r31, 0x01	; 1
    2c30:	91 50       	subi	r25, 0x01	; 1
    2c32:	e0 40       	sbci	r30, 0x00	; 0
    2c34:	f0 40       	sbci	r31, 0x00	; 0
    2c36:	e1 f7       	brne	.-8      	; 0x2c30 <send_serial_num+0xc4>
    2c38:	00 c0       	rjmp	.+0      	; 0x2c3a <send_serial_num+0xce>
    2c3a:	00 00       	nop
	_delay_ms(20);

	i = 0;
	message[i++] = 3;
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	message[i++] = A2_serial_num[12];
    2c40:	f8 01       	movw	r30, r16
    2c42:	84 85       	ldd	r24, Z+12	; 0x0c
    2c44:	8a 83       	std	Y+2, r24	; 0x02
	message[i++] = A2_serial_num[13];
    2c46:	85 85       	ldd	r24, Z+13	; 0x0d
    2c48:	8b 83       	std	Y+3, r24	; 0x03
    2c4a:	ff ef       	ldi	r31, 0xFF	; 255
    2c4c:	23 ef       	ldi	r18, 0xF3	; 243
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	f1 50       	subi	r31, 0x01	; 1
    2c52:	20 40       	sbci	r18, 0x00	; 0
    2c54:	80 40       	sbci	r24, 0x00	; 0
    2c56:	e1 f7       	brne	.-8      	; 0x2c50 <send_serial_num+0xe4>
    2c58:	00 c0       	rjmp	.+0      	; 0x2c5a <send_serial_num+0xee>
    2c5a:	00 00       	nop
	_delay_ms(20);
	transmit_CAN(A2_SERIAL_NUM_CAN, 0, 3, message);
    2c5c:	9e 01       	movw	r18, r28
    2c5e:	2f 5f       	subi	r18, 0xFF	; 255
    2c60:	3f 4f       	sbci	r19, 0xFF	; 255
    2c62:	43 e0       	ldi	r20, 0x03	; 3
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	82 e5       	ldi	r24, 0x52	; 82
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    2c6e:	9f ef       	ldi	r25, 0xFF	; 255
    2c70:	e3 ef       	ldi	r30, 0xF3	; 243
    2c72:	f1 e0       	ldi	r31, 0x01	; 1
    2c74:	91 50       	subi	r25, 0x01	; 1
    2c76:	e0 40       	sbci	r30, 0x00	; 0
    2c78:	f0 40       	sbci	r31, 0x00	; 0
    2c7a:	e1 f7       	brne	.-8      	; 0x2c74 <send_serial_num+0x108>
    2c7c:	00 c0       	rjmp	.+0      	; 0x2c7e <send_serial_num+0x112>
    2c7e:	00 00       	nop
	_delay_ms(20);
}
    2c80:	28 96       	adiw	r28, 0x08	; 8
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <send_reset_CAN>:

//Send reset command to other boards
void send_reset_CAN(void)
{
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	1f 92       	push	r1
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	transmit_CAN(RESET_DEVICE_CAN_A2, 0, 1, message);
    2c9a:	9e 01       	movw	r18, r28
    2c9c:	2f 5f       	subi	r18, 0xFF	; 255
    2c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	85 e9       	ldi	r24, 0x95	; 149
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
    2cac:	2f ef       	ldi	r18, 0xFF	; 255
    2cae:	89 ef       	ldi	r24, 0xF9	; 249
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	21 50       	subi	r18, 0x01	; 1
    2cb4:	80 40       	sbci	r24, 0x00	; 0
    2cb6:	90 40       	sbci	r25, 0x00	; 0
    2cb8:	e1 f7       	brne	.-8      	; 0x2cb2 <send_reset_CAN+0x22>
    2cba:	00 c0       	rjmp	.+0      	; 0x2cbc <send_reset_CAN+0x2c>
    2cbc:	00 00       	nop
	_delay_ms(10);
}
    2cbe:	0f 90       	pop	r0
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <send_CAN_buffer_overflow>:

void send_CAN_buffer_overflow(void)
{
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	1f 92       	push	r1
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = CAN_BUFFER_OVERFLOW;
    2cd0:	89 e0       	ldi	r24, 0x09	; 9
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    2cd4:	9e 01       	movw	r18, r28
    2cd6:	2f 5f       	subi	r18, 0xFF	; 255
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	8c ea       	ldi	r24, 0xAC	; 172
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    2ce6:	0f 90       	pop	r0
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	08 95       	ret

00002cee <send_SD_buffer_overflow>:

void send_SD_buffer_overflow(void)
{
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	1f 92       	push	r1
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = SD_BUFFER_OVERFLOW;
    2cf8:	8a e0       	ldi	r24, 0x0A	; 10
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    2cfc:	9e 01       	movw	r18, r28
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	41 e0       	ldi	r20, 0x01	; 1
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	8c ea       	ldi	r24, 0xAC	; 172
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    2d0e:	0f 90       	pop	r0
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <send_SD_card_fail>:

//If the SD cards fails early, it will be considered missing
void send_SD_card_fail(void)
{
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	1f 92       	push	r1
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = SD_CARD_FAIL;
    2d20:	8b e0       	ldi	r24, 0x0B	; 11
    2d22:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(ALARM_CAN, 0, 1, message);
    2d24:	9e 01       	movw	r18, r28
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	8c ea       	ldi	r24, 0xAC	; 172
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    2d36:	0f 90       	pop	r0
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	08 95       	ret

00002d3e <send_statistics>:

//Send the RB800 statistics to the A1
void send_statistics(void)
{
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	28 97       	sbiw	r28, 0x08	; 8
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	de bf       	out	0x3e, r29	; 62
	uint8_t message[8];

	message[0] = BRUSH_HOURS;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	89 83       	std	Y+1, r24	; 0x01
	message[1] = brush_hours >> 8;
    2d50:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <brush_hours>
    2d54:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <brush_hours+0x1>
    2d58:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = brush_hours;
    2d5a:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <brush_hours>
    2d5e:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <brush_hours+0x1>
    2d62:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2d64:	9e 01       	movw	r18, r28
    2d66:	2f 5f       	subi	r18, 0xFF	; 255
    2d68:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6a:	43 e0       	ldi	r20, 0x03	; 3
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	86 e6       	ldi	r24, 0x66	; 102
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = VACUUM_HOURS;
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	89 83       	std	Y+1, r24	; 0x01
	message[1] = vacuum_hours >> 8;
    2d7a:	80 91 80 25 	lds	r24, 0x2580	; 0x802580 <vacuum_hours>
    2d7e:	90 91 81 25 	lds	r25, 0x2581	; 0x802581 <vacuum_hours+0x1>
    2d82:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = vacuum_hours;
    2d84:	80 91 80 25 	lds	r24, 0x2580	; 0x802580 <vacuum_hours>
    2d88:	90 91 81 25 	lds	r25, 0x2581	; 0x802581 <vacuum_hours+0x1>
    2d8c:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2d8e:	9e 01       	movw	r18, r28
    2d90:	2f 5f       	subi	r18, 0xFF	; 255
    2d92:	3f 4f       	sbci	r19, 0xFF	; 255
    2d94:	43 e0       	ldi	r20, 0x03	; 3
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	86 e6       	ldi	r24, 0x66	; 102
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = PRESWEEP_HOURS;
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	89 83       	std	Y+1, r24	; 0x01
	message[1] = presweep_hours >> 8;
    2da4:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <presweep_hours>
    2da8:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <presweep_hours+0x1>
    2dac:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = presweep_hours;
    2dae:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <presweep_hours>
    2db2:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <presweep_hours+0x1>
    2db6:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2db8:	9e 01       	movw	r18, r28
    2dba:	2f 5f       	subi	r18, 0xFF	; 255
    2dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbe:	43 e0       	ldi	r20, 0x03	; 3
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	86 e6       	ldi	r24, 0x66	; 102
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = ECO_HOURS;
    2dca:	84 e0       	ldi	r24, 0x04	; 4
    2dcc:	89 83       	std	Y+1, r24	; 0x01
	message[1] = eco_hours >> 8;
    2dce:	80 91 a1 20 	lds	r24, 0x20A1	; 0x8020a1 <eco_hours>
    2dd2:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <eco_hours+0x1>
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = eco_hours;
    2dd8:	80 91 a1 20 	lds	r24, 0x20A1	; 0x8020a1 <eco_hours>
    2ddc:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <eco_hours+0x1>
    2de0:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2de2:	9e 01       	movw	r18, r28
    2de4:	2f 5f       	subi	r18, 0xFF	; 255
    2de6:	3f 4f       	sbci	r19, 0xFF	; 255
    2de8:	43 e0       	ldi	r20, 0x03	; 3
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	86 e6       	ldi	r24, 0x66	; 102
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = WATER_PUMP_HOURS;
    2df4:	85 e0       	ldi	r24, 0x05	; 5
    2df6:	89 83       	std	Y+1, r24	; 0x01
	message[1] = water_pump_hours >> 8;
    2df8:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <water_pump_hours>
    2dfc:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <water_pump_hours+0x1>
    2e00:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = water_pump_hours;
    2e02:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <water_pump_hours>
    2e06:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <water_pump_hours+0x1>
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2e0c:	9e 01       	movw	r18, r28
    2e0e:	2f 5f       	subi	r18, 0xFF	; 255
    2e10:	3f 4f       	sbci	r19, 0xFF	; 255
    2e12:	43 e0       	ldi	r20, 0x03	; 3
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	86 e6       	ldi	r24, 0x66	; 102
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = DETERGENT_PUMP_HOURS;
    2e1e:	86 e0       	ldi	r24, 0x06	; 6
    2e20:	89 83       	std	Y+1, r24	; 0x01
	message[1] = detergent_pump_hours >> 8;
    2e22:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <detergent_pump_hours>
    2e26:	90 91 8b 25 	lds	r25, 0x258B	; 0x80258b <detergent_pump_hours+0x1>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = detergent_pump_hours;
    2e2c:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <detergent_pump_hours>
    2e30:	90 91 8b 25 	lds	r25, 0x258B	; 0x80258b <detergent_pump_hours+0x1>
    2e34:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2e36:	9e 01       	movw	r18, r28
    2e38:	2f 5f       	subi	r18, 0xFF	; 255
    2e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3c:	43 e0       	ldi	r20, 0x03	; 3
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	86 e6       	ldi	r24, 0x66	; 102
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = BRUSH1_AVERAGE_CURRENT;
    2e48:	87 e0       	ldi	r24, 0x07	; 7
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	message[1] = brush1_average_current >> 8;
    2e4c:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <brush1_average_current>
    2e50:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <brush1_average_current+0x1>
    2e54:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = brush1_average_current;
    2e56:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <brush1_average_current>
    2e5a:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <brush1_average_current+0x1>
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2e60:	9e 01       	movw	r18, r28
    2e62:	2f 5f       	subi	r18, 0xFF	; 255
    2e64:	3f 4f       	sbci	r19, 0xFF	; 255
    2e66:	43 e0       	ldi	r20, 0x03	; 3
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	86 e6       	ldi	r24, 0x66	; 102
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = BRUSH2_AVERAGE_CURRENT;
    2e72:	88 e0       	ldi	r24, 0x08	; 8
    2e74:	89 83       	std	Y+1, r24	; 0x01
	message[1] = brush2_average_current >> 8;
    2e76:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <brush2_average_current>
    2e7a:	90 91 90 20 	lds	r25, 0x2090	; 0x802090 <brush2_average_current+0x1>
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = brush2_average_current;
    2e80:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <brush2_average_current>
    2e84:	90 91 90 20 	lds	r25, 0x2090	; 0x802090 <brush2_average_current+0x1>
    2e88:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2e8a:	9e 01       	movw	r18, r28
    2e8c:	2f 5f       	subi	r18, 0xFF	; 255
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	43 e0       	ldi	r20, 0x03	; 3
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	86 e6       	ldi	r24, 0x66	; 102
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = VACUUM_AVERAGE_CURRENT;
    2e9c:	89 e0       	ldi	r24, 0x09	; 9
    2e9e:	89 83       	std	Y+1, r24	; 0x01
	message[1] = vacuum_average_current >> 8;
    2ea0:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <vacuum_average_current>
    2ea4:	90 91 95 25 	lds	r25, 0x2595	; 0x802595 <vacuum_average_current+0x1>
    2ea8:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = vacuum_average_current;
    2eaa:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <vacuum_average_current>
    2eae:	90 91 95 25 	lds	r25, 0x2595	; 0x802595 <vacuum_average_current+0x1>
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2eb4:	9e 01       	movw	r18, r28
    2eb6:	2f 5f       	subi	r18, 0xFF	; 255
    2eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eba:	43 e0       	ldi	r20, 0x03	; 3
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	86 e6       	ldi	r24, 0x66	; 102
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = PRESWEEP_AVERAGE_CURRENT;
    2ec6:	8a e0       	ldi	r24, 0x0A	; 10
    2ec8:	89 83       	std	Y+1, r24	; 0x01
	message[1] = presweep_average_current >> 8;
    2eca:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <presweep_average_current>
    2ece:	90 91 7f 25 	lds	r25, 0x257F	; 0x80257f <presweep_average_current+0x1>
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = presweep_average_current;
    2ed4:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <presweep_average_current>
    2ed8:	90 91 7f 25 	lds	r25, 0x257F	; 0x80257f <presweep_average_current+0x1>
    2edc:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2ede:	9e 01       	movw	r18, r28
    2ee0:	2f 5f       	subi	r18, 0xFF	; 255
    2ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee4:	43 e0       	ldi	r20, 0x03	; 3
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	86 e6       	ldi	r24, 0x66	; 102
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = BRUSH1_MAX_CURRENT;
    2ef0:	8b e0       	ldi	r24, 0x0B	; 11
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	message[1] = max_brush1_overall_current >> 8;
    2ef4:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <max_brush1_overall_current>
    2ef8:	90 91 6a 20 	lds	r25, 0x206A	; 0x80206a <max_brush1_overall_current+0x1>
    2efc:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = max_brush1_overall_current;
    2efe:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <max_brush1_overall_current>
    2f02:	90 91 6a 20 	lds	r25, 0x206A	; 0x80206a <max_brush1_overall_current+0x1>
    2f06:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2f08:	9e 01       	movw	r18, r28
    2f0a:	2f 5f       	subi	r18, 0xFF	; 255
    2f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0e:	43 e0       	ldi	r20, 0x03	; 3
    2f10:	60 e0       	ldi	r22, 0x00	; 0
    2f12:	86 e6       	ldi	r24, 0x66	; 102
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = BRUSH2_MAX_CURRENT;
    2f1a:	8c e0       	ldi	r24, 0x0C	; 12
    2f1c:	89 83       	std	Y+1, r24	; 0x01
	message[1] = max_brush2_overall_current >> 8;
    2f1e:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <max_brush2_overall_current>
    2f22:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <max_brush2_overall_current+0x1>
    2f26:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = max_brush2_overall_current;
    2f28:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <max_brush2_overall_current>
    2f2c:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <max_brush2_overall_current+0x1>
    2f30:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2f32:	9e 01       	movw	r18, r28
    2f34:	2f 5f       	subi	r18, 0xFF	; 255
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	43 e0       	ldi	r20, 0x03	; 3
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	86 e6       	ldi	r24, 0x66	; 102
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = VACUUM_MAX_CURRENT;
    2f44:	8d e0       	ldi	r24, 0x0D	; 13
    2f46:	89 83       	std	Y+1, r24	; 0x01
	message[1] = max_vacuum_overall_current >> 8;
    2f48:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <max_vacuum_overall_current>
    2f4c:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <max_vacuum_overall_current+0x1>
    2f50:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = max_vacuum_overall_current;
    2f52:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <max_vacuum_overall_current>
    2f56:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <max_vacuum_overall_current+0x1>
    2f5a:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2f5c:	9e 01       	movw	r18, r28
    2f5e:	2f 5f       	subi	r18, 0xFF	; 255
    2f60:	3f 4f       	sbci	r19, 0xFF	; 255
    2f62:	43 e0       	ldi	r20, 0x03	; 3
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	86 e6       	ldi	r24, 0x66	; 102
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>

	message[0] = PRESWEEP_MAX_CURRENT;
    2f6e:	8e e0       	ldi	r24, 0x0E	; 14
    2f70:	89 83       	std	Y+1, r24	; 0x01
	message[1] = max_presweep_overall_current >> 8;
    2f72:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <max_presweep_overall_current>
    2f76:	90 91 64 23 	lds	r25, 0x2364	; 0x802364 <max_presweep_overall_current+0x1>
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = max_presweep_overall_current;
    2f7c:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <max_presweep_overall_current>
    2f80:	90 91 64 23 	lds	r25, 0x2364	; 0x802364 <max_presweep_overall_current+0x1>
    2f84:	8b 83       	std	Y+3, r24	; 0x03
	transmit_CAN(STATISTICS_CAN, 0, 3, message);
    2f86:	9e 01       	movw	r18, r28
    2f88:	2f 5f       	subi	r18, 0xFF	; 255
    2f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8c:	43 e0       	ldi	r20, 0x03	; 3
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	86 e6       	ldi	r24, 0x66	; 102
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    2f98:	28 96       	adiw	r28, 0x08	; 8
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	08 95       	ret

00002fa4 <processCAN>:
 */

#include "intercommunication.h"

void processCAN(uint16_t identifier, uint8_t* data)
{
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	66 97       	sbiw	r28, 0x16	; 22
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	de bf       	out	0x3e, r29	; 62
	uint8_t message[21];
	uint16_t temp_pedal_level;

	DBG2("processCAN: %02X %02X", identifier, data[0]);
	//Process the communication depending on the type of communication
	switch (identifier)
    2fb6:	80 54       	subi	r24, 0x40	; 64
    2fb8:	91 09       	sbc	r25, r1
    2fba:	8f 3a       	cpi	r24, 0xAF	; 175
    2fbc:	91 05       	cpc	r25, r1
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <processCAN+0x1e>
    2fc0:	a7 c1       	rjmp	.+846    	; 0x3310 <__stack+0x311>
    2fc2:	8b 01       	movw	r16, r22
    2fc4:	82 50       	subi	r24, 0x02	; 2
    2fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc8:	fc 01       	movw	r30, r24
    2fca:	0c 94 ea 31 	jmp	0x63d4	; 0x63d4 <__tablejump2__>
	{
		//Update settings of all motors and peripherals
	case ALL_STATUS:
		update_all_settings(data);
    2fce:	cb 01       	movw	r24, r22
    2fd0:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <update_all_settings>
		break;
    2fd4:	9d c1       	rjmp	.+826    	; 0x3310 <__stack+0x311>

		//Send the battery voltage to A1
	case BATTERY_CAN:
		send_battery_voltage();
    2fd6:	0e 94 04 02 	call	0x408	; 0x408 <send_battery_voltage>
		break;
    2fda:	9a c1       	rjmp	.+820    	; 0x3310 <__stack+0x311>

		//Turn on ECO mode
	case ECO_CAN:
		if (emergency_off)
    2fdc:	80 91 a3 25 	lds	r24, 0x25A3	; 0x8025a3 <emergency_off>
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	96 c1       	rjmp	.+812    	; 0x3310 <__stack+0x311>
		}
		else if(!eco_mode && data[0] == ON)
		{
			log_enqueue(ECO_ON_EVENT);
		}*/
		eco_mode = data[0];
    2fe4:	db 01       	movw	r26, r22
    2fe6:	8c 91       	ld	r24, X
    2fe8:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <eco_mode>

		if (presweep && (accelerator == ACCEL_DN))
    2fec:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <presweep>
    2ff0:	88 23       	and	r24, r24
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <processCAN+0x52>
    2ff4:	8d c1       	rjmp	.+794    	; 0x3310 <__stack+0x311>
    2ff6:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <__stack+0x1>
    2ffe:	88 c1       	rjmp	.+784    	; 0x3310 <__stack+0x311>
		{
			if (!runtimer_on)
    3000:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    3004:	81 11       	cpse	r24, r1
    3006:	03 c0       	rjmp	.+6      	; 0x300e <__stack+0xf>
			{
				send_runtime_timer(ON);
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
			}
			pre_swp_set(ON);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <pre_swp_set>
    3014:	7d c1       	rjmp	.+762    	; 0x3310 <__stack+0x311>
		//Save motor start up info and send ACK
	case MOTOR_INFO_CAN:
		//vacuum_slow_start = data[0];
		//brush_slow_start = data[1];
		//pre_swp_slow_start = data[2];
		transmit_CAN(MOTOR_INFO_CAN, 0, 0, data);
    3016:	9b 01       	movw	r18, r22
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	81 ea       	ldi	r24, 0xA1	; 161
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
		break;
    3024:	75 c1       	rjmp	.+746    	; 0x3310 <__stack+0x311>

		//Update pedal state and level
	case ACCEL_PDL_CAN:
	{
		uint8_t ack = 0xAC; //IVA003: Send ACK for the pedal state change
    3026:	8c ea       	ldi	r24, 0xAC	; 172
    3028:	8e 8b       	std	Y+22, r24	; 0x16
		transmit_CAN(ACCEL_PDL_CAN, 0, 1, &ack);
    302a:	9e 01       	movw	r18, r28
    302c:	2a 5e       	subi	r18, 0xEA	; 234
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	41 e0       	ldi	r20, 0x01	; 1
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	80 ea       	ldi	r24, 0xA0	; 160
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
		if (emergency_off)
    303c:	80 91 a3 25 	lds	r24, 0x25A3	; 0x8025a3 <emergency_off>
    3040:	81 11       	cpse	r24, r1
    3042:	66 c1       	rjmp	.+716    	; 0x3310 <__stack+0x311>
			return;
		if (data[0] == PEDAL_STATE)
    3044:	f8 01       	movw	r30, r16
    3046:	80 81       	ld	r24, Z
    3048:	8a 3a       	cpi	r24, 0xAA	; 170
    304a:	31 f5       	brne	.+76     	; 0x3098 <__stack+0x99>
		{
			if (data[1] == ACCEL_DN)
    304c:	81 81       	ldd	r24, Z+1	; 0x01
    304e:	81 30       	cpi	r24, 0x01	; 1
    3050:	89 f4       	brne	.+34     	; 0x3074 <__stack+0x75>
			{
				if (accelerator == ACCEL_UP)
    3052:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    3056:	81 11       	cpse	r24, r1
    3058:	5b c1       	rjmp	.+694    	; 0x3310 <__stack+0x311>
				{
					//LED turns on when accelerator pedal is down
					PORTQ_OUTSET = (1 << 2);
    305a:	84 e0       	ldi	r24, 0x04	; 4
    305c:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
					accelerator = ACCEL_DN;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <accelerator>
					//If accelerator changed is already true,
					//then set it to false since the accelerator has gone back to its original position before the accelerator change code has run
					accelerator_changed = !accelerator_changed;
    3066:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <accelerator_changed>
    306a:	91 11       	cpse	r25, r1
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	80 93 4b 20 	sts	0x204B, r24	; 0x80204b <accelerator_changed>
    3072:	4e c1       	rjmp	.+668    	; 0x3310 <__stack+0x311>
				}
			}
			else
			{
				if (accelerator == ACCEL_DN)
    3074:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	09 f0       	breq	.+2      	; 0x307e <__stack+0x7f>
    307c:	49 c1       	rjmp	.+658    	; 0x3310 <__stack+0x311>
				{
					//LED turns off when accelerator pedal is down
					PORTQ_OUTCLR = (1 << 2);
    307e:	84 e0       	ldi	r24, 0x04	; 4
    3080:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
					accelerator = ACCEL_UP;
    3084:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <accelerator>
					accelerator_changed = !accelerator_changed;
    3088:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <accelerator_changed>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	91 11       	cpse	r25, r1
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	80 93 4b 20 	sts	0x204B, r24	; 0x80204b <accelerator_changed>
    3096:	3c c1       	rjmp	.+632    	; 0x3310 <__stack+0x311>
				}
			}
			__SIM_DOUT;
		}
		//Update the pumps if the pedal level changes
		else if (data[0] == PEDAL_LEVEL && accelerator == ACCEL_DN)
    3098:	8b 3b       	cpi	r24, 0xBB	; 187
    309a:	09 f0       	breq	.+2      	; 0x309e <__stack+0x9f>
    309c:	39 c1       	rjmp	.+626    	; 0x3310 <__stack+0x311>
    309e:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <__stack+0xa9>
    30a6:	34 c1       	rjmp	.+616    	; 0x3310 <__stack+0x311>
		{
			temp_pedal_level = data[1] << 8;
    30a8:	81 81       	ldd	r24, Z+1	; 0x01
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	98 2f       	mov	r25, r24
    30ae:	88 27       	eor	r24, r24
			temp_pedal_level += data[2];
    30b0:	22 81       	ldd	r18, Z+2	; 0x02
    30b2:	82 0f       	add	r24, r18
    30b4:	91 1d       	adc	r25, r1
			if (temp_pedal_level != pedal_level)
    30b6:	20 91 9c 25 	lds	r18, 0x259C	; 0x80259c <pedal_level>
    30ba:	30 91 9d 25 	lds	r19, 0x259D	; 0x80259d <pedal_level+0x1>
    30be:	82 17       	cp	r24, r18
    30c0:	93 07       	cpc	r25, r19
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <__stack+0xc7>
    30c4:	25 c1       	rjmp	.+586    	; 0x3310 <__stack+0x311>
			{
				pedal_level = temp_pedal_level;
    30c6:	80 93 9c 25 	sts	0x259C, r24	; 0x80259c <pedal_level>
    30ca:	90 93 9d 25 	sts	0x259D, r25	; 0x80259d <pedal_level+0x1>
				update_pumps();
    30ce:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <update_pumps>
			}
		}
	}
	break;
    30d2:	1e c1       	rjmp	.+572    	; 0x3310 <__stack+0x311>

	//Turn off all motors if TOP event occurs
	case TOP_CAN:
		if (data[0] == A3_CAN)
    30d4:	fb 01       	movw	r30, r22
    30d6:	80 81       	ld	r24, Z
    30d8:	83 3a       	cpi	r24, 0xA3	; 163
    30da:	39 f4       	brne	.+14     	; 0x30ea <__stack+0xeb>
		{
			message[0] = A3_TOP_EVENT;
    30dc:	8f e1       	ldi	r24, 0x1F	; 31
    30de:	89 83       	std	Y+1, r24	; 0x01
			message[1] = 0;
    30e0:	1a 82       	std	Y+2, r1	; 0x02
			log_event(message);
    30e2:	ce 01       	movw	r24, r28
    30e4:	01 96       	adiw	r24, 0x01	; 1
    30e6:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <log_event>
		}

		//Disable all 9201 devices
		PORTF_OUTSET = (1 << DISABLE_9201);
    30ea:	80 e4       	ldi	r24, 0x40	; 64
    30ec:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
		//Disable all 8701 devices
		PORTE_OUTCLR = (1 << ENABLE_8701);
    30f0:	80 e1       	ldi	r24, 0x10	; 16
    30f2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

		water_pump_set(OFF, OFF);
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>

		Solenoid_set(OFF);
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
		detergent_pump_set(OFF, OFF);
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

		send_top_flag = FALSE;
    310c:	10 92 a6 25 	sts	0x25A6, r1	; 0x8025a6 <send_top_flag>

		emergency_off = TRUE;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
		break;
    3116:	fc c0       	rjmp	.+504    	; 0x3310 <__stack+0x311>

		//Turn off horn in case it is stuck on after back safety failure
	case BACK_SAFETY_CAN:
		if (data[0] == BACK_SAFETY_UNRESOLVED)
    3118:	db 01       	movw	r26, r22
    311a:	8c 91       	ld	r24, X
    311c:	8c 3c       	cpi	r24, 0xCC	; 204
    311e:	09 f0       	breq	.+2      	; 0x3122 <__stack+0x123>
    3120:	f7 c0       	rjmp	.+494    	; 0x3310 <__stack+0x311>
			horn_set(OFF);
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <horn_set>
    3128:	f3 c0       	rjmp	.+486    	; 0x3310 <__stack+0x311>
		break;

		//Log an event from A1 or A2
	case EVENT_LOG_CAN:
		if (data[0] >= FIRST_EVENT && data[0] <= LAST_EVENT)
    312a:	fb 01       	movw	r30, r22
    312c:	80 81       	ld	r24, Z
    312e:	90 ef       	ldi	r25, 0xF0	; 240
    3130:	98 0f       	add	r25, r24
    3132:	99 32       	cpi	r25, 0x29	; 41
    3134:	08 f0       	brcs	.+2      	; 0x3138 <__stack+0x139>
    3136:	ec c0       	rjmp	.+472    	; 0x3310 <__stack+0x311>
					message[0] = data[1];
					log_enqueue_data(data[0], 1, message);
					break;*/

			default:
				log_enqueue(data[0]);
    3138:	0e 94 4f 13 	call	0x269e	; 0x269e <log_enqueue>
				break;
    313c:	e9 c0       	rjmp	.+466    	; 0x3310 <__stack+0x311>
		}
		break;

		//Get runtimer value from A1
	case RUNTIMER_CAN:
		runtimer_on = data[0];
    313e:	db 01       	movw	r26, r22
    3140:	8c 91       	ld	r24, X
    3142:	80 93 67 20 	sts	0x2067, r24	; 0x802067 <runtimer_on>
		//runtimer_on = data[0] >> 4;
		//solenoid_valve = data[0] & 0x0F;
		hours = data[1] << 8 | data[2];
    3146:	11 96       	adiw	r26, 0x01	; 1
    3148:	8c 91       	ld	r24, X
    314a:	11 97       	sbiw	r26, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	98 2f       	mov	r25, r24
    3150:	88 27       	eor	r24, r24
    3152:	12 96       	adiw	r26, 0x02	; 2
    3154:	2c 91       	ld	r18, X
    3156:	12 97       	sbiw	r26, 0x02	; 2
    3158:	82 2b       	or	r24, r18
    315a:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <hours>
    315e:	90 93 91 25 	sts	0x2591, r25	; 0x802591 <hours+0x1>
		minutes = data[3];
    3162:	13 96       	adiw	r26, 0x03	; 3
    3164:	8c 91       	ld	r24, X
    3166:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <minutes>
		event_logging = ON;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <event_logging>
		check_sd_card = TRUE;
    3170:	80 93 74 20 	sts	0x2074, r24	; 0x802074 <check_sd_card>
		break;
    3174:	cd c0       	rjmp	.+410    	; 0x3310 <__stack+0x311>

		//React to an alarm	
	case ALARM_CAN:
		if (data[0] == OVERVOLTAGE)
    3176:	fb 01       	movw	r30, r22
    3178:	80 81       	ld	r24, Z
    317a:	84 30       	cpi	r24, 0x04	; 4
    317c:	09 f0       	breq	.+2      	; 0x3180 <__stack+0x181>
    317e:	c8 c0       	rjmp	.+400    	; 0x3310 <__stack+0x311>
		{
			//Disable all 9201 devices
			PORTF_OUTSET = (1 << DISABLE_9201);
    3180:	80 e4       	ldi	r24, 0x40	; 64
    3182:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
			//Disable all 8701 devices
			PORTE_OUTCLR = (1 << ENABLE_8701);
    3186:	80 e1       	ldi	r24, 0x10	; 16
    3188:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

			water_pump_set(OFF, OFF);
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
			Solenoid_set(OFF);
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
			detergent_pump_set(OFF, OFF);
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

			emergency_off = TRUE;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
    31a8:	b3 c0       	rjmp	.+358    	; 0x3310 <__stack+0x311>
		}
		break;

		//Respond to ACK frmo A1 with an ACK
	case ACK_CAN:
		if (data[0] == A1_CAN)
    31aa:	db 01       	movw	r26, r22
    31ac:	8c 91       	ld	r24, X
    31ae:	81 3a       	cpi	r24, 0xA1	; 161
    31b0:	11 f4       	brne	.+4      	; 0x31b6 <__stack+0x1b7>
		{
			send_CAN_ACK();
    31b2:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <send_CAN_ACK>
		}
		can_functioning = TRUE;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	80 93 71 25 	sts	0x2571, r24	; 0x802571 <can_functioning>
		break;
    31bc:	a9 c0       	rjmp	.+338    	; 0x3310 <__stack+0x311>

		//Reset all values to default values
	case RESET_DEFAULT_CAN:
		set_to_default();
    31be:	0e 94 9e 24 	call	0x493c	; 0x493c <set_to_default>
		break;
    31c2:	a6 c0       	rjmp	.+332    	; 0x3310 <__stack+0x311>
		//Emergency off received disable all the functions
	case EMERGENCY_OFF_CAN:
		emergency_off = TRUE;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>

		//Update A2 serial number
	case A2_SERIAL_NUM_CAN:
		if (data[0] == 1)
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 81       	ld	r24, Z
    31ce:	81 30       	cpi	r24, 0x01	; 1
    31d0:	d9 f4       	brne	.+54     	; 0x3208 <__stack+0x209>
		{
			A2_serial_num[0] = data[1];
    31d2:	e4 e2       	ldi	r30, 0x24	; 36
    31d4:	f0 e2       	ldi	r31, 0x20	; 32
    31d6:	d8 01       	movw	r26, r16
    31d8:	11 96       	adiw	r26, 0x01	; 1
    31da:	8c 91       	ld	r24, X
    31dc:	11 97       	sbiw	r26, 0x01	; 1
    31de:	80 83       	st	Z, r24
			A2_serial_num[1] = data[2];
    31e0:	12 96       	adiw	r26, 0x02	; 2
    31e2:	8c 91       	ld	r24, X
    31e4:	12 97       	sbiw	r26, 0x02	; 2
    31e6:	81 83       	std	Z+1, r24	; 0x01
			A2_serial_num[2] = data[3];
    31e8:	13 96       	adiw	r26, 0x03	; 3
    31ea:	8c 91       	ld	r24, X
    31ec:	13 97       	sbiw	r26, 0x03	; 3
    31ee:	82 83       	std	Z+2, r24	; 0x02
			A2_serial_num[3] = data[4];
    31f0:	14 96       	adiw	r26, 0x04	; 4
    31f2:	8c 91       	ld	r24, X
    31f4:	14 97       	sbiw	r26, 0x04	; 4
    31f6:	83 83       	std	Z+3, r24	; 0x03
			A2_serial_num[4] = data[5];
    31f8:	15 96       	adiw	r26, 0x05	; 5
    31fa:	8c 91       	ld	r24, X
    31fc:	15 97       	sbiw	r26, 0x05	; 5
    31fe:	84 83       	std	Z+4, r24	; 0x04
			A2_serial_num[5] = data[6];
    3200:	16 96       	adiw	r26, 0x06	; 6
    3202:	8c 91       	ld	r24, X
    3204:	85 83       	std	Z+5, r24	; 0x05
    3206:	84 c0       	rjmp	.+264    	; 0x3310 <__stack+0x311>
		}
		else if (data[0] == 2)
    3208:	82 30       	cpi	r24, 0x02	; 2
    320a:	d1 f4       	brne	.+52     	; 0x3240 <__stack+0x241>
		{
			A2_serial_num[6] = data[1];
    320c:	f8 01       	movw	r30, r16
    320e:	81 81       	ldd	r24, Z+1	; 0x01
    3210:	e4 e2       	ldi	r30, 0x24	; 36
    3212:	f0 e2       	ldi	r31, 0x20	; 32
    3214:	86 83       	std	Z+6, r24	; 0x06
			A2_serial_num[7] = data[2];
    3216:	d8 01       	movw	r26, r16
    3218:	12 96       	adiw	r26, 0x02	; 2
    321a:	8c 91       	ld	r24, X
    321c:	12 97       	sbiw	r26, 0x02	; 2
    321e:	87 83       	std	Z+7, r24	; 0x07
			A2_serial_num[8] = data[3];
    3220:	13 96       	adiw	r26, 0x03	; 3
    3222:	8c 91       	ld	r24, X
    3224:	13 97       	sbiw	r26, 0x03	; 3
    3226:	80 87       	std	Z+8, r24	; 0x08
			A2_serial_num[9] = data[4];
    3228:	14 96       	adiw	r26, 0x04	; 4
    322a:	8c 91       	ld	r24, X
    322c:	14 97       	sbiw	r26, 0x04	; 4
    322e:	81 87       	std	Z+9, r24	; 0x09
			A2_serial_num[10] = data[5];
    3230:	15 96       	adiw	r26, 0x05	; 5
    3232:	8c 91       	ld	r24, X
    3234:	15 97       	sbiw	r26, 0x05	; 5
    3236:	82 87       	std	Z+10, r24	; 0x0a
			A2_serial_num[11] = data[6];
    3238:	16 96       	adiw	r26, 0x06	; 6
    323a:	8c 91       	ld	r24, X
    323c:	83 87       	std	Z+11, r24	; 0x0b
    323e:	68 c0       	rjmp	.+208    	; 0x3310 <__stack+0x311>
		}
		else if (data[0] == 3)
    3240:	83 30       	cpi	r24, 0x03	; 3
    3242:	89 f4       	brne	.+34     	; 0x3266 <__stack+0x267>
		{
			A2_serial_num[12] = data[1];
    3244:	f8 01       	movw	r30, r16
    3246:	81 81       	ldd	r24, Z+1	; 0x01
    3248:	e4 e2       	ldi	r30, 0x24	; 36
    324a:	f0 e2       	ldi	r31, 0x20	; 32
    324c:	84 87       	std	Z+12, r24	; 0x0c
			A2_serial_num[13] = data[2];
    324e:	d8 01       	movw	r26, r16
    3250:	12 96       	adiw	r26, 0x02	; 2
    3252:	8c 91       	ld	r24, X
    3254:	85 87       	std	Z+13, r24	; 0x0d
			eeprom_update_block((const void*)A2_serial_num, (void *)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    3256:	4e e0       	ldi	r20, 0x0E	; 14
    3258:	50 e0       	ldi	r21, 0x00	; 0
    325a:	60 e4       	ldi	r22, 0x40	; 64
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	cf 01       	movw	r24, r30
    3260:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_update_block>
    3264:	55 c0       	rjmp	.+170    	; 0x3310 <__stack+0x311>
		}
		else
		{
			send_serial_num();
    3266:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <send_serial_num>
    326a:	52 c0       	rjmp	.+164    	; 0x3310 <__stack+0x311>
		}
		break;

		//Log drive current
	case DRIVE_CURRENT_CAN:
		log_enqueue_data(DRIVE_CURRENT, 1, data);
    326c:	ab 01       	movw	r20, r22
    326e:	61 e0       	ldi	r22, 0x01	; 1
    3270:	88 e2       	ldi	r24, 0x28	; 40
    3272:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>
		break;
    3276:	4c c0       	rjmp	.+152    	; 0x3310 <__stack+0x311>

		//Log max drive current
	case MAX_DRIVE_CURRENT_CAN:
		log_enqueue_data(MAX_DRIVE_CURRENT, 1, data);
    3278:	ab 01       	movw	r20, r22
    327a:	61 e0       	ldi	r22, 0x01	; 1
    327c:	88 e3       	ldi	r24, 0x38	; 56
    327e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>
		break;
    3282:	46 c0       	rjmp	.+140    	; 0x3310 <__stack+0x311>

		//Send statistics if A1 goes into settings menu
	case REQUEST_STATISTICS:
		send_statistics();
    3284:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <send_statistics>
		break;
    3288:	43 c0       	rjmp	.+134    	; 0x3310 <__stack+0x311>

		//Erase the SD card
	case ERASE_SD_CAN:
		erase_SD_card();
    328a:	0e 94 b7 28 	call	0x516e	; 0x516e <erase_SD_card>
		break;
    328e:	40 c0       	rjmp	.+128    	; 0x3310 <__stack+0x311>
		//update vaccum slow start value
	case VACCUM_SLOW_START_CAN:
		vacuum_slow_start = data[0];
    3290:	fb 01       	movw	r30, r22
    3292:	80 81       	ld	r24, Z
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <vacuum_slow_start>
    329a:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <vacuum_slow_start+0x1>
		update_vaccum_slow_start();
    329e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <update_vaccum_slow_start>
		break;
    32a2:	36 c0       	rjmp	.+108    	; 0x3310 <__stack+0x311>
		//update brush slow start value
	case BRUSH_SLOW_START_CAN:
		brush_slow_start = data[0];
    32a4:	db 01       	movw	r26, r22
    32a6:	8c 91       	ld	r24, X
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	80 93 67 23 	sts	0x2367, r24	; 0x802367 <brush_slow_start>
    32ae:	90 93 68 23 	sts	0x2368, r25	; 0x802368 <brush_slow_start+0x1>
		update_brush_slow_start();
    32b2:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <update_brush_slow_start>
		break;
    32b6:	2c c0       	rjmp	.+88     	; 0x3310 <__stack+0x311>
		//update presweep slow start value
	case PRESWEEP_SLOW_START_CAN:
		pre_swp_slow_start = data[0];
    32b8:	fb 01       	movw	r30, r22
    32ba:	80 81       	ld	r24, Z
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <pre_swp_slow_start>
    32c2:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <pre_swp_slow_start+0x1>
		update_pre_swp_slow_start();
    32c6:	0e 94 38 26 	call	0x4c70	; 0x4c70 <update_pre_swp_slow_start>
		break;
    32ca:	22 c0       	rjmp	.+68     	; 0x3310 <__stack+0x311>
		//Reset device if instructed to reset more than 10 seconds past turn on
	case RESET_DEVICE_CAN_A1:
		if (reset_timer >= 10)
    32cc:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <reset_timer>
    32d0:	8a 30       	cpi	r24, 0x0A	; 10
    32d2:	f0 f0       	brcs	.+60     	; 0x3310 <__stack+0x311>
		{
			wdt_enable(WDTO_15MS);
    32d4:	93 e0       	ldi	r25, 0x03	; 3
    32d6:	88 ed       	ldi	r24, 0xD8	; 216
    32d8:	08 b6       	in	r0, 0x38	; 56
    32da:	18 be       	out	0x38, r1	; 56
    32dc:	84 bf       	out	0x34, r24	; 52
    32de:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    32e2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    32e6:	81 fd       	sbrc	r24, 1
    32e8:	fc cf       	rjmp	.-8      	; 0x32e2 <__stack+0x2e3>
    32ea:	08 be       	out	0x38, r0	; 56
    32ec:	ff cf       	rjmp	.-2      	; 0x32ec <__stack+0x2ed>
			REBOOT();
		}
		break;
		//Reset device if instructed to reset more than 10 seconds past turn on
	case RESET_DEVICE_CAN_A3:
		if (reset_timer >= 10)
    32ee:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <reset_timer>
    32f2:	8a 30       	cpi	r24, 0x0A	; 10
    32f4:	68 f0       	brcs	.+26     	; 0x3310 <__stack+0x311>
		{
			wdt_enable(WDTO_15MS);
    32f6:	93 e0       	ldi	r25, 0x03	; 3
    32f8:	88 ed       	ldi	r24, 0xD8	; 216
    32fa:	08 b6       	in	r0, 0x38	; 56
    32fc:	18 be       	out	0x38, r1	; 56
    32fe:	84 bf       	out	0x34, r24	; 52
    3300:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3304:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    3308:	81 fd       	sbrc	r24, 1
    330a:	fc cf       	rjmp	.-8      	; 0x3304 <__stack+0x305>
    330c:	08 be       	out	0x38, r0	; 56
    330e:	ff cf       	rjmp	.-2      	; 0x330e <__stack+0x30f>
		break;

	default:
		break;
	}
}
    3310:	66 96       	adiw	r28, 0x16	; 22
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	08 95       	ret

00003320 <initialize_Screen>:

#include "lcd_screen.h"

 //Initialize the LCD screen using the example setup in the LCD data sheet
void initialize_Screen(void)
{
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	2a 97       	sbiw	r28, 0x0a	; 10
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	de bf       	out	0x3e, r29	; 62
	char message[10];

	message[0] = (0x00);													//Control bit with continuous data stream
    332e:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);													//Function Set (8-bit data, 2 Line 5x8 character mode, Normal Instruction Table Chosen)
    3330:	88 e3       	ldi	r24, 0x38	; 56
    3332:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 2);
    3334:	22 e0       	ldi	r18, 0x02	; 2
    3336:	ae 01       	movw	r20, r28
    3338:	4f 5f       	subi	r20, 0xFF	; 255
    333a:	5f 4f       	sbci	r21, 0xFF	; 255
    333c:	6c e3       	ldi	r22, 0x3C	; 60
    333e:	86 eb       	ldi	r24, 0xB6	; 182
    3340:	90 e2       	ldi	r25, 0x20	; 32
    3342:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <TWI_MasterWrite>

	message[0] = (0x00);
    3346:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);													//Function Set (8-bit data, 2 Line 5x8 character mode, Extension Instruction Table Chosen)
    3348:	89 e3       	ldi	r24, 0x39	; 57
    334a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 2);
    334c:	22 e0       	ldi	r18, 0x02	; 2
    334e:	ae 01       	movw	r20, r28
    3350:	4f 5f       	subi	r20, 0xFF	; 255
    3352:	5f 4f       	sbci	r21, 0xFF	; 255
    3354:	6c e3       	ldi	r22, 0x3C	; 60
    3356:	86 eb       	ldi	r24, 0xB6	; 182
    3358:	90 e2       	ldi	r25, 0x20	; 32
    335a:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <TWI_MasterWrite>

	message[0] = (0x00);
    335e:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);													//Set frame frequency to 192 Hz and Voltage Bias to 1/5
    3360:	84 e1       	ldi	r24, 0x14	; 20
    3362:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x70);													//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
    3364:	80 e7       	ldi	r24, 0x70	; 112
    3366:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);													//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
    3368:	8e e5       	ldi	r24, 0x5E	; 94
    336a:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);													//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
    336c:	8d e6       	ldi	r24, 0x6D	; 109
    336e:	8d 83       	std	Y+5, r24	; 0x05
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 5);
    3370:	25 e0       	ldi	r18, 0x05	; 5
    3372:	ae 01       	movw	r20, r28
    3374:	4f 5f       	subi	r20, 0xFF	; 255
    3376:	5f 4f       	sbci	r21, 0xFF	; 255
    3378:	6c e3       	ldi	r22, 0x3C	; 60
    337a:	86 eb       	ldi	r24, 0xB6	; 182
    337c:	90 e2       	ldi	r25, 0x20	; 32
    337e:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <TWI_MasterWrite>

	message[0] = (0x00);
    3382:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x0F);													//Turn on display and turn on cursor and cursor blink
    3384:	8f e0       	ldi	r24, 0x0F	; 15
    3386:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x01);													//Clear the display	- Entry Mode Set is required afterwards
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x06);													//Entry Mode Set - Increment DDRAM Address (cursor) and do not shift display												
    338c:	86 e0       	ldi	r24, 0x06	; 6
    338e:	8c 83       	std	Y+4, r24	; 0x04
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 4);
    3390:	24 e0       	ldi	r18, 0x04	; 4
    3392:	ae 01       	movw	r20, r28
    3394:	4f 5f       	subi	r20, 0xFF	; 255
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	6c e3       	ldi	r22, 0x3C	; 60
    339a:	86 eb       	ldi	r24, 0xB6	; 182
    339c:	90 e2       	ldi	r25, 0x20	; 32
    339e:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <TWI_MasterWrite>
}
    33a2:	2a 96       	adiw	r28, 0x0a	; 10
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	df 91       	pop	r29
    33aa:	cf 91       	pop	r28
    33ac:	08 95       	ret

000033ae <brush_motor_set>:
	vacuum_state = VACUUM_OFF;
	presweep_state = OFF;
}

void brush_motor_set(uint8_t level)
{
    33ae:	cf 92       	push	r12
    33b0:	df 92       	push	r13
    33b2:	ef 92       	push	r14
    33b4:	ff 92       	push	r15
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	c8 2f       	mov	r28, r24
	if (level != OFF && brush_head_position == BEFORE_MIDDLE && brush_head_position != AFTER_MIDDLE)
    33bc:	88 23       	and	r24, r24
    33be:	49 f1       	breq	.+82     	; 0x3412 <brush_motor_set+0x64>
    33c0:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <brush_head_position>
    33c4:	81 11       	cpse	r24, r1
    33c6:	cf c0       	rjmp	.+414    	; 0x3566 <brush_motor_set+0x1b8>
    33c8:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <brush_head_position>
    33cc:	82 30       	cpi	r24, 0x02	; 2
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <brush_motor_set+0x24>
    33d0:	ca c0       	rjmp	.+404    	; 0x3566 <brush_motor_set+0x1b8>
	{
		//Begin bringing the brush head down
		BR_HD_DN;
    33d2:	e5 ea       	ldi	r30, 0xA5	; 165
    33d4:	f6 e0       	ldi	r31, 0x06	; 6
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	80 83       	st	Z, r24
    33da:	92 e0       	ldi	r25, 0x02	; 2
    33dc:	90 83       	st	Z, r25
		brush_head_position = MIDDLE;
    33de:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <brush_head_position>
		brush_head_timer = ON;
    33e2:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <brush_head_timer>
    33e6:	2f ef       	ldi	r18, 0xFF	; 255
    33e8:	83 ec       	ldi	r24, 0xC3	; 195
    33ea:	99 e0       	ldi	r25, 0x09	; 9
    33ec:	21 50       	subi	r18, 0x01	; 1
    33ee:	80 40       	sbci	r24, 0x00	; 0
    33f0:	90 40       	sbci	r25, 0x00	; 0
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <brush_motor_set+0x3e>
    33f4:	00 c0       	rjmp	.+0      	; 0x33f6 <brush_motor_set+0x48>
    33f6:	00 00       	nop
		brush_head_timer = ON;
		_delay_ms(100);
	}

	//Prescalar /8
	TCE0.CTRLA |= 0x04;
    33f8:	e0 e0       	ldi	r30, 0x00	; 0
    33fa:	fa e0       	ldi	r31, 0x0A	; 10
    33fc:	80 81       	ld	r24, Z
    33fe:	84 60       	ori	r24, 0x04	; 4
    3400:	80 83       	st	Z, r24
	//Enable pin A & B with single slope PWM
	TCE0.CTRLB |= 0x33;
    3402:	81 81       	ldd	r24, Z+1	; 0x01
    3404:	83 63       	ori	r24, 0x33	; 51
    3406:	81 83       	std	Z+1, r24	; 0x01
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
    3408:	80 ea       	ldi	r24, 0xA0	; 160
    340a:	9f e0       	ldi	r25, 0x0F	; 15
    340c:	86 a3       	std	Z+38, r24	; 0x26
    340e:	97 a3       	std	Z+39, r25	; 0x27
    3410:	19 c0       	rjmp	.+50     	; 0x3444 <brush_motor_set+0x96>
		BR_HD_DN;
		brush_head_position = MIDDLE;
		brush_head_timer = ON;
		_delay_ms(100);
	}
	else if (level == OFF && brush_head_position != BEFORE_MIDDLE)
    3412:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <brush_head_position>
    3416:	88 23       	and	r24, r24
    3418:	09 f4       	brne	.+2      	; 0x341c <brush_motor_set+0x6e>
    341a:	92 c0       	rjmp	.+292    	; 0x3540 <brush_motor_set+0x192>
	{
		//Begin pulling brush head back up
		BR_HD_UP;
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    3422:	92 e0       	ldi	r25, 0x02	; 2
    3424:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
		brush_head_position = BEFORE_MIDDLE;
    3428:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <brush_head_position>
		brush_head_timer = ON;
    342c:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <brush_head_timer>
    3430:	2f ef       	ldi	r18, 0xFF	; 255
    3432:	83 ec       	ldi	r24, 0xC3	; 195
    3434:	99 e0       	ldi	r25, 0x09	; 9
    3436:	21 50       	subi	r18, 0x01	; 1
    3438:	80 40       	sbci	r24, 0x00	; 0
    343a:	90 40       	sbci	r25, 0x00	; 0
    343c:	e1 f7       	brne	.-8      	; 0x3436 <brush_motor_set+0x88>
    343e:	00 c0       	rjmp	.+0      	; 0x3440 <brush_motor_set+0x92>
    3440:	00 00       	nop
    3442:	7e c0       	rjmp	.+252    	; 0x3540 <brush_motor_set+0x192>
		TCE0.CCB = 0;
		__SIM_SET_PWM(PWM_A2_BR1_MOTOR, TCE0.CCA);
		__SIM_SET_PWM(PWM_A2_BR2_MOTOR, TCE0.CCB);
	}
	//If brush does not need to start slowly, start up immmediately
	else if (brush_slow_start == 0)
    3444:	80 91 67 23 	lds	r24, 0x2367	; 0x802367 <brush_slow_start>
    3448:	90 91 68 23 	lds	r25, 0x2368	; 0x802368 <brush_slow_start+0x1>
    344c:	89 2b       	or	r24, r25
    344e:	e1 f4       	brne	.+56     	; 0x3488 <brush_motor_set+0xda>
	{
		uint32_t pwm = ((uint32_t)level * 4000) / 100;
		test_value2 = (uint16_t)level;
    3450:	8c 2f       	mov	r24, r28
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <test_value2>
    3458:	90 93 8d 20 	sts	0x208D, r25	; 0x80208d <test_value2+0x1>
		test_value1 = (uint16_t)pwm;
    345c:	9c 01       	movw	r18, r24
    345e:	a0 ea       	ldi	r26, 0xA0	; 160
    3460:	bf e0       	ldi	r27, 0x0F	; 15
    3462:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    3466:	24 e6       	ldi	r18, 0x64	; 100
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e0       	ldi	r20, 0x00	; 0
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    3472:	20 93 65 23 	sts	0x2365, r18	; 0x802365 <test_value1>
    3476:	30 93 66 23 	sts	0x2366, r19	; 0x802366 <test_value1+0x1>
		TCE0.CCA = (uint16_t)pwm;
    347a:	e0 e0       	ldi	r30, 0x00	; 0
    347c:	fa e0       	ldi	r31, 0x0A	; 10
    347e:	20 a7       	std	Z+40, r18	; 0x28
    3480:	31 a7       	std	Z+41, r19	; 0x29
		TCE0.CCB = (uint16_t)pwm;
    3482:	22 a7       	std	Z+42, r18	; 0x2a
    3484:	33 a7       	std	Z+43, r19	; 0x2b
    3486:	7c c0       	rjmp	.+248    	; 0x3580 <brush_motor_set+0x1d2>
		__SIM_SET_PWM(PWM_A2_BR1_MOTOR, TCE0.CCA);
		__SIM_SET_PWM(PWM_A2_BR2_MOTOR, TCE0.CCB);
	}
	else if (BRUSH_TIMER_IS_ON)
    3488:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    348c:	81 11       	cpse	r24, r1
    348e:	78 c0       	rjmp	.+240    	; 0x3580 <brush_motor_set+0x1d2>
	{
		return;
	}
	//If brush is already on, eco mode is changed
	else if (TCE0.CCA != 0)
    3490:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    3494:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    3498:	89 2b       	or	r24, r25
    349a:	09 f4       	brne	.+2      	; 0x349e <brush_motor_set+0xf0>
    349c:	46 c0       	rjmp	.+140    	; 0x352a <brush_motor_set+0x17c>
	{
		//If eco mode is turned off slowly turn up to maximum pwm
		if (!eco_mode && brush_slow_start != 0 && temp_brush < 100)
    349e:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
    34a2:	81 11       	cpse	r24, r1
    34a4:	1f c0       	rjmp	.+62     	; 0x34e4 <brush_motor_set+0x136>
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	48 ec       	ldi	r20, 0xC8	; 200
    34ac:	52 e4       	ldi	r21, 0x42	; 66
    34ae:	60 91 9f 25 	lds	r22, 0x259F	; 0x80259f <temp_brush>
    34b2:	70 91 a0 25 	lds	r23, 0x25A0	; 0x8025a0 <temp_brush+0x1>
    34b6:	80 91 a1 25 	lds	r24, 0x25A1	; 0x8025a1 <temp_brush+0x2>
    34ba:	90 91 a2 25 	lds	r25, 0x25A2	; 0x8025a2 <temp_brush+0x3>
    34be:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
    34c2:	88 23       	and	r24, r24
    34c4:	7c f4       	brge	.+30     	; 0x34e4 <brush_motor_set+0x136>
		{
			temp_brush = 75;
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	a6 e9       	ldi	r26, 0x96	; 150
    34cc:	b2 e4       	ldi	r27, 0x42	; 66
    34ce:	80 93 9f 25 	sts	0x259F, r24	; 0x80259f <temp_brush>
    34d2:	90 93 a0 25 	sts	0x25A0, r25	; 0x8025a0 <temp_brush+0x1>
    34d6:	a0 93 a1 25 	sts	0x25A1, r26	; 0x8025a1 <temp_brush+0x2>
    34da:	b0 93 a2 25 	sts	0x25A2, r27	; 0x8025a2 <temp_brush+0x3>
			start_25_ms_brush_timer();
    34de:	0e 94 5f 29 	call	0x52be	; 0x52be <start_25_ms_brush_timer>
    34e2:	4e c0       	rjmp	.+156    	; 0x3580 <brush_motor_set+0x1d2>
		}
		else
		{
			temp_brush = level;
    34e4:	cc 2e       	mov	r12, r28
    34e6:	d1 2c       	mov	r13, r1
    34e8:	e1 2c       	mov	r14, r1
    34ea:	f1 2c       	mov	r15, r1
    34ec:	c7 01       	movw	r24, r14
    34ee:	b6 01       	movw	r22, r12
    34f0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    34f4:	60 93 9f 25 	sts	0x259F, r22	; 0x80259f <temp_brush>
    34f8:	70 93 a0 25 	sts	0x25A0, r23	; 0x8025a0 <temp_brush+0x1>
    34fc:	80 93 a1 25 	sts	0x25A1, r24	; 0x8025a1 <temp_brush+0x2>
    3500:	90 93 a2 25 	sts	0x25A2, r25	; 0x8025a2 <temp_brush+0x3>
			uint32_t pwm = ((uint32_t)level * 4000) / 100;
			TCE0.CCA = (uint16_t)pwm;
    3504:	a0 ea       	ldi	r26, 0xA0	; 160
    3506:	bf e0       	ldi	r27, 0x0F	; 15
    3508:	a7 01       	movw	r20, r14
    350a:	96 01       	movw	r18, r12
    350c:	0e 94 03 32 	call	0x6406	; 0x6406 <__muluhisi3>
    3510:	24 e6       	ldi	r18, 0x64	; 100
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    351c:	e0 e0       	ldi	r30, 0x00	; 0
    351e:	fa e0       	ldi	r31, 0x0A	; 10
    3520:	20 a7       	std	Z+40, r18	; 0x28
    3522:	31 a7       	std	Z+41, r19	; 0x29
			TCE0.CCB = (uint16_t)pwm;
    3524:	22 a7       	std	Z+42, r18	; 0x2a
    3526:	33 a7       	std	Z+43, r19	; 0x2b
    3528:	2b c0       	rjmp	.+86     	; 0x3580 <brush_motor_set+0x1d2>
		}
	}
	//Slowly turn on brush
	else
	{
		temp_brush = 0;
    352a:	10 92 9f 25 	sts	0x259F, r1	; 0x80259f <temp_brush>
    352e:	10 92 a0 25 	sts	0x25A0, r1	; 0x8025a0 <temp_brush+0x1>
    3532:	10 92 a1 25 	sts	0x25A1, r1	; 0x8025a1 <temp_brush+0x2>
    3536:	10 92 a2 25 	sts	0x25A2, r1	; 0x8025a2 <temp_brush+0x3>
		start_25_ms_brush_timer();
    353a:	0e 94 5f 29 	call	0x52be	; 0x52be <start_25_ms_brush_timer>
    353e:	20 c0       	rjmp	.+64     	; 0x3580 <brush_motor_set+0x1d2>
		brush_head_timer = ON;
		_delay_ms(100);
	}

	//Prescalar /8
	TCE0.CTRLA |= 0x04;
    3540:	c0 e0       	ldi	r28, 0x00	; 0
    3542:	da e0       	ldi	r29, 0x0A	; 10
    3544:	88 81       	ld	r24, Y
    3546:	84 60       	ori	r24, 0x04	; 4
    3548:	88 83       	st	Y, r24
	//Enable pin A & B with single slope PWM
	TCE0.CTRLB |= 0x33;
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	83 63       	ori	r24, 0x33	; 51
    354e:	89 83       	std	Y+1, r24	; 0x01
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
    3550:	80 ea       	ldi	r24, 0xA0	; 160
    3552:	9f e0       	ldi	r25, 0x0F	; 15
    3554:	8e a3       	std	Y+38, r24	; 0x26
    3556:	9f a3       	std	Y+39, r25	; 0x27

	//If brush is to be turned off, turn off
	if (level == 0)
	{
		stop_25_ms_brush_timer();
    3558:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <stop_25_ms_brush_timer>
		TCE0.CCA = 0;
    355c:	18 a6       	std	Y+40, r1	; 0x28
    355e:	19 a6       	std	Y+41, r1	; 0x29
		TCE0.CCB = 0;
    3560:	1a a6       	std	Y+42, r1	; 0x2a
    3562:	1b a6       	std	Y+43, r1	; 0x2b
    3564:	0d c0       	rjmp	.+26     	; 0x3580 <brush_motor_set+0x1d2>
		brush_head_timer = ON;
		_delay_ms(100);
	}

	//Prescalar /8
	TCE0.CTRLA |= 0x04;
    3566:	e0 e0       	ldi	r30, 0x00	; 0
    3568:	fa e0       	ldi	r31, 0x0A	; 10
    356a:	80 81       	ld	r24, Z
    356c:	84 60       	ori	r24, 0x04	; 4
    356e:	80 83       	st	Z, r24
	//Enable pin A & B with single slope PWM
	TCE0.CTRLB |= 0x33;
    3570:	81 81       	ldd	r24, Z+1	; 0x01
    3572:	83 63       	ori	r24, 0x33	; 51
    3574:	81 83       	std	Z+1, r24	; 0x01
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
    3576:	80 ea       	ldi	r24, 0xA0	; 160
    3578:	9f e0       	ldi	r25, 0x0F	; 15
    357a:	86 a3       	std	Z+38, r24	; 0x26
    357c:	97 a3       	std	Z+39, r25	; 0x27
    357e:	62 cf       	rjmp	.-316    	; 0x3444 <brush_motor_set+0x96>
	else
	{
		temp_brush = 0;
		start_25_ms_brush_timer();
	}
}
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	df 90       	pop	r13
    358a:	cf 90       	pop	r12
    358c:	08 95       	ret

0000358e <vacuum_motor_set>:

void vacuum_motor_set(uint8_t level)
{
    358e:	cf 92       	push	r12
    3590:	df 92       	push	r13
    3592:	ef 92       	push	r14
    3594:	ff 92       	push	r15
    3596:	c8 2e       	mov	r12, r24
	//Prescalar /8
	TCE0.CTRLA |= 0x04;
    3598:	e0 e0       	ldi	r30, 0x00	; 0
    359a:	fa e0       	ldi	r31, 0x0A	; 10
    359c:	80 81       	ld	r24, Z
    359e:	84 60       	ori	r24, 0x04	; 4
    35a0:	80 83       	st	Z, r24
	//Enable pin C with single slope PWM
	TCE0.CTRLB |= 0x43;
    35a2:	81 81       	ldd	r24, Z+1	; 0x01
    35a4:	83 64       	ori	r24, 0x43	; 67
    35a6:	81 83       	std	Z+1, r24	; 0x01
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
    35a8:	80 ea       	ldi	r24, 0xA0	; 160
    35aa:	9f e0       	ldi	r25, 0x0F	; 15
    35ac:	86 a3       	std	Z+38, r24	; 0x26
    35ae:	97 a3       	std	Z+39, r25	; 0x27

	//If vacuum is to be turned off, turn off
	if (level == 0 || tank_full)
    35b0:	cc 20       	and	r12, r12
    35b2:	21 f0       	breq	.+8      	; 0x35bc <vacuum_motor_set+0x2e>
    35b4:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <tank_full>
    35b8:	88 23       	and	r24, r24
    35ba:	39 f0       	breq	.+14     	; 0x35ca <vacuum_motor_set+0x3c>
	{
		stop_25_ms_vacuum_timer();
    35bc:	0e 94 75 29 	call	0x52ea	; 0x52ea <stop_25_ms_vacuum_timer>
		TCE0.CCC = 0;
    35c0:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
    35c4:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
    35c8:	6f c0       	rjmp	.+222    	; 0x36a8 <vacuum_motor_set+0x11a>
		__SIM_SET_PWM(PWM_A2_VAC_MOTOR, TCE0.CCC);
	}
	//If vacuum does not need to start slowly, start up immmediately
	else if (vacuum_slow_start == 0)
    35ca:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <vacuum_slow_start>
    35ce:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <vacuum_slow_start+0x1>
    35d2:	89 2b       	or	r24, r25
    35d4:	89 f4       	brne	.+34     	; 0x35f8 <vacuum_motor_set+0x6a>
	{
		uint32_t pwm = ((uint32_t)level * 4000) / 100;
		TCE0.CCC = (uint16_t)pwm;
    35d6:	2c 2d       	mov	r18, r12
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	a0 ea       	ldi	r26, 0xA0	; 160
    35dc:	bf e0       	ldi	r27, 0x0F	; 15
    35de:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    35e2:	24 e6       	ldi	r18, 0x64	; 100
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    35ee:	20 93 2c 0a 	sts	0x0A2C, r18	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
    35f2:	30 93 2d 0a 	sts	0x0A2D, r19	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
    35f6:	58 c0       	rjmp	.+176    	; 0x36a8 <vacuum_motor_set+0x11a>
		__SIM_SET_PWM(PWM_A2_VAC_MOTOR, TCE0.CCC);
	}
	else if (VACUUM_TIMER_IS_ON)
    35f8:	80 91 00 0b 	lds	r24, 0x0B00	; 0x800b00 <__TEXT_REGION_LENGTH__+0x700b00>
    35fc:	81 11       	cpse	r24, r1
    35fe:	54 c0       	rjmp	.+168    	; 0x36a8 <vacuum_motor_set+0x11a>
	{
		return;
	}
	//If vacuum is already on, eco mode is changed
	else if (TCE0.CCC != 0)
    3600:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
    3604:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
    3608:	89 2b       	or	r24, r25
    360a:	09 f4       	brne	.+2      	; 0x360e <vacuum_motor_set+0x80>
    360c:	43 c0       	rjmp	.+134    	; 0x3694 <vacuum_motor_set+0x106>
	{
		//If eco mode is turned off slowly turn up to maximum pwm
		if (!eco_mode && vacuum_slow_start != 0 && temp_vacuum < 100)
    360e:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
    3612:	81 11       	cpse	r24, r1
    3614:	1f c0       	rjmp	.+62     	; 0x3654 <vacuum_motor_set+0xc6>
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	48 ec       	ldi	r20, 0xC8	; 200
    361c:	52 e4       	ldi	r21, 0x42	; 66
    361e:	60 91 84 25 	lds	r22, 0x2584	; 0x802584 <temp_vacuum>
    3622:	70 91 85 25 	lds	r23, 0x2585	; 0x802585 <temp_vacuum+0x1>
    3626:	80 91 86 25 	lds	r24, 0x2586	; 0x802586 <temp_vacuum+0x2>
    362a:	90 91 87 25 	lds	r25, 0x2587	; 0x802587 <temp_vacuum+0x3>
    362e:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
    3632:	88 23       	and	r24, r24
    3634:	7c f4       	brge	.+30     	; 0x3654 <vacuum_motor_set+0xc6>
		{
			temp_vacuum = 75;
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	a6 e9       	ldi	r26, 0x96	; 150
    363c:	b2 e4       	ldi	r27, 0x42	; 66
    363e:	80 93 84 25 	sts	0x2584, r24	; 0x802584 <temp_vacuum>
    3642:	90 93 85 25 	sts	0x2585, r25	; 0x802585 <temp_vacuum+0x1>
    3646:	a0 93 86 25 	sts	0x2586, r26	; 0x802586 <temp_vacuum+0x2>
    364a:	b0 93 87 25 	sts	0x2587, r27	; 0x802587 <temp_vacuum+0x3>
			start_25_ms_vacuum_timer();
    364e:	0e 94 54 29 	call	0x52a8	; 0x52a8 <start_25_ms_vacuum_timer>
    3652:	2a c0       	rjmp	.+84     	; 0x36a8 <vacuum_motor_set+0x11a>
		}
		else
		{
			temp_vacuum = level;
    3654:	d1 2c       	mov	r13, r1
    3656:	e1 2c       	mov	r14, r1
    3658:	f1 2c       	mov	r15, r1
    365a:	c7 01       	movw	r24, r14
    365c:	b6 01       	movw	r22, r12
    365e:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    3662:	60 93 84 25 	sts	0x2584, r22	; 0x802584 <temp_vacuum>
    3666:	70 93 85 25 	sts	0x2585, r23	; 0x802585 <temp_vacuum+0x1>
    366a:	80 93 86 25 	sts	0x2586, r24	; 0x802586 <temp_vacuum+0x2>
    366e:	90 93 87 25 	sts	0x2587, r25	; 0x802587 <temp_vacuum+0x3>
			uint32_t pwm = ((uint32_t)level * 4000) / 100;
			TCE0.CCC = (uint16_t)pwm;
    3672:	a0 ea       	ldi	r26, 0xA0	; 160
    3674:	bf e0       	ldi	r27, 0x0F	; 15
    3676:	a7 01       	movw	r20, r14
    3678:	96 01       	movw	r18, r12
    367a:	0e 94 03 32 	call	0x6406	; 0x6406 <__muluhisi3>
    367e:	24 e6       	ldi	r18, 0x64	; 100
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	40 e0       	ldi	r20, 0x00	; 0
    3684:	50 e0       	ldi	r21, 0x00	; 0
    3686:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    368a:	20 93 2c 0a 	sts	0x0A2C, r18	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
    368e:	30 93 2d 0a 	sts	0x0A2D, r19	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
    3692:	0a c0       	rjmp	.+20     	; 0x36a8 <vacuum_motor_set+0x11a>
		}
	}
	//Slowly turn on vacuum
	else
	{
		temp_vacuum = 0;
    3694:	10 92 84 25 	sts	0x2584, r1	; 0x802584 <temp_vacuum>
    3698:	10 92 85 25 	sts	0x2585, r1	; 0x802585 <temp_vacuum+0x1>
    369c:	10 92 86 25 	sts	0x2586, r1	; 0x802586 <temp_vacuum+0x2>
    36a0:	10 92 87 25 	sts	0x2587, r1	; 0x802587 <temp_vacuum+0x3>
		start_25_ms_vacuum_timer();
    36a4:	0e 94 54 29 	call	0x52a8	; 0x52a8 <start_25_ms_vacuum_timer>
	}
}
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	df 90       	pop	r13
    36ae:	cf 90       	pop	r12
    36b0:	08 95       	ret

000036b2 <pre_swp_set>:

void pre_swp_set(uint8_t level)
{
    36b2:	cf 92       	push	r12
    36b4:	df 92       	push	r13
    36b6:	ef 92       	push	r14
    36b8:	ff 92       	push	r15
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
	if (!presweep)
    36be:	90 91 83 25 	lds	r25, 0x2583	; 0x802583 <presweep>
    36c2:	99 23       	and	r25, r25
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <pre_swp_set+0x16>
    36c6:	98 c0       	rjmp	.+304    	; 0x37f8 <pre_swp_set+0x146>
	{
		return;
	}

	if (level == OFF)
    36c8:	81 11       	cpse	r24, r1
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <pre_swp_set+0x38>
	{
		TCE0.CTRLB &= ~(0x80);
    36cc:	c0 e0       	ldi	r28, 0x00	; 0
    36ce:	da e0       	ldi	r29, 0x0A	; 10
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	8f 77       	andi	r24, 0x7F	; 127
    36d4:	89 83       	std	Y+1, r24	; 0x01
		PORTE_OUTCLR = (1 << PRE_SWP_ON);
    36d6:	88 e0       	ldi	r24, 0x08	; 8
    36d8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		stop_25_ms_pre_swp_timer();
    36dc:	0e 94 7f 29 	call	0x52fe	; 0x52fe <stop_25_ms_pre_swp_timer>
		presweep_dc = OFF;
    36e0:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <presweep_dc>
		TCE0.CCD = 0;
    36e4:	1e a6       	std	Y+46, r1	; 0x2e
    36e6:	1f a6       	std	Y+47, r1	; 0x2f
		__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
		return;
    36e8:	87 c0       	rjmp	.+270    	; 0x37f8 <pre_swp_set+0x146>
	}

	//Prescalar /8
	TCE0.CTRLA |= 0x04;
    36ea:	e0 e0       	ldi	r30, 0x00	; 0
    36ec:	fa e0       	ldi	r31, 0x0A	; 10
    36ee:	80 81       	ld	r24, Z
    36f0:	84 60       	ori	r24, 0x04	; 4
    36f2:	80 83       	st	Z, r24
	//Enable pin D with single slope PWM
	TCE0.CTRLB |= 0x83;
    36f4:	81 81       	ldd	r24, Z+1	; 0x01
    36f6:	83 68       	ori	r24, 0x83	; 131
    36f8:	81 83       	std	Z+1, r24	; 0x01
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
    36fa:	80 ea       	ldi	r24, 0xA0	; 160
    36fc:	9f e0       	ldi	r25, 0x0F	; 15
    36fe:	86 a3       	std	Z+38, r24	; 0x26
    3700:	97 a3       	std	Z+39, r25	; 0x27

	if (!eco_mode)
    3702:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
    3706:	81 11       	cpse	r24, r1
    3708:	04 c0       	rjmp	.+8      	; 0x3712 <pre_swp_set+0x60>
	{
		presweep_dc = PRE_SWP_DC;
    370a:	94 e6       	ldi	r25, 0x64	; 100
    370c:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <presweep_dc>
    3710:	03 c0       	rjmp	.+6      	; 0x3718 <pre_swp_set+0x66>
	}
	else
	{
		presweep_dc = PRE_SWP_DC_ECO;
    3712:	9b e4       	ldi	r25, 0x4B	; 75
    3714:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <presweep_dc>
	}

	//If pre_swp does not need to start slowly, start up immediately
	if (pre_swp_slow_start == 0)
    3718:	20 91 92 25 	lds	r18, 0x2592	; 0x802592 <pre_swp_slow_start>
    371c:	30 91 93 25 	lds	r19, 0x2593	; 0x802593 <pre_swp_slow_start+0x1>
    3720:	23 2b       	or	r18, r19
    3722:	91 f4       	brne	.+36     	; 0x3748 <pre_swp_set+0x96>
	{
		uint32_t pwm = ((uint32_t)presweep_dc * 4000) / 100;
		TCE0.CCD = (uint16_t)pwm;
    3724:	20 91 46 21 	lds	r18, 0x2146	; 0x802146 <presweep_dc>
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	a0 ea       	ldi	r26, 0xA0	; 160
    372c:	bf e0       	ldi	r27, 0x0F	; 15
    372e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    3732:	24 e6       	ldi	r18, 0x64	; 100
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e0       	ldi	r20, 0x00	; 0
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    373e:	20 93 2e 0a 	sts	0x0A2E, r18	; 0x800a2e <__TEXT_REGION_LENGTH__+0x700a2e>
    3742:	30 93 2f 0a 	sts	0x0A2F, r19	; 0x800a2f <__TEXT_REGION_LENGTH__+0x700a2f>
    3746:	58 c0       	rjmp	.+176    	; 0x37f8 <pre_swp_set+0x146>
		__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
	}
	else if (PRE_SWP_TIMER_IS_ON)
    3748:	90 91 40 09 	lds	r25, 0x0940	; 0x800940 <__TEXT_REGION_LENGTH__+0x700940>
    374c:	91 11       	cpse	r25, r1
    374e:	54 c0       	rjmp	.+168    	; 0x37f8 <pre_swp_set+0x146>
	{
		return;
	}
	//If pre_swp is already on, eco mode is changed
	else if (TCE0.CCD != 0)
    3750:	20 91 2e 0a 	lds	r18, 0x0A2E	; 0x800a2e <__TEXT_REGION_LENGTH__+0x700a2e>
    3754:	30 91 2f 0a 	lds	r19, 0x0A2F	; 0x800a2f <__TEXT_REGION_LENGTH__+0x700a2f>
    3758:	23 2b       	or	r18, r19
    375a:	09 f4       	brne	.+2      	; 0x375e <pre_swp_set+0xac>
    375c:	43 c0       	rjmp	.+134    	; 0x37e4 <pre_swp_set+0x132>
	{
		//If eco mode is turned off slowly turn up to maximum pwm
		if (!eco_mode && pre_swp_slow_start != 0 && temp_pre_swp < 100)
    375e:	81 11       	cpse	r24, r1
    3760:	1f c0       	rjmp	.+62     	; 0x37a0 <pre_swp_set+0xee>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	48 ec       	ldi	r20, 0xC8	; 200
    3768:	52 e4       	ldi	r21, 0x42	; 66
    376a:	60 91 85 20 	lds	r22, 0x2085	; 0x802085 <temp_pre_swp>
    376e:	70 91 86 20 	lds	r23, 0x2086	; 0x802086 <temp_pre_swp+0x1>
    3772:	80 91 87 20 	lds	r24, 0x2087	; 0x802087 <temp_pre_swp+0x2>
    3776:	90 91 88 20 	lds	r25, 0x2088	; 0x802088 <temp_pre_swp+0x3>
    377a:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__cmpsf2>
    377e:	88 23       	and	r24, r24
    3780:	7c f4       	brge	.+30     	; 0x37a0 <pre_swp_set+0xee>
		{
			temp_pre_swp = 75;
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	a6 e9       	ldi	r26, 0x96	; 150
    3788:	b2 e4       	ldi	r27, 0x42	; 66
    378a:	80 93 85 20 	sts	0x2085, r24	; 0x802085 <temp_pre_swp>
    378e:	90 93 86 20 	sts	0x2086, r25	; 0x802086 <temp_pre_swp+0x1>
    3792:	a0 93 87 20 	sts	0x2087, r26	; 0x802087 <temp_pre_swp+0x2>
    3796:	b0 93 88 20 	sts	0x2088, r27	; 0x802088 <temp_pre_swp+0x3>
			start_25_ms_pre_swp_timer();
    379a:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <start_25_ms_pre_swp_timer>
    379e:	2c c0       	rjmp	.+88     	; 0x37f8 <pre_swp_set+0x146>
		}
		else
		{
			temp_pre_swp = presweep_dc;
    37a0:	c0 90 46 21 	lds	r12, 0x2146	; 0x802146 <presweep_dc>
    37a4:	d1 2c       	mov	r13, r1
    37a6:	e1 2c       	mov	r14, r1
    37a8:	f1 2c       	mov	r15, r1
    37aa:	c7 01       	movw	r24, r14
    37ac:	b6 01       	movw	r22, r12
    37ae:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    37b2:	60 93 85 20 	sts	0x2085, r22	; 0x802085 <temp_pre_swp>
    37b6:	70 93 86 20 	sts	0x2086, r23	; 0x802086 <temp_pre_swp+0x1>
    37ba:	80 93 87 20 	sts	0x2087, r24	; 0x802087 <temp_pre_swp+0x2>
    37be:	90 93 88 20 	sts	0x2088, r25	; 0x802088 <temp_pre_swp+0x3>
			uint32_t pwm = ((uint32_t)presweep_dc * 4000) / 100;
			TCE0.CCD = (uint16_t)pwm;
    37c2:	a0 ea       	ldi	r26, 0xA0	; 160
    37c4:	bf e0       	ldi	r27, 0x0F	; 15
    37c6:	a7 01       	movw	r20, r14
    37c8:	96 01       	movw	r18, r12
    37ca:	0e 94 03 32 	call	0x6406	; 0x6406 <__muluhisi3>
    37ce:	24 e6       	ldi	r18, 0x64	; 100
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    37da:	20 93 2e 0a 	sts	0x0A2E, r18	; 0x800a2e <__TEXT_REGION_LENGTH__+0x700a2e>
    37de:	30 93 2f 0a 	sts	0x0A2F, r19	; 0x800a2f <__TEXT_REGION_LENGTH__+0x700a2f>
    37e2:	0a c0       	rjmp	.+20     	; 0x37f8 <pre_swp_set+0x146>
		}
	}
	//Slowly turn on pre_swp
	else
	{
		temp_pre_swp = 0;
    37e4:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <temp_pre_swp>
    37e8:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <temp_pre_swp+0x1>
    37ec:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <temp_pre_swp+0x2>
    37f0:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <temp_pre_swp+0x3>
		start_25_ms_pre_swp_timer();
    37f4:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <start_25_ms_pre_swp_timer>
	}
}
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	ff 90       	pop	r15
    37fe:	ef 90       	pop	r14
    3800:	df 90       	pop	r13
    3802:	cf 90       	pop	r12
    3804:	08 95       	ret

00003806 <detergent_pump_set>:

void detergent_pump_set(uint8_t on_off, uint8_t level)
{
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
	if (on_off == ON)
    380a:	81 30       	cpi	r24, 0x01	; 1
    380c:	d9 f4       	brne	.+54     	; 0x3844 <detergent_pump_set+0x3e>
	{
		//Prescalar /8
		TCF1.CTRLA |= 0x04;
    380e:	c0 e4       	ldi	r28, 0x40	; 64
    3810:	db e0       	ldi	r29, 0x0B	; 11
    3812:	88 81       	ld	r24, Y
    3814:	84 60       	ori	r24, 0x04	; 4
    3816:	88 83       	st	Y, r24
		//Enable pin B with single slope PWM
		TCF1.CTRLB |= 0x23;
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	83 62       	ori	r24, 0x23	; 35
    381c:	89 83       	std	Y+1, r24	; 0x01
		//Set period to 1000 counts ~500Hz
		TCF1.PER = 4000;
    381e:	80 ea       	ldi	r24, 0xA0	; 160
    3820:	9f e0       	ldi	r25, 0x0F	; 15
    3822:	8e a3       	std	Y+38, r24	; 0x26
    3824:	9f a3       	std	Y+39, r25	; 0x27

		uint32_t pwm = ((uint32_t)level * 4000) / 100;
		TCF1.CCB = (uint16_t)pwm;
    3826:	26 2f       	mov	r18, r22
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	a0 ea       	ldi	r26, 0xA0	; 160
    382c:	bf e0       	ldi	r27, 0x0F	; 15
    382e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    3832:	24 e6       	ldi	r18, 0x64	; 100
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    383e:	2a a7       	std	Y+42, r18	; 0x2a
    3840:	3b a7       	std	Y+43, r19	; 0x2b
    3842:	08 c0       	rjmp	.+16     	; 0x3854 <detergent_pump_set+0x4e>
		__SIM_SET_PWM(PWM_A2_DET_PUMP, TCF1.CCB);
	}
	else
	{
		//Disable pin B
		TCF1.CTRLB &= ~(0x20);
    3844:	e0 e4       	ldi	r30, 0x40	; 64
    3846:	fb e0       	ldi	r31, 0x0B	; 11
    3848:	81 81       	ldd	r24, Z+1	; 0x01
    384a:	8f 7d       	andi	r24, 0xDF	; 223
    384c:	81 83       	std	Z+1, r24	; 0x01
		PORTK_OUTCLR = (1 << DP_PWM);
    384e:	80 e2       	ldi	r24, 0x20	; 32
    3850:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		__SIM_SET_PWM(PWM_A2_DET_PUMP, 0);
	}

	__SIM_DOUT;
}
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	08 95       	ret

0000385a <water_pump_set>:

void water_pump_set(uint8_t on_off, uint8_t level)
{
	if (on_off == ON)
    385a:	81 30       	cpi	r24, 0x01	; 1
    385c:	41 f5       	brne	.+80     	; 0x38ae <water_pump_set+0x54>
	{
		//Prescalar /64
		TCF1.CTRLA |= 0x04;
    385e:	e0 e4       	ldi	r30, 0x40	; 64
    3860:	fb e0       	ldi	r31, 0x0B	; 11
    3862:	80 81       	ld	r24, Z
    3864:	84 60       	ori	r24, 0x04	; 4
    3866:	80 83       	st	Z, r24
		//Enable pin A with single slope PWM
		TCF1.CTRLB |= 0x13;
    3868:	81 81       	ldd	r24, Z+1	; 0x01
    386a:	83 61       	ori	r24, 0x13	; 19
    386c:	81 83       	std	Z+1, r24	; 0x01
		//Set period to 1000 counts ~500Hz
		TCF1.PER = 4000;
    386e:	80 ea       	ldi	r24, 0xA0	; 160
    3870:	9f e0       	ldi	r25, 0x0F	; 15
    3872:	86 a3       	std	Z+38, r24	; 0x26
    3874:	97 a3       	std	Z+39, r25	; 0x27

		//Open or close the water solenoid depends on the pump state
		if (solenoid_valve)PORTK_OUTSET = (1 << WP_SOL);
    3876:	80 91 75 20 	lds	r24, 0x2075	; 0x802075 <solenoid_valve>
    387a:	88 23       	and	r24, r24
    387c:	21 f0       	breq	.+8      	; 0x3886 <water_pump_set+0x2c>
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    3884:	03 c0       	rjmp	.+6      	; 0x388c <water_pump_set+0x32>
		else PORTK_OUTCLR = (1 << WP_SOL);
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>

		uint32_t pwm = ((uint32_t)level * 4000) / 100;
		TCF1.CCA = (uint16_t)pwm;
    388c:	26 2f       	mov	r18, r22
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	a0 ea       	ldi	r26, 0xA0	; 160
    3892:	bf e0       	ldi	r27, 0x0F	; 15
    3894:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    3898:	24 e6       	ldi	r18, 0x64	; 100
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	50 e0       	ldi	r21, 0x00	; 0
    38a0:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    38a4:	20 93 68 0b 	sts	0x0B68, r18	; 0x800b68 <__TEXT_REGION_LENGTH__+0x700b68>
    38a8:	30 93 69 0b 	sts	0x0B69, r19	; 0x800b69 <__TEXT_REGION_LENGTH__+0x700b69>
    38ac:	08 95       	ret
		__SIM_SET_PWM(PWM_A2_WATER_PUMP, TCF1.CCA);
	}
	else
	{
		//Disable pin A
		TCF1.CTRLB &= ~(0x10);
    38ae:	e0 e4       	ldi	r30, 0x40	; 64
    38b0:	fb e0       	ldi	r31, 0x0B	; 11
    38b2:	81 81       	ldd	r24, Z+1	; 0x01
    38b4:	8f 7e       	andi	r24, 0xEF	; 239
    38b6:	81 83       	std	Z+1, r24	; 0x01
		PORTK_OUTCLR = (1 << WP_PWM);
    38b8:	80 e1       	ldi	r24, 0x10	; 16
    38ba:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>

		//Open or close the water solenoid depends on the pump state
		if (solenoid_valve)PORTK_OUTSET = (1 << WP_SOL);
    38be:	80 91 75 20 	lds	r24, 0x2075	; 0x802075 <solenoid_valve>
    38c2:	88 23       	and	r24, r24
    38c4:	21 f0       	breq	.+8      	; 0x38ce <water_pump_set+0x74>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    38cc:	08 95       	ret
		else PORTK_OUTCLR = (1 << WP_SOL);
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    38d4:	08 95       	ret

000038d6 <headlights_set>:
}

//Change headlight state depending on CAN bus info
void headlights_set(uint8_t status)
{
	if (status == ON)
    38d6:	81 30       	cpi	r24, 0x01	; 1
    38d8:	21 f4       	brne	.+8      	; 0x38e2 <headlights_set+0xc>
	{
		PORTK_OUTSET = (1 << HDL);
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    38e0:	08 95       	ret
	}
	else if (status == TGL)
    38e2:	82 30       	cpi	r24, 0x02	; 2
    38e4:	19 f4       	brne	.+6      	; 0x38ec <headlights_set+0x16>
	{
		PORTK_OUTTGL = (1 << HDL);
    38e6:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
    38ea:	08 95       	ret
	}
	else
	{
		PORTK_OUTCLR = (1 << HDL);
    38ec:	82 e0       	ldi	r24, 0x02	; 2
    38ee:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    38f2:	08 95       	ret

000038f4 <horn_set>:
}

//Change horn state depending on CAN bus info
void horn_set(uint8_t status)
{
	if (status == ON)
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	21 f4       	brne	.+8      	; 0x3900 <horn_set+0xc>
	{
		PORTK_OUTSET = (1 << HRN);
    38f8:	84 e0       	ldi	r24, 0x04	; 4
    38fa:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    38fe:	08 95       	ret
	}
	else if (status == TGL)
    3900:	82 30       	cpi	r24, 0x02	; 2
    3902:	21 f4       	brne	.+8      	; 0x390c <horn_set+0x18>
	{
		PORTK_OUTTGL = (1 << HRN);
    3904:	84 e0       	ldi	r24, 0x04	; 4
    3906:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
    390a:	08 95       	ret
	}
	else
	{
		PORTK_OUTCLR = (1 << HRN);
    390c:	84 e0       	ldi	r24, 0x04	; 4
    390e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    3912:	08 95       	ret

00003914 <Solenoid_set>:
	__SIM_DOUT;
}

void Solenoid_set(uint8_t status)
{
	if (status == ON)
    3914:	81 30       	cpi	r24, 0x01	; 1
    3916:	19 f4       	brne	.+6      	; 0x391e <Solenoid_set+0xa>
	{
		//Open water solenoid
		PORTK_OUTSET = (1 << WP_SOL);
    3918:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    391c:	08 95       	ret
	}
	else
	{
		//Close water solenoid
		PORTK_OUTCLR = (1 << WP_SOL);
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    3924:	08 95       	ret

00003926 <extra_pressure_set>:
}

void extra_pressure_set(uint8_t status)
{
	//Prescalar /8
	TCE0.CTRLA |= 0x04;
    3926:	e0 e0       	ldi	r30, 0x00	; 0
    3928:	fa e0       	ldi	r31, 0x0A	; 10
    392a:	90 81       	ld	r25, Z
    392c:	94 60       	ori	r25, 0x04	; 4
    392e:	90 83       	st	Z, r25
	//Enable pin D with single slope PWM
	TCE0.CTRLB |= 0x83;
    3930:	91 81       	ldd	r25, Z+1	; 0x01
    3932:	93 68       	ori	r25, 0x83	; 131
    3934:	91 83       	std	Z+1, r25	; 0x01
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
    3936:	20 ea       	ldi	r18, 0xA0	; 160
    3938:	3f e0       	ldi	r19, 0x0F	; 15
    393a:	26 a3       	std	Z+38, r18	; 0x26
    393c:	37 a3       	std	Z+39, r19	; 0x27
	if (transport || reverse)
    393e:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <transport>
    3942:	91 11       	cpse	r25, r1
    3944:	31 c0       	rjmp	.+98     	; 0x39a8 <extra_pressure_set+0x82>
    3946:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <reverse>
    394a:	91 11       	cpse	r25, r1
    394c:	2d c0       	rjmp	.+90     	; 0x39a8 <extra_pressure_set+0x82>
		status = OFF;
	if (status == ON && (brush_head_position == BEFORE_MIDDLE || brush_head_position == MIDDLE) && accelerator == ACCEL_DN && brush_state == BRUSH_RUNNING)
    394e:	81 30       	cpi	r24, 0x01	; 1
    3950:	09 f5       	brne	.+66     	; 0x3994 <extra_pressure_set+0x6e>
    3952:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <brush_head_position>
    3956:	88 23       	and	r24, r24
    3958:	21 f0       	breq	.+8      	; 0x3962 <extra_pressure_set+0x3c>
    395a:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <brush_head_position>
    395e:	81 30       	cpi	r24, 0x01	; 1
    3960:	d9 f4       	brne	.+54     	; 0x3998 <extra_pressure_set+0x72>
    3962:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    3966:	81 30       	cpi	r24, 0x01	; 1
    3968:	b9 f4       	brne	.+46     	; 0x3998 <extra_pressure_set+0x72>
    396a:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    396e:	8a 3a       	cpi	r24, 0xAA	; 170
    3970:	99 f4       	brne	.+38     	; 0x3998 <extra_pressure_set+0x72>
	{
		uint32_t pwm = ((uint32_t)PRE_SWP_DC * 4000) / 100;
		TCE0.CCD = (uint16_t)pwm;
    3972:	80 ea       	ldi	r24, 0xA0	; 160
    3974:	9f e0       	ldi	r25, 0x0F	; 15
    3976:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <__TEXT_REGION_LENGTH__+0x700a2e>
    397a:	90 93 2f 0a 	sts	0x0A2F, r25	; 0x800a2f <__TEXT_REGION_LENGTH__+0x700a2f>
		__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
		BR_HD_DN;
    397e:	e5 ea       	ldi	r30, 0xA5	; 165
    3980:	f6 e0       	ldi	r31, 0x06	; 6
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	80 83       	st	Z, r24
    3986:	92 e0       	ldi	r25, 0x02	; 2
    3988:	90 83       	st	Z, r25
		brush_head_position = AFTER_MIDDLE;
    398a:	90 93 4d 23 	sts	0x234D, r25	; 0x80234d <brush_head_position>
		brush_head_timer = ON;
    398e:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <brush_head_timer>
	//Set period to 1000 counts ~500Hz
	TCE0.PER = 4000;
	if (transport || reverse)
		status = OFF;
	if (status == ON && (brush_head_position == BEFORE_MIDDLE || brush_head_position == MIDDLE) && accelerator == ACCEL_DN && brush_state == BRUSH_RUNNING)
	{
    3992:	08 95       	ret
		__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
		BR_HD_DN;
		brush_head_position = AFTER_MIDDLE;
		brush_head_timer = ON;
	}
	else if ((status == OFF || accelerator == ACCEL_UP || brush_state == OFF) && brush_head_position == AFTER_MIDDLE)
    3994:	88 23       	and	r24, r24
    3996:	41 f0       	breq	.+16     	; 0x39a8 <extra_pressure_set+0x82>
    3998:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    399c:	88 23       	and	r24, r24
    399e:	21 f0       	breq	.+8      	; 0x39a8 <extra_pressure_set+0x82>
    39a0:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    39a4:	81 11       	cpse	r24, r1
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <extra_pressure_set+0xaa>
    39a8:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <brush_head_position>
    39ac:	82 30       	cpi	r24, 0x02	; 2
    39ae:	81 f4       	brne	.+32     	; 0x39d0 <extra_pressure_set+0xaa>
	{
		uint32_t pwm = ((uint32_t)PRE_SWP_DC_ECO * 4000) / 100;
		TCE0.CCD = (uint16_t)pwm;
    39b0:	88 eb       	ldi	r24, 0xB8	; 184
    39b2:	9b e0       	ldi	r25, 0x0B	; 11
    39b4:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <__TEXT_REGION_LENGTH__+0x700a2e>
    39b8:	90 93 2f 0a 	sts	0x0A2F, r25	; 0x800a2f <__TEXT_REGION_LENGTH__+0x700a2f>
		__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
		BR_HD_UP;
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    39c2:	92 e0       	ldi	r25, 0x02	; 2
    39c4:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
		brush_head_position = MIDDLE;
    39c8:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <brush_head_position>
		brush_head_timer = ON;
    39cc:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <brush_head_timer>
    39d0:	08 95       	ret

000039d2 <initialize_motors>:
 */
//IVA002: Adapted for Simulation

#include "motor.h"
void initialize_motors(void)
{
    39d2:	af 92       	push	r10
    39d4:	bf 92       	push	r11
    39d6:	cf 92       	push	r12
    39d8:	df 92       	push	r13
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
	//Set presweep switch interrupt w/ pullup
	PORTF_DIRCLR = (1 << PRE_SWP_SNS);
    39e6:	80 e8       	ldi	r24, 0x80	; 128
    39e8:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
	PORTF_INT0MASK |= (1 << PRE_SWP_SNS);
    39ec:	ea ea       	ldi	r30, 0xAA	; 170
    39ee:	f6 e0       	ldi	r31, 0x06	; 6
    39f0:	80 81       	ld	r24, Z
    39f2:	80 68       	ori	r24, 0x80	; 128
    39f4:	80 83       	st	Z, r24
	PORTF_INTCTRL = 0x05;
    39f6:	95 e0       	ldi	r25, 0x05	; 5
    39f8:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <__TEXT_REGION_LENGTH__+0x7006a9>
	PORTF_PIN7CTRL = 0x18;
    39fc:	88 e1       	ldi	r24, 0x18	; 24
    39fe:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <__TEXT_REGION_LENGTH__+0x7006b7>

	//Set brush head middle detector interrupt w/ pullup
	PORTK_DIRCLR = (1 << BHA_MPS);
    3a02:	68 94       	set
    3a04:	ff 24       	eor	r15, r15
    3a06:	f6 f8       	bld	r15, 6
    3a08:	f0 92 22 07 	sts	0x0722, r15	; 0x800722 <__TEXT_REGION_LENGTH__+0x700722>
	PORTK_INT0MASK |= (1 << BHA_MPS);
    3a0c:	ea e2       	ldi	r30, 0x2A	; 42
    3a0e:	f7 e0       	ldi	r31, 0x07	; 7
    3a10:	80 81       	ld	r24, Z
    3a12:	80 64       	ori	r24, 0x40	; 64
    3a14:	80 83       	st	Z, r24
	PORTK_INTCTRL = 0x05;
    3a16:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <__TEXT_REGION_LENGTH__+0x700729>
	PORTK_PIN6CTRL = 0x19;
    3a1a:	89 e1       	ldi	r24, 0x19	; 25
    3a1c:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <__TEXT_REGION_LENGTH__+0x700736>

	//Enable all 9201 devices
	PORTF_DIRSET = 0x7F;
    3a20:	8f e7       	ldi	r24, 0x7F	; 127
    3a22:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTF_OUTCLR = (1 << DISABLE_9201);
    3a26:	06 ea       	ldi	r16, 0xA6	; 166
    3a28:	16 e0       	ldi	r17, 0x06	; 6
    3a2a:	d8 01       	movw	r26, r16
    3a2c:	fc 92       	st	X, r15

	//Enable all 8701 devices
	PORTE_DIRSET = 0x1F;
    3a2e:	8f e1       	ldi	r24, 0x1F	; 31
    3a30:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTE_OUTSET = (1 << ENABLE_8701);
    3a34:	68 94       	set
    3a36:	aa 24       	eor	r10, r10
    3a38:	a4 f8       	bld	r10, 4
    3a3a:	a0 92 85 06 	sts	0x0685, r10	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	//Turn on beacon light
	PORTK_DIRSET = 0x0F;
    3a3e:	8f e0       	ldi	r24, 0x0F	; 15
    3a40:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <__TEXT_REGION_LENGTH__+0x700721>
	PORTK_OUTSET = (1 << BCN);
    3a44:	68 94       	set
    3a46:	bb 24       	eor	r11, r11
    3a48:	b3 f8       	bld	r11, 3
    3a4a:	b0 92 25 07 	sts	0x0725, r11	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>

	//Set italsea board outputs
	PORTH_DIRSET = (1 << FWD_IN) | (1 << REV_IN) | (1 << MLT_MD);
    3a4e:	84 e5       	ldi	r24, 0x54	; 84
    3a50:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>

	brush_motor_set(OFF);
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	0e 94 d7 19 	call	0x33ae	; 0x33ae <brush_motor_set>
	vacuum_motor_set(OFF);
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	0e 94 c7 1a 	call	0x358e	; 0x358e <vacuum_motor_set>
	{
		PORTK_OUTTGL = (1 << HRN);
	}
	else
	{
		PORTK_OUTCLR = (1 << HRN);
    3a60:	0f 2e       	mov	r0, r31
    3a62:	f6 e2       	ldi	r31, 0x26	; 38
    3a64:	cf 2e       	mov	r12, r31
    3a66:	f7 e0       	ldi	r31, 0x07	; 7
    3a68:	df 2e       	mov	r13, r31
    3a6a:	f0 2d       	mov	r31, r0
    3a6c:	d4 e0       	ldi	r29, 0x04	; 4
    3a6e:	f6 01       	movw	r30, r12
    3a70:	d0 83       	st	Z, r29
	{
		PORTK_OUTTGL = (1 << HDL);
	}
	else
	{
		PORTK_OUTCLR = (1 << HDL);
    3a72:	68 94       	set
    3a74:	ee 24       	eor	r14, r14
    3a76:	e1 f8       	bld	r14, 1
    3a78:	e0 82       	st	Z, r14

	brush_motor_set(OFF);
	vacuum_motor_set(OFF);
	horn_set(OFF);
	headlights_set(OFF);
	water_pump_set(OFF, OFF);
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
		PORTK_OUTSET = (1 << WP_SOL);
	}
	else
	{
		//Close water solenoid
		PORTK_OUTCLR = (1 << WP_SOL);
    3a82:	c1 e0       	ldi	r28, 0x01	; 1
    3a84:	d6 01       	movw	r26, r12
    3a86:	cc 93       	st	X, r28
	vacuum_motor_set(OFF);
	horn_set(OFF);
	headlights_set(OFF);
	water_pump_set(OFF, OFF);
	Solenoid_set(OFF);
	detergent_pump_set(OFF, OFF);
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
	extra_pressure_set(OFF);
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	0e 94 93 1c 	call	0x3926	; 0x3926 <extra_pressure_set>
	SET_DRIVE_MOTOR_FORWARD;
    3a96:	e6 ee       	ldi	r30, 0xE6	; 230
    3a98:	f6 e0       	ldi	r31, 0x06	; 6
    3a9a:	d0 83       	st	Z, r29
    3a9c:	a0 92 e5 06 	sts	0x06E5, r10	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
	SET_DRIVE_SPEED_FAST;
    3aa0:	f0 82       	st	Z, r15
	SQ_UP;
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	d0 83       	st	Z, r29
    3aa6:	e5 ea       	ldi	r30, 0xA5	; 165
    3aa8:	f6 e0       	ldi	r31, 0x06	; 6
    3aaa:	b0 82       	st	Z, r11
	BR_HD_UP;
    3aac:	d8 01       	movw	r26, r16
    3aae:	cc 93       	st	X, r28
    3ab0:	e0 82       	st	Z, r14
	brush_head_position = BEFORE_MIDDLE;
    3ab2:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <brush_head_position>
	brush_head_timer = ON;
    3ab6:	c0 93 3f 20 	sts	0x203F, r28	; 0x80203f <brush_head_timer>
	squeegee_timer = ON;
    3aba:	c0 93 51 23 	sts	0x2351, r28	; 0x802351 <squeegee_timer>
	vacuum_state = VACUUM_OFF;
    3abe:	8c ec       	ldi	r24, 0xCC	; 204
    3ac0:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <vacuum_state>
	accelerator = ACCEL_UP;
    3ac4:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <accelerator>

	brush_state = BRUSH_OFF;
    3ac8:	8b eb       	ldi	r24, 0xBB	; 187
    3aca:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <brush_state>
	vacuum_state = VACUUM_OFF;
	presweep_state = OFF;
    3ace:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <presweep_state>
}
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	ff 90       	pop	r15
    3adc:	ef 90       	pop	r14
    3ade:	df 90       	pop	r13
    3ae0:	cf 90       	pop	r12
    3ae2:	bf 90       	pop	r11
    3ae4:	af 90       	pop	r10
    3ae6:	08 95       	ret

00003ae8 <accelerator_up>:
	}
}

void accelerator_up(void)
{
	if (vacuum_state == VACUUM_OFF && horn == OFF && headlights == OFF)
    3ae8:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    3aec:	8c 3c       	cpi	r24, 0xCC	; 204
    3aee:	51 f4       	brne	.+20     	; 0x3b04 <accelerator_up+0x1c>
    3af0:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    3af4:	81 11       	cpse	r24, r1
    3af6:	06 c0       	rjmp	.+12     	; 0x3b04 <accelerator_up+0x1c>
    3af8:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    3afc:	81 11       	cpse	r24, r1
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <accelerator_up+0x1c>
	{
		send_runtime_timer(OFF);
    3b00:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
	}

	//Turn off brush motor
	brush_motor_set(OFF);
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	0e 94 d7 19 	call	0x33ae	; 0x33ae <brush_motor_set>
    3b0a:	2f ef       	ldi	r18, 0xFF	; 255
    3b0c:	81 ee       	ldi	r24, 0xE1	; 225
    3b0e:	94 e0       	ldi	r25, 0x04	; 4
    3b10:	21 50       	subi	r18, 0x01	; 1
    3b12:	80 40       	sbci	r24, 0x00	; 0
    3b14:	90 40       	sbci	r25, 0x00	; 0
    3b16:	e1 f7       	brne	.-8      	; 0x3b10 <accelerator_up+0x28>
    3b18:	00 c0       	rjmp	.+0      	; 0x3b1a <accelerator_up+0x32>
    3b1a:	00 00       	nop
	_delay_ms(50);

	water_pump_set(OFF, 0);
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
		PORTK_OUTSET = (1 << WP_SOL);
	}
	else
	{
		//Close water solenoid
		PORTK_OUTCLR = (1 << WP_SOL);
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    3b2a:	2f ef       	ldi	r18, 0xFF	; 255
    3b2c:	81 ee       	ldi	r24, 0xE1	; 225
    3b2e:	94 e0       	ldi	r25, 0x04	; 4
    3b30:	21 50       	subi	r18, 0x01	; 1
    3b32:	80 40       	sbci	r24, 0x00	; 0
    3b34:	90 40       	sbci	r25, 0x00	; 0
    3b36:	e1 f7       	brne	.-8      	; 0x3b30 <accelerator_up+0x48>
    3b38:	00 c0       	rjmp	.+0      	; 0x3b3a <accelerator_up+0x52>
    3b3a:	00 00       	nop

	water_pump_set(OFF, 0);
	Solenoid_set(OFF);
	_delay_ms(50);

	detergent_pump_set(OFF, 0);
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    3b44:	2f ef       	ldi	r18, 0xFF	; 255
    3b46:	81 ee       	ldi	r24, 0xE1	; 225
    3b48:	94 e0       	ldi	r25, 0x04	; 4
    3b4a:	21 50       	subi	r18, 0x01	; 1
    3b4c:	80 40       	sbci	r24, 0x00	; 0
    3b4e:	90 40       	sbci	r25, 0x00	; 0
    3b50:	e1 f7       	brne	.-8      	; 0x3b4a <accelerator_up+0x62>
    3b52:	00 c0       	rjmp	.+0      	; 0x3b54 <accelerator_up+0x6c>
    3b54:	00 00       	nop
	_delay_ms(50);

	//Record and set pre sweep
	if (presweep_state == ON)
    3b56:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <presweep_state>
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	11 f4       	brne	.+4      	; 0x3b62 <accelerator_up+0x7a>
	{
		/*log_enqueue(PRE_SWP_OFF_EVENT);*/
		presweep_state = OFF;
    3b5e:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <presweep_state>
	}
	pre_swp_set(OFF);
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <pre_swp_set>

	brush_state = BRUSH_OFF;
    3b68:	8b eb       	ldi	r24, 0xBB	; 187
    3b6a:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <brush_state>
	update_brush_state();
    3b6e:	0e 94 c2 13 	call	0x2784	; 0x2784 <update_brush_state>
    3b72:	08 95       	ret

00003b74 <update_pumps>:
	}
	update_pumps();
}

void update_pumps(void)
{
    3b74:	cf 92       	push	r12
    3b76:	df 92       	push	r13
    3b78:	ef 92       	push	r14
    3b7a:	ff 92       	push	r15
    3b7c:	0f 93       	push	r16
    3b7e:	1f 93       	push	r17
    3b80:	cf 93       	push	r28
    3b82:	df 93       	push	r29
	//If the brush is on and the pedal is pressed past the minimum level, update the pump speed
	if (pedal_level >= MINIMUM_PUMP_PEDAL_LEVEL && brush_state == BRUSH_RUNNING)
    3b84:	80 91 9c 25 	lds	r24, 0x259C	; 0x80259c <pedal_level>
    3b88:	90 91 9d 25 	lds	r25, 0x259D	; 0x80259d <pedal_level+0x1>
    3b8c:	8c 32       	cpi	r24, 0x2C	; 44
    3b8e:	91 40       	sbci	r25, 0x01	; 1
    3b90:	08 f4       	brcc	.+2      	; 0x3b94 <update_pumps+0x20>
    3b92:	50 c0       	rjmp	.+160    	; 0x3c34 <update_pumps+0xc0>
    3b94:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    3b98:	8a 3a       	cpi	r24, 0xAA	; 170
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <update_pumps+0x2a>
    3b9c:	4b c0       	rjmp	.+150    	; 0x3c34 <update_pumps+0xc0>
	{
		uint8_t water_pump_level = (uint8_t)(water_pump_dc * ((float)pedal_level / 4096));
    3b9e:	c0 91 9c 25 	lds	r28, 0x259C	; 0x80259c <pedal_level>
    3ba2:	d0 91 9d 25 	lds	r29, 0x259D	; 0x80259d <pedal_level+0x1>
		uint8_t detergent_pump_level = (uint8_t)(detergent_pump_dc * ((float)pedal_level / 4096));
    3ba6:	00 91 9c 25 	lds	r16, 0x259C	; 0x80259c <pedal_level>
    3baa:	10 91 9d 25 	lds	r17, 0x259D	; 0x80259d <pedal_level+0x1>
    3bae:	60 91 4e 20 	lds	r22, 0x204E	; 0x80204e <detergent_pump_dc>
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__floatsisf>
    3bbc:	6b 01       	movw	r12, r22
    3bbe:	7c 01       	movw	r14, r24
    3bc0:	b8 01       	movw	r22, r16
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e8       	ldi	r20, 0x80	; 128
    3bd0:	59 e3       	ldi	r21, 0x39	; 57
    3bd2:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    3bd6:	9b 01       	movw	r18, r22
    3bd8:	ac 01       	movw	r20, r24
    3bda:	c7 01       	movw	r24, r14
    3bdc:	b6 01       	movw	r22, r12
    3bde:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    3be2:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    3be6:	16 2f       	mov	r17, r22

		water_pump_set(water_pump, water_pump_level);
    3be8:	60 91 36 20 	lds	r22, 0x2036	; 0x802036 <water_pump_dc>
    3bec:	70 e0       	ldi	r23, 0x00	; 0
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__floatsisf>
    3bf6:	6b 01       	movw	r12, r22
    3bf8:	7c 01       	movw	r14, r24
    3bfa:	be 01       	movw	r22, r28
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e8       	ldi	r20, 0x80	; 128
    3c0a:	59 e3       	ldi	r21, 0x39	; 57
    3c0c:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    3c10:	9b 01       	movw	r18, r22
    3c12:	ac 01       	movw	r20, r24
    3c14:	c7 01       	movw	r24, r14
    3c16:	b6 01       	movw	r22, r12
    3c18:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    3c1c:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    3c20:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <water_pump>
    3c24:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
		detergent_pump_set(detergent_pump, detergent_pump_level);
    3c28:	61 2f       	mov	r22, r17
    3c2a:	80 91 4c 23 	lds	r24, 0x234C	; 0x80234c <detergent_pump>
    3c2e:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

void update_pumps(void)
{
	//If the brush is on and the pedal is pressed past the minimum level, update the pump speed
	if (pedal_level >= MINIMUM_PUMP_PEDAL_LEVEL && brush_state == BRUSH_RUNNING)
	{
    3c32:	0b c0       	rjmp	.+22     	; 0x3c4a <update_pumps+0xd6>
		detergent_pump_set(detergent_pump, detergent_pump_level);
	}
	//Otherwise turn it off
	else
	{
		water_pump_set(OFF, OFF);
    3c34:	60 e0       	ldi	r22, 0x00	; 0
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
		PORTK_OUTSET = (1 << WP_SOL);
	}
	else
	{
		//Close water solenoid
		PORTK_OUTCLR = (1 << WP_SOL);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
	//Otherwise turn it off
	else
	{
		water_pump_set(OFF, OFF);
		Solenoid_set(OFF);
		detergent_pump_set(OFF, OFF);
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
	}
}
    3c4a:	df 91       	pop	r29
    3c4c:	cf 91       	pop	r28
    3c4e:	1f 91       	pop	r17
    3c50:	0f 91       	pop	r16
    3c52:	ff 90       	pop	r15
    3c54:	ef 90       	pop	r14
    3c56:	df 90       	pop	r13
    3c58:	cf 90       	pop	r12
    3c5a:	08 95       	ret

00003c5c <accelerator_down>:
	update_brush_state();
}

void accelerator_down(void)
{
	if (transport || reverse)
    3c5c:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <transport>
    3c60:	81 11       	cpse	r24, r1
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <accelerator_down+0x10>
    3c64:	80 91 45 20 	lds	r24, 0x2045	; 0x802045 <reverse>
    3c68:	88 23       	and	r24, r24
    3c6a:	41 f0       	breq	.+16     	; 0x3c7c <accelerator_down+0x20>
	{
		if (!runtimer_on)
    3c6c:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    3c70:	81 11       	cpse	r24, r1
    3c72:	33 c0       	rjmp	.+102    	; 0x3cda <accelerator_down+0x7e>
		{
			send_runtime_timer(ON);
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    3c7a:	08 95       	ret
		}
		return;
	}

	//Turn on brush motor
	if (brush)
    3c7c:	80 91 5c 23 	lds	r24, 0x235C	; 0x80235c <brush>
    3c80:	88 23       	and	r24, r24
    3c82:	59 f0       	breq	.+22     	; 0x3c9a <accelerator_down+0x3e>
	{
		brush_motor_set(brush);
    3c84:	0e 94 d7 19 	call	0x33ae	; 0x33ae <brush_motor_set>
    3c88:	2f ef       	ldi	r18, 0xFF	; 255
    3c8a:	83 ec       	ldi	r24, 0xC3	; 195
    3c8c:	99 e0       	ldi	r25, 0x09	; 9
    3c8e:	21 50       	subi	r18, 0x01	; 1
    3c90:	80 40       	sbci	r24, 0x00	; 0
    3c92:	90 40       	sbci	r25, 0x00	; 0
    3c94:	e1 f7       	brne	.-8      	; 0x3c8e <accelerator_down+0x32>
    3c96:	00 c0       	rjmp	.+0      	; 0x3c98 <accelerator_down+0x3c>
    3c98:	00 00       	nop
		_delay_ms(100);
	}

	//If accelerator is pushed then tell the A1 board to turn on the runtimer
	if (!runtimer_on)
    3c9a:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    3c9e:	81 11       	cpse	r24, r1
    3ca0:	03 c0       	rjmp	.+6      	; 0x3ca8 <accelerator_down+0x4c>
	{
		send_runtime_timer(ON);
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
	}

	if (presweep)
    3ca8:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <presweep>
    3cac:	88 23       	and	r24, r24
    3cae:	51 f0       	breq	.+20     	; 0x3cc4 <accelerator_down+0x68>
	{
		//Record and set pre sweep
		if (presweep_state == OFF)
    3cb0:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <presweep_state>
    3cb4:	81 11       	cpse	r24, r1
    3cb6:	03 c0       	rjmp	.+6      	; 0x3cbe <accelerator_down+0x62>
		{
			/*log_enqueue(PRE_SWP_ON_EVENT);*/
			presweep_state = ON;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <presweep_state>
		}
		pre_swp_set(ON);
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <pre_swp_set>
	}

	if (brush)
    3cc4:	80 91 5c 23 	lds	r24, 0x235C	; 0x80235c <brush>
    3cc8:	88 23       	and	r24, r24
    3cca:	29 f0       	breq	.+10     	; 0x3cd6 <accelerator_down+0x7a>
		//Record brush
		/*if(brush_state == BRUSH_OFF)
		{
			log_enqueue(BRUSH_ON_EVENT);
		}*/
		brush_state = BRUSH_RUNNING;
    3ccc:	8a ea       	ldi	r24, 0xAA	; 170
    3cce:	80 93 7b 25 	sts	0x257B, r24	; 0x80257b <brush_state>
		update_brush_state();
    3cd2:	0e 94 c2 13 	call	0x2784	; 0x2784 <update_brush_state>
	}
	update_pumps();
    3cd6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <update_pumps>
    3cda:	08 95       	ret

00003cdc <__vector_104>:
		detergent_pump_set(OFF, OFF);
	}
}

ISR(PRE_SWP_INT)
{
    3cdc:	1f 92       	push	r1
    3cde:	0f 92       	push	r0
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	0f 92       	push	r0
    3ce4:	11 24       	eor	r1, r1
    3ce6:	08 b6       	in	r0, 0x38	; 56
    3ce8:	0f 92       	push	r0
    3cea:	18 be       	out	0x38, r1	; 56
    3cec:	09 b6       	in	r0, 0x39	; 57
    3cee:	0f 92       	push	r0
    3cf0:	19 be       	out	0x39, r1	; 57
    3cf2:	0a b6       	in	r0, 0x3a	; 58
    3cf4:	0f 92       	push	r0
    3cf6:	1a be       	out	0x3a, r1	; 58
    3cf8:	0b b6       	in	r0, 0x3b	; 59
    3cfa:	0f 92       	push	r0
    3cfc:	1b be       	out	0x3b, r1	; 59
    3cfe:	2f 93       	push	r18
    3d00:	3f 93       	push	r19
    3d02:	4f 93       	push	r20
    3d04:	5f 93       	push	r21
    3d06:	6f 93       	push	r22
    3d08:	7f 93       	push	r23
    3d0a:	8f 93       	push	r24
    3d0c:	9f 93       	push	r25
    3d0e:	af 93       	push	r26
    3d10:	bf 93       	push	r27
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	ef 93       	push	r30
    3d18:	ff 93       	push	r31
	//If presweep switch is low turn on presweep
	if (!(PORTF_IN & (1 << PRE_SWP_SNS)))
    3d1a:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
    3d1e:	88 23       	and	r24, r24
    3d20:	5c f0       	brlt	.+22     	; 0x3d38 <__vector_104+0x5c>
	{
		presweep = ON;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	80 93 83 25 	sts	0x2583, r24	; 0x802583 <presweep>
		if (accelerator == ACCEL_DN)
    3d28:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    3d2c:	81 30       	cpi	r24, 0x01	; 1
    3d2e:	09 f0       	breq	.+2      	; 0x3d32 <__vector_104+0x56>
    3d30:	41 c0       	rjmp	.+130    	; 0x3db4 <__vector_104+0xd8>
		{
			pre_swp_set(ON);
    3d32:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <pre_swp_set>
    3d36:	3e c0       	rjmp	.+124    	; 0x3db4 <__vector_104+0xd8>
		}
	}
	//Otherwise update runtimer and turn off presweep
	else
	{
		if (runtimer_on && accelerator == ACCEL_UP && vacuum_state == VACUUM_OFF && horn == OFF && headlights == OFF)
    3d38:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    3d3c:	88 23       	and	r24, r24
    3d3e:	99 f0       	breq	.+38     	; 0x3d66 <__vector_104+0x8a>
    3d40:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    3d44:	81 11       	cpse	r24, r1
    3d46:	0f c0       	rjmp	.+30     	; 0x3d66 <__vector_104+0x8a>
    3d48:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    3d4c:	8c 3c       	cpi	r24, 0xCC	; 204
    3d4e:	59 f4       	brne	.+22     	; 0x3d66 <__vector_104+0x8a>
    3d50:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    3d54:	81 11       	cpse	r24, r1
    3d56:	07 c0       	rjmp	.+14     	; 0x3d66 <__vector_104+0x8a>
    3d58:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    3d5c:	81 11       	cpse	r24, r1
    3d5e:	03 c0       	rjmp	.+6      	; 0x3d66 <__vector_104+0x8a>
		{
			send_runtime_timer(OFF);
    3d60:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    3d64:	17 c0       	rjmp	.+46     	; 0x3d94 <__vector_104+0xb8>
		}
		else if (!runtimer_on && (accelerator == ACCEL_DN || vacuum_state != VACUUM_OFF || horn != OFF || headlights != OFF))
    3d66:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    3d6a:	81 11       	cpse	r24, r1
    3d6c:	13 c0       	rjmp	.+38     	; 0x3d94 <__vector_104+0xb8>
    3d6e:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    3d72:	81 30       	cpi	r24, 0x01	; 1
    3d74:	61 f0       	breq	.+24     	; 0x3d8e <__vector_104+0xb2>
    3d76:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    3d7a:	8c 3c       	cpi	r24, 0xCC	; 204
    3d7c:	41 f4       	brne	.+16     	; 0x3d8e <__vector_104+0xb2>
    3d7e:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    3d82:	81 11       	cpse	r24, r1
    3d84:	04 c0       	rjmp	.+8      	; 0x3d8e <__vector_104+0xb2>
    3d86:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    3d8a:	88 23       	and	r24, r24
    3d8c:	19 f0       	breq	.+6      	; 0x3d94 <__vector_104+0xb8>
		{
			send_runtime_timer(ON);
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
		}

		TCE0.CTRLB &= ~(0x80);
    3d94:	c0 e0       	ldi	r28, 0x00	; 0
    3d96:	da e0       	ldi	r29, 0x0A	; 10
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	8f 77       	andi	r24, 0x7F	; 127
    3d9c:	89 83       	std	Y+1, r24	; 0x01
		PORTE_OUTCLR = (1 << PRE_SWP_ON);
    3d9e:	88 e0       	ldi	r24, 0x08	; 8
    3da0:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		stop_25_ms_pre_swp_timer();
    3da4:	0e 94 7f 29 	call	0x52fe	; 0x52fe <stop_25_ms_pre_swp_timer>
		presweep = OFF;
    3da8:	10 92 83 25 	sts	0x2583, r1	; 0x802583 <presweep>
		presweep_dc = OFF;
    3dac:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <presweep_dc>
		TCE0.CCD = 0;
    3db0:	1e a6       	std	Y+46, r1	; 0x2e
    3db2:	1f a6       	std	Y+47, r1	; 0x2f
		__SIM_DOUT;
		__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
		/*log_enqueue(PRE_SWP_OFF_EVENT);*/
	}
}
    3db4:	ff 91       	pop	r31
    3db6:	ef 91       	pop	r30
    3db8:	df 91       	pop	r29
    3dba:	cf 91       	pop	r28
    3dbc:	bf 91       	pop	r27
    3dbe:	af 91       	pop	r26
    3dc0:	9f 91       	pop	r25
    3dc2:	8f 91       	pop	r24
    3dc4:	7f 91       	pop	r23
    3dc6:	6f 91       	pop	r22
    3dc8:	5f 91       	pop	r21
    3dca:	4f 91       	pop	r20
    3dcc:	3f 91       	pop	r19
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	0b be       	out	0x3b, r0	; 59
    3dd4:	0f 90       	pop	r0
    3dd6:	0a be       	out	0x3a, r0	; 58
    3dd8:	0f 90       	pop	r0
    3dda:	09 be       	out	0x39, r0	; 57
    3ddc:	0f 90       	pop	r0
    3dde:	08 be       	out	0x38, r0	; 56
    3de0:	0f 90       	pop	r0
    3de2:	0f be       	out	0x3f, r0	; 63
    3de4:	0f 90       	pop	r0
    3de6:	1f 90       	pop	r1
    3de8:	18 95       	reti

00003dea <__vector_100>:

ISR(BR_HD_MID_INT)
{
    3dea:	1f 92       	push	r1
    3dec:	0f 92       	push	r0
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	0f 92       	push	r0
    3df2:	11 24       	eor	r1, r1
    3df4:	08 b6       	in	r0, 0x38	; 56
    3df6:	0f 92       	push	r0
    3df8:	18 be       	out	0x38, r1	; 56
    3dfa:	0b b6       	in	r0, 0x3b	; 59
    3dfc:	0f 92       	push	r0
    3dfe:	1b be       	out	0x3b, r1	; 59
    3e00:	8f 93       	push	r24
    3e02:	9f 93       	push	r25
    3e04:	ef 93       	push	r30
    3e06:	ff 93       	push	r31
	//If brush has been turned off go back to the top
	if (!brush || brush_state == BRUSH_OFF)
    3e08:	80 91 5c 23 	lds	r24, 0x235C	; 0x80235c <brush>
    3e0c:	88 23       	and	r24, r24
    3e0e:	21 f0       	breq	.+8      	; 0x3e18 <__vector_100+0x2e>
    3e10:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    3e14:	8b 3b       	cpi	r24, 0xBB	; 187
    3e16:	59 f4       	brne	.+22     	; 0x3e2e <__vector_100+0x44>
	{
		BR_HD_UP;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    3e1e:	92 e0       	ldi	r25, 0x02	; 2
    3e20:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
		brush_head_position = BEFORE_MIDDLE;
    3e24:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <brush_head_position>
		brush_head_timer = ON;
    3e28:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <brush_head_timer>
    3e2c:	15 c0       	rjmp	.+42     	; 0x3e58 <__vector_100+0x6e>
	}
	//If extra pressure is not set stop in the middle
	else if (!extra_pressure)
    3e2e:	80 91 88 25 	lds	r24, 0x2588	; 0x802588 <extra_pressure>
    3e32:	81 11       	cpse	r24, r1
    3e34:	07 c0       	rjmp	.+14     	; 0x3e44 <__vector_100+0x5a>
	{
		BR_HD_OFF;
    3e36:	83 e0       	ldi	r24, 0x03	; 3
    3e38:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
		brush_head_position = MIDDLE;
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <brush_head_position>
    3e42:	0a c0       	rjmp	.+20     	; 0x3e58 <__vector_100+0x6e>
	}
	//Otherwise proceed to bottom
	else
	{
		BR_HD_DN;
    3e44:	e5 ea       	ldi	r30, 0xA5	; 165
    3e46:	f6 e0       	ldi	r31, 0x06	; 6
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	80 83       	st	Z, r24
    3e4c:	92 e0       	ldi	r25, 0x02	; 2
    3e4e:	90 83       	st	Z, r25
		brush_head_position = AFTER_MIDDLE;
    3e50:	90 93 4d 23 	sts	0x234D, r25	; 0x80234d <brush_head_position>
		brush_head_timer = ON;
    3e54:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <brush_head_timer>
	}
}
    3e58:	ff 91       	pop	r31
    3e5a:	ef 91       	pop	r30
    3e5c:	9f 91       	pop	r25
    3e5e:	8f 91       	pop	r24
    3e60:	0f 90       	pop	r0
    3e62:	0b be       	out	0x3b, r0	; 59
    3e64:	0f 90       	pop	r0
    3e66:	08 be       	out	0x38, r0	; 56
    3e68:	0f 90       	pop	r0
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	0f 90       	pop	r0
    3e6e:	1f 90       	pop	r1
    3e70:	18 95       	reti

00003e72 <initialize>:
		}
	}
}

void initialize(void)
{
    3e72:	cf 93       	push	r28
    3e74:	df 93       	push	r29
	brush_sns_out_timer = OFF;
    3e76:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <brush_sns_out_timer>
	brush_sns_out_timer_count = 0;
    3e7a:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <brush_sns_out_timer_count>
	//Initialize test led
	PORTQ_DIRSET = (1 << 2);
    3e7e:	c4 e0       	ldi	r28, 0x04	; 4
    3e80:	c0 93 c1 07 	sts	0x07C1, r28	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7007c1>

	//Pin for checking if A3 or A2.5 board is being used
	PORTJ_PIN0CTRL = PORT_OPC_PULLUP_gc;
    3e84:	d8 e1       	ldi	r29, 0x18	; 24
    3e86:	d0 93 10 07 	sts	0x0710, r29	; 0x800710 <__TEXT_REGION_LENGTH__+0x700710>

	initialize_32Mhz();
    3e8a:	0e 94 3b 29 	call	0x5276	; 0x5276 <initialize_32Mhz>
    3e8e:	2f ef       	ldi	r18, 0xFF	; 255
    3e90:	37 ea       	ldi	r19, 0xA7	; 167
    3e92:	81 e6       	ldi	r24, 0x61	; 97
    3e94:	21 50       	subi	r18, 0x01	; 1
    3e96:	30 40       	sbci	r19, 0x00	; 0
    3e98:	80 40       	sbci	r24, 0x00	; 0
    3e9a:	e1 f7       	brne	.-8      	; 0x3e94 <initialize+0x22>
    3e9c:	00 c0       	rjmp	.+0      	; 0x3e9e <initialize+0x2c>
    3e9e:	00 00       	nop
	//1 second delay to make sure power has settled
	//Without this delay EEPROM could get corrupted when initially reading
	_delay_ms(1000);
	PORTQ_OUTSET = (1 << 2);
    3ea0:	c0 93 c5 07 	sts	0x07C5, r28	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    3ea4:	9f ef       	ldi	r25, 0xFF	; 255
    3ea6:	27 ea       	ldi	r18, 0xA7	; 167
    3ea8:	31 e6       	ldi	r19, 0x61	; 97
    3eaa:	91 50       	subi	r25, 0x01	; 1
    3eac:	20 40       	sbci	r18, 0x00	; 0
    3eae:	30 40       	sbci	r19, 0x00	; 0
    3eb0:	e1 f7       	brne	.-8      	; 0x3eaa <initialize+0x38>
    3eb2:	00 c0       	rjmp	.+0      	; 0x3eb4 <initialize+0x42>
    3eb4:	00 00       	nop
	_delay_ms(1000);
	PORTQ_OUTCLR = (1 << 2);
    3eb6:	c0 93 c6 07 	sts	0x07C6, r28	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>

	//Reset CAN
	/*Reset pin 1 and pin 2 since my board has uses a different pin than roots*/
	PORTA_OUTSET = (1 << CAN_RST) | (1 << (CAN_RST - 1));
    3eba:	80 ec       	ldi	r24, 0xC0	; 192
    3ebc:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>

	initialize_ADC();
    3ec0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <initialize_ADC>

	// Enable internal pull-up on PC0, PC1.. Uncomment if you don't have external pullups
	PORTCFG.MPCMASK = 0x03; // Configure several PINxCTRL registers at the same time
    3ec4:	83 e0       	ldi	r24, 0x03	; 3
    3ec6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	PORTC.PIN0CTRL = PORT_OPC_PULLUP_gc; //Enable pull-up to get a defined level on the switches
    3eca:	d0 93 50 06 	sts	0x0650, r29	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>

	//Initialize the TWI master module using the TWIC port
	TWI_MasterInit(&twiMaster,
    3ece:	2b e9       	ldi	r18, 0x9B	; 155
    3ed0:	40 e4       	ldi	r20, 0x40	; 64
    3ed2:	60 e8       	ldi	r22, 0x80	; 128
    3ed4:	74 e0       	ldi	r23, 0x04	; 4
    3ed6:	86 eb       	ldi	r24, 0xB6	; 182
    3ed8:	90 e2       	ldi	r25, 0x20	; 32
    3eda:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <TWI_MasterInit>
		&TWIC,
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING);

	initialize_RB_settings();
    3ede:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <initialize_RB_settings>
	initialize_SPI();
    3ee2:	0e 94 c5 28 	call	0x518a	; 0x518a <initialize_SPI>

	sd_card_passed = FALSE;
    3ee6:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
	if (SD_CARD_IS_PRESENT)
    3eea:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    3eee:	84 fd       	sbrc	r24, 4
    3ef0:	0a c0       	rjmp	.+20     	; 0x3f06 <initialize+0x94>
	{
		initialize_SD_card();
    3ef2:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <initialize_SD_card>
		if (sd_card_passed)
    3ef6:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <sd_card_passed>
    3efa:	88 23       	and	r24, r24
    3efc:	21 f0       	breq	.+8      	; 0x3f06 <initialize+0x94>
		{
			initialize_event_logging();
    3efe:	0e 94 a6 11 	call	0x234c	; 0x234c <initialize_event_logging>
			initialize_event_log_queue();
    3f02:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <initialize_event_log_queue>
		}
	}

	initialize_timers();
    3f06:	0e 94 20 29 	call	0x5240	; 0x5240 <initialize_timers>
	initialize_motors();
    3f0a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <initialize_motors>
	initialize_alarms();
    3f0e:	0e 94 33 09 	call	0x1266	; 0x1266 <initialize_alarms>
	CQ_initialize();
    3f12:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <CQ_initialize>

	//Enable low level interrupts
	PMIC_CTRL = 0x07;
    3f16:	87 e0       	ldi	r24, 0x07	; 7
    3f18:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//Enable global interrupts
	sei();
    3f1c:	78 94       	sei

	initialize_Screen();
    3f1e:	0e 94 90 19 	call	0x3320	; 0x3320 <initialize_Screen>
	initialize_CAN();
    3f22:	0e 94 a5 0b 	call	0x174a	; 0x174a <initialize_CAN>

#ifndef __SIM__ //IVA002: Donot send reset in simulation
	send_reset_CAN();
    3f26:	0e 94 48 16 	call	0x2c90	; 0x2c90 <send_reset_CAN>
#endif // !__SIM__

	log_enqueue(RB800_ON_EVENT);
    3f2a:	80 e1       	ldi	r24, 0x10	; 16
    3f2c:	0e 94 4f 13 	call	0x269e	; 0x269e <log_enqueue>

	measure_v_off();
    3f30:	0e 94 af 07 	call	0xf5e	; 0xf5e <measure_v_off>

	start_100_ms_timer();
    3f34:	0e 94 49 29 	call	0x5292	; 0x5292 <start_100_ms_timer>

	if (!sd_card_passed)
    3f38:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <sd_card_passed>
    3f3c:	81 11       	cpse	r24, r1
    3f3e:	21 c0       	rjmp	.+66     	; 0x3f82 <initialize+0x110>
	{
		//Disable all 9201 devices
		PORTF_OUTSET = (1 << DISABLE_9201);
    3f40:	80 e4       	ldi	r24, 0x40	; 64
    3f42:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
		//Disable all 8701 devices
		PORTE_OUTCLR = (1 << ENABLE_8701);
    3f46:	80 e1       	ldi	r24, 0x10	; 16
    3f48:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

		water_pump_set(OFF, OFF);
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
		Solenoid_set(OFF);
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
		detergent_pump_set(OFF, OFF);
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

		emergency_off = TRUE;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <emergency_off>
    3f68:	8f ef       	ldi	r24, 0xFF	; 255
    3f6a:	93 e2       	ldi	r25, 0x23	; 35
    3f6c:	24 ef       	ldi	r18, 0xF4	; 244
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	81 50       	subi	r24, 0x01	; 1
    3f72:	90 40       	sbci	r25, 0x00	; 0
    3f74:	20 40       	sbci	r18, 0x00	; 0
    3f76:	30 40       	sbci	r19, 0x00	; 0
    3f78:	d9 f7       	brne	.-10     	; 0x3f70 <initialize+0xfe>
    3f7a:	00 c0       	rjmp	.+0      	; 0x3f7c <initialize+0x10a>
    3f7c:	00 00       	nop
		_delay_ms(3000);
		send_SD_card_fail();
    3f7e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <send_SD_card_fail>
	}
}
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	08 95       	ret

00003f88 <main>:


#include "RB_800.h"

int main(void)
{
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	27 97       	sbiw	r28, 0x07	; 7
    3f92:	cd bf       	out	0x3d, r28	; 61
    3f94:	de bf       	out	0x3e, r29	; 62
	brush_sns_out_timer = OFF;
    3f96:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <brush_sns_out_timer>
	brush_sns_out_timer_count = 0;
    3f9a:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <brush_sns_out_timer_count>
	brush_sns_out_count = 30000;
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e6       	ldi	r25, 0x60	; 96
    3fa2:	aa ee       	ldi	r26, 0xEA	; 234
    3fa4:	b6 e4       	ldi	r27, 0x46	; 70
    3fa6:	80 93 98 25 	sts	0x2598, r24	; 0x802598 <brush_sns_out_count>
    3faa:	90 93 99 25 	sts	0x2599, r25	; 0x802599 <brush_sns_out_count+0x1>
    3fae:	a0 93 9a 25 	sts	0x259A, r26	; 0x80259a <brush_sns_out_count+0x2>
    3fb2:	b0 93 9b 25 	sts	0x259B, r27	; 0x80259b <brush_sns_out_count+0x3>
	}
#endif

	//Reset CAN controller
	/*Reset pin 1 and pin 2 since my board has uses a different pin than roots*/
	PORTA_DIRSET = (1 << CAN_RST) | (1 << (CAN_RST - 1));
    3fb6:	80 ec       	ldi	r24, 0xC0	; 192
    3fb8:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTA_OUTCLR = (1 << CAN_RST) | (1 << (CAN_RST - 1));
    3fbc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	initialize();
    3fc0:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <initialize>
	brush_sns_out_count = 0;
    3fc4:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <brush_sns_out_count>
    3fc8:	10 92 99 25 	sts	0x2599, r1	; 0x802599 <brush_sns_out_count+0x1>
    3fcc:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <brush_sns_out_count+0x2>
    3fd0:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <brush_sns_out_count+0x3>
	brush_sns_out_timer_count = 0;
    3fd4:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <brush_sns_out_timer_count>
		}

		if (emergency_off)
		{
			//Disable all 9201 devices
			PORTF_OUTSET = (1 << DISABLE_9201);
    3fd8:	0f 2e       	mov	r0, r31
    3fda:	f5 ea       	ldi	r31, 0xA5	; 165
    3fdc:	4f 2e       	mov	r4, r31
    3fde:	f6 e0       	ldi	r31, 0x06	; 6
    3fe0:	5f 2e       	mov	r5, r31
    3fe2:	f0 2d       	mov	r31, r0
		if (send_float_flag)
		{
			send_tank_full();
			send_float_flag = FALSE;
			vacuum_off_timer = ON;
			SQ_UP;
    3fe4:	0f 2e       	mov	r0, r31
    3fe6:	f6 ea       	ldi	r31, 0xA6	; 166
    3fe8:	6f 2e       	mov	r6, r31
    3fea:	f6 e0       	ldi	r31, 0x06	; 6
    3fec:	7f 2e       	mov	r7, r31
    3fee:	f0 2d       	mov	r31, r0
				sei();
				check_sd_card = FALSE;
			}

			//Make sure device is not losing power
			while (POWERING_DOWN) {};
    3ff0:	0f 2e       	mov	r0, r31
    3ff2:	f8 e2       	ldi	r31, 0x28	; 40
    3ff4:	ef 2e       	mov	r14, r31
    3ff6:	f6 e0       	ldi	r31, 0x06	; 6
    3ff8:	ff 2e       	mov	r15, r31
    3ffa:	f0 2d       	mov	r31, r0

			if (update_eeprom_statistics && (brush_state == BRUSH_RUNNING || vacuum_state == VACUUM_RUNNING || (water_pump && brush_state == BRUSH_RUNNING) || (detergent_pump && brush_state == BRUSH_RUNNING) || (presweep_state == ON) || eco_mode))
			{
				cli();
				eeprom_update_byte((uint8_t *)EEP8_BRUSH_MINUTES_ADDR, brush_minutes); //update brush minutes for every one minute 
				eeprom_busy_wait();
    3ffc:	0f ec       	ldi	r16, 0xCF	; 207
    3ffe:	11 e0       	ldi	r17, 0x01	; 1
			log_event(message);
		}

		//If is reset is TRUE and the 9201 devices are off
		//Reset the 9201's
		if (is_reset && (PORTF_OUT & (1 << DISABLE_9201)))
    4000:	0f 2e       	mov	r0, r31
    4002:	f4 ea       	ldi	r31, 0xA4	; 164
    4004:	cf 2e       	mov	r12, r31
    4006:	f6 e0       	ldi	r31, 0x06	; 6
    4008:	df 2e       	mov	r13, r31
    400a:	f0 2d       	mov	r31, r0
		}

		//Switching to reverse
		if (switch_motor_reverse)
		{
			SET_DRIVE_MOTOR_REVERSE;
    400c:	0f 2e       	mov	r0, r31
    400e:	f6 ee       	ldi	r31, 0xE6	; 230
    4010:	af 2e       	mov	r10, r31
    4012:	f6 e0       	ldi	r31, 0x06	; 6
    4014:	bf 2e       	mov	r11, r31
    4016:	f0 2d       	mov	r31, r0
    4018:	0f 2e       	mov	r0, r31
    401a:	f5 ee       	ldi	r31, 0xE5	; 229
    401c:	2f 2e       	mov	r2, r31
    401e:	f6 e0       	ldi	r31, 0x06	; 6
    4020:	3f 2e       	mov	r3, r31
    4022:	f0 2d       	mov	r31, r0
	//brush_slow_start=12;
	//IDLE_LOOP
	while (true)
	{
		//Measure motor current if CAN queue is empty
		if (!CQRx_queueIsEmpty())
    4024:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <CQRx_queueIsEmpty>
    4028:	81 11       	cpse	r24, r1
    402a:	05 c0       	rjmp	.+10     	; 0x4036 <main+0xae>
		{
			CQRx_dequeue();
    402c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <CQRx_dequeue>
			reset_CAN_error();
    4030:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <reset_CAN_error>
    4034:	80 c0       	rjmp	.+256    	; 0x4136 <main+0x1ae>
		}
		else if (measure_current)
    4036:	80 91 7f 20 	lds	r24, 0x207F	; 0x80207f <measure_current>
    403a:	88 23       	and	r24, r24
    403c:	29 f0       	breq	.+10     	; 0x4048 <main+0xc0>
		{
			measure_currents();
    403e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <measure_currents>

			measure_current = FALSE;
    4042:	10 92 7f 20 	sts	0x207F, r1	; 0x80207f <measure_current>
    4046:	77 c0       	rjmp	.+238    	; 0x4136 <main+0x1ae>
		}
		else if (check_max_current)
    4048:	80 91 69 23 	lds	r24, 0x2369	; 0x802369 <check_max_current>
    404c:	88 23       	and	r24, r24
    404e:	09 f4       	brne	.+2      	; 0x4052 <main+0xca>
    4050:	72 c0       	rjmp	.+228    	; 0x4136 <main+0x1ae>
		{
			//Update session max current and overall max current
			if ((uint8_t)brush1_current > max_brush1_session_current)
    4052:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <brush1_current>
    4056:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <brush1_current+0x1>
    405a:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <brush1_current+0x2>
    405e:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <brush1_current+0x3>
    4062:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    4066:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <max_brush1_session_current>
    406a:	86 17       	cp	r24, r22
    406c:	70 f4       	brcc	.+28     	; 0x408a <main+0x102>
			{
				max_brush1_session_current = (uint8_t)brush1_current;
    406e:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <max_brush1_session_current>
				if (max_brush1_session_current > max_brush1_overall_current)
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <max_brush1_overall_current>
    4078:	90 91 6a 20 	lds	r25, 0x206A	; 0x80206a <max_brush1_overall_current+0x1>
    407c:	86 17       	cp	r24, r22
    407e:	97 07       	cpc	r25, r23
    4080:	20 f4       	brcc	.+8      	; 0x408a <main+0x102>
					max_brush1_overall_current = max_brush1_session_current;
    4082:	60 93 69 20 	sts	0x2069, r22	; 0x802069 <max_brush1_overall_current>
    4086:	70 93 6a 20 	sts	0x206A, r23	; 0x80206a <max_brush1_overall_current+0x1>
			}
			if ((uint8_t)brush2_current > max_brush2_session_current)
    408a:	60 91 6b 23 	lds	r22, 0x236B	; 0x80236b <brush2_current>
    408e:	70 91 6c 23 	lds	r23, 0x236C	; 0x80236c <brush2_current+0x1>
    4092:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <brush2_current+0x2>
    4096:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <brush2_current+0x3>
    409a:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    409e:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <max_brush2_session_current>
    40a2:	86 17       	cp	r24, r22
    40a4:	70 f4       	brcc	.+28     	; 0x40c2 <main+0x13a>
			{
				max_brush2_session_current = (uint8_t)brush2_current;
    40a6:	60 93 8a 20 	sts	0x208A, r22	; 0x80208a <max_brush2_session_current>
				if (max_brush2_session_current > max_brush2_overall_current)
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	80 91 a4 25 	lds	r24, 0x25A4	; 0x8025a4 <max_brush2_overall_current>
    40b0:	90 91 a5 25 	lds	r25, 0x25A5	; 0x8025a5 <max_brush2_overall_current+0x1>
    40b4:	86 17       	cp	r24, r22
    40b6:	97 07       	cpc	r25, r23
    40b8:	20 f4       	brcc	.+8      	; 0x40c2 <main+0x13a>
					max_brush2_overall_current = max_brush2_session_current;
    40ba:	60 93 a4 25 	sts	0x25A4, r22	; 0x8025a4 <max_brush2_overall_current>
    40be:	70 93 a5 25 	sts	0x25A5, r23	; 0x8025a5 <max_brush2_overall_current+0x1>
			}
			if ((uint8_t)vacuum_current > max_vacuum_session_current)
    40c2:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <vacuum_current>
    40c6:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <vacuum_current+0x1>
    40ca:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <vacuum_current+0x2>
    40ce:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <vacuum_current+0x3>
    40d2:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    40d6:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <max_vacuum_session_current>
    40da:	86 17       	cp	r24, r22
    40dc:	70 f4       	brcc	.+28     	; 0x40fa <main+0x172>
			{
				max_vacuum_session_current = (uint8_t)vacuum_current;
    40de:	60 93 43 20 	sts	0x2043, r22	; 0x802043 <max_vacuum_session_current>
				if (max_vacuum_session_current > max_vacuum_overall_current)
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <max_vacuum_overall_current>
    40e8:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <max_vacuum_overall_current+0x1>
    40ec:	86 17       	cp	r24, r22
    40ee:	97 07       	cpc	r25, r23
    40f0:	20 f4       	brcc	.+8      	; 0x40fa <main+0x172>
					max_vacuum_overall_current = max_vacuum_session_current;
    40f2:	60 93 49 20 	sts	0x2049, r22	; 0x802049 <max_vacuum_overall_current>
    40f6:	70 93 4a 20 	sts	0x204A, r23	; 0x80204a <max_vacuum_overall_current+0x1>
			}
			if ((uint8_t)presweep_current > max_presweep_session_current)
    40fa:	60 91 6b 20 	lds	r22, 0x206B	; 0x80206b <presweep_current>
    40fe:	70 91 6c 20 	lds	r23, 0x206C	; 0x80206c <presweep_current+0x1>
    4102:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <presweep_current+0x2>
    4106:	90 91 6e 20 	lds	r25, 0x206E	; 0x80206e <presweep_current+0x3>
    410a:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    410e:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <max_presweep_session_current>
    4112:	86 17       	cp	r24, r22
    4114:	70 f4       	brcc	.+28     	; 0x4132 <main+0x1aa>
			{
				max_presweep_session_current = (uint8_t)presweep_current;
    4116:	60 93 3c 20 	sts	0x203C, r22	; 0x80203c <max_presweep_session_current>
				if (max_presweep_session_current > max_presweep_overall_current)
    411a:	70 e0       	ldi	r23, 0x00	; 0
    411c:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <max_presweep_overall_current>
    4120:	90 91 64 23 	lds	r25, 0x2364	; 0x802364 <max_presweep_overall_current+0x1>
    4124:	86 17       	cp	r24, r22
    4126:	97 07       	cpc	r25, r23
    4128:	20 f4       	brcc	.+8      	; 0x4132 <main+0x1aa>
					max_presweep_overall_current = max_presweep_session_current;
    412a:	60 93 63 23 	sts	0x2363, r22	; 0x802363 <max_presweep_overall_current>
    412e:	70 93 64 23 	sts	0x2364, r23	; 0x802364 <max_presweep_overall_current+0x1>
			}

			check_max_current = FALSE;
    4132:	10 92 69 23 	sts	0x2369, r1	; 0x802369 <check_max_current>
		}

		if (emergency_off)
    4136:	80 91 a3 25 	lds	r24, 0x25A3	; 0x8025a3 <emergency_off>
    413a:	88 23       	and	r24, r24
    413c:	39 f0       	breq	.+14     	; 0x414c <main+0x1c4>
		{
			//Disable all 9201 devices
			PORTF_OUTSET = (1 << DISABLE_9201);
    413e:	80 e4       	ldi	r24, 0x40	; 64
    4140:	f2 01       	movw	r30, r4
    4142:	80 83       	st	Z, r24
			//Disable all 8701 devices
			PORTE_OUTCLR = (1 << ENABLE_8701);
    4144:	80 e1       	ldi	r24, 0x10	; 16
    4146:	e6 e8       	ldi	r30, 0x86	; 134
    4148:	f6 e0       	ldi	r31, 0x06	; 6
    414a:	80 83       	st	Z, r24
		}

		//If the accelerator has changed, perform the actions required
		if (accelerator_changed)
    414c:	80 91 4b 20 	lds	r24, 0x204B	; 0x80204b <accelerator_changed>
    4150:	88 23       	and	r24, r24
    4152:	59 f0       	breq	.+22     	; 0x416a <main+0x1e2>
		{
			accelerator_changed = FALSE;
    4154:	10 92 4b 20 	sts	0x204B, r1	; 0x80204b <accelerator_changed>
			if (accelerator == ACCEL_DN)
    4158:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    415c:	81 30       	cpi	r24, 0x01	; 1
    415e:	19 f4       	brne	.+6      	; 0x4166 <main+0x1de>
			{
				accelerator_down();
    4160:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <accelerator_down>
    4164:	02 c0       	rjmp	.+4      	; 0x416a <main+0x1e2>
				/*log_enqueue(PEDAL_DOWN_EVENT);*/
			}
			else
			{
				accelerator_up();
    4166:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <accelerator_up>
			}
		}

		//If the alarm flag has been set
		//Send the alarm code to the A1 board
		if (send_alarm_flag)
    416a:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <send_alarm_flag>
    416e:	88 23       	and	r24, r24
    4170:	49 f0       	breq	.+18     	; 0x4184 <main+0x1fc>
		{
			send_alarm(alarm_count);
    4172:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <alarm_count>
    4176:	0e 94 8b 09 	call	0x1316	; 0x1316 <send_alarm>
			send_alarm_flag = FALSE;
    417a:	10 92 73 20 	sts	0x2073, r1	; 0x802073 <send_alarm_flag>
			//Alarm sent prevents board from repeatedly sending the alarm code
			alarm_sent = TRUE;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <alarm_sent>
		}

		//If the float flag is set inform the A1 board
		if (send_float_flag)
    4184:	80 91 78 25 	lds	r24, 0x2578	; 0x802578 <send_float_flag>
    4188:	88 23       	and	r24, r24
    418a:	81 f0       	breq	.+32     	; 0x41ac <main+0x224>
		{
			send_tank_full();
    418c:	0e 94 12 0a 	call	0x1424	; 0x1424 <send_tank_full>
			send_float_flag = FALSE;
    4190:	10 92 78 25 	sts	0x2578, r1	; 0x802578 <send_float_flag>
			vacuum_off_timer = ON;
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	80 93 7d 25 	sts	0x257D, r24	; 0x80257d <vacuum_off_timer>
			SQ_UP;
    419a:	84 e0       	ldi	r24, 0x04	; 4
    419c:	f3 01       	movw	r30, r6
    419e:	80 83       	st	Z, r24
    41a0:	88 e0       	ldi	r24, 0x08	; 8
    41a2:	f2 01       	movw	r30, r4
    41a4:	80 83       	st	Z, r24

			log_enqueue(TANK_FULL_EVENT);
    41a6:	8a e1       	ldi	r24, 0x1A	; 26
    41a8:	0e 94 4f 13 	call	0x269e	; 0x269e <log_enqueue>
		}

		//If the fault flag is set inform the A1 board
		if (send_fault_flag)
    41ac:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <send_fault_flag>
    41b0:	88 23       	and	r24, r24
    41b2:	21 f0       	breq	.+8      	; 0x41bc <main+0x234>
		{
			send_fault_error();
    41b4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <send_fault_error>
			send_fault_flag = FALSE;
    41b8:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <send_fault_flag>
		}

		//If over current flag is set inform A1 board
		if (send_brush_overcurrent_alarm)
    41bc:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <send_brush_overcurrent_alarm>
    41c0:	88 23       	and	r24, r24
    41c2:	21 f0       	breq	.+8      	; 0x41cc <main+0x244>
		{
			send_bm_overcurrent_error();
    41c4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <send_bm_overcurrent_error>
			send_brush_overcurrent_alarm = FALSE;
    41c8:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <send_brush_overcurrent_alarm>
		}

		//If top flag is set inform the A1 board
		if (send_top_flag)
    41cc:	80 91 a6 25 	lds	r24, 0x25A6	; 0x8025a6 <send_top_flag>
    41d0:	88 23       	and	r24, r24
    41d2:	79 f0       	breq	.+30     	; 0x41f2 <main+0x26a>
		{
			send_top_error();
    41d4:	0e 94 9e 09 	call	0x133c	; 0x133c <send_top_error>

			if (log_top_event)
    41d8:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <log_top_event>
    41dc:	88 23       	and	r24, r24
    41de:	49 f0       	breq	.+18     	; 0x41f2 <main+0x26a>
			{
				uint8_t message[2];
				message[0] = A2_TOP_EVENT;
    41e0:	8e e1       	ldi	r24, 0x1E	; 30
    41e2:	89 83       	std	Y+1, r24	; 0x01
				message[1] = 0;
    41e4:	1a 82       	std	Y+2, r1	; 0x02
				log_event(message);
    41e6:	ce 01       	movw	r24, r28
    41e8:	01 96       	adiw	r24, 0x01	; 1
    41ea:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <log_event>
				log_top_event = FALSE;
    41ee:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <log_top_event>
			}

		}

		//If fuse fail flag is set inform the A1 board
		if (send_fuse_flag)
    41f2:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <send_fuse_flag>
    41f6:	88 23       	and	r24, r24
    41f8:	59 f0       	breq	.+22     	; 0x4210 <main+0x288>
		{
			send_fuse_error();
    41fa:	0e 94 bb 09 	call	0x1376	; 0x1376 <send_fuse_error>
			send_fuse_flag = FALSE;
    41fe:	10 92 7c 23 	sts	0x237C, r1	; 0x80237c <send_fuse_flag>

			uint8_t message[2];
			message[0] = FUSE_BLOWN_EVENT;
    4202:	8c e1       	ldi	r24, 0x1C	; 28
    4204:	89 83       	std	Y+1, r24	; 0x01
			message[1] = 0;
    4206:	1a 82       	std	Y+2, r1	; 0x02
			log_event(message);
    4208:	ce 01       	movw	r24, r28
    420a:	01 96       	adiw	r24, 0x01	; 1
    420c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <log_event>
		}

		//If is reset is TRUE and the 9201 devices are off
		//Reset the 9201's
		if (is_reset && (PORTF_OUT & (1 << DISABLE_9201)))
    4210:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <is_reset>
    4214:	88 23       	and	r24, r24
    4216:	49 f0       	breq	.+18     	; 0x422a <main+0x2a2>
    4218:	f6 01       	movw	r30, r12
    421a:	80 81       	ld	r24, Z
    421c:	86 ff       	sbrs	r24, 6
    421e:	05 c0       	rjmp	.+10     	; 0x422a <main+0x2a2>
		{
			is_reset = FALSE;
    4220:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <is_reset>
			PORTF_OUTCLR = (1 << DISABLE_9201);
    4224:	80 e4       	ldi	r24, 0x40	; 64
    4226:	f3 01       	movw	r30, r6
    4228:	80 83       	st	Z, r24
		}

		//Switching to reverse
		if (switch_motor_reverse)
    422a:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <switch_motor_reverse>
    422e:	88 23       	and	r24, r24
    4230:	59 f0       	breq	.+22     	; 0x4248 <main+0x2c0>
		{
			SET_DRIVE_MOTOR_REVERSE;
    4232:	80 e1       	ldi	r24, 0x10	; 16
    4234:	f5 01       	movw	r30, r10
    4236:	80 83       	st	Z, r24
    4238:	84 e0       	ldi	r24, 0x04	; 4
    423a:	f1 01       	movw	r30, r2
    423c:	80 83       	st	Z, r24
			current_dir = REVERSE;
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <current_dir>
			switch_motor_reverse = FALSE;
    4244:	10 92 44 20 	sts	0x2044, r1	; 0x802044 <switch_motor_reverse>
		}

		//Switching to forward
		if (switch_motor_forward)
    4248:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <switch_motor_forward>
    424c:	88 23       	and	r24, r24
    424e:	51 f0       	breq	.+20     	; 0x4264 <main+0x2dc>
		{
			SET_DRIVE_MOTOR_FORWARD;
    4250:	84 e0       	ldi	r24, 0x04	; 4
    4252:	f5 01       	movw	r30, r10
    4254:	80 83       	st	Z, r24
    4256:	80 e1       	ldi	r24, 0x10	; 16
    4258:	f1 01       	movw	r30, r2
    425a:	80 83       	st	Z, r24
			current_dir = FORWARD;
    425c:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <current_dir>
			switch_motor_forward = FALSE;
    4260:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <switch_motor_forward>
		}

		/*Testing without log data*/
		//Every second write to the SD card
		if (second_timer_tick && !(PORTF_OUT & (1 << BH_PWM)))
    4264:	80 91 76 23 	lds	r24, 0x2376	; 0x802376 <second_timer_tick>
    4268:	88 23       	and	r24, r24
    426a:	09 f4       	brne	.+2      	; 0x426e <main+0x2e6>
    426c:	da c0       	rjmp	.+436    	; 0x4422 <main+0x49a>
    426e:	f6 01       	movw	r30, r12
    4270:	80 81       	ld	r24, Z
    4272:	81 fd       	sbrc	r24, 1
    4274:	d6 c0       	rjmp	.+428    	; 0x4422 <main+0x49a>
		{
			log_dequeue();
    4276:	0e 94 94 13 	call	0x2728	; 0x2728 <log_dequeue>

			//If RB800 was powered on without an sd card previously, then record the runtimer hours and minutes of when the sd card was missing
			if (check_sd_card)
    427a:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <check_sd_card>
    427e:	88 23       	and	r24, r24
    4280:	09 f4       	brne	.+2      	; 0x4284 <main+0x2fc>
    4282:	46 c0       	rjmp	.+140    	; 0x4310 <main+0x388>
			{
				cli();
    4284:	f8 94       	cli
				if (!sd_card_passed)
    4286:	80 91 48 23 	lds	r24, 0x2348	; 0x802348 <sd_card_passed>
    428a:	81 11       	cpse	r24, r1
    428c:	1b c0       	rjmp	.+54     	; 0x42c4 <main+0x33c>
				{
					if (eeprom_read_word((uint16_t*)EEPxx_SD_CARD_MISSING_ADDR) == 0 && eeprom_read_byte((uint8_t*)(EEPxx_SD_CARD_MISSING_ADDR + 2)) == 0)
    428e:	80 e5       	ldi	r24, 0x50	; 80
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	0e 94 10 35 	call	0x6a20	; 0x6a20 <eeprom_read_word>
    4296:	89 2b       	or	r24, r25
    4298:	c1 f5       	brne	.+112    	; 0x430a <main+0x382>
    429a:	82 e5       	ldi	r24, 0x52	; 82
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    42a2:	81 11       	cpse	r24, r1
    42a4:	32 c0       	rjmp	.+100    	; 0x430a <main+0x382>
					{
						eeprom_update_word((uint16_t*)EEPxx_SD_CARD_MISSING_ADDR, hours);
    42a6:	60 91 90 25 	lds	r22, 0x2590	; 0x802590 <hours>
    42aa:	70 91 91 25 	lds	r23, 0x2591	; 0x802591 <hours+0x1>
    42ae:	80 e5       	ldi	r24, 0x50	; 80
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_update_word>
						eeprom_update_byte((uint8_t*)(EEPxx_SD_CARD_MISSING_ADDR + 2), minutes);
    42b6:	60 91 89 25 	lds	r22, 0x2589	; 0x802589 <minutes>
    42ba:	82 e5       	ldi	r24, 0x52	; 82
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
    42c2:	23 c0       	rjmp	.+70     	; 0x430a <main+0x382>
					}
				}
				else
				{
					uint16_t sd_hours = eeprom_read_word((uint16_t*)EEPxx_SD_CARD_MISSING_ADDR);
    42c4:	80 e5       	ldi	r24, 0x50	; 80
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 10 35 	call	0x6a20	; 0x6a20 <eeprom_read_word>
    42cc:	4c 01       	movw	r8, r24
					uint8_t sd_minutes = eeprom_read_byte((uint8_t*)(EEPxx_SD_CARD_MISSING_ADDR + 2));
    42ce:	82 e5       	ldi	r24, 0x52	; 82
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
					if (sd_hours != 0 || sd_minutes != 0)
    42d6:	81 14       	cp	r8, r1
    42d8:	91 04       	cpc	r9, r1
    42da:	11 f4       	brne	.+4      	; 0x42e0 <main+0x358>
    42dc:	88 23       	and	r24, r24
    42de:	a9 f0       	breq	.+42     	; 0x430a <main+0x382>
					{
						uint8_t message[3];
						message[0] = (uint8_t)(sd_hours << 8);
    42e0:	19 82       	std	Y+1, r1	; 0x01
						message[1] = (uint8_t)sd_hours;
    42e2:	8a 82       	std	Y+2, r8	; 0x02
						message[2] = sd_minutes;
    42e4:	8b 83       	std	Y+3, r24	; 0x03
						log_enqueue_data(SD_MISSING_EVENT, 3, message);
    42e6:	ae 01       	movw	r20, r28
    42e8:	4f 5f       	subi	r20, 0xFF	; 255
    42ea:	5f 4f       	sbci	r21, 0xFF	; 255
    42ec:	63 e0       	ldi	r22, 0x03	; 3
    42ee:	8b e1       	ldi	r24, 0x1B	; 27
    42f0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>

						eeprom_update_word((uint16_t*)EEPxx_SD_CARD_MISSING_ADDR, 0);
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	80 e5       	ldi	r24, 0x50	; 80
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_update_word>
						eeprom_update_byte((uint8_t*)(EEPxx_SD_CARD_MISSING_ADDR + 2), 0);
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	82 e5       	ldi	r24, 0x52	; 82
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
					}
				}
				sei();
    430a:	78 94       	sei
				check_sd_card = FALSE;
    430c:	10 92 74 20 	sts	0x2074, r1	; 0x802074 <check_sd_card>
			}

			//Make sure device is not losing power
			while (POWERING_DOWN) {};
    4310:	f7 01       	movw	r30, r14
    4312:	80 81       	ld	r24, Z
    4314:	81 fd       	sbrc	r24, 1
    4316:	fc cf       	rjmp	.-8      	; 0x4310 <main+0x388>
				uint8_t clear[1] = { 0x00 };
				write_bytes_CAN(CANINTF, clear, 1);
			}
*/
//If TOP pin is low, start a debounce timer of 500 ms to make sure pin went low
			if (PORTE_IN & (1 << TOP_PIN) && top_debounce_timer == OFF && top_debounce_timer <= 5)
    4318:	e8 e8       	ldi	r30, 0x88	; 136
    431a:	f6 e0       	ldi	r31, 0x06	; 6
    431c:	80 81       	ld	r24, Z
    431e:	86 ff       	sbrs	r24, 6
    4320:	0f c0       	rjmp	.+30     	; 0x4340 <main+0x3b8>
    4322:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <top_debounce_timer>
    4326:	81 11       	cpse	r24, r1
    4328:	0b c0       	rjmp	.+22     	; 0x4340 <main+0x3b8>
    432a:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <top_debounce_timer>
    432e:	86 30       	cpi	r24, 0x06	; 6
    4330:	38 f4       	brcc	.+14     	; 0x4340 <main+0x3b8>
			{
#ifndef BENCH_TEST //IVA002: Suppressed error in bench test
				top_debounce_timer = ON;
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	80 93 4f 20 	sts	0x204F, r24	; 0x80204f <top_debounce_timer>
				top_debounce_count = 0;
    4338:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <top_debounce_count>
				start_100_ms_timer();
    433c:	0e 94 49 29 	call	0x5292	; 0x5292 <start_100_ms_timer>
#endif
			}

			//If FLT pin is low, start a 8 second timer to make sure float sensor is reading full tank
			if (!(PORTE_IN & (1 << FLOAT_PIN)) && float_sensor_timer == OFF)
    4340:	e8 e8       	ldi	r30, 0x88	; 136
    4342:	f6 e0       	ldi	r31, 0x06	; 6
    4344:	80 81       	ld	r24, Z
    4346:	88 23       	and	r24, r24
    4348:	3c f0       	brlt	.+14     	; 0x4358 <main+0x3d0>
    434a:	80 91 97 25 	lds	r24, 0x2597	; 0x802597 <float_sensor_timer>
    434e:	81 11       	cpse	r24, r1
    4350:	03 c0       	rjmp	.+6      	; 0x4358 <main+0x3d0>
			{
				float_sensor_timer = ON;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	80 93 97 25 	sts	0x2597, r24	; 0x802597 <float_sensor_timer>
			}

			//Check if presweep state has changed
			if (!(PORTF_IN & (1 << PRE_SWP_SNS)))
    4358:	e8 ea       	ldi	r30, 0xA8	; 168
    435a:	f6 e0       	ldi	r31, 0x06	; 6
    435c:	80 81       	ld	r24, Z
    435e:	88 23       	and	r24, r24
    4360:	84 f0       	brlt	.+32     	; 0x4382 <main+0x3fa>
			{
				if (presweep != ON)
    4362:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <presweep>
    4366:	81 30       	cpi	r24, 0x01	; 1
    4368:	09 f4       	brne	.+2      	; 0x436c <main+0x3e4>
    436a:	54 c0       	rjmp	.+168    	; 0x4414 <main+0x48c>
				{
					presweep = ON;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	80 93 83 25 	sts	0x2583, r24	; 0x802583 <presweep>
					if (accelerator == ACCEL_DN)
    4372:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    4376:	81 30       	cpi	r24, 0x01	; 1
    4378:	09 f0       	breq	.+2      	; 0x437c <main+0x3f4>
    437a:	4c c0       	rjmp	.+152    	; 0x4414 <main+0x48c>
					{
						pre_swp_set(ON);
    437c:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <pre_swp_set>
    4380:	49 c0       	rjmp	.+146    	; 0x4414 <main+0x48c>
					}
				}
			}
			else
			{
				if (presweep != OFF)
    4382:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <presweep>
    4386:	88 23       	and	r24, r24
    4388:	09 f4       	brne	.+2      	; 0x438c <main+0x404>
    438a:	44 c0       	rjmp	.+136    	; 0x4414 <main+0x48c>
				{
					if (runtimer_on && accelerator == ACCEL_UP && vacuum_state == VACUUM_OFF && horn == OFF && headlights == OFF)
    438c:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    4390:	88 23       	and	r24, r24
    4392:	99 f0       	breq	.+38     	; 0x43ba <main+0x432>
    4394:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    4398:	81 11       	cpse	r24, r1
    439a:	0f c0       	rjmp	.+30     	; 0x43ba <main+0x432>
    439c:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    43a0:	8c 3c       	cpi	r24, 0xCC	; 204
    43a2:	59 f4       	brne	.+22     	; 0x43ba <main+0x432>
    43a4:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    43a8:	81 11       	cpse	r24, r1
    43aa:	07 c0       	rjmp	.+14     	; 0x43ba <main+0x432>
    43ac:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    43b0:	81 11       	cpse	r24, r1
    43b2:	03 c0       	rjmp	.+6      	; 0x43ba <main+0x432>
					{
						send_runtime_timer(OFF);
    43b4:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
    43b8:	17 c0       	rjmp	.+46     	; 0x43e8 <main+0x460>
					}
					else if (!runtimer_on && (accelerator == ACCEL_DN || vacuum_state != VACUUM_OFF || horn != OFF || headlights != OFF))
    43ba:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    43be:	81 11       	cpse	r24, r1
    43c0:	13 c0       	rjmp	.+38     	; 0x43e8 <main+0x460>
    43c2:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    43c6:	81 30       	cpi	r24, 0x01	; 1
    43c8:	61 f0       	breq	.+24     	; 0x43e2 <main+0x45a>
    43ca:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    43ce:	8c 3c       	cpi	r24, 0xCC	; 204
    43d0:	41 f4       	brne	.+16     	; 0x43e2 <main+0x45a>
    43d2:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    43d6:	81 11       	cpse	r24, r1
    43d8:	04 c0       	rjmp	.+8      	; 0x43e2 <main+0x45a>
    43da:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    43de:	88 23       	and	r24, r24
    43e0:	19 f0       	breq	.+6      	; 0x43e8 <main+0x460>
					{
						send_runtime_timer(ON);
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
					}

					TCE0.CTRLB &= ~(0x80);
    43e8:	0f 2e       	mov	r0, r31
    43ea:	81 2c       	mov	r8, r1
    43ec:	fa e0       	ldi	r31, 0x0A	; 10
    43ee:	9f 2e       	mov	r9, r31
    43f0:	f0 2d       	mov	r31, r0
    43f2:	f4 01       	movw	r30, r8
    43f4:	81 81       	ldd	r24, Z+1	; 0x01
    43f6:	8f 77       	andi	r24, 0x7F	; 127
    43f8:	81 83       	std	Z+1, r24	; 0x01
					PORTE_OUTCLR = (1 << PRE_SWP_ON);
    43fa:	88 e0       	ldi	r24, 0x08	; 8
    43fc:	e6 e8       	ldi	r30, 0x86	; 134
    43fe:	f6 e0       	ldi	r31, 0x06	; 6
    4400:	80 83       	st	Z, r24
					stop_25_ms_pre_swp_timer();
    4402:	0e 94 7f 29 	call	0x52fe	; 0x52fe <stop_25_ms_pre_swp_timer>
					presweep = OFF;
    4406:	10 92 83 25 	sts	0x2583, r1	; 0x802583 <presweep>
					presweep_dc = OFF;
    440a:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <presweep_dc>
					TCE0.CCD = 0;
    440e:	f4 01       	movw	r30, r8
    4410:	16 a6       	std	Z+46, r1	; 0x2e
    4412:	17 a6       	std	Z+47, r1	; 0x2f
					__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
				}
			}

			//Check the fuses every second
			if (!(PORTF_OUT & (1 << DISABLE_9201)))
    4414:	f6 01       	movw	r30, r12
    4416:	80 81       	ld	r24, Z
    4418:	86 ff       	sbrs	r24, 6
				check_fuses();
    441a:	0e 94 a1 02 	call	0x542	; 0x542 <check_fuses>


			second_timer_tick = FALSE;
    441e:	10 92 76 23 	sts	0x2376, r1	; 0x802376 <second_timer_tick>
		}

		//Measure the current of running motors every 1 minute
		if (update_current)
    4422:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <update_current>
    4426:	88 23       	and	r24, r24
    4428:	09 f4       	brne	.+2      	; 0x442c <main+0x4a4>
    442a:	9d c1       	rjmp	.+826    	; 0x4766 <main+0x7de>
		{
			if (seconds == 10 && brush_state == BRUSH_RUNNING)
    442c:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <seconds>
    4430:	8a 30       	cpi	r24, 0x0A	; 10
    4432:	09 f0       	breq	.+2      	; 0x4436 <main+0x4ae>
    4434:	4c c0       	rjmp	.+152    	; 0x44ce <main+0x546>
    4436:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    443a:	8a 3a       	cpi	r24, 0xAA	; 170
    443c:	09 f0       	breq	.+2      	; 0x4440 <main+0x4b8>
    443e:	46 c2       	rjmp	.+1164   	; 0x48cc <main+0x944>
			{
				uint8_t message[1];
				message[0] = (uint8_t)brush1_current;
    4440:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <brush1_current>
    4444:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <brush1_current+0x1>
    4448:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <brush1_current+0x2>
    444c:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <brush1_current+0x3>
    4450:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    4454:	69 83       	std	Y+1, r22	; 0x01
				log_enqueue_data(BRUSH_1_CURRENT, 1, message);
    4456:	ae 01       	movw	r20, r28
    4458:	4f 5f       	subi	r20, 0xFF	; 255
    445a:	5f 4f       	sbci	r21, 0xFF	; 255
    445c:	61 e0       	ldi	r22, 0x01	; 1
    445e:	84 e2       	ldi	r24, 0x24	; 36
    4460:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>

				brush1_average_current = (brush1_average_current * 95 + brush1_current * 5) / 100;
    4464:	80 90 48 21 	lds	r8, 0x2148	; 0x802148 <brush1_average_current>
    4468:	90 90 49 21 	lds	r9, 0x2149	; 0x802149 <brush1_average_current+0x1>
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 ea       	ldi	r20, 0xA0	; 160
    4472:	50 e4       	ldi	r21, 0x40	; 64
    4474:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <brush1_current>
    4478:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <brush1_current+0x1>
    447c:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <brush1_current+0x2>
    4480:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <brush1_current+0x3>
    4484:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    4488:	6c 83       	std	Y+4, r22	; 0x04
    448a:	7d 83       	std	Y+5, r23	; 0x05
    448c:	8e 83       	std	Y+6, r24	; 0x06
    448e:	9f 83       	std	Y+7, r25	; 0x07
    4490:	8f e5       	ldi	r24, 0x5F	; 95
    4492:	88 9d       	mul	r24, r8
    4494:	b0 01       	movw	r22, r0
    4496:	89 9d       	mul	r24, r9
    4498:	70 0d       	add	r23, r0
    449a:	11 24       	eor	r1, r1
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    44a4:	9b 01       	movw	r18, r22
    44a6:	ac 01       	movw	r20, r24
    44a8:	6c 81       	ldd	r22, Y+4	; 0x04
    44aa:	7d 81       	ldd	r23, Y+5	; 0x05
    44ac:	8e 81       	ldd	r24, Y+6	; 0x06
    44ae:	9f 81       	ldd	r25, Y+7	; 0x07
    44b0:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	48 ec       	ldi	r20, 0xC8	; 200
    44ba:	52 e4       	ldi	r21, 0x42	; 66
    44bc:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    44c0:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    44c4:	60 93 48 21 	sts	0x2148, r22	; 0x802148 <brush1_average_current>
    44c8:	70 93 49 21 	sts	0x2149, r23	; 0x802149 <brush1_average_current+0x1>

		//Measure the current of running motors every 1 minute
		if (update_current)
		{
			if (seconds == 10 && brush_state == BRUSH_RUNNING)
			{
    44cc:	f4 c0       	rjmp	.+488    	; 0x46b6 <main+0x72e>
				message[0] = (uint8_t)brush1_current;
				log_enqueue_data(BRUSH_1_CURRENT, 1, message);

				brush1_average_current = (brush1_average_current * 95 + brush1_current * 5) / 100;
			}
			else if (seconds == 20 && brush_state == BRUSH_RUNNING)
    44ce:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <seconds>
    44d2:	84 31       	cpi	r24, 0x14	; 20
    44d4:	09 f0       	breq	.+2      	; 0x44d8 <main+0x550>
    44d6:	4c c0       	rjmp	.+152    	; 0x4570 <main+0x5e8>
    44d8:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    44dc:	8a 3a       	cpi	r24, 0xAA	; 170
    44de:	09 f0       	breq	.+2      	; 0x44e2 <main+0x55a>
    44e0:	47 c0       	rjmp	.+142    	; 0x4570 <main+0x5e8>
			{
				uint8_t message[1];
				message[0] = (uint8_t)brush2_current;
    44e2:	60 91 6b 23 	lds	r22, 0x236B	; 0x80236b <brush2_current>
    44e6:	70 91 6c 23 	lds	r23, 0x236C	; 0x80236c <brush2_current+0x1>
    44ea:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <brush2_current+0x2>
    44ee:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <brush2_current+0x3>
    44f2:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    44f6:	69 83       	std	Y+1, r22	; 0x01
				log_enqueue_data(BRUSH_2_CURRENT, 1, message);
    44f8:	ae 01       	movw	r20, r28
    44fa:	4f 5f       	subi	r20, 0xFF	; 255
    44fc:	5f 4f       	sbci	r21, 0xFF	; 255
    44fe:	61 e0       	ldi	r22, 0x01	; 1
    4500:	85 e2       	ldi	r24, 0x25	; 37
    4502:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>

				brush2_average_current = (brush2_average_current * 95 + brush2_current * 5) / 100;
    4506:	80 90 8f 20 	lds	r8, 0x208F	; 0x80208f <brush2_average_current>
    450a:	90 90 90 20 	lds	r9, 0x2090	; 0x802090 <brush2_average_current+0x1>
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	40 ea       	ldi	r20, 0xA0	; 160
    4514:	50 e4       	ldi	r21, 0x40	; 64
    4516:	60 91 6b 23 	lds	r22, 0x236B	; 0x80236b <brush2_current>
    451a:	70 91 6c 23 	lds	r23, 0x236C	; 0x80236c <brush2_current+0x1>
    451e:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <brush2_current+0x2>
    4522:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <brush2_current+0x3>
    4526:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    452a:	6c 83       	std	Y+4, r22	; 0x04
    452c:	7d 83       	std	Y+5, r23	; 0x05
    452e:	8e 83       	std	Y+6, r24	; 0x06
    4530:	9f 83       	std	Y+7, r25	; 0x07
    4532:	8f e5       	ldi	r24, 0x5F	; 95
    4534:	88 9d       	mul	r24, r8
    4536:	b0 01       	movw	r22, r0
    4538:	89 9d       	mul	r24, r9
    453a:	70 0d       	add	r23, r0
    453c:	11 24       	eor	r1, r1
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    4546:	9b 01       	movw	r18, r22
    4548:	ac 01       	movw	r20, r24
    454a:	6c 81       	ldd	r22, Y+4	; 0x04
    454c:	7d 81       	ldd	r23, Y+5	; 0x05
    454e:	8e 81       	ldd	r24, Y+6	; 0x06
    4550:	9f 81       	ldd	r25, Y+7	; 0x07
    4552:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	48 ec       	ldi	r20, 0xC8	; 200
    455c:	52 e4       	ldi	r21, 0x42	; 66
    455e:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    4562:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    4566:	60 93 8f 20 	sts	0x208F, r22	; 0x80208f <brush2_average_current>
    456a:	70 93 90 20 	sts	0x2090, r23	; 0x802090 <brush2_average_current+0x1>
				log_enqueue_data(BRUSH_1_CURRENT, 1, message);

				brush1_average_current = (brush1_average_current * 95 + brush1_current * 5) / 100;
			}
			else if (seconds == 20 && brush_state == BRUSH_RUNNING)
			{
    456e:	a3 c0       	rjmp	.+326    	; 0x46b6 <main+0x72e>
				message[0] = (uint8_t)brush2_current;
				log_enqueue_data(BRUSH_2_CURRENT, 1, message);

				brush2_average_current = (brush2_average_current * 95 + brush2_current * 5) / 100;
			}
			else if (seconds == 30 && (vacuum_state == VACUUM_RUNNING || vacuum_state == VACUUM_RUNNING_OFF))
    4570:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <seconds>
    4574:	8e 31       	cpi	r24, 0x1E	; 30
    4576:	09 f0       	breq	.+2      	; 0x457a <main+0x5f2>
    4578:	4e c0       	rjmp	.+156    	; 0x4616 <main+0x68e>
    457a:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    457e:	8a 3a       	cpi	r24, 0xAA	; 170
    4580:	19 f0       	breq	.+6      	; 0x4588 <main+0x600>
    4582:	8b 3b       	cpi	r24, 0xBB	; 187
    4584:	09 f0       	breq	.+2      	; 0x4588 <main+0x600>
    4586:	47 c0       	rjmp	.+142    	; 0x4616 <main+0x68e>
			{
				uint8_t message[1];
				message[0] = (uint8_t)vacuum_current;
    4588:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <vacuum_current>
    458c:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <vacuum_current+0x1>
    4590:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <vacuum_current+0x2>
    4594:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <vacuum_current+0x3>
    4598:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    459c:	69 83       	std	Y+1, r22	; 0x01
				log_enqueue_data(VACUUM_CURRENT, 1, message);
    459e:	ae 01       	movw	r20, r28
    45a0:	4f 5f       	subi	r20, 0xFF	; 255
    45a2:	5f 4f       	sbci	r21, 0xFF	; 255
    45a4:	61 e0       	ldi	r22, 0x01	; 1
    45a6:	86 e2       	ldi	r24, 0x26	; 38
    45a8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>

				vacuum_average_current = (vacuum_average_current * 95 + vacuum_current * 5) / 100;
    45ac:	80 90 94 25 	lds	r8, 0x2594	; 0x802594 <vacuum_average_current>
    45b0:	90 90 95 25 	lds	r9, 0x2595	; 0x802595 <vacuum_average_current+0x1>
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	40 ea       	ldi	r20, 0xA0	; 160
    45ba:	50 e4       	ldi	r21, 0x40	; 64
    45bc:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <vacuum_current>
    45c0:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <vacuum_current+0x1>
    45c4:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <vacuum_current+0x2>
    45c8:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <vacuum_current+0x3>
    45cc:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    45d0:	6c 83       	std	Y+4, r22	; 0x04
    45d2:	7d 83       	std	Y+5, r23	; 0x05
    45d4:	8e 83       	std	Y+6, r24	; 0x06
    45d6:	9f 83       	std	Y+7, r25	; 0x07
    45d8:	8f e5       	ldi	r24, 0x5F	; 95
    45da:	88 9d       	mul	r24, r8
    45dc:	b0 01       	movw	r22, r0
    45de:	89 9d       	mul	r24, r9
    45e0:	70 0d       	add	r23, r0
    45e2:	11 24       	eor	r1, r1
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    45ec:	9b 01       	movw	r18, r22
    45ee:	ac 01       	movw	r20, r24
    45f0:	6c 81       	ldd	r22, Y+4	; 0x04
    45f2:	7d 81       	ldd	r23, Y+5	; 0x05
    45f4:	8e 81       	ldd	r24, Y+6	; 0x06
    45f6:	9f 81       	ldd	r25, Y+7	; 0x07
    45f8:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	48 ec       	ldi	r20, 0xC8	; 200
    4602:	52 e4       	ldi	r21, 0x42	; 66
    4604:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    4608:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    460c:	60 93 94 25 	sts	0x2594, r22	; 0x802594 <vacuum_average_current>
    4610:	70 93 95 25 	sts	0x2595, r23	; 0x802595 <vacuum_average_current+0x1>
				log_enqueue_data(BRUSH_2_CURRENT, 1, message);

				brush2_average_current = (brush2_average_current * 95 + brush2_current * 5) / 100;
			}
			else if (seconds == 30 && (vacuum_state == VACUUM_RUNNING || vacuum_state == VACUUM_RUNNING_OFF))
			{
    4614:	50 c0       	rjmp	.+160    	; 0x46b6 <main+0x72e>
				message[0] = (uint8_t)vacuum_current;
				log_enqueue_data(VACUUM_CURRENT, 1, message);

				vacuum_average_current = (vacuum_average_current * 95 + vacuum_current * 5) / 100;
			}
			else if (seconds == 40 && presweep)
    4616:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <seconds>
    461a:	88 32       	cpi	r24, 0x28	; 40
    461c:	09 f0       	breq	.+2      	; 0x4620 <main+0x698>
    461e:	4b c0       	rjmp	.+150    	; 0x46b6 <main+0x72e>
    4620:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <presweep>
    4624:	88 23       	and	r24, r24
    4626:	09 f4       	brne	.+2      	; 0x462a <main+0x6a2>
    4628:	46 c0       	rjmp	.+140    	; 0x46b6 <main+0x72e>
			{
				uint8_t message[1];
				message[0] = (uint8_t)presweep_current;
    462a:	60 91 6b 20 	lds	r22, 0x206B	; 0x80206b <presweep_current>
    462e:	70 91 6c 20 	lds	r23, 0x206C	; 0x80206c <presweep_current+0x1>
    4632:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <presweep_current+0x2>
    4636:	90 91 6e 20 	lds	r25, 0x206E	; 0x80206e <presweep_current+0x3>
    463a:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    463e:	69 83       	std	Y+1, r22	; 0x01
				log_enqueue_data(PRESWEEP_CURRENT, 1, message);
    4640:	ae 01       	movw	r20, r28
    4642:	4f 5f       	subi	r20, 0xFF	; 255
    4644:	5f 4f       	sbci	r21, 0xFF	; 255
    4646:	61 e0       	ldi	r22, 0x01	; 1
    4648:	87 e2       	ldi	r24, 0x27	; 39
    464a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>

				presweep_average_current = (presweep_average_current * 95 + presweep_current * 5) / 100;
    464e:	80 90 7e 25 	lds	r8, 0x257E	; 0x80257e <presweep_average_current>
    4652:	90 90 7f 25 	lds	r9, 0x257F	; 0x80257f <presweep_average_current+0x1>
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	40 ea       	ldi	r20, 0xA0	; 160
    465c:	50 e4       	ldi	r21, 0x40	; 64
    465e:	60 91 6b 20 	lds	r22, 0x206B	; 0x80206b <presweep_current>
    4662:	70 91 6c 20 	lds	r23, 0x206C	; 0x80206c <presweep_current+0x1>
    4666:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <presweep_current+0x2>
    466a:	90 91 6e 20 	lds	r25, 0x206E	; 0x80206e <presweep_current+0x3>
    466e:	0e 94 33 31 	call	0x6266	; 0x6266 <__mulsf3>
    4672:	6c 83       	std	Y+4, r22	; 0x04
    4674:	7d 83       	std	Y+5, r23	; 0x05
    4676:	8e 83       	std	Y+6, r24	; 0x06
    4678:	9f 83       	std	Y+7, r25	; 0x07
    467a:	8f e5       	ldi	r24, 0x5F	; 95
    467c:	88 9d       	mul	r24, r8
    467e:	b0 01       	movw	r22, r0
    4680:	89 9d       	mul	r24, r9
    4682:	70 0d       	add	r23, r0
    4684:	11 24       	eor	r1, r1
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    468e:	9b 01       	movw	r18, r22
    4690:	ac 01       	movw	r20, r24
    4692:	6c 81       	ldd	r22, Y+4	; 0x04
    4694:	7d 81       	ldd	r23, Y+5	; 0x05
    4696:	8e 81       	ldd	r24, Y+6	; 0x06
    4698:	9f 81       	ldd	r25, Y+7	; 0x07
    469a:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	48 ec       	ldi	r20, 0xC8	; 200
    46a4:	52 e4       	ldi	r21, 0x42	; 66
    46a6:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    46aa:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    46ae:	60 93 7e 25 	sts	0x257E, r22	; 0x80257e <presweep_average_current>
    46b2:	70 93 7f 25 	sts	0x257F, r23	; 0x80257f <presweep_average_current+0x1>
			}

			if (update_eeprom_statistics && (brush_state == BRUSH_RUNNING || vacuum_state == VACUUM_RUNNING || (water_pump && brush_state == BRUSH_RUNNING) || (detergent_pump && brush_state == BRUSH_RUNNING) || (presweep_state == ON) || eco_mode))
    46b6:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <update_eeprom_statistics>
    46ba:	88 23       	and	r24, r24
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <main+0x738>
    46be:	4f c0       	rjmp	.+158    	; 0x475e <main+0x7d6>
    46c0:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    46c4:	8a 3a       	cpi	r24, 0xAA	; 170
    46c6:	69 f0       	breq	.+26     	; 0x46e2 <main+0x75a>
    46c8:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <vacuum_state>
    46cc:	8a 3a       	cpi	r24, 0xAA	; 170
    46ce:	49 f0       	breq	.+18     	; 0x46e2 <main+0x75a>
    46d0:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <presweep_state>
    46d4:	81 30       	cpi	r24, 0x01	; 1
    46d6:	29 f0       	breq	.+10     	; 0x46e2 <main+0x75a>
    46d8:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <eco_mode>
    46dc:	88 23       	and	r24, r24
    46de:	09 f4       	brne	.+2      	; 0x46e2 <main+0x75a>
    46e0:	3e c0       	rjmp	.+124    	; 0x475e <main+0x7d6>
			{
				cli();
    46e2:	f8 94       	cli
				eeprom_update_byte((uint8_t *)EEP8_BRUSH_MINUTES_ADDR, brush_minutes); //update brush minutes for every one minute 
    46e4:	60 91 76 25 	lds	r22, 0x2576	; 0x802576 <brush_minutes>
    46e8:	80 e7       	ldi	r24, 0x70	; 112
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
				eeprom_busy_wait();
    46f0:	f8 01       	movw	r30, r16
    46f2:	80 81       	ld	r24, Z
    46f4:	88 23       	and	r24, r24
    46f6:	e4 f3       	brlt	.-8      	; 0x46f0 <main+0x768>
				eeprom_update_byte((uint8_t *)EEP8_VACUUM_MINUTES_ADDR, vacuum_minutes); //update vacuum minutes for every one minute 
    46f8:	60 91 a3 20 	lds	r22, 0x20A3	; 0x8020a3 <vacuum_minutes>
    46fc:	81 e7       	ldi	r24, 0x71	; 113
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
				eeprom_busy_wait();
    4704:	f8 01       	movw	r30, r16
    4706:	80 81       	ld	r24, Z
    4708:	88 23       	and	r24, r24
    470a:	e4 f3       	brlt	.-8      	; 0x4704 <main+0x77c>
				eeprom_update_byte((uint8_t *)EEP8_PRESWEEP_MINUTES_ADDR, presweep_minutes); //update presweep minutes for every one minute 
    470c:	60 91 a8 20 	lds	r22, 0x20A8	; 0x8020a8 <presweep_minutes>
    4710:	82 e7       	ldi	r24, 0x72	; 114
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
				eeprom_busy_wait();
    4718:	f8 01       	movw	r30, r16
    471a:	80 81       	ld	r24, Z
    471c:	88 23       	and	r24, r24
    471e:	e4 f3       	brlt	.-8      	; 0x4718 <main+0x790>
				eeprom_update_byte((uint8_t *)EEP8_ECO_MINUTES_ADDR, eco_minutes); //update Eco minutes for every one minute 
    4720:	60 91 8c 25 	lds	r22, 0x258C	; 0x80258c <eco_minutes>
    4724:	83 e7       	ldi	r24, 0x73	; 115
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
				eeprom_busy_wait();
    472c:	f8 01       	movw	r30, r16
    472e:	80 81       	ld	r24, Z
    4730:	88 23       	and	r24, r24
    4732:	e4 f3       	brlt	.-8      	; 0x472c <main+0x7a4>
				eeprom_update_byte((uint8_t *)EEP8_WATER_PUMP_MINUTES_ADDR, water_pump_minutes); //update water pump minutes for every one minute 
    4734:	60 91 ad 20 	lds	r22, 0x20AD	; 0x8020ad <water_pump_minutes>
    4738:	84 e7       	ldi	r24, 0x74	; 116
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
				eeprom_busy_wait();
    4740:	f8 01       	movw	r30, r16
    4742:	80 81       	ld	r24, Z
    4744:	88 23       	and	r24, r24
    4746:	e4 f3       	brlt	.-8      	; 0x4740 <main+0x7b8>
				eeprom_update_byte((uint8_t *)EEP8_DETERGENT_PUMP_MINUTES, detergent_pump_minutes); //update detergent pump minutes for every one minute 
    4748:	60 91 95 20 	lds	r22, 0x2095	; 0x802095 <detergent_pump_minutes>
    474c:	85 e7       	ldi	r24, 0x75	; 117
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
				eeprom_busy_wait();
    4754:	f8 01       	movw	r30, r16
    4756:	80 81       	ld	r24, Z
    4758:	88 23       	and	r24, r24
    475a:	e4 f3       	brlt	.-8      	; 0x4754 <main+0x7cc>
				sei();
    475c:	78 94       	sei
			}
			update_current = FALSE;
    475e:	10 92 5d 23 	sts	0x235D, r1	; 0x80235d <update_current>
			update_eeprom_statistics = FALSE;
    4762:	10 92 7c 25 	sts	0x257C, r1	; 0x80257c <update_eeprom_statistics>
		}

		//Update the max current measured and log the current battery voltage every 5 minute
		if (update_max_current)
    4766:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <update_max_current>
    476a:	88 23       	and	r24, r24
    476c:	09 f4       	brne	.+2      	; 0x4770 <main+0x7e8>
    476e:	5a cc       	rjmp	.-1868   	; 0x4024 <main+0x9c>
		{
			if (minutes % 5 == 0 && max_brush1_session_current != 0)
    4770:	90 91 89 25 	lds	r25, 0x2589	; 0x802589 <minutes>
    4774:	8d ec       	ldi	r24, 0xCD	; 205
    4776:	98 9f       	mul	r25, r24
    4778:	81 2d       	mov	r24, r1
    477a:	11 24       	eor	r1, r1
    477c:	86 95       	lsr	r24
    477e:	86 95       	lsr	r24
    4780:	28 2f       	mov	r18, r24
    4782:	22 0f       	add	r18, r18
    4784:	22 0f       	add	r18, r18
    4786:	82 0f       	add	r24, r18
    4788:	98 13       	cpse	r25, r24
    478a:	0d c0       	rjmp	.+26     	; 0x47a6 <main+0x81e>
    478c:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <max_brush1_session_current>
    4790:	88 23       	and	r24, r24
    4792:	49 f0       	breq	.+18     	; 0x47a6 <main+0x81e>
			{
				uint8_t message[1];
				message[0] = (uint8_t)max_brush1_session_current;
    4794:	89 83       	std	Y+1, r24	; 0x01
				log_enqueue_data(MAX_BRUSH_1_CURRENT, 1, message);
    4796:	ae 01       	movw	r20, r28
    4798:	4f 5f       	subi	r20, 0xFF	; 255
    479a:	5f 4f       	sbci	r21, 0xFF	; 255
    479c:	61 e0       	ldi	r22, 0x01	; 1
    479e:	84 e3       	ldi	r24, 0x34	; 52
    47a0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>

		//Update the max current measured and log the current battery voltage every 5 minute
		if (update_max_current)
		{
			if (minutes % 5 == 0 && max_brush1_session_current != 0)
			{
    47a4:	53 c0       	rjmp	.+166    	; 0x484c <main+0x8c4>
				uint8_t message[1];
				message[0] = (uint8_t)max_brush1_session_current;
				log_enqueue_data(MAX_BRUSH_1_CURRENT, 1, message);
			}
			else if (minutes % 5 == 1 && max_brush2_session_current != 0)
    47a6:	90 91 89 25 	lds	r25, 0x2589	; 0x802589 <minutes>
    47aa:	8d ec       	ldi	r24, 0xCD	; 205
    47ac:	98 9f       	mul	r25, r24
    47ae:	81 2d       	mov	r24, r1
    47b0:	11 24       	eor	r1, r1
    47b2:	86 95       	lsr	r24
    47b4:	86 95       	lsr	r24
    47b6:	28 2f       	mov	r18, r24
    47b8:	22 0f       	add	r18, r18
    47ba:	22 0f       	add	r18, r18
    47bc:	82 0f       	add	r24, r18
    47be:	98 1b       	sub	r25, r24
    47c0:	91 30       	cpi	r25, 0x01	; 1
    47c2:	69 f4       	brne	.+26     	; 0x47de <main+0x856>
    47c4:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <max_brush2_session_current>
    47c8:	88 23       	and	r24, r24
    47ca:	49 f0       	breq	.+18     	; 0x47de <main+0x856>
			{
				uint8_t message[1];
				message[0] = (uint8_t)max_brush2_session_current;
    47cc:	89 83       	std	Y+1, r24	; 0x01
				log_enqueue_data(MAX_BRUSH_2_CURRENT, 1, message);
    47ce:	ae 01       	movw	r20, r28
    47d0:	4f 5f       	subi	r20, 0xFF	; 255
    47d2:	5f 4f       	sbci	r21, 0xFF	; 255
    47d4:	61 e0       	ldi	r22, 0x01	; 1
    47d6:	85 e3       	ldi	r24, 0x35	; 53
    47d8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>
				uint8_t message[1];
				message[0] = (uint8_t)max_brush1_session_current;
				log_enqueue_data(MAX_BRUSH_1_CURRENT, 1, message);
			}
			else if (minutes % 5 == 1 && max_brush2_session_current != 0)
			{
    47dc:	37 c0       	rjmp	.+110    	; 0x484c <main+0x8c4>
				uint8_t message[1];
				message[0] = (uint8_t)max_brush2_session_current;
				log_enqueue_data(MAX_BRUSH_2_CURRENT, 1, message);
			}
			else if (minutes % 5 == 2 && max_vacuum_session_current != 0)
    47de:	90 91 89 25 	lds	r25, 0x2589	; 0x802589 <minutes>
    47e2:	8d ec       	ldi	r24, 0xCD	; 205
    47e4:	98 9f       	mul	r25, r24
    47e6:	81 2d       	mov	r24, r1
    47e8:	11 24       	eor	r1, r1
    47ea:	86 95       	lsr	r24
    47ec:	86 95       	lsr	r24
    47ee:	28 2f       	mov	r18, r24
    47f0:	22 0f       	add	r18, r18
    47f2:	22 0f       	add	r18, r18
    47f4:	82 0f       	add	r24, r18
    47f6:	98 1b       	sub	r25, r24
    47f8:	92 30       	cpi	r25, 0x02	; 2
    47fa:	69 f4       	brne	.+26     	; 0x4816 <main+0x88e>
    47fc:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <max_vacuum_session_current>
    4800:	88 23       	and	r24, r24
    4802:	49 f0       	breq	.+18     	; 0x4816 <main+0x88e>
			{
				uint8_t message[1];
				message[0] = (uint8_t)max_vacuum_session_current;
    4804:	89 83       	std	Y+1, r24	; 0x01
				log_enqueue_data(MAX_VACUUM_CURRENT, 1, message);
    4806:	ae 01       	movw	r20, r28
    4808:	4f 5f       	subi	r20, 0xFF	; 255
    480a:	5f 4f       	sbci	r21, 0xFF	; 255
    480c:	61 e0       	ldi	r22, 0x01	; 1
    480e:	86 e3       	ldi	r24, 0x36	; 54
    4810:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>
				uint8_t message[1];
				message[0] = (uint8_t)max_brush2_session_current;
				log_enqueue_data(MAX_BRUSH_2_CURRENT, 1, message);
			}
			else if (minutes % 5 == 2 && max_vacuum_session_current != 0)
			{
    4814:	1b c0       	rjmp	.+54     	; 0x484c <main+0x8c4>
				uint8_t message[1];
				message[0] = (uint8_t)max_vacuum_session_current;
				log_enqueue_data(MAX_VACUUM_CURRENT, 1, message);
			}
			else if (minutes % 5 == 3 && max_presweep_session_current != 0)
    4816:	90 91 89 25 	lds	r25, 0x2589	; 0x802589 <minutes>
    481a:	8d ec       	ldi	r24, 0xCD	; 205
    481c:	98 9f       	mul	r25, r24
    481e:	81 2d       	mov	r24, r1
    4820:	11 24       	eor	r1, r1
    4822:	86 95       	lsr	r24
    4824:	86 95       	lsr	r24
    4826:	28 2f       	mov	r18, r24
    4828:	22 0f       	add	r18, r18
    482a:	22 0f       	add	r18, r18
    482c:	82 0f       	add	r24, r18
    482e:	98 1b       	sub	r25, r24
    4830:	93 30       	cpi	r25, 0x03	; 3
    4832:	61 f4       	brne	.+24     	; 0x484c <main+0x8c4>
    4834:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <max_presweep_session_current>
    4838:	88 23       	and	r24, r24
    483a:	41 f0       	breq	.+16     	; 0x484c <main+0x8c4>
			{
				uint8_t message[1];
				message[0] = (uint8_t)max_presweep_session_current;
    483c:	89 83       	std	Y+1, r24	; 0x01
				log_enqueue_data(MAX_PRESWEEP_CURRENT, 1, message);
    483e:	ae 01       	movw	r20, r28
    4840:	4f 5f       	subi	r20, 0xFF	; 255
    4842:	5f 4f       	sbci	r21, 0xFF	; 255
    4844:	61 e0       	ldi	r22, 0x01	; 1
    4846:	87 e3       	ldi	r24, 0x37	; 55
    4848:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>
			}
			if (minutes % 5 == 4)
    484c:	90 91 89 25 	lds	r25, 0x2589	; 0x802589 <minutes>
    4850:	8d ec       	ldi	r24, 0xCD	; 205
    4852:	98 9f       	mul	r25, r24
    4854:	81 2d       	mov	r24, r1
    4856:	11 24       	eor	r1, r1
    4858:	86 95       	lsr	r24
    485a:	86 95       	lsr	r24
    485c:	28 2f       	mov	r18, r24
    485e:	22 0f       	add	r18, r18
    4860:	22 0f       	add	r18, r18
    4862:	82 0f       	add	r24, r18
    4864:	98 1b       	sub	r25, r24
    4866:	94 30       	cpi	r25, 0x04	; 4
    4868:	71 f5       	brne	.+92     	; 0x48c6 <main+0x93e>
			{
				//Convert total provided to voltage value
				uint16_t voltage = ((float)battery_total - 195.0);
    486a:	60 91 4c 20 	lds	r22, 0x204C	; 0x80204c <battery_total>
    486e:	70 91 4d 20 	lds	r23, 0x204D	; 0x80204d <battery_total+0x1>
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	43 e4       	ldi	r20, 0x43	; 67
    4880:	53 e4       	ldi	r21, 0x43	; 67
    4882:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <__subsf3>
    4886:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    488a:	4b 01       	movw	r8, r22
    488c:	5c 01       	movw	r10, r24
				uint8_t message[2];
				message[0] = (uint8_t)(voltage / 100);
    488e:	9b 01       	movw	r18, r22
    4890:	36 95       	lsr	r19
    4892:	27 95       	ror	r18
    4894:	36 95       	lsr	r19
    4896:	27 95       	ror	r18
    4898:	ab e7       	ldi	r26, 0x7B	; 123
    489a:	b4 e1       	ldi	r27, 0x14	; 20
    489c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    48a0:	96 95       	lsr	r25
    48a2:	87 95       	ror	r24
    48a4:	89 83       	std	Y+1, r24	; 0x01
				message[1] = (uint8_t)(voltage % 100);
    48a6:	44 e6       	ldi	r20, 0x64	; 100
    48a8:	48 9f       	mul	r20, r24
    48aa:	90 01       	movw	r18, r0
    48ac:	49 9f       	mul	r20, r25
    48ae:	30 0d       	add	r19, r0
    48b0:	11 24       	eor	r1, r1
    48b2:	82 1a       	sub	r8, r18
    48b4:	93 0a       	sbc	r9, r19
    48b6:	8a 82       	std	Y+2, r8	; 0x02
				log_enqueue_data(BATTERY_VOLTAGE_EVENT, 2, message);
    48b8:	ae 01       	movw	r20, r28
    48ba:	4f 5f       	subi	r20, 0xFF	; 255
    48bc:	5f 4f       	sbci	r21, 0xFF	; 255
    48be:	62 e0       	ldi	r22, 0x02	; 2
    48c0:	87 e1       	ldi	r24, 0x17	; 23
    48c2:	0e 94 da 12 	call	0x25b4	; 0x25b4 <log_enqueue_data>
			}

			update_max_current = FALSE;
    48c6:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <update_max_current>
    48ca:	9a cb       	rjmp	.-2252   	; 0x4000 <main+0x78>
				message[0] = (uint8_t)brush1_current;
				log_enqueue_data(BRUSH_1_CURRENT, 1, message);

				brush1_average_current = (brush1_average_current * 95 + brush1_current * 5) / 100;
			}
			else if (seconds == 20 && brush_state == BRUSH_RUNNING)
    48cc:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <seconds>
    48d0:	4f ce       	rjmp	.-866    	; 0x4570 <main+0x5e8>

000048d2 <__vector_13>:
}


//TWIE Master Interrupt vector
ISR(TWIC_TWIM_vect)
{
    48d2:	1f 92       	push	r1
    48d4:	0f 92       	push	r0
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	0f 92       	push	r0
    48da:	11 24       	eor	r1, r1
    48dc:	08 b6       	in	r0, 0x38	; 56
    48de:	0f 92       	push	r0
    48e0:	18 be       	out	0x38, r1	; 56
    48e2:	09 b6       	in	r0, 0x39	; 57
    48e4:	0f 92       	push	r0
    48e6:	19 be       	out	0x39, r1	; 57
    48e8:	0b b6       	in	r0, 0x3b	; 59
    48ea:	0f 92       	push	r0
    48ec:	1b be       	out	0x3b, r1	; 59
    48ee:	2f 93       	push	r18
    48f0:	3f 93       	push	r19
    48f2:	4f 93       	push	r20
    48f4:	5f 93       	push	r21
    48f6:	6f 93       	push	r22
    48f8:	7f 93       	push	r23
    48fa:	8f 93       	push	r24
    48fc:	9f 93       	push	r25
    48fe:	af 93       	push	r26
    4900:	bf 93       	push	r27
    4902:	ef 93       	push	r30
    4904:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
    4906:	86 eb       	ldi	r24, 0xB6	; 182
    4908:	90 e2       	ldi	r25, 0x20	; 32
    490a:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <TWI_MasterInterruptHandler>
}
    490e:	ff 91       	pop	r31
    4910:	ef 91       	pop	r30
    4912:	bf 91       	pop	r27
    4914:	af 91       	pop	r26
    4916:	9f 91       	pop	r25
    4918:	8f 91       	pop	r24
    491a:	7f 91       	pop	r23
    491c:	6f 91       	pop	r22
    491e:	5f 91       	pop	r21
    4920:	4f 91       	pop	r20
    4922:	3f 91       	pop	r19
    4924:	2f 91       	pop	r18
    4926:	0f 90       	pop	r0
    4928:	0b be       	out	0x3b, r0	; 59
    492a:	0f 90       	pop	r0
    492c:	09 be       	out	0x39, r0	; 57
    492e:	0f 90       	pop	r0
    4930:	08 be       	out	0x38, r0	; 56
    4932:	0f 90       	pop	r0
    4934:	0f be       	out	0x3f, r0	; 63
    4936:	0f 90       	pop	r0
    4938:	1f 90       	pop	r1
    493a:	18 95       	reti

0000493c <set_to_default>:
	}*/
}

void set_to_default(void)
{
	cli();
    493c:	f8 94       	cli
	eeprom_update_byte((uint8_t *)EEP8_VACUUM_SLOW_START, MAX_VACUUM_RAMPUP_TIME); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for vacuum motor
    493e:	6c e0       	ldi	r22, 0x0C	; 12
    4940:	88 e1       	ldi	r24, 0x18	; 24
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
	eeprom_busy_wait();
    4948:	ef ec       	ldi	r30, 0xCF	; 207
    494a:	f1 e0       	ldi	r31, 0x01	; 1
    494c:	80 81       	ld	r24, Z
    494e:	88 23       	and	r24, r24
    4950:	ec f3       	brlt	.-6      	; 0x494c <set_to_default+0x10>
	eeprom_update_byte((uint8_t *)EEP8_BRUSH_SLOW_START, MAX_BRUSH_RAMPUP_TIME); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for brush motor
    4952:	6c e0       	ldi	r22, 0x0C	; 12
    4954:	89 e1       	ldi	r24, 0x19	; 25
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
	eeprom_busy_wait();
    495c:	ef ec       	ldi	r30, 0xCF	; 207
    495e:	f1 e0       	ldi	r31, 0x01	; 1
    4960:	80 81       	ld	r24, Z
    4962:	88 23       	and	r24, r24
    4964:	ec f3       	brlt	.-6      	; 0x4960 <set_to_default+0x24>
	eeprom_update_byte((uint8_t *)EEP8_PRE_SWP_SLOW_START, MAX_PRE_SWP_RAMPUP_TIME); //Number of 250 ms for rampup time ex. value for 5 = 250*5 = 1250 ms rampup time for preswp motor
    4966:	6c e0       	ldi	r22, 0x0C	; 12
    4968:	8a e1       	ldi	r24, 0x1A	; 26
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
	eeprom_busy_wait();
    4970:	ef ec       	ldi	r30, 0xCF	; 207
    4972:	f1 e0       	ldi	r31, 0x01	; 1
    4974:	80 81       	ld	r24, Z
    4976:	88 23       	and	r24, r24
    4978:	ec f3       	brlt	.-6      	; 0x4974 <set_to_default+0x38>

	//Read in the drive motor settings
	vacuum_slow_start = eeprom_read_byte((const uint8_t *)EEP8_VACUUM_SLOW_START);
    497a:	88 e1       	ldi	r24, 0x18	; 24
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <vacuum_slow_start>
    4988:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <vacuum_slow_start+0x1>
	brush_slow_start = eeprom_read_byte((const uint8_t *)EEP8_BRUSH_SLOW_START);
    498c:	89 e1       	ldi	r24, 0x19	; 25
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	80 93 67 23 	sts	0x2367, r24	; 0x802367 <brush_slow_start>
    499a:	90 93 68 23 	sts	0x2368, r25	; 0x802368 <brush_slow_start+0x1>
	pre_swp_slow_start = eeprom_read_byte((const uint8_t *)EEP8_PRE_SWP_SLOW_START);
    499e:	8a e1       	ldi	r24, 0x1A	; 26
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <pre_swp_slow_start>
    49ac:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <pre_swp_slow_start+0x1>


	eeprom_read_block((void *)A2_serial_num, (const void*)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    49b0:	4e e0       	ldi	r20, 0x0E	; 14
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	60 e4       	ldi	r22, 0x40	; 64
    49b6:	70 e0       	ldi	r23, 0x00	; 0
    49b8:	84 e2       	ldi	r24, 0x24	; 36
    49ba:	90 e2       	ldi	r25, 0x20	; 32
    49bc:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <eeprom_read_block>
	sei();
    49c0:	78 94       	sei
    49c2:	08 95       	ret

000049c4 <initialize_RB_settings>:
 */

#include "RB_settings.h"

void initialize_RB_settings(void)
{
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	cd b7       	in	r28, 0x3d	; 61
    49ca:	de b7       	in	r29, 0x3e	; 62
    49cc:	2f 97       	sbiw	r28, 0x0f	; 15
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	de bf       	out	0x3e, r29	; 62
	//Check if the device settings have ever been set
	//Usually only needs to do this first time powering on
	if (eeprom_read_byte((const uint8_t *)EEP8_DEVICE_SETTINGS_SET_ADDR) != DEVICE_SETTINGS_SET)
    49d2:	80 e2       	ldi	r24, 0x20	; 32
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    49da:	8a 3a       	cpi	r24, 0xAA	; 170
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <initialize_RB_settings+0x1c>
    49de:	68 c0       	rjmp	.+208    	; 0x4ab0 <initialize_RB_settings+0xec>
	{
		set_to_default();
    49e0:	0e 94 9e 24 	call	0x493c	; 0x493c <set_to_default>
		eeprom_update_byte((uint8_t *)EEP8_DEVICE_SETTINGS_SET_ADDR, DEVICE_SETTINGS_SET);
    49e4:	6a ea       	ldi	r22, 0xAA	; 170
    49e6:	80 e2       	ldi	r24, 0x20	; 32
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    49ee:	ef ec       	ldi	r30, 0xCF	; 207
    49f0:	f1 e0       	ldi	r31, 0x01	; 1
    49f2:	80 81       	ld	r24, Z
    49f4:	88 23       	and	r24, r24
    49f6:	ec f3       	brlt	.-6      	; 0x49f2 <initialize_RB_settings+0x2e>

		uint8_t temp[A2_SERIAL_NUM_LEN + 1] = "RV000000000000";
    49f8:	8f e0       	ldi	r24, 0x0F	; 15
    49fa:	e5 e1       	ldi	r30, 0x15	; 21
    49fc:	f0 e2       	ldi	r31, 0x20	; 32
    49fe:	de 01       	movw	r26, r28
    4a00:	11 96       	adiw	r26, 0x01	; 1
    4a02:	01 90       	ld	r0, Z+
    4a04:	0d 92       	st	X+, r0
    4a06:	8a 95       	dec	r24
    4a08:	e1 f7       	brne	.-8      	; 0x4a02 <initialize_RB_settings+0x3e>
		eeprom_update_block((const void*)temp, (void *)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    4a0a:	4e e0       	ldi	r20, 0x0E	; 14
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	60 e4       	ldi	r22, 0x40	; 64
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	ce 01       	movw	r24, r28
    4a14:	01 96       	adiw	r24, 0x01	; 1
    4a16:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_update_block>
		eeprom_busy_wait();
    4a1a:	ef ec       	ldi	r30, 0xCF	; 207
    4a1c:	f1 e0       	ldi	r31, 0x01	; 1
    4a1e:	80 81       	ld	r24, Z
    4a20:	88 23       	and	r24, r24
    4a22:	ec f3       	brlt	.-6      	; 0x4a1e <initialize_RB_settings+0x5a>

		eeprom_update_byte((uint8_t *)EEP8_BRUSH_MINUTES_ADDR, 0); //update brush minutes as zero while first time powering on the board
    4a24:	60 e0       	ldi	r22, 0x00	; 0
    4a26:	80 e7       	ldi	r24, 0x70	; 112
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    4a2e:	ef ec       	ldi	r30, 0xCF	; 207
    4a30:	f1 e0       	ldi	r31, 0x01	; 1
    4a32:	80 81       	ld	r24, Z
    4a34:	88 23       	and	r24, r24
    4a36:	ec f3       	brlt	.-6      	; 0x4a32 <initialize_RB_settings+0x6e>
		eeprom_update_byte((uint8_t *)EEP8_VACUUM_MINUTES_ADDR, 0); //update vacuum minutes as zero while first time powering on the board
    4a38:	60 e0       	ldi	r22, 0x00	; 0
    4a3a:	81 e7       	ldi	r24, 0x71	; 113
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    4a42:	ef ec       	ldi	r30, 0xCF	; 207
    4a44:	f1 e0       	ldi	r31, 0x01	; 1
    4a46:	80 81       	ld	r24, Z
    4a48:	88 23       	and	r24, r24
    4a4a:	ec f3       	brlt	.-6      	; 0x4a46 <initialize_RB_settings+0x82>
		eeprom_update_byte((uint8_t *)EEP8_PRESWEEP_MINUTES_ADDR, 0); //update presweep minutes as zero while first time powering on the board
    4a4c:	60 e0       	ldi	r22, 0x00	; 0
    4a4e:	82 e7       	ldi	r24, 0x72	; 114
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    4a56:	ef ec       	ldi	r30, 0xCF	; 207
    4a58:	f1 e0       	ldi	r31, 0x01	; 1
    4a5a:	80 81       	ld	r24, Z
    4a5c:	88 23       	and	r24, r24
    4a5e:	ec f3       	brlt	.-6      	; 0x4a5a <initialize_RB_settings+0x96>
		eeprom_update_byte((uint8_t *)EEP8_ECO_MINUTES_ADDR, 0); //update Eco minutes as zero while first time powering on the board
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	83 e7       	ldi	r24, 0x73	; 115
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    4a6a:	ef ec       	ldi	r30, 0xCF	; 207
    4a6c:	f1 e0       	ldi	r31, 0x01	; 1
    4a6e:	80 81       	ld	r24, Z
    4a70:	88 23       	and	r24, r24
    4a72:	ec f3       	brlt	.-6      	; 0x4a6e <initialize_RB_settings+0xaa>
		eeprom_update_byte((uint8_t *)EEP8_WATER_PUMP_MINUTES_ADDR, 0); //update water pump minutes as zero while first time powering on the board
    4a74:	60 e0       	ldi	r22, 0x00	; 0
    4a76:	84 e7       	ldi	r24, 0x74	; 116
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    4a7e:	ef ec       	ldi	r30, 0xCF	; 207
    4a80:	f1 e0       	ldi	r31, 0x01	; 1
    4a82:	80 81       	ld	r24, Z
    4a84:	88 23       	and	r24, r24
    4a86:	ec f3       	brlt	.-6      	; 0x4a82 <initialize_RB_settings+0xbe>
		eeprom_update_byte((uint8_t *)EEP8_DETERGENT_PUMP_MINUTES, 0); //update detergent pump minutes for as zero while first time powering on the board
    4a88:	60 e0       	ldi	r22, 0x00	; 0
    4a8a:	85 e7       	ldi	r24, 0x75	; 117
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
		eeprom_busy_wait();
    4a92:	ef ec       	ldi	r30, 0xCF	; 207
    4a94:	f1 e0       	ldi	r31, 0x01	; 1
    4a96:	80 81       	ld	r24, Z
    4a98:	88 23       	and	r24, r24
    4a9a:	ec f3       	brlt	.-6      	; 0x4a96 <initialize_RB_settings+0xd2>

		//Read in A2 serial number
		eeprom_read_block((void *)A2_serial_num, (const void*)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    4a9c:	4e e0       	ldi	r20, 0x0E	; 14
    4a9e:	50 e0       	ldi	r21, 0x00	; 0
    4aa0:	60 e4       	ldi	r22, 0x40	; 64
    4aa2:	70 e0       	ldi	r23, 0x00	; 0
    4aa4:	84 e2       	ldi	r24, 0x24	; 36
    4aa6:	90 e2       	ldi	r25, 0x20	; 32
    4aa8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <eeprom_read_block>
		A2_serial_num[A2_SERIAL_NUM_LEN] = '\0';
    4aac:	10 92 32 20 	sts	0x2032, r1	; 0x802032 <__data_end+0xe>
	}

	//Read in serial number
	eeprom_read_block((void *)A2_serial_num, (const void*)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    4ab0:	4e e0       	ldi	r20, 0x0E	; 14
    4ab2:	50 e0       	ldi	r21, 0x00	; 0
    4ab4:	60 e4       	ldi	r22, 0x40	; 64
    4ab6:	70 e0       	ldi	r23, 0x00	; 0
    4ab8:	84 e2       	ldi	r24, 0x24	; 36
    4aba:	90 e2       	ldi	r25, 0x20	; 32
    4abc:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <eeprom_read_block>
	if (A2_serial_num[0] != 0x52)// || A2_serial_num[0] > 0x39)
    4ac0:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
    4ac4:	82 35       	cpi	r24, 0x52	; 82
    4ac6:	b9 f0       	breq	.+46     	; 0x4af6 <initialize_RB_settings+0x132>
	{
		uint8_t temp[A2_SERIAL_NUM_LEN + 1] = "RV000000000000";
    4ac8:	8f e0       	ldi	r24, 0x0F	; 15
    4aca:	e5 e1       	ldi	r30, 0x15	; 21
    4acc:	f0 e2       	ldi	r31, 0x20	; 32
    4ace:	de 01       	movw	r26, r28
    4ad0:	11 96       	adiw	r26, 0x01	; 1
    4ad2:	01 90       	ld	r0, Z+
    4ad4:	0d 92       	st	X+, r0
    4ad6:	8a 95       	dec	r24
    4ad8:	e1 f7       	brne	.-8      	; 0x4ad2 <initialize_RB_settings+0x10e>
		eeprom_update_block((const void*)temp, (void *)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    4ada:	4e e0       	ldi	r20, 0x0E	; 14
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	60 e4       	ldi	r22, 0x40	; 64
    4ae0:	70 e0       	ldi	r23, 0x00	; 0
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_update_block>
		eeprom_busy_wait();
    4aea:	ef ec       	ldi	r30, 0xCF	; 207
    4aec:	f1 e0       	ldi	r31, 0x01	; 1
    4aee:	80 81       	ld	r24, Z
    4af0:	88 23       	and	r24, r24
    4af2:	ec f3       	brlt	.-6      	; 0x4aee <initialize_RB_settings+0x12a>
    4af4:	52 c0       	rjmp	.+164    	; 0x4b9a <initialize_RB_settings+0x1d6>
	}
	else if ((A2_serial_num[2] < 0x30 || A2_serial_num[2] > 0x39) || (A2_serial_num[3] < 0x30 || A2_serial_num[3] > 0x39) || (A2_serial_num[4] < 0x30 || A2_serial_num[4] > 0x39) || (A2_serial_num[5] < 0x30 || A2_serial_num[5] > 0x39) || (A2_serial_num[6] < 0x30 || A2_serial_num[6] > 0x39) || (A2_serial_num[7] < 0x30 || A2_serial_num[7] > 0x39) || (A2_serial_num[8] < 0x30 || A2_serial_num[8] > 0x39) || (A2_serial_num[9] < 0x30 || A2_serial_num[9] > 0x39) || (A2_serial_num[10] < 0x30 || A2_serial_num[10] > 0x39) || (A2_serial_num[11] < 0x30 || A2_serial_num[11] > 0x39) || (A2_serial_num[12] < 0x30 || A2_serial_num[12] > 0x39) || (A2_serial_num[13] < 0x30 || A2_serial_num[13] > 0x39))
    4af6:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__data_end+0x2>
    4afa:	80 53       	subi	r24, 0x30	; 48
    4afc:	8a 30       	cpi	r24, 0x0A	; 10
    4afe:	b8 f5       	brcc	.+110    	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b00:	80 91 27 20 	lds	r24, 0x2027	; 0x802027 <__data_end+0x3>
    4b04:	80 53       	subi	r24, 0x30	; 48
    4b06:	8a 30       	cpi	r24, 0x0A	; 10
    4b08:	90 f5       	brcc	.+100    	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b0a:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__data_end+0x4>
    4b0e:	80 53       	subi	r24, 0x30	; 48
    4b10:	8a 30       	cpi	r24, 0x0A	; 10
    4b12:	68 f5       	brcc	.+90     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b14:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <__data_end+0x5>
    4b18:	80 53       	subi	r24, 0x30	; 48
    4b1a:	8a 30       	cpi	r24, 0x0A	; 10
    4b1c:	40 f5       	brcc	.+80     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b1e:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__data_end+0x6>
    4b22:	80 53       	subi	r24, 0x30	; 48
    4b24:	8a 30       	cpi	r24, 0x0A	; 10
    4b26:	18 f5       	brcc	.+70     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b28:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <__data_end+0x7>
    4b2c:	80 53       	subi	r24, 0x30	; 48
    4b2e:	8a 30       	cpi	r24, 0x0A	; 10
    4b30:	f0 f4       	brcc	.+60     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b32:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__data_end+0x8>
    4b36:	80 53       	subi	r24, 0x30	; 48
    4b38:	8a 30       	cpi	r24, 0x0A	; 10
    4b3a:	c8 f4       	brcc	.+50     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b3c:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <__data_end+0x9>
    4b40:	80 53       	subi	r24, 0x30	; 48
    4b42:	8a 30       	cpi	r24, 0x0A	; 10
    4b44:	a0 f4       	brcc	.+40     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b46:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <__data_end+0xa>
    4b4a:	80 53       	subi	r24, 0x30	; 48
    4b4c:	8a 30       	cpi	r24, 0x0A	; 10
    4b4e:	78 f4       	brcc	.+30     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b50:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <__data_end+0xb>
    4b54:	80 53       	subi	r24, 0x30	; 48
    4b56:	8a 30       	cpi	r24, 0x0A	; 10
    4b58:	50 f4       	brcc	.+20     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b5a:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <__data_end+0xc>
    4b5e:	80 53       	subi	r24, 0x30	; 48
    4b60:	8a 30       	cpi	r24, 0x0A	; 10
    4b62:	28 f4       	brcc	.+10     	; 0x4b6e <initialize_RB_settings+0x1aa>
    4b64:	80 91 31 20 	lds	r24, 0x2031	; 0x802031 <__data_end+0xd>
    4b68:	80 53       	subi	r24, 0x30	; 48
    4b6a:	8a 30       	cpi	r24, 0x0A	; 10
    4b6c:	b0 f0       	brcs	.+44     	; 0x4b9a <initialize_RB_settings+0x1d6>
	{
		uint8_t temp[A2_SERIAL_NUM_LEN + 1] = "RV000000000000";
    4b6e:	8f e0       	ldi	r24, 0x0F	; 15
    4b70:	e5 e1       	ldi	r30, 0x15	; 21
    4b72:	f0 e2       	ldi	r31, 0x20	; 32
    4b74:	de 01       	movw	r26, r28
    4b76:	11 96       	adiw	r26, 0x01	; 1
    4b78:	01 90       	ld	r0, Z+
    4b7a:	0d 92       	st	X+, r0
    4b7c:	8a 95       	dec	r24
    4b7e:	e1 f7       	brne	.-8      	; 0x4b78 <initialize_RB_settings+0x1b4>
		eeprom_update_block((const void*)temp, (void *)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    4b80:	4e e0       	ldi	r20, 0x0E	; 14
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	60 e4       	ldi	r22, 0x40	; 64
    4b86:	70 e0       	ldi	r23, 0x00	; 0
    4b88:	ce 01       	movw	r24, r28
    4b8a:	01 96       	adiw	r24, 0x01	; 1
    4b8c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_update_block>
		eeprom_busy_wait();
    4b90:	ef ec       	ldi	r30, 0xCF	; 207
    4b92:	f1 e0       	ldi	r31, 0x01	; 1
    4b94:	80 81       	ld	r24, Z
    4b96:	88 23       	and	r24, r24
    4b98:	ec f3       	brlt	.-6      	; 0x4b94 <initialize_RB_settings+0x1d0>
	}
	eeprom_read_block((void *)A2_serial_num, (const void*)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
    4b9a:	4e e0       	ldi	r20, 0x0E	; 14
    4b9c:	50 e0       	ldi	r21, 0x00	; 0
    4b9e:	60 e4       	ldi	r22, 0x40	; 64
    4ba0:	70 e0       	ldi	r23, 0x00	; 0
    4ba2:	84 e2       	ldi	r24, 0x24	; 36
    4ba4:	90 e2       	ldi	r25, 0x20	; 32
    4ba6:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <eeprom_read_block>
	A2_serial_num[A2_SERIAL_NUM_LEN] = '\0';
    4baa:	10 92 32 20 	sts	0x2032, r1	; 0x802032 <__data_end+0xe>

	//Read in the drive motor settings
	vacuum_slow_start = eeprom_read_byte((const uint8_t *)EEP8_VACUUM_SLOW_START);
    4bae:	88 e1       	ldi	r24, 0x18	; 24
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <vacuum_slow_start>
    4bbc:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <vacuum_slow_start+0x1>
	brush_slow_start = eeprom_read_byte((const uint8_t *)EEP8_BRUSH_SLOW_START);
    4bc0:	89 e1       	ldi	r24, 0x19	; 25
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	80 93 67 23 	sts	0x2367, r24	; 0x802367 <brush_slow_start>
    4bce:	90 93 68 23 	sts	0x2368, r25	; 0x802368 <brush_slow_start+0x1>
	pre_swp_slow_start = eeprom_read_byte((const uint8_t *)EEP8_PRE_SWP_SLOW_START);
    4bd2:	8a e1       	ldi	r24, 0x1A	; 26
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <pre_swp_slow_start>
    4be0:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <pre_swp_slow_start+0x1>


	//Read in the statistics
	brush_minutes = eeprom_read_byte((const uint8_t *)EEP8_BRUSH_MINUTES_ADDR);
    4be4:	80 e7       	ldi	r24, 0x70	; 112
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4bec:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <brush_minutes>
	vacuum_minutes = eeprom_read_byte((const uint8_t *)EEP8_VACUUM_MINUTES_ADDR);
    4bf0:	81 e7       	ldi	r24, 0x71	; 113
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4bf8:	80 93 a3 20 	sts	0x20A3, r24	; 0x8020a3 <vacuum_minutes>
	presweep_minutes = eeprom_read_byte((const uint8_t *)EEP8_PRESWEEP_MINUTES_ADDR);
    4bfc:	82 e7       	ldi	r24, 0x72	; 114
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4c04:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <presweep_minutes>
	eco_minutes = eeprom_read_byte((const uint8_t *)EEP8_ECO_MINUTES_ADDR);
    4c08:	83 e7       	ldi	r24, 0x73	; 115
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4c10:	80 93 8c 25 	sts	0x258C, r24	; 0x80258c <eco_minutes>
	water_pump_minutes = eeprom_read_byte((const uint8_t *)EEP8_WATER_PUMP_MINUTES_ADDR);
    4c14:	84 e7       	ldi	r24, 0x74	; 116
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4c1c:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <water_pump_minutes>
	detergent_pump_minutes = eeprom_read_byte((const uint8_t *)EEP8_DETERGENT_PUMP_MINUTES);
    4c20:	85 e7       	ldi	r24, 0x75	; 117
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	0e 94 00 35 	call	0x6a00	; 0x6a00 <eeprom_read_byte>
    4c28:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <detergent_pump_minutes>
		SRF_cnt = eeprom_read_byte((const uint8_t *) EEP_SRF_cnt_location);
		eeprom_busy_wait();
		SDRF_cnt = eeprom_read_byte((const uint8_t *) EEP_SDRF_cnt_location);
		eeprom_busy_wait();
	}*/
}
    4c2c:	2f 96       	adiw	r28, 0x0f	; 15
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	de bf       	out	0x3e, r29	; 62
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	08 95       	ret

00004c38 <update_brush_slow_start>:
	eeprom_read_block((void *)A2_serial_num, (const void*)EEPxx_A2_SERIAL_NUM, A2_SERIAL_NUM_LEN);
	sei();
}
void update_brush_slow_start(void)
{
	cli();
    4c38:	f8 94       	cli
	eeprom_update_byte((uint8_t *)EEP8_BRUSH_SLOW_START, brush_slow_start);
    4c3a:	60 91 67 23 	lds	r22, 0x2367	; 0x802367 <brush_slow_start>
    4c3e:	89 e1       	ldi	r24, 0x19	; 25
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
	eeprom_busy_wait();
    4c46:	ef ec       	ldi	r30, 0xCF	; 207
    4c48:	f1 e0       	ldi	r31, 0x01	; 1
    4c4a:	80 81       	ld	r24, Z
    4c4c:	88 23       	and	r24, r24
    4c4e:	ec f3       	brlt	.-6      	; 0x4c4a <update_brush_slow_start+0x12>
	sei();
    4c50:	78 94       	sei
    4c52:	08 95       	ret

00004c54 <update_vaccum_slow_start>:
}
void update_vaccum_slow_start(void)
{
	cli();
    4c54:	f8 94       	cli
	eeprom_update_byte((uint8_t *)EEP8_VACUUM_SLOW_START, vacuum_slow_start);
    4c56:	60 91 51 21 	lds	r22, 0x2151	; 0x802151 <vacuum_slow_start>
    4c5a:	88 e1       	ldi	r24, 0x18	; 24
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
	eeprom_busy_wait();
    4c62:	ef ec       	ldi	r30, 0xCF	; 207
    4c64:	f1 e0       	ldi	r31, 0x01	; 1
    4c66:	80 81       	ld	r24, Z
    4c68:	88 23       	and	r24, r24
    4c6a:	ec f3       	brlt	.-6      	; 0x4c66 <update_vaccum_slow_start+0x12>
	sei();
    4c6c:	78 94       	sei
    4c6e:	08 95       	ret

00004c70 <update_pre_swp_slow_start>:
}
void update_pre_swp_slow_start(void)
{
	cli();
    4c70:	f8 94       	cli
	eeprom_update_byte((uint8_t *)EEP8_PRE_SWP_SLOW_START, pre_swp_slow_start);
    4c72:	60 91 92 25 	lds	r22, 0x2592	; 0x802592 <pre_swp_slow_start>
    4c76:	8a e1       	ldi	r24, 0x1A	; 26
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_update_byte>
	eeprom_busy_wait();
    4c7e:	ef ec       	ldi	r30, 0xCF	; 207
    4c80:	f1 e0       	ldi	r31, 0x01	; 1
    4c82:	80 81       	ld	r24, Z
    4c84:	88 23       	and	r24, r24
    4c86:	ec f3       	brlt	.-6      	; 0x4c82 <update_pre_swp_slow_start+0x12>
	sei();
    4c88:	78 94       	sei
    4c8a:	08 95       	ret

00004c8c <initialize_SD_card>:

#ifdef __SIM__
#include <emu_SDCard.h>
#endif // __SIM__
void initialize_SD_card(void)
{
    4c8c:	0f 93       	push	r16
    4c8e:	1f 93       	push	r17
    4c90:	cf 93       	push	r28
    4c92:	df 93       	push	r29
	sd_card_passed = FALSE;
    4c94:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <sd_card_passed>
	PORTD_PIN4CTRL |= PORT_OPC_PULLUP_gc;
    4c98:	e4 e7       	ldi	r30, 0x74	; 116
    4c9a:	f6 e0       	ldi	r31, 0x06	; 6
    4c9c:	80 81       	ld	r24, Z
    4c9e:	88 61       	ori	r24, 0x18	; 24
    4ca0:	80 83       	st	Z, r24
    4ca2:	ca e0       	ldi	r28, 0x0A	; 10
	uint8_t counter = 0;

	//Write at least 74 clocks (each bit is a clock)
	for (uint8_t i = 0; i < 10; i++)
	{
		write_byte_SPI_SD_CAN(0xFF);
    4ca4:	8f ef       	ldi	r24, 0xFF	; 255
    4ca6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4caa:	c1 50       	subi	r28, 0x01	; 1
	PORTD_PIN4CTRL |= PORT_OPC_PULLUP_gc;

	uint8_t counter = 0;

	//Write at least 74 clocks (each bit is a clock)
	for (uint8_t i = 0; i < 10; i++)
    4cac:	d9 f7       	brne	.-10     	; 0x4ca4 <initialize_SD_card+0x18>
	{
		write_byte_SPI_SD_CAN(0xFF);
	}

	SD_CARD_CHIP_SELECT_LOW;
    4cae:	84 e0       	ldi	r24, 0x04	; 4
    4cb0:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4cb4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>

	response = 0xFF;
    4cb8:	8f ef       	ldi	r24, 0xFF	; 255
    4cba:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
    4cbe:	d5 e0       	ldi	r29, 0x05	; 5

	for (uint8_t i = 0; i < 5; i++)
	{
		//Send CMD0 with CRC
		write_byte_SPI_SD_CAN(0x40);
    4cc0:	80 e4       	ldi	r24, 0x40	; 64
    4cc2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x95);
    4cde:	85 e9       	ldi	r24, 0x95	; 149
    4ce0:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4ce4:	01 c0       	rjmp	.+2      	; 0x4ce8 <initialize_SD_card+0x5c>

		//Read R1 response
		do
		{
			response = write_read_byte_SPI_SD_CAN(0xFF);
		} while (response != 0x01 && counter++ < 8);
    4ce6:	c8 2f       	mov	r28, r24
		write_byte_SPI_SD_CAN(0x95);

		//Read R1 response
		do
		{
			response = write_read_byte_SPI_SD_CAN(0xFF);
    4ce8:	8f ef       	ldi	r24, 0xFF	; 255
    4cea:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4cee:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
		} while (response != 0x01 && counter++ < 8);
    4cf2:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4cf6:	81 30       	cpi	r24, 0x01	; 1
    4cf8:	29 f0       	breq	.+10     	; 0x4d04 <initialize_SD_card+0x78>
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	8c 0f       	add	r24, r28
    4cfe:	c8 30       	cpi	r28, 0x08	; 8
    4d00:	90 f3       	brcs	.-28     	; 0x4ce6 <initialize_SD_card+0x5a>
    4d02:	c8 2f       	mov	r28, r24
		if (response == 0x01)
    4d04:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4d08:	81 30       	cpi	r24, 0x01	; 1
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <initialize_SD_card+0x82>
    4d0c:	25 c1       	rjmp	.+586    	; 0x4f58 <initialize_SD_card+0x2cc>
    4d0e:	d1 50       	subi	r29, 0x01	; 1

	SD_CARD_CHIP_SELECT_LOW;

	response = 0xFF;

	for (uint8_t i = 0; i < 5; i++)
    4d10:	b9 f6       	brne	.-82     	; 0x4cc0 <initialize_SD_card+0x34>
    4d12:	22 c1       	rjmp	.+580    	; 0x4f58 <initialize_SD_card+0x2cc>
			break;
	}

	if (response != 0x01)
	{
		SD_CARD_CHIP_SELECT_HIGH;
    4d14:	84 e0       	ldi	r24, 0x04	; 4
    4d16:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4d1a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		return;
    4d1e:	23 c1       	rjmp	.+582    	; 0x4f66 <initialize_SD_card+0x2da>
	}

	for (uint8_t i = 0; i < 5; i++)
	{
		//Send CMD8 with CRC
		write_byte_SPI_SD_CAN(0x48);
    4d20:	88 e4       	ldi	r24, 0x48	; 72
    4d22:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4d2c:	80 e0       	ldi	r24, 0x00	; 0
    4d2e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x01);
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0xAA);
    4d38:	8a ea       	ldi	r24, 0xAA	; 170
    4d3a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x87);
    4d3e:	87 e8       	ldi	r24, 0x87	; 135
    4d40:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4d44:	c9 e0       	ldi	r28, 0x09	; 9

		//Read R7 response
		counter = 0;
		do
		{
			response = write_read_byte_SPI_SD_CAN(0xFF);
    4d46:	8f ef       	ldi	r24, 0xFF	; 255
    4d48:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4d4c:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
		} while (response != 0x01 && counter++ < 8);
    4d50:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4d54:	81 30       	cpi	r24, 0x01	; 1
    4d56:	11 f0       	breq	.+4      	; 0x4d5c <initialize_SD_card+0xd0>
    4d58:	c1 50       	subi	r28, 0x01	; 1
    4d5a:	a9 f7       	brne	.-22     	; 0x4d46 <initialize_SD_card+0xba>
		if (response == 0x01)
    4d5c:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4d60:	81 30       	cpi	r24, 0x01	; 1
    4d62:	61 f5       	brne	.+88     	; 0x4dbc <initialize_SD_card+0x130>
		{
			if (write_read_byte_SPI_SD_CAN(0xFF) != 0x00)
    4d64:	8f ef       	ldi	r24, 0xFF	; 255
    4d66:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4d6a:	88 23       	and	r24, r24
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <initialize_SD_card+0xee>
			{
				SD_CARD_CHIP_SELECT_HIGH;
    4d6e:	84 e0       	ldi	r24, 0x04	; 4
    4d70:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4d74:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
				return;
    4d78:	f6 c0       	rjmp	.+492    	; 0x4f66 <initialize_SD_card+0x2da>
			}
			if (write_read_byte_SPI_SD_CAN(0xFF) != 0x00)
    4d7a:	8f ef       	ldi	r24, 0xFF	; 255
    4d7c:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4d80:	88 23       	and	r24, r24
    4d82:	31 f0       	breq	.+12     	; 0x4d90 <initialize_SD_card+0x104>
			{
				SD_CARD_CHIP_SELECT_HIGH;
    4d84:	84 e0       	ldi	r24, 0x04	; 4
    4d86:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4d8a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
				return;
    4d8e:	eb c0       	rjmp	.+470    	; 0x4f66 <initialize_SD_card+0x2da>
			}
			if (write_read_byte_SPI_SD_CAN(0xFF) != 0x01)
    4d90:	8f ef       	ldi	r24, 0xFF	; 255
    4d92:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	31 f0       	breq	.+12     	; 0x4da6 <initialize_SD_card+0x11a>
			{
				SD_CARD_CHIP_SELECT_HIGH;
    4d9a:	84 e0       	ldi	r24, 0x04	; 4
    4d9c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4da0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
				return;
    4da4:	e0 c0       	rjmp	.+448    	; 0x4f66 <initialize_SD_card+0x2da>
			}
			if (write_read_byte_SPI_SD_CAN(0xFF) != 0xAA)
    4da6:	8f ef       	ldi	r24, 0xFF	; 255
    4da8:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4dac:	8a 3a       	cpi	r24, 0xAA	; 170
    4dae:	31 f0       	breq	.+12     	; 0x4dbc <initialize_SD_card+0x130>
			{
				SD_CARD_CHIP_SELECT_HIGH;
    4db0:	84 e0       	ldi	r24, 0x04	; 4
    4db2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4db6:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
				return;
    4dba:	d5 c0       	rjmp	.+426    	; 0x4f66 <initialize_SD_card+0x2da>
    4dbc:	d1 50       	subi	r29, 0x01	; 1
	{
		SD_CARD_CHIP_SELECT_HIGH;
		return;
	}

	for (uint8_t i = 0; i < 5; i++)
    4dbe:	09 f0       	breq	.+2      	; 0x4dc2 <initialize_SD_card+0x136>
    4dc0:	af cf       	rjmp	.-162    	; 0x4d20 <initialize_SD_card+0x94>
    4dc2:	00 ed       	ldi	r16, 0xD0	; 208
    4dc4:	17 e0       	ldi	r17, 0x07	; 7
	}

	for (uint16_t i = 0; i < 2000; i++)
	{
		//Extra clocks to allow setup time
		write_byte_SPI_SD_CAN(0xFF);
    4dc6:	8f ef       	ldi	r24, 0xFF	; 255
    4dc8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

		//Send CMD55, correct CRC not needed but sent anyway
		write_byte_SPI_SD_CAN(0x77);
    4dcc:	87 e7       	ldi	r24, 0x77	; 119
    4dce:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4de4:	80 e0       	ldi	r24, 0x00	; 0
    4de6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x65);
    4dea:	85 e6       	ldi	r24, 0x65	; 101
    4dec:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4df0:	c9 e0       	ldi	r28, 0x09	; 9
		//Read R2 response
		counter = 0;
		do
		{
			response = write_read_byte_SPI_SD_CAN(0xFF);
    4df2:	8f ef       	ldi	r24, 0xFF	; 255
    4df4:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4df8:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
		} while (response != 0x01 && counter++ < 8);
    4dfc:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4e00:	81 30       	cpi	r24, 0x01	; 1
    4e02:	11 f0       	breq	.+4      	; 0x4e08 <initialize_SD_card+0x17c>
    4e04:	c1 50       	subi	r28, 0x01	; 1
    4e06:	a9 f7       	brne	.-22     	; 0x4df2 <initialize_SD_card+0x166>

		if (response != 0x01)
    4e08:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4e0c:	81 30       	cpi	r24, 0x01	; 1
    4e0e:	99 f5       	brne	.+102    	; 0x4e76 <initialize_SD_card+0x1ea>
			continue;

		//Extra clocks to allow setup time
		write_byte_SPI_SD_CAN(0xFF);
    4e10:	8f ef       	ldi	r24, 0xFF	; 255
    4e12:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

		//Send ACMD41 with HSC arg, correct CRC not needed but sent anyway
		write_byte_SPI_SD_CAN(0x69);
    4e16:	89 e6       	ldi	r24, 0x69	; 105
    4e18:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x40);
    4e1c:	80 e4       	ldi	r24, 0x40	; 64
    4e1e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x00);
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
		write_byte_SPI_SD_CAN(0x77);
    4e34:	87 e7       	ldi	r24, 0x77	; 119
    4e36:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4e3a:	c9 e0       	ldi	r28, 0x09	; 9
		//Read R1 response
		counter = 0;
		do
		{
			response = write_read_byte_SPI_SD_CAN(0xFF);
    4e3c:	8f ef       	ldi	r24, 0xFF	; 255
    4e3e:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4e42:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
		} while (response != 0x01 && response != 0x00 && counter++ < 8);
    4e46:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4e4a:	81 30       	cpi	r24, 0x01	; 1
    4e4c:	31 f0       	breq	.+12     	; 0x4e5a <initialize_SD_card+0x1ce>
    4e4e:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4e52:	88 23       	and	r24, r24
    4e54:	11 f0       	breq	.+4      	; 0x4e5a <initialize_SD_card+0x1ce>
    4e56:	c1 50       	subi	r28, 0x01	; 1
    4e58:	89 f7       	brne	.-30     	; 0x4e3c <initialize_SD_card+0x1b0>
		//0x01 response means try again
		if (response == 0x01)
    4e5a:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4e5e:	81 30       	cpi	r24, 0x01	; 1
    4e60:	51 f0       	breq	.+20     	; 0x4e76 <initialize_SD_card+0x1ea>
		{
			continue;
		}
		//0x00 reponse means passed
		else if (response == 0x00)
    4e62:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4e66:	88 23       	and	r24, r24
    4e68:	51 f0       	breq	.+20     	; 0x4e7e <initialize_SD_card+0x1f2>
			break;
		}
		//Any other command means fail
		else
		{
			SD_CARD_CHIP_SELECT_HIGH;
    4e6a:	84 e0       	ldi	r24, 0x04	; 4
    4e6c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4e70:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
			return;
    4e74:	78 c0       	rjmp	.+240    	; 0x4f66 <initialize_SD_card+0x2da>
    4e76:	01 50       	subi	r16, 0x01	; 1
    4e78:	11 09       	sbc	r17, r1
				return;
			}
		}
	}

	for (uint16_t i = 0; i < 2000; i++)
    4e7a:	09 f0       	breq	.+2      	; 0x4e7e <initialize_SD_card+0x1f2>
    4e7c:	a4 cf       	rjmp	.-184    	; 0x4dc6 <initialize_SD_card+0x13a>
			return;
		}
	}

	//Extra clocks to allow setup time
	write_byte_SPI_SD_CAN(0xFF);
    4e7e:	8f ef       	ldi	r24, 0xFF	; 255
    4e80:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	//Send CMD58, correct CRC not needed but sent anyway
	write_byte_SPI_SD_CAN(0x7A);
    4e84:	8a e7       	ldi	r24, 0x7A	; 122
    4e86:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0x00);
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0x00);
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0x00);
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0x00);
    4e9c:	80 e0       	ldi	r24, 0x00	; 0
    4e9e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0xFD);
    4ea2:	8d ef       	ldi	r24, 0xFD	; 253
    4ea4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4ea8:	c9 e0       	ldi	r28, 0x09	; 9

	//Read R1 response
	counter = 0;
	do
	{
		response = write_read_byte_SPI_SD_CAN(0xFF);
    4eaa:	8f ef       	ldi	r24, 0xFF	; 255
    4eac:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4eb0:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
	} while (response != 0x00 && counter++ < 8);
    4eb4:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4eb8:	88 23       	and	r24, r24
    4eba:	11 f0       	breq	.+4      	; 0x4ec0 <initialize_SD_card+0x234>
    4ebc:	c1 50       	subi	r28, 0x01	; 1
    4ebe:	a9 f7       	brne	.-22     	; 0x4eaa <initialize_SD_card+0x21e>
	//0x00 response means read OCR
	if (response == 0x00)
    4ec0:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4ec4:	81 11       	cpse	r24, r1
    4ec6:	39 c0       	rjmp	.+114    	; 0x4f3a <initialize_SD_card+0x2ae>
	{
		write_read_byte_SPI_SD_CAN(0xFF);
    4ec8:	8f ef       	ldi	r24, 0xFF	; 255
    4eca:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
		write_read_byte_SPI_SD_CAN(0xFF);
    4ece:	8f ef       	ldi	r24, 0xFF	; 255
    4ed0:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
		write_read_byte_SPI_SD_CAN(0xFF);
    4ed4:	8f ef       	ldi	r24, 0xFF	; 255
    4ed6:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
		if (!(write_read_byte_SPI_SD_CAN(0xFF) & 0x02))
    4eda:	8f ef       	ldi	r24, 0xFF	; 255
    4edc:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4ee0:	81 fd       	sbrc	r24, 1
    4ee2:	2b c0       	rjmp	.+86     	; 0x4f3a <initialize_SD_card+0x2ae>
		{
			//Extra clocks to allow setup time
			write_byte_SPI_SD_CAN(0xFF);
    4ee4:	8f ef       	ldi	r24, 0xFF	; 255
    4ee6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

			//Send CMD16 to force block size to 128 bytes
			write_byte_SPI_SD_CAN(0x50);
    4eea:	80 e5       	ldi	r24, 0x50	; 80
    4eec:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
			write_byte_SPI_SD_CAN(0x00);
    4ef0:	80 e0       	ldi	r24, 0x00	; 0
    4ef2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
			write_byte_SPI_SD_CAN(0x00);
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
			write_byte_SPI_SD_CAN(0x00);
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
			write_byte_SPI_SD_CAN(0x02);
    4f02:	82 e0       	ldi	r24, 0x02	; 2
    4f04:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
			write_byte_SPI_SD_CAN(0x00);
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4f0e:	c9 e0       	ldi	r28, 0x09	; 9

			//Read R1 response
			counter = 0;
			do
			{
				response = write_read_byte_SPI_SD_CAN(0xFF);
    4f10:	8f ef       	ldi	r24, 0xFF	; 255
    4f12:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4f16:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
			} while (response != 0x00 && counter++ < 8);
    4f1a:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4f1e:	88 23       	and	r24, r24
    4f20:	11 f0       	breq	.+4      	; 0x4f26 <initialize_SD_card+0x29a>
    4f22:	c1 50       	subi	r28, 0x01	; 1
    4f24:	a9 f7       	brne	.-22     	; 0x4f10 <initialize_SD_card+0x284>
			//0x01 response means success
			if (response != 0x00)
    4f26:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4f2a:	88 23       	and	r24, r24
    4f2c:	31 f0       	breq	.+12     	; 0x4f3a <initialize_SD_card+0x2ae>
			{
				SD_CARD_CHIP_SELECT_HIGH;
    4f2e:	84 e0       	ldi	r24, 0x04	; 4
    4f30:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4f34:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
				return;
    4f38:	16 c0       	rjmp	.+44     	; 0x4f66 <initialize_SD_card+0x2da>
			}
		}
	}
	//Extra clocks to allow setup time
	write_byte_SPI_SD_CAN(0xFF);
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	SD_CARD_CHIP_SELECT_HIGH;
    4f40:	84 e0       	ldi	r24, 0x04	; 4
    4f42:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4f46:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	//Extra clocks so SD card releases MOSI line
	write_byte_SPI_SD_CAN(0xFF);
    4f4a:	8f ef       	ldi	r24, 0xFF	; 255
    4f4c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	sd_card_passed = TRUE;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <sd_card_passed>
    4f56:	07 c0       	rjmp	.+14     	; 0x4f66 <initialize_SD_card+0x2da>
		} while (response != 0x01 && counter++ < 8);
		if (response == 0x01)
			break;
	}

	if (response != 0x01)
    4f58:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4f5c:	81 30       	cpi	r24, 0x01	; 1
    4f5e:	09 f0       	breq	.+2      	; 0x4f62 <initialize_SD_card+0x2d6>
    4f60:	d9 ce       	rjmp	.-590    	; 0x4d14 <initialize_SD_card+0x88>
    4f62:	d5 e0       	ldi	r29, 0x05	; 5
    4f64:	dd ce       	rjmp	.-582    	; 0x4d20 <initialize_SD_card+0x94>
	write_byte_SPI_SD_CAN(0xFF);
	SD_CARD_CHIP_SELECT_HIGH;
	//Extra clocks so SD card releases MOSI line
	write_byte_SPI_SD_CAN(0xFF);
	sd_card_passed = TRUE;
}
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	1f 91       	pop	r17
    4f6c:	0f 91       	pop	r16
    4f6e:	08 95       	ret

00004f70 <write_block_SD>:

uint8_t write_block_SD(uint32_t address)
{
    4f70:	0f 93       	push	r16
    4f72:	1f 93       	push	r17
    4f74:	cf 93       	push	r28
    4f76:	df 93       	push	r29
    4f78:	c6 2f       	mov	r28, r22
    4f7a:	d7 2f       	mov	r29, r23
    4f7c:	18 2f       	mov	r17, r24
    4f7e:	09 2f       	mov	r16, r25
	SD_CARD_CHIP_SELECT_LOW;
    4f80:	84 e0       	ldi	r24, 0x04	; 4
    4f82:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4f86:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	//Make sure sd card is not busy
	while (write_read_byte_SPI_SD_CAN(0xFF) != 0xFF);
    4f8a:	8f ef       	ldi	r24, 0xFF	; 255
    4f8c:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4f90:	8f 3f       	cpi	r24, 0xFF	; 255
    4f92:	d9 f7       	brne	.-10     	; 0x4f8a <write_block_SD+0x1a>
	//Send CMD24 to read block
	write_byte_SPI_SD_CAN(0x58);
    4f94:	88 e5       	ldi	r24, 0x58	; 88
    4f96:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0xFF000000) >> 24));
    4f9a:	80 2f       	mov	r24, r16
    4f9c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0x00FF0000) >> 16));
    4fa0:	81 2f       	mov	r24, r17
    4fa2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0x0000FF00) >> 8));
    4fa6:	8d 2f       	mov	r24, r29
    4fa8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0x000000FF) >> 0));
    4fac:	8c 2f       	mov	r24, r28
    4fae:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0x00);
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    4fb8:	c9 e0       	ldi	r28, 0x09	; 9
    4fba:	d0 e0       	ldi	r29, 0x00	; 0

	//Read R1 response
	uint16_t counter = 0;
	do
	{
		response = write_read_byte_SPI_SD_CAN(0xFF);
    4fbc:	8f ef       	ldi	r24, 0xFF	; 255
    4fbe:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    4fc2:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
    4fc6:	8f e3       	ldi	r24, 0x3F	; 63
    4fc8:	9c e9       	ldi	r25, 0x9C	; 156
    4fca:	01 97       	sbiw	r24, 0x01	; 1
    4fcc:	f1 f7       	brne	.-4      	; 0x4fca <write_block_SD+0x5a>
    4fce:	00 c0       	rjmp	.+0      	; 0x4fd0 <write_block_SD+0x60>
    4fd0:	00 00       	nop
		_delay_ms(5);
	} while (response != 0x00 && counter++ < 8);
    4fd2:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    4fd6:	88 23       	and	r24, r24
    4fd8:	11 f0       	breq	.+4      	; 0x4fde <write_block_SD+0x6e>
    4fda:	21 97       	sbiw	r28, 0x01	; 1
    4fdc:	79 f7       	brne	.-34     	; 0x4fbc <write_block_SD+0x4c>
	//0x00 response means success
	if (response != 0x00)
    4fde:	10 91 37 20 	lds	r17, 0x2037	; 0x802037 <response>
    4fe2:	11 23       	and	r17, r17
    4fe4:	39 f0       	breq	.+14     	; 0x4ff4 <write_block_SD+0x84>
	{
		SD_CARD_CHIP_SELECT_HIGH;
    4fe6:	84 e0       	ldi	r24, 0x04	; 4
    4fe8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    4fec:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		return FALSE;
    4ff0:	10 e0       	ldi	r17, 0x00	; 0
    4ff2:	33 c0       	rjmp	.+102    	; 0x505a <write_block_SD+0xea>
	}

	//Extra clocks to allow setup time
	write_byte_SPI_SD_CAN(0xFF);
    4ff4:	8f ef       	ldi	r24, 0xFF	; 255
    4ff6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0xFF);
    4ffa:	8f ef       	ldi	r24, 0xFF	; 255
    4ffc:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0xFF);
    5000:	8f ef       	ldi	r24, 0xFF	; 255
    5002:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	//Write 0xFE to indicate beginning of data
	write_byte_SPI_SD_CAN(0xFE);
    5006:	8e ef       	ldi	r24, 0xFE	; 254
    5008:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>

	counter = 0;
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	90 e0       	ldi	r25, 0x00	; 0
	do
	{
		response = write_read_byte_SPI_SD_CAN(event_buffer[counter++]);
    5010:	ec 01       	movw	r28, r24
    5012:	21 96       	adiw	r28, 0x01	; 1
    5014:	fc 01       	movw	r30, r24
    5016:	ec 5a       	subi	r30, 0xAC	; 172
    5018:	fe 4d       	sbci	r31, 0xDE	; 222
    501a:	80 81       	ld	r24, Z
    501c:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    5020:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
    5024:	ce 01       	movw	r24, r28
	} while (counter < ENTRY_BYTES_PER_BLOCK);
    5026:	c4 3f       	cpi	r28, 0xF4	; 244
    5028:	d1 40       	sbci	r29, 0x01	; 1
    502a:	91 f7       	brne	.-28     	; 0x5010 <write_block_SD+0xa0>

	do
	{
		response = write_read_byte_SPI_SD_CAN(0xFF);
    502c:	8f ef       	ldi	r24, 0xFF	; 255
    502e:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    5032:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
	} while (response == 0xFF);
    5036:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    503a:	8f 3f       	cpi	r24, 0xFF	; 255
    503c:	b9 f3       	breq	.-18     	; 0x502c <write_block_SD+0xbc>


	//Read data response
	if ((response & 0x1F) != 0x05)
    503e:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    5042:	8f 71       	andi	r24, 0x1F	; 31
    5044:	85 30       	cpi	r24, 0x05	; 5
    5046:	49 f4       	brne	.+18     	; 0x505a <write_block_SD+0xea>
		return FALSE;

	//Extra clocks to allow setup time
	write_byte_SPI_SD_CAN(0xFF);
    5048:	8f ef       	ldi	r24, 0xFF	; 255
    504a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	SD_CARD_CHIP_SELECT_HIGH;
    504e:	84 e0       	ldi	r24, 0x04	; 4
    5050:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    5054:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	return TRUE;
    5058:	11 e0       	ldi	r17, 0x01	; 1
}
    505a:	81 2f       	mov	r24, r17
    505c:	df 91       	pop	r29
    505e:	cf 91       	pop	r28
    5060:	1f 91       	pop	r17
    5062:	0f 91       	pop	r16
    5064:	08 95       	ret

00005066 <read_block_SD>:

uint8_t read_block_SD(uint32_t address)
{
    5066:	0f 93       	push	r16
    5068:	1f 93       	push	r17
    506a:	cf 93       	push	r28
    506c:	df 93       	push	r29
    506e:	c6 2f       	mov	r28, r22
    5070:	d7 2f       	mov	r29, r23
    5072:	18 2f       	mov	r17, r24
    5074:	09 2f       	mov	r16, r25
	SD_CARD_CHIP_SELECT_LOW;
    5076:	84 e0       	ldi	r24, 0x04	; 4
    5078:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    507c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	//Make sure sd card is not busy
	while (write_read_byte_SPI_SD_CAN(0xFF) != 0xFF);
    5080:	8f ef       	ldi	r24, 0xFF	; 255
    5082:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    5086:	8f 3f       	cpi	r24, 0xFF	; 255
    5088:	d9 f7       	brne	.-10     	; 0x5080 <read_block_SD+0x1a>
	//Send CMD17 to read block
	write_byte_SPI_SD_CAN(0x51);
    508a:	81 e5       	ldi	r24, 0x51	; 81
    508c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0xFF000000) >> 24));
    5090:	80 2f       	mov	r24, r16
    5092:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0x00FF0000) >> 16));
    5096:	81 2f       	mov	r24, r17
    5098:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0x0000FF00) >> 8));
    509c:	8d 2f       	mov	r24, r29
    509e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN((uint8_t)((address & 0x000000FF) >> 0));
    50a2:	8c 2f       	mov	r24, r28
    50a4:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	write_byte_SPI_SD_CAN(0x00);
    50a8:	80 e0       	ldi	r24, 0x00	; 0
    50aa:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
    50ae:	c9 e0       	ldi	r28, 0x09	; 9
    50b0:	d0 e0       	ldi	r29, 0x00	; 0

	//Read R1 response
	uint16_t counter = 0;
	do
	{
		response = write_read_byte_SPI_SD_CAN(0xFF);
    50b2:	8f ef       	ldi	r24, 0xFF	; 255
    50b4:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    50b8:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
    50bc:	8f e3       	ldi	r24, 0x3F	; 63
    50be:	9c e9       	ldi	r25, 0x9C	; 156
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <read_block_SD+0x5a>
    50c4:	00 c0       	rjmp	.+0      	; 0x50c6 <read_block_SD+0x60>
    50c6:	00 00       	nop
		_delay_ms(5);
	} while (response != 0x00 && counter++ < 8);
    50c8:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    50cc:	88 23       	and	r24, r24
    50ce:	11 f0       	breq	.+4      	; 0x50d4 <read_block_SD+0x6e>
    50d0:	21 97       	sbiw	r28, 0x01	; 1
    50d2:	79 f7       	brne	.-34     	; 0x50b2 <read_block_SD+0x4c>
	//0x00 response means success
	if (response != 0x00)
    50d4:	10 91 37 20 	lds	r17, 0x2037	; 0x802037 <response>
    50d8:	11 23       	and	r17, r17
    50da:	39 f0       	breq	.+14     	; 0x50ea <read_block_SD+0x84>
	{
		SD_CARD_CHIP_SELECT_HIGH;
    50dc:	84 e0       	ldi	r24, 0x04	; 4
    50de:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    50e2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		return FALSE;
    50e6:	10 e0       	ldi	r17, 0x00	; 0
    50e8:	3c c0       	rjmp	.+120    	; 0x5162 <read_block_SD+0xfc>
    50ea:	c9 e0       	ldi	r28, 0x09	; 9
    50ec:	d0 e0       	ldi	r29, 0x00	; 0
	}

	counter = 0;
	do
	{
		response = write_read_byte_SPI_SD_CAN(0xFF);
    50ee:	8f ef       	ldi	r24, 0xFF	; 255
    50f0:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    50f4:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <response>
    50f8:	8f e3       	ldi	r24, 0x3F	; 63
    50fa:	9c e9       	ldi	r25, 0x9C	; 156
    50fc:	01 97       	sbiw	r24, 0x01	; 1
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <read_block_SD+0x96>
    5100:	00 c0       	rjmp	.+0      	; 0x5102 <read_block_SD+0x9c>
    5102:	00 00       	nop
		_delay_ms(5);
	} while (response != 0xFE && counter++ < 8);
    5104:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    5108:	8e 3f       	cpi	r24, 0xFE	; 254
    510a:	11 f0       	breq	.+4      	; 0x5110 <read_block_SD+0xaa>
    510c:	21 97       	sbiw	r28, 0x01	; 1
    510e:	79 f7       	brne	.-34     	; 0x50ee <read_block_SD+0x88>
	//0xFE response means data will begin
	if (response != 0xFE)
    5110:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <response>
    5114:	8e 3f       	cpi	r24, 0xFE	; 254
    5116:	31 f0       	breq	.+12     	; 0x5124 <read_block_SD+0xbe>
	{
		SD_CARD_CHIP_SELECT_HIGH;
    5118:	84 e0       	ldi	r24, 0x04	; 4
    511a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    511e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		return FALSE;
    5122:	1f c0       	rjmp	.+62     	; 0x5162 <read_block_SD+0xfc>
    5124:	c0 e0       	ldi	r28, 0x00	; 0
    5126:	d0 e0       	ldi	r29, 0x00	; 0
	}

	counter = 0;
	do
	{
		event_buffer[counter++] = write_read_byte_SPI_SD_CAN(0xFF);
    5128:	8e 01       	movw	r16, r28
    512a:	0f 5f       	subi	r16, 0xFF	; 255
    512c:	1f 4f       	sbci	r17, 0xFF	; 255
    512e:	8f ef       	ldi	r24, 0xFF	; 255
    5130:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    5134:	cc 5a       	subi	r28, 0xAC	; 172
    5136:	de 4d       	sbci	r29, 0xDE	; 222
    5138:	88 83       	st	Y, r24
    513a:	e8 01       	movw	r28, r16
	} while (counter < ENTRY_BYTES_PER_BLOCK);
    513c:	04 3f       	cpi	r16, 0xF4	; 244
    513e:	11 40       	sbci	r17, 0x01	; 1
    5140:	99 f7       	brne	.-26     	; 0x5128 <read_block_SD+0xc2>
    5142:	c0 e1       	ldi	r28, 0x10	; 16
    5144:	d0 e0       	ldi	r29, 0x00	; 0

	for (; counter < 516; counter++)
		write_read_byte_SPI_SD_CAN(0xFF);
    5146:	8f ef       	ldi	r24, 0xFF	; 255
    5148:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <write_read_byte_SPI_SD_CAN>
    514c:	21 97       	sbiw	r28, 0x01	; 1
	do
	{
		event_buffer[counter++] = write_read_byte_SPI_SD_CAN(0xFF);
	} while (counter < ENTRY_BYTES_PER_BLOCK);

	for (; counter < 516; counter++)
    514e:	d9 f7       	brne	.-10     	; 0x5146 <read_block_SD+0xe0>
		write_read_byte_SPI_SD_CAN(0xFF);

	//Extra clocks to allow setup time
	write_byte_SPI_SD_CAN(0xFF);
    5150:	8f ef       	ldi	r24, 0xFF	; 255
    5152:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	SD_CARD_CHIP_SELECT_HIGH;
    5156:	84 e0       	ldi	r24, 0x04	; 4
    5158:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    515c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	return TRUE;
    5160:	11 e0       	ldi	r17, 0x01	; 1
}
    5162:	81 2f       	mov	r24, r17
    5164:	df 91       	pop	r29
    5166:	cf 91       	pop	r28
    5168:	1f 91       	pop	r17
    516a:	0f 91       	pop	r16
    516c:	08 95       	ret

0000516e <erase_SD_card>:

//Infinite loop to clear SD card
//Although clearing only the event logging block will work
void erase_SD_card(void)
{
	cli();
    516e:	f8 94       	cli
	clear_event_buffer();
    5170:	0e 94 9a 11 	call	0x2334	; 0x2334 <clear_event_buffer>

	uint16_t counter = 0;
    5174:	c0 e0       	ldi	r28, 0x00	; 0
    5176:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		while (!write_block_SD(counter));
    5178:	be 01       	movw	r22, r28
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <write_block_SD>
    5182:	88 23       	and	r24, r24
    5184:	c9 f3       	breq	.-14     	; 0x5178 <erase_SD_card+0xa>
		counter++;
    5186:	21 96       	adiw	r28, 0x01	; 1
	}
    5188:	f7 cf       	rjmp	.-18     	; 0x5178 <erase_SD_card+0xa>

0000518a <initialize_SPI>:

 //Initializes the SPI bus
void initialize_SPI(void)
{
	//These pins must be setup before enabling SPI
	CAN_CHIP_SELECT_HIGH;
    518a:	e1 e4       	ldi	r30, 0x41	; 65
    518c:	f6 e0       	ldi	r31, 0x06	; 6
    518e:	80 e1       	ldi	r24, 0x10	; 16
    5190:	80 83       	st	Z, r24
    5192:	a5 e4       	ldi	r26, 0x45	; 69
    5194:	b6 e0       	ldi	r27, 0x06	; 6
    5196:	8c 93       	st	X, r24
	SD_CARD_CHIP_SELECT_HIGH;
    5198:	84 e0       	ldi	r24, 0x04	; 4
    519a:	80 83       	st	Z, r24
    519c:	8c 93       	st	X, r24
	PORTC_DIRSET = (1 << SD_CAN_MOSI);
    519e:	80 e2       	ldi	r24, 0x20	; 32
    51a0:	80 83       	st	Z, r24
	PORTC_DIRSET = (1 << SD_CAN_SCK);
    51a2:	80 e8       	ldi	r24, 0x80	; 128
    51a4:	80 83       	st	Z, r24
	//ENABLE - 1 - SPI enabled
	//DORD - 0 - MSB first transmission
	//MASTER - 1 - Master mode on
	//MODE - 00 - Mode 0 transmission
	//PRESCALAR - 10 - Clock speed /64 Combined with clock speed x2 = /32
	SD_CAN_SPI_BUS.CTRL = 0b11010010;
    51a6:	82 ed       	ldi	r24, 0xD2	; 210
    51a8:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    51ac:	08 95       	ret

000051ae <write_byte_SPI_SD_CAN>:
}

//Writes a single byte to SPI bus and waits for the bus to finish processing
void write_byte_SPI_SD_CAN(uint8_t byte)
{
	SD_CAN_SPI_BUS.DATA = byte;
    51ae:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	uint16_t counter = 0;
	while (!(SD_CAN_SPI_BUS.STATUS & 0x80))
    51b2:	89 ee       	ldi	r24, 0xE9	; 233
    51b4:	9d ef       	ldi	r25, 0xFD	; 253
    51b6:	e0 ec       	ldi	r30, 0xC0	; 192
    51b8:	f8 e0       	ldi	r31, 0x08	; 8
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <write_byte_SPI_SD_CAN+0x12>
    51bc:	01 97       	sbiw	r24, 0x01	; 1
	{
#ifndef __SIM__
		counter++;
		//In case SPI is stuck, counter to break out of loop
		if (counter > 65000)
    51be:	19 f0       	breq	.+6      	; 0x51c6 <write_byte_SPI_SD_CAN+0x18>
//Writes a single byte to SPI bus and waits for the bus to finish processing
void write_byte_SPI_SD_CAN(uint8_t byte)
{
	SD_CAN_SPI_BUS.DATA = byte;
	uint16_t counter = 0;
	while (!(SD_CAN_SPI_BUS.STATUS & 0x80))
    51c0:	22 81       	ldd	r18, Z+2	; 0x02
    51c2:	22 23       	and	r18, r18
    51c4:	dc f7       	brge	.-10     	; 0x51bc <write_byte_SPI_SD_CAN+0xe>
    51c6:	08 95       	ret

000051c8 <write_read_byte_SPI_SD_CAN>:
}

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI_SD_CAN(uint8_t _byte)
{
	write_byte_SPI_SD_CAN(_byte);
    51c8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	uint8_t byte = SD_CAN_SPI_BUS.DATA;
    51cc:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	return byte;
}
    51d0:	08 95       	ret

000051d2 <write_bytes_SPI_SD_CAN>:

//Writes the number of specified byte from the array to the SPI bus
void write_bytes_SPI_SD_CAN(uint8_t bytes[], uint8_t num_bytes)
{
    51d2:	0f 93       	push	r16
    51d4:	1f 93       	push	r17
    51d6:	cf 93       	push	r28
    51d8:	df 93       	push	r29
	for (int i = 0; i < num_bytes; i++)
    51da:	66 23       	and	r22, r22
    51dc:	51 f0       	breq	.+20     	; 0x51f2 <write_bytes_SPI_SD_CAN+0x20>
    51de:	8c 01       	movw	r16, r24
    51e0:	ec 01       	movw	r28, r24
    51e2:	06 0f       	add	r16, r22
    51e4:	11 1d       	adc	r17, r1
	{
		write_byte_SPI_SD_CAN(bytes[i]);
    51e6:	89 91       	ld	r24, Y+
    51e8:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
}

//Writes the number of specified byte from the array to the SPI bus
void write_bytes_SPI_SD_CAN(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
    51ec:	c0 17       	cp	r28, r16
    51ee:	d1 07       	cpc	r29, r17
    51f0:	d1 f7       	brne	.-12     	; 0x51e6 <write_bytes_SPI_SD_CAN+0x14>
	{
		write_byte_SPI_SD_CAN(bytes[i]);
	}
}
    51f2:	df 91       	pop	r29
    51f4:	cf 91       	pop	r28
    51f6:	1f 91       	pop	r17
    51f8:	0f 91       	pop	r16
    51fa:	08 95       	ret

000051fc <read_bytes_SPI_SD_CAN>:

//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI_SD_CAN(uint8_t bytes[], uint8_t num_bytes)
{
    51fc:	ef 92       	push	r14
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
	for (int i = 0; i < num_bytes; i++)
    5208:	66 23       	and	r22, r22
    520a:	99 f0       	breq	.+38     	; 0x5232 <read_bytes_SPI_SD_CAN+0x36>
    520c:	8c 01       	movw	r16, r24
    520e:	ec 01       	movw	r28, r24
    5210:	06 0f       	add	r16, r22
    5212:	11 1d       	adc	r17, r1

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI_SD_CAN(uint8_t _byte)
{
	write_byte_SPI_SD_CAN(_byte);
	uint8_t byte = SD_CAN_SPI_BUS.DATA;
    5214:	0f 2e       	mov	r0, r31
    5216:	f0 ec       	ldi	r31, 0xC0	; 192
    5218:	ef 2e       	mov	r14, r31
    521a:	f8 e0       	ldi	r31, 0x08	; 8
    521c:	ff 2e       	mov	r15, r31
    521e:	f0 2d       	mov	r31, r0
}

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI_SD_CAN(uint8_t _byte)
{
	write_byte_SPI_SD_CAN(_byte);
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	0e 94 d7 28 	call	0x51ae	; 0x51ae <write_byte_SPI_SD_CAN>
	uint8_t byte = SD_CAN_SPI_BUS.DATA;
    5226:	f7 01       	movw	r30, r14
    5228:	93 81       	ldd	r25, Z+3	; 0x03
//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI_SD_CAN(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
	{
		bytes[i] = write_read_byte_SPI_SD_CAN(0x00);
    522a:	99 93       	st	Y+, r25
}

//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI_SD_CAN(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
    522c:	c0 17       	cp	r28, r16
    522e:	d1 07       	cpc	r29, r17
    5230:	b9 f7       	brne	.-18     	; 0x5220 <read_bytes_SPI_SD_CAN+0x24>
	{
		bytes[i] = write_read_byte_SPI_SD_CAN(0x00);
	}
    5232:	df 91       	pop	r29
    5234:	cf 91       	pop	r28
    5236:	1f 91       	pop	r17
    5238:	0f 91       	pop	r16
    523a:	ff 90       	pop	r15
    523c:	ef 90       	pop	r14
    523e:	08 95       	ret

00005240 <initialize_timers>:
}

void stop_100_ms_timer(void)
{
	TCE1.CTRLA = 0;
	TCE1.INTCTRLB = 0;
    5240:	e0 e0       	ldi	r30, 0x00	; 0
    5242:	f9 e0       	ldi	r31, 0x09	; 9
    5244:	87 e0       	ldi	r24, 0x07	; 7
    5246:	80 83       	st	Z, r24
    5248:	91 e0       	ldi	r25, 0x01	; 1
    524a:	97 83       	std	Z+7, r25	; 0x07
    524c:	22 e1       	ldi	r18, 0x12	; 18
    524e:	3a e7       	ldi	r19, 0x7A	; 122
    5250:	20 a7       	std	Z+40, r18	; 0x28
    5252:	31 a7       	std	Z+41, r19	; 0x29
    5254:	20 e1       	ldi	r18, 0x10	; 16
    5256:	20 93 b1 20 	sts	0x20B1, r18	; 0x8020b1 <event_counter>
    525a:	23 e0       	ldi	r18, 0x03	; 3
    525c:	20 93 43 00 	sts	0x0043, r18	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
    5260:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    5264:	e0 e0       	ldi	r30, 0x00	; 0
    5266:	f8 e0       	ldi	r31, 0x08	; 8
    5268:	80 83       	st	Z, r24
    526a:	97 83       	std	Z+7, r25	; 0x07
    526c:	8d e0       	ldi	r24, 0x0D	; 13
    526e:	93 e0       	ldi	r25, 0x03	; 3
    5270:	80 a7       	std	Z+40, r24	; 0x28
    5272:	91 a7       	std	Z+41, r25	; 0x29
    5274:	08 95       	ret

00005276 <initialize_32Mhz>:
    5276:	e0 e5       	ldi	r30, 0x50	; 80
    5278:	f0 e0       	ldi	r31, 0x00	; 0
    527a:	80 81       	ld	r24, Z
    527c:	82 60       	ori	r24, 0x02	; 2
    527e:	80 83       	st	Z, r24
    5280:	81 81       	ldd	r24, Z+1	; 0x01
    5282:	81 ff       	sbrs	r24, 1
    5284:	fd cf       	rjmp	.-6      	; 0x5280 <initialize_32Mhz+0xa>
    5286:	88 ed       	ldi	r24, 0xD8	; 216
    5288:	84 bf       	out	0x34, r24	; 52
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    5290:	08 95       	ret

00005292 <start_100_ms_timer>:
    5292:	e0 e4       	ldi	r30, 0x40	; 64
    5294:	fa e0       	ldi	r31, 0x0A	; 10
    5296:	87 e0       	ldi	r24, 0x07	; 7
    5298:	80 83       	st	Z, r24
    529a:	81 e0       	ldi	r24, 0x01	; 1
    529c:	87 83       	std	Z+7, r24	; 0x07
    529e:	8a e3       	ldi	r24, 0x3A	; 58
    52a0:	9c e0       	ldi	r25, 0x0C	; 12
    52a2:	80 a7       	std	Z+40, r24	; 0x28
    52a4:	91 a7       	std	Z+41, r25	; 0x29
    52a6:	08 95       	ret

000052a8 <start_25_ms_vacuum_timer>:

void start_25_ms_vacuum_timer(void)
{
	//25 ms timer
	//Enable timer 0 with /1024 prescalar
	TCF0.CTRLA = 0x07;
    52a8:	e0 e0       	ldi	r30, 0x00	; 0
    52aa:	fb e0       	ldi	r31, 0x0B	; 11
    52ac:	87 e0       	ldi	r24, 0x07	; 7
    52ae:	80 83       	st	Z, r24
	//Enable Compare A interrupt
	TCF0.INTCTRLB = 0x01;
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	87 83       	std	Z+7, r24	; 0x07
	TCF0.CCA = 781;
    52b4:	8d e0       	ldi	r24, 0x0D	; 13
    52b6:	93 e0       	ldi	r25, 0x03	; 3
    52b8:	80 a7       	std	Z+40, r24	; 0x28
    52ba:	91 a7       	std	Z+41, r25	; 0x29
    52bc:	08 95       	ret

000052be <start_25_ms_brush_timer>:

void start_25_ms_brush_timer(void)
{
	//25 ms timer
	//Enable timer 0 with /1024 prescalar
	TCC1.CTRLA = 0x07;
    52be:	e0 e4       	ldi	r30, 0x40	; 64
    52c0:	f8 e0       	ldi	r31, 0x08	; 8
    52c2:	87 e0       	ldi	r24, 0x07	; 7
    52c4:	80 83       	st	Z, r24
	//Enable Compare A interrupt
	TCC1.INTCTRLB = 0x01;
    52c6:	81 e0       	ldi	r24, 0x01	; 1
    52c8:	87 83       	std	Z+7, r24	; 0x07
	TCC1.CCA = 781;
    52ca:	8d e0       	ldi	r24, 0x0D	; 13
    52cc:	93 e0       	ldi	r25, 0x03	; 3
    52ce:	80 a7       	std	Z+40, r24	; 0x28
    52d0:	91 a7       	std	Z+41, r25	; 0x29
    52d2:	08 95       	ret

000052d4 <start_25_ms_pre_swp_timer>:

void start_25_ms_pre_swp_timer(void)
{
	//25 ms timer
	//Enable timer 0 with /1024 prescalar
	TCD1.CTRLA = 0x07;
    52d4:	e0 e4       	ldi	r30, 0x40	; 64
    52d6:	f9 e0       	ldi	r31, 0x09	; 9
    52d8:	87 e0       	ldi	r24, 0x07	; 7
    52da:	80 83       	st	Z, r24
	//Enable Compare A interrupt
	TCD1.INTCTRLB = 0x01;
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	87 83       	std	Z+7, r24	; 0x07
	TCD1.CCA = 781;
    52e0:	8d e0       	ldi	r24, 0x0D	; 13
    52e2:	93 e0       	ldi	r25, 0x03	; 3
    52e4:	80 a7       	std	Z+40, r24	; 0x28
    52e6:	91 a7       	std	Z+41, r25	; 0x29
    52e8:	08 95       	ret

000052ea <stop_25_ms_vacuum_timer>:
}

void stop_25_ms_vacuum_timer(void)
{
	TCF0.CTRLA = 0;
    52ea:	e0 e0       	ldi	r30, 0x00	; 0
    52ec:	fb e0       	ldi	r31, 0x0B	; 11
    52ee:	10 82       	st	Z, r1
	TCF0.INTCTRLB = 0;
    52f0:	17 82       	std	Z+7, r1	; 0x07
    52f2:	08 95       	ret

000052f4 <stop_25_ms_brush_timer>:
}

void stop_25_ms_brush_timer(void)
{
	TCC1.CTRLA = 0;
    52f4:	e0 e4       	ldi	r30, 0x40	; 64
    52f6:	f8 e0       	ldi	r31, 0x08	; 8
    52f8:	10 82       	st	Z, r1
	TCC1.INTCTRLB = 0;
    52fa:	17 82       	std	Z+7, r1	; 0x07
    52fc:	08 95       	ret

000052fe <stop_25_ms_pre_swp_timer>:
}

void stop_25_ms_pre_swp_timer(void)
{
	TCD1.CTRLA = 0;
    52fe:	e0 e4       	ldi	r30, 0x40	; 64
    5300:	f9 e0       	ldi	r31, 0x09	; 9
    5302:	10 82       	st	Z, r1
	TCD1.INTCTRLB = 0;
    5304:	17 82       	std	Z+7, r1	; 0x07
    5306:	08 95       	ret

00005308 <send_runtime_timer>:
}

//Send runtimer status to A1
void send_runtime_timer(uint8_t status)
{
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	1f 92       	push	r1
    530e:	cd b7       	in	r28, 0x3d	; 61
    5310:	de b7       	in	r29, 0x3e	; 62
	runtimer_on = status;
    5312:	80 93 67 20 	sts	0x2067, r24	; 0x802067 <runtimer_on>
	uint8_t message[1];
	message[0] = status;
    5316:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(RUNTIMER_CAN, 0, 1, message);
    5318:	9e 01       	movw	r18, r28
    531a:	2f 5f       	subi	r18, 0xFF	; 255
    531c:	3f 4f       	sbci	r19, 0xFF	; 255
    531e:	41 e0       	ldi	r20, 0x01	; 1
    5320:	60 e0       	ldi	r22, 0x00	; 0
    5322:	8d ec       	ldi	r24, 0xCD	; 205
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	0e 94 80 0c 	call	0x1900	; 0x1900 <transmit_CAN>
}
    532a:	0f 90       	pop	r0
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	08 95       	ret

00005332 <__vector_110>:

//25 ms timers to slow start the motors

ISR(_25_MS_VACUUM_TIMER_INT)
{
    5332:	1f 92       	push	r1
    5334:	0f 92       	push	r0
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	0f 92       	push	r0
    533a:	11 24       	eor	r1, r1
    533c:	08 b6       	in	r0, 0x38	; 56
    533e:	0f 92       	push	r0
    5340:	18 be       	out	0x38, r1	; 56
    5342:	09 b6       	in	r0, 0x39	; 57
    5344:	0f 92       	push	r0
    5346:	19 be       	out	0x39, r1	; 57
    5348:	0b b6       	in	r0, 0x3b	; 59
    534a:	0f 92       	push	r0
    534c:	1b be       	out	0x3b, r1	; 59
    534e:	8f 92       	push	r8
    5350:	9f 92       	push	r9
    5352:	af 92       	push	r10
    5354:	bf 92       	push	r11
    5356:	cf 92       	push	r12
    5358:	df 92       	push	r13
    535a:	ef 92       	push	r14
    535c:	ff 92       	push	r15
    535e:	0f 93       	push	r16
    5360:	1f 93       	push	r17
    5362:	2f 93       	push	r18
    5364:	3f 93       	push	r19
    5366:	4f 93       	push	r20
    5368:	5f 93       	push	r21
    536a:	6f 93       	push	r22
    536c:	7f 93       	push	r23
    536e:	8f 93       	push	r24
    5370:	9f 93       	push	r25
    5372:	af 93       	push	r26
    5374:	bf 93       	push	r27
    5376:	cf 93       	push	r28
    5378:	ef 93       	push	r30
    537a:	ff 93       	push	r31
	if (temp_vacuum < vacuum)
    537c:	c0 91 6f 23 	lds	r28, 0x236F	; 0x80236f <vacuum>
    5380:	c0 90 84 25 	lds	r12, 0x2584	; 0x802584 <temp_vacuum>
    5384:	d0 90 85 25 	lds	r13, 0x2585	; 0x802585 <temp_vacuum+0x1>
    5388:	e0 90 86 25 	lds	r14, 0x2586	; 0x802586 <temp_vacuum+0x2>
    538c:	f0 90 87 25 	lds	r15, 0x2587	; 0x802587 <temp_vacuum+0x3>
    5390:	6c 2f       	mov	r22, r28
    5392:	70 e0       	ldi	r23, 0x00	; 0
    5394:	80 e0       	ldi	r24, 0x00	; 0
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__floatsisf>
    539c:	a7 01       	movw	r20, r14
    539e:	96 01       	movw	r18, r12
    53a0:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    53a4:	18 16       	cp	r1, r24
    53a6:	0c f0       	brlt	.+2      	; 0x53aa <__vector_110+0x78>
    53a8:	3f c0       	rjmp	.+126    	; 0x5428 <__vector_110+0xf6>
	{
		if (vacuum_slow_start != 0) //IVA001: Fix for div/0
    53aa:	00 91 51 21 	lds	r16, 0x2151	; 0x802151 <vacuum_slow_start>
    53ae:	10 91 52 21 	lds	r17, 0x2152	; 0x802152 <vacuum_slow_start+0x1>
    53b2:	01 15       	cp	r16, r1
    53b4:	11 05       	cpc	r17, r1
    53b6:	d1 f1       	breq	.+116    	; 0x542c <__vector_110+0xfa>
		{
			temp_vacuum += ((float)vacuum) / vacuum_slow_start / 10.0;
    53b8:	6c 2f       	mov	r22, r28
    53ba:	70 e0       	ldi	r23, 0x00	; 0
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    53c4:	4b 01       	movw	r8, r22
    53c6:	5c 01       	movw	r10, r24
    53c8:	b8 01       	movw	r22, r16
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    53d2:	9b 01       	movw	r18, r22
    53d4:	ac 01       	movw	r20, r24
    53d6:	c5 01       	movw	r24, r10
    53d8:	b4 01       	movw	r22, r8
    53da:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	40 e2       	ldi	r20, 0x20	; 32
    53e4:	51 e4       	ldi	r21, 0x41	; 65
    53e6:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    53ea:	a7 01       	movw	r20, r14
    53ec:	96 01       	movw	r18, r12
    53ee:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    53f2:	60 93 84 25 	sts	0x2584, r22	; 0x802584 <temp_vacuum>
    53f6:	70 93 85 25 	sts	0x2585, r23	; 0x802585 <temp_vacuum+0x1>
    53fa:	80 93 86 25 	sts	0x2586, r24	; 0x802586 <temp_vacuum+0x2>
    53fe:	90 93 87 25 	sts	0x2587, r25	; 0x802587 <temp_vacuum+0x3>
			uint32_t pwm = ((uint32_t)temp_vacuum * 4000) / 100;
			TCE0.CCC = (uint16_t)pwm;
    5402:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    5406:	9b 01       	movw	r18, r22
    5408:	ac 01       	movw	r20, r24
    540a:	a0 ea       	ldi	r26, 0xA0	; 160
    540c:	bf e0       	ldi	r27, 0x0F	; 15
    540e:	0e 94 03 32 	call	0x6406	; 0x6406 <__muluhisi3>
    5412:	24 e6       	ldi	r18, 0x64	; 100
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	40 e0       	ldi	r20, 0x00	; 0
    5418:	50 e0       	ldi	r21, 0x00	; 0
    541a:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    541e:	20 93 2c 0a 	sts	0x0A2C, r18	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
    5422:	30 93 2d 0a 	sts	0x0A2D, r19	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
    5426:	02 c0       	rjmp	.+4      	; 0x542c <__vector_110+0xfa>
		}
	}
	else
	{
		stop_25_ms_vacuum_timer();
    5428:	0e 94 75 29 	call	0x52ea	; 0x52ea <stop_25_ms_vacuum_timer>
	}

	TCF0.CNT = 0;
    542c:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    5430:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
}
    5434:	ff 91       	pop	r31
    5436:	ef 91       	pop	r30
    5438:	cf 91       	pop	r28
    543a:	bf 91       	pop	r27
    543c:	af 91       	pop	r26
    543e:	9f 91       	pop	r25
    5440:	8f 91       	pop	r24
    5442:	7f 91       	pop	r23
    5444:	6f 91       	pop	r22
    5446:	5f 91       	pop	r21
    5448:	4f 91       	pop	r20
    544a:	3f 91       	pop	r19
    544c:	2f 91       	pop	r18
    544e:	1f 91       	pop	r17
    5450:	0f 91       	pop	r16
    5452:	ff 90       	pop	r15
    5454:	ef 90       	pop	r14
    5456:	df 90       	pop	r13
    5458:	cf 90       	pop	r12
    545a:	bf 90       	pop	r11
    545c:	af 90       	pop	r10
    545e:	9f 90       	pop	r9
    5460:	8f 90       	pop	r8
    5462:	0f 90       	pop	r0
    5464:	0b be       	out	0x3b, r0	; 59
    5466:	0f 90       	pop	r0
    5468:	09 be       	out	0x39, r0	; 57
    546a:	0f 90       	pop	r0
    546c:	08 be       	out	0x38, r0	; 56
    546e:	0f 90       	pop	r0
    5470:	0f be       	out	0x3f, r0	; 63
    5472:	0f 90       	pop	r0
    5474:	1f 90       	pop	r1
    5476:	18 95       	reti

00005478 <__vector_22>:

ISR(_25_MS_BRUSH_TIMER_INT)
{
    5478:	1f 92       	push	r1
    547a:	0f 92       	push	r0
    547c:	0f b6       	in	r0, 0x3f	; 63
    547e:	0f 92       	push	r0
    5480:	11 24       	eor	r1, r1
    5482:	08 b6       	in	r0, 0x38	; 56
    5484:	0f 92       	push	r0
    5486:	18 be       	out	0x38, r1	; 56
    5488:	09 b6       	in	r0, 0x39	; 57
    548a:	0f 92       	push	r0
    548c:	19 be       	out	0x39, r1	; 57
    548e:	0b b6       	in	r0, 0x3b	; 59
    5490:	0f 92       	push	r0
    5492:	1b be       	out	0x3b, r1	; 59
    5494:	8f 92       	push	r8
    5496:	9f 92       	push	r9
    5498:	af 92       	push	r10
    549a:	bf 92       	push	r11
    549c:	cf 92       	push	r12
    549e:	df 92       	push	r13
    54a0:	ef 92       	push	r14
    54a2:	ff 92       	push	r15
    54a4:	0f 93       	push	r16
    54a6:	1f 93       	push	r17
    54a8:	2f 93       	push	r18
    54aa:	3f 93       	push	r19
    54ac:	4f 93       	push	r20
    54ae:	5f 93       	push	r21
    54b0:	6f 93       	push	r22
    54b2:	7f 93       	push	r23
    54b4:	8f 93       	push	r24
    54b6:	9f 93       	push	r25
    54b8:	af 93       	push	r26
    54ba:	bf 93       	push	r27
    54bc:	cf 93       	push	r28
    54be:	ef 93       	push	r30
    54c0:	ff 93       	push	r31
	if (temp_brush < brush)
    54c2:	c0 91 5c 23 	lds	r28, 0x235C	; 0x80235c <brush>
    54c6:	c0 90 9f 25 	lds	r12, 0x259F	; 0x80259f <temp_brush>
    54ca:	d0 90 a0 25 	lds	r13, 0x25A0	; 0x8025a0 <temp_brush+0x1>
    54ce:	e0 90 a1 25 	lds	r14, 0x25A1	; 0x8025a1 <temp_brush+0x2>
    54d2:	f0 90 a2 25 	lds	r15, 0x25A2	; 0x8025a2 <temp_brush+0x3>
    54d6:	6c 2f       	mov	r22, r28
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	80 e0       	ldi	r24, 0x00	; 0
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__floatsisf>
    54e2:	a7 01       	movw	r20, r14
    54e4:	96 01       	movw	r18, r12
    54e6:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    54ea:	18 16       	cp	r1, r24
    54ec:	0c f0       	brlt	.+2      	; 0x54f0 <__vector_22+0x78>
    54ee:	41 c0       	rjmp	.+130    	; 0x5572 <__vector_22+0xfa>
	{
		if (brush_slow_start != 0)//IVA001: Fix for div/0
    54f0:	00 91 67 23 	lds	r16, 0x2367	; 0x802367 <brush_slow_start>
    54f4:	10 91 68 23 	lds	r17, 0x2368	; 0x802368 <brush_slow_start+0x1>
    54f8:	01 15       	cp	r16, r1
    54fa:	11 05       	cpc	r17, r1
    54fc:	e1 f1       	breq	.+120    	; 0x5576 <__vector_22+0xfe>
		{
			temp_brush += ((float)brush) / brush_slow_start / 10.0;
    54fe:	6c 2f       	mov	r22, r28
    5500:	70 e0       	ldi	r23, 0x00	; 0
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    550a:	4b 01       	movw	r8, r22
    550c:	5c 01       	movw	r10, r24
    550e:	b8 01       	movw	r22, r16
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    5518:	9b 01       	movw	r18, r22
    551a:	ac 01       	movw	r20, r24
    551c:	c5 01       	movw	r24, r10
    551e:	b4 01       	movw	r22, r8
    5520:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	40 e2       	ldi	r20, 0x20	; 32
    552a:	51 e4       	ldi	r21, 0x41	; 65
    552c:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    5530:	a7 01       	movw	r20, r14
    5532:	96 01       	movw	r18, r12
    5534:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    5538:	60 93 9f 25 	sts	0x259F, r22	; 0x80259f <temp_brush>
    553c:	70 93 a0 25 	sts	0x25A0, r23	; 0x8025a0 <temp_brush+0x1>
    5540:	80 93 a1 25 	sts	0x25A1, r24	; 0x8025a1 <temp_brush+0x2>
    5544:	90 93 a2 25 	sts	0x25A2, r25	; 0x8025a2 <temp_brush+0x3>
			uint32_t pwm = ((uint32_t)temp_brush * 4000) / 100;
			TCE0.CCA = (uint16_t)pwm;
    5548:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    554c:	9b 01       	movw	r18, r22
    554e:	ac 01       	movw	r20, r24
    5550:	a0 ea       	ldi	r26, 0xA0	; 160
    5552:	bf e0       	ldi	r27, 0x0F	; 15
    5554:	0e 94 03 32 	call	0x6406	; 0x6406 <__muluhisi3>
    5558:	24 e6       	ldi	r18, 0x64	; 100
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	40 e0       	ldi	r20, 0x00	; 0
    555e:	50 e0       	ldi	r21, 0x00	; 0
    5560:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    5564:	e0 e0       	ldi	r30, 0x00	; 0
    5566:	fa e0       	ldi	r31, 0x0A	; 10
    5568:	20 a7       	std	Z+40, r18	; 0x28
    556a:	31 a7       	std	Z+41, r19	; 0x29
			TCE0.CCB = (uint16_t)pwm;
    556c:	22 a7       	std	Z+42, r18	; 0x2a
    556e:	33 a7       	std	Z+43, r19	; 0x2b
    5570:	02 c0       	rjmp	.+4      	; 0x5576 <__vector_22+0xfe>
		}
	}
	else
	{
		stop_25_ms_brush_timer();
    5572:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <stop_25_ms_brush_timer>
	}

	TCC1.CNT = 0;
    5576:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    557a:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
}
    557e:	ff 91       	pop	r31
    5580:	ef 91       	pop	r30
    5582:	cf 91       	pop	r28
    5584:	bf 91       	pop	r27
    5586:	af 91       	pop	r26
    5588:	9f 91       	pop	r25
    558a:	8f 91       	pop	r24
    558c:	7f 91       	pop	r23
    558e:	6f 91       	pop	r22
    5590:	5f 91       	pop	r21
    5592:	4f 91       	pop	r20
    5594:	3f 91       	pop	r19
    5596:	2f 91       	pop	r18
    5598:	1f 91       	pop	r17
    559a:	0f 91       	pop	r16
    559c:	ff 90       	pop	r15
    559e:	ef 90       	pop	r14
    55a0:	df 90       	pop	r13
    55a2:	cf 90       	pop	r12
    55a4:	bf 90       	pop	r11
    55a6:	af 90       	pop	r10
    55a8:	9f 90       	pop	r9
    55aa:	8f 90       	pop	r8
    55ac:	0f 90       	pop	r0
    55ae:	0b be       	out	0x3b, r0	; 59
    55b0:	0f 90       	pop	r0
    55b2:	09 be       	out	0x39, r0	; 57
    55b4:	0f 90       	pop	r0
    55b6:	08 be       	out	0x38, r0	; 56
    55b8:	0f 90       	pop	r0
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	0f 90       	pop	r0
    55be:	1f 90       	pop	r1
    55c0:	18 95       	reti

000055c2 <__vector_85>:

ISR(_25_MS_PRE_SWP_TIMER_INT)
{
    55c2:	1f 92       	push	r1
    55c4:	0f 92       	push	r0
    55c6:	0f b6       	in	r0, 0x3f	; 63
    55c8:	0f 92       	push	r0
    55ca:	11 24       	eor	r1, r1
    55cc:	08 b6       	in	r0, 0x38	; 56
    55ce:	0f 92       	push	r0
    55d0:	18 be       	out	0x38, r1	; 56
    55d2:	09 b6       	in	r0, 0x39	; 57
    55d4:	0f 92       	push	r0
    55d6:	19 be       	out	0x39, r1	; 57
    55d8:	0b b6       	in	r0, 0x3b	; 59
    55da:	0f 92       	push	r0
    55dc:	1b be       	out	0x3b, r1	; 59
    55de:	8f 92       	push	r8
    55e0:	9f 92       	push	r9
    55e2:	af 92       	push	r10
    55e4:	bf 92       	push	r11
    55e6:	cf 92       	push	r12
    55e8:	df 92       	push	r13
    55ea:	ef 92       	push	r14
    55ec:	ff 92       	push	r15
    55ee:	0f 93       	push	r16
    55f0:	1f 93       	push	r17
    55f2:	2f 93       	push	r18
    55f4:	3f 93       	push	r19
    55f6:	4f 93       	push	r20
    55f8:	5f 93       	push	r21
    55fa:	6f 93       	push	r22
    55fc:	7f 93       	push	r23
    55fe:	8f 93       	push	r24
    5600:	9f 93       	push	r25
    5602:	af 93       	push	r26
    5604:	bf 93       	push	r27
    5606:	cf 93       	push	r28
    5608:	ef 93       	push	r30
    560a:	ff 93       	push	r31
	if (temp_pre_swp < presweep_dc)
    560c:	c0 91 46 21 	lds	r28, 0x2146	; 0x802146 <presweep_dc>
    5610:	c0 90 85 20 	lds	r12, 0x2085	; 0x802085 <temp_pre_swp>
    5614:	d0 90 86 20 	lds	r13, 0x2086	; 0x802086 <temp_pre_swp+0x1>
    5618:	e0 90 87 20 	lds	r14, 0x2087	; 0x802087 <temp_pre_swp+0x2>
    561c:	f0 90 88 20 	lds	r15, 0x2088	; 0x802088 <temp_pre_swp+0x3>
    5620:	6c 2f       	mov	r22, r28
    5622:	70 e0       	ldi	r23, 0x00	; 0
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__floatsisf>
    562c:	a7 01       	movw	r20, r14
    562e:	96 01       	movw	r18, r12
    5630:	0e 94 2e 31 	call	0x625c	; 0x625c <__gesf2>
    5634:	18 16       	cp	r1, r24
    5636:	0c f0       	brlt	.+2      	; 0x563a <__vector_85+0x78>
    5638:	3f c0       	rjmp	.+126    	; 0x56b8 <__vector_85+0xf6>
	{
		if (pre_swp_slow_start != 0)//IVA001: Fix for div/0
    563a:	00 91 92 25 	lds	r16, 0x2592	; 0x802592 <pre_swp_slow_start>
    563e:	10 91 93 25 	lds	r17, 0x2593	; 0x802593 <pre_swp_slow_start+0x1>
    5642:	01 15       	cp	r16, r1
    5644:	11 05       	cpc	r17, r1
    5646:	d1 f1       	breq	.+116    	; 0x56bc <__vector_85+0xfa>
		{
			temp_pre_swp += ((float)presweep_dc) / pre_swp_slow_start / 10.0;
    5648:	6c 2f       	mov	r22, r28
    564a:	70 e0       	ldi	r23, 0x00	; 0
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    5654:	4b 01       	movw	r8, r22
    5656:	5c 01       	movw	r10, r24
    5658:	b8 01       	movw	r22, r16
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <__floatunsisf>
    5662:	9b 01       	movw	r18, r22
    5664:	ac 01       	movw	r20, r24
    5666:	c5 01       	movw	r24, r10
    5668:	b4 01       	movw	r22, r8
    566a:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    566e:	20 e0       	ldi	r18, 0x00	; 0
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	40 e2       	ldi	r20, 0x20	; 32
    5674:	51 e4       	ldi	r21, 0x41	; 65
    5676:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divsf3>
    567a:	a7 01       	movw	r20, r14
    567c:	96 01       	movw	r18, r12
    567e:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__addsf3>
    5682:	60 93 85 20 	sts	0x2085, r22	; 0x802085 <temp_pre_swp>
    5686:	70 93 86 20 	sts	0x2086, r23	; 0x802086 <temp_pre_swp+0x1>
    568a:	80 93 87 20 	sts	0x2087, r24	; 0x802087 <temp_pre_swp+0x2>
    568e:	90 93 88 20 	sts	0x2088, r25	; 0x802088 <temp_pre_swp+0x3>
			uint32_t pwm = ((uint32_t)temp_pre_swp * 4000) / 100;
			TCE0.CCD = (uint16_t)pwm;
    5692:	0e 94 4d 30 	call	0x609a	; 0x609a <__fixunssfsi>
    5696:	9b 01       	movw	r18, r22
    5698:	ac 01       	movw	r20, r24
    569a:	a0 ea       	ldi	r26, 0xA0	; 160
    569c:	bf e0       	ldi	r27, 0x0F	; 15
    569e:	0e 94 03 32 	call	0x6406	; 0x6406 <__muluhisi3>
    56a2:	24 e6       	ldi	r18, 0x64	; 100
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e0       	ldi	r20, 0x00	; 0
    56a8:	50 e0       	ldi	r21, 0x00	; 0
    56aa:	0e 94 c8 31 	call	0x6390	; 0x6390 <__udivmodsi4>
    56ae:	20 93 2e 0a 	sts	0x0A2E, r18	; 0x800a2e <__TEXT_REGION_LENGTH__+0x700a2e>
    56b2:	30 93 2f 0a 	sts	0x0A2F, r19	; 0x800a2f <__TEXT_REGION_LENGTH__+0x700a2f>
    56b6:	02 c0       	rjmp	.+4      	; 0x56bc <__vector_85+0xfa>
			__SIM_SET_PWM(PWM_A2_PRES_MOTOR, TCE0.CCD);
		}
	}
	else
	{
		stop_25_ms_pre_swp_timer();
    56b8:	0e 94 7f 29 	call	0x52fe	; 0x52fe <stop_25_ms_pre_swp_timer>
	}

	TCD1.CNT = 0;
    56bc:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <__TEXT_REGION_LENGTH__+0x700960>
    56c0:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <__TEXT_REGION_LENGTH__+0x700961>
}
    56c4:	ff 91       	pop	r31
    56c6:	ef 91       	pop	r30
    56c8:	cf 91       	pop	r28
    56ca:	bf 91       	pop	r27
    56cc:	af 91       	pop	r26
    56ce:	9f 91       	pop	r25
    56d0:	8f 91       	pop	r24
    56d2:	7f 91       	pop	r23
    56d4:	6f 91       	pop	r22
    56d6:	5f 91       	pop	r21
    56d8:	4f 91       	pop	r20
    56da:	3f 91       	pop	r19
    56dc:	2f 91       	pop	r18
    56de:	1f 91       	pop	r17
    56e0:	0f 91       	pop	r16
    56e2:	ff 90       	pop	r15
    56e4:	ef 90       	pop	r14
    56e6:	df 90       	pop	r13
    56e8:	cf 90       	pop	r12
    56ea:	bf 90       	pop	r11
    56ec:	af 90       	pop	r10
    56ee:	9f 90       	pop	r9
    56f0:	8f 90       	pop	r8
    56f2:	0f 90       	pop	r0
    56f4:	0b be       	out	0x3b, r0	; 59
    56f6:	0f 90       	pop	r0
    56f8:	09 be       	out	0x39, r0	; 57
    56fa:	0f 90       	pop	r0
    56fc:	08 be       	out	0x38, r0	; 56
    56fe:	0f 90       	pop	r0
    5700:	0f be       	out	0x3f, r0	; 63
    5702:	0f 90       	pop	r0
    5704:	1f 90       	pop	r1
    5706:	18 95       	reti

00005708 <__vector_55>:

ISR(_100_MS_TIMER_INT)
{
    5708:	1f 92       	push	r1
    570a:	0f 92       	push	r0
    570c:	0f b6       	in	r0, 0x3f	; 63
    570e:	0f 92       	push	r0
    5710:	11 24       	eor	r1, r1
    5712:	08 b6       	in	r0, 0x38	; 56
    5714:	0f 92       	push	r0
    5716:	18 be       	out	0x38, r1	; 56
    5718:	09 b6       	in	r0, 0x39	; 57
    571a:	0f 92       	push	r0
    571c:	19 be       	out	0x39, r1	; 57
    571e:	0b b6       	in	r0, 0x3b	; 59
    5720:	0f 92       	push	r0
    5722:	1b be       	out	0x3b, r1	; 59
    5724:	2f 93       	push	r18
    5726:	3f 93       	push	r19
    5728:	4f 93       	push	r20
    572a:	5f 93       	push	r21
    572c:	6f 93       	push	r22
    572e:	7f 93       	push	r23
    5730:	8f 93       	push	r24
    5732:	9f 93       	push	r25
    5734:	af 93       	push	r26
    5736:	bf 93       	push	r27
    5738:	ef 93       	push	r30
    573a:	ff 93       	push	r31
	if (brush_sns_out_timer)
    573c:	80 91 8b 20 	lds	r24, 0x208B	; 0x80208b <brush_sns_out_timer>
    5740:	88 23       	and	r24, r24
    5742:	09 f1       	breq	.+66     	; 0x5786 <__vector_55+0x7e>
	{
		brush_sns_out_timer_count++;
    5744:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <brush_sns_out_timer_count>
    5748:	8f 5f       	subi	r24, 0xFF	; 255
    574a:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <brush_sns_out_timer_count>
		if (brush_sns_out_timer_count > 20)
    574e:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <brush_sns_out_timer_count>
    5752:	85 31       	cpi	r24, 0x15	; 21
    5754:	c0 f0       	brcs	.+48     	; 0x5786 <__vector_55+0x7e>
		{
			brush_sns_out_timer = OFF;
    5756:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <brush_sns_out_timer>
			brush_sns_out_count = 0;
    575a:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <brush_sns_out_count>
    575e:	10 92 99 25 	sts	0x2599, r1	; 0x802599 <brush_sns_out_count+0x1>
    5762:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <brush_sns_out_count+0x2>
    5766:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <brush_sns_out_count+0x3>

			brush_sns_out_timer_count = 0;
    576a:	10 92 49 23 	sts	0x2349, r1	; 0x802349 <brush_sns_out_timer_count>
			//Reset the counter if the alarm was not trigger
			if (!send_brush_overcurrent_alarm)
    576e:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <send_brush_overcurrent_alarm>
    5772:	81 11       	cpse	r24, r1
    5774:	08 c0       	rjmp	.+16     	; 0x5786 <__vector_55+0x7e>
			{
				brush_sns_out_count = 0;
    5776:	10 92 98 25 	sts	0x2598, r1	; 0x802598 <brush_sns_out_count>
    577a:	10 92 99 25 	sts	0x2599, r1	; 0x802599 <brush_sns_out_count+0x1>
    577e:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <brush_sns_out_count+0x2>
    5782:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <brush_sns_out_count+0x3>
			}
		}
	}
	if (top_debounce_timer)
    5786:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <top_debounce_timer>
    578a:	88 23       	and	r24, r24
    578c:	19 f1       	breq	.+70     	; 0x57d4 <__vector_55+0xcc>
	{
		//Check after 500 ms if the TOP pin is still low
		if (++top_debounce_count > 5)
    578e:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <top_debounce_count>
    5792:	8f 5f       	subi	r24, 0xFF	; 255
    5794:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <top_debounce_count>
    5798:	86 30       	cpi	r24, 0x06	; 6
    579a:	e0 f0       	brcs	.+56     	; 0x57d4 <__vector_55+0xcc>
		{
			if (PORTE_IN & (1 << TOP_PIN))
    579c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    57a0:	86 ff       	sbrs	r24, 6
    57a2:	16 c0       	rjmp	.+44     	; 0x57d0 <__vector_55+0xc8>
			{
				//Disable all 9201 devices
				PORTF_OUTSET = (1 << DISABLE_9201);
    57a4:	80 e4       	ldi	r24, 0x40	; 64
    57a6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

				//Disable all 8701 devices
				PORTE_OUTCLR = (1 << ENABLE_8701);
    57aa:	80 e1       	ldi	r24, 0x10	; 16
    57ac:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

				water_pump_set(OFF, OFF);
    57b0:	60 e0       	ldi	r22, 0x00	; 0
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
				Solenoid_set(OFF);
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
				detergent_pump_set(OFF, OFF);
    57be:	60 e0       	ldi	r22, 0x00	; 0
    57c0:	80 e0       	ldi	r24, 0x00	; 0
    57c2:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

				send_top_flag = TRUE;
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	80 93 a6 25 	sts	0x25A6, r24	; 0x8025a6 <send_top_flag>
				log_top_event = TRUE;
    57cc:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <log_top_event>
			}
			top_debounce_timer = OFF;
    57d0:	10 92 4f 20 	sts	0x204F, r1	; 0x80204f <top_debounce_timer>
		}
	}

	if (fuse_debounce_timer)
    57d4:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <fuse_debounce_timer>
    57d8:	88 23       	and	r24, r24
    57da:	f9 f0       	breq	.+62     	; 0x581a <__vector_55+0x112>
	{
		check_fuses();
    57dc:	0e 94 a1 02 	call	0x542	; 0x542 <check_fuses>
		//Check after 500 ms if the fuse pin ratio is still less than 20
		if (++fuse_debounce_count > 5)
    57e0:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <fuse_debounce_count>
    57e4:	8f 5f       	subi	r24, 0xFF	; 255
    57e6:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <fuse_debounce_count>
    57ea:	86 30       	cpi	r24, 0x06	; 6
    57ec:	b0 f0       	brcs	.+44     	; 0x581a <__vector_55+0x112>
		{
			//Disable all 9201 devices
			PORTF_OUTSET = (1 << DISABLE_9201);
    57ee:	80 e4       	ldi	r24, 0x40	; 64
    57f0:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

			//Disable all 8701 devices
			PORTE_OUTCLR = (1 << ENABLE_8701);
    57f4:	80 e1       	ldi	r24, 0x10	; 16
    57f6:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

			water_pump_set(OFF, OFF);
    57fa:	60 e0       	ldi	r22, 0x00	; 0
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
			Solenoid_set(OFF);
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
			detergent_pump_set(OFF, OFF);
    5808:	60 e0       	ldi	r22, 0x00	; 0
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>

			send_fuse_flag = TRUE;
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	80 93 7c 23 	sts	0x237C, r24	; 0x80237c <send_fuse_flag>
			fuse_debounce_timer = OFF;
    5816:	10 92 8d 25 	sts	0x258D, r1	; 0x80258d <fuse_debounce_timer>
		}
	}

	measure_current = TRUE;
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	80 93 7f 20 	sts	0x207F, r24	; 0x80207f <measure_current>

	TCE1.CNT = 0;
    5820:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <__TEXT_REGION_LENGTH__+0x700a60>
    5824:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <__TEXT_REGION_LENGTH__+0x700a61>
}
    5828:	ff 91       	pop	r31
    582a:	ef 91       	pop	r30
    582c:	bf 91       	pop	r27
    582e:	af 91       	pop	r26
    5830:	9f 91       	pop	r25
    5832:	8f 91       	pop	r24
    5834:	7f 91       	pop	r23
    5836:	6f 91       	pop	r22
    5838:	5f 91       	pop	r21
    583a:	4f 91       	pop	r20
    583c:	3f 91       	pop	r19
    583e:	2f 91       	pop	r18
    5840:	0f 90       	pop	r0
    5842:	0b be       	out	0x3b, r0	; 59
    5844:	0f 90       	pop	r0
    5846:	09 be       	out	0x39, r0	; 57
    5848:	0f 90       	pop	r0
    584a:	08 be       	out	0x38, r0	; 56
    584c:	0f 90       	pop	r0
    584e:	0f be       	out	0x3f, r0	; 63
    5850:	0f 90       	pop	r0
    5852:	1f 90       	pop	r1
    5854:	18 95       	reti

00005856 <__vector_79>:

ISR(SECOND_INT)
{
    5856:	1f 92       	push	r1
    5858:	0f 92       	push	r0
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	0f 92       	push	r0
    585e:	11 24       	eor	r1, r1
    5860:	08 b6       	in	r0, 0x38	; 56
    5862:	0f 92       	push	r0
    5864:	18 be       	out	0x38, r1	; 56
    5866:	09 b6       	in	r0, 0x39	; 57
    5868:	0f 92       	push	r0
    586a:	19 be       	out	0x39, r1	; 57
    586c:	0b b6       	in	r0, 0x3b	; 59
    586e:	0f 92       	push	r0
    5870:	1b be       	out	0x3b, r1	; 59
    5872:	2f 93       	push	r18
    5874:	3f 93       	push	r19
    5876:	4f 93       	push	r20
    5878:	5f 93       	push	r21
    587a:	6f 93       	push	r22
    587c:	7f 93       	push	r23
    587e:	8f 93       	push	r24
    5880:	9f 93       	push	r25
    5882:	af 93       	push	r26
    5884:	bf 93       	push	r27
    5886:	ef 93       	push	r30
    5888:	ff 93       	push	r31
	second_timer_tick = TRUE;
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	80 93 76 23 	sts	0x2376, r24	; 0x802376 <second_timer_tick>
	check_max_current = TRUE;
    5890:	80 93 69 23 	sts	0x2369, r24	; 0x802369 <check_max_current>
	//Counter for the lifetime usage of the cleaner
	if (runtimer_on)
    5894:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    5898:	88 23       	and	r24, r24
    589a:	09 f4       	brne	.+2      	; 0x589e <__vector_79+0x48>
    589c:	b2 c0       	rjmp	.+356    	; 0x5a02 <__vector_79+0x1ac>
	{
		if (++seconds >= 60)
    589e:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <seconds>
    58a2:	8f 5f       	subi	r24, 0xFF	; 255
    58a4:	80 93 61 23 	sts	0x2361, r24	; 0x802361 <seconds>
    58a8:	8c 33       	cpi	r24, 0x3C	; 60
    58aa:	08 f4       	brcc	.+2      	; 0x58ae <__vector_79+0x58>
    58ac:	a7 c0       	rjmp	.+334    	; 0x59fc <__vector_79+0x1a6>
		{
			if (++minutes >= 60)
    58ae:	80 91 89 25 	lds	r24, 0x2589	; 0x802589 <minutes>
    58b2:	8f 5f       	subi	r24, 0xFF	; 255
    58b4:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <minutes>
    58b8:	8c 33       	cpi	r24, 0x3C	; 60
    58ba:	58 f0       	brcs	.+22     	; 0x58d2 <__vector_79+0x7c>
			{
				hours++;
    58bc:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <hours>
    58c0:	90 91 91 25 	lds	r25, 0x2591	; 0x802591 <hours+0x1>
    58c4:	01 96       	adiw	r24, 0x01	; 1
    58c6:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <hours>
    58ca:	90 93 91 25 	sts	0x2591, r25	; 0x802591 <hours+0x1>
				minutes = 0;
    58ce:	10 92 89 25 	sts	0x2589, r1	; 0x802589 <minutes>
			}
			update_max_current = TRUE;
    58d2:	81 e0       	ldi	r24, 0x01	; 1
    58d4:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <update_max_current>
			update_eeprom_statistics = TRUE;
    58d8:	80 93 7c 25 	sts	0x257C, r24	; 0x80257c <update_eeprom_statistics>
			seconds = 0;
    58dc:	10 92 61 23 	sts	0x2361, r1	; 0x802361 <seconds>

			//Update statistic counters for running motors/modes
			if (brush_state == BRUSH_RUNNING)
    58e0:	80 91 7b 25 	lds	r24, 0x257B	; 0x80257b <brush_state>
    58e4:	8a 3a       	cpi	r24, 0xAA	; 170
    58e6:	99 f4       	brne	.+38     	; 0x590e <__vector_79+0xb8>
			{
				if (++brush_minutes >= 60)
    58e8:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <brush_minutes>
    58ec:	9f 5f       	subi	r25, 0xFF	; 255
    58ee:	90 93 76 25 	sts	0x2576, r25	; 0x802576 <brush_minutes>
    58f2:	9c 33       	cpi	r25, 0x3C	; 60
    58f4:	60 f0       	brcs	.+24     	; 0x590e <__vector_79+0xb8>
				{
					brush_hours++;
    58f6:	20 91 a6 20 	lds	r18, 0x20A6	; 0x8020a6 <brush_hours>
    58fa:	30 91 a7 20 	lds	r19, 0x20A7	; 0x8020a7 <brush_hours+0x1>
    58fe:	2f 5f       	subi	r18, 0xFF	; 255
    5900:	3f 4f       	sbci	r19, 0xFF	; 255
    5902:	20 93 a6 20 	sts	0x20A6, r18	; 0x8020a6 <brush_hours>
    5906:	30 93 a7 20 	sts	0x20A7, r19	; 0x8020a7 <brush_hours+0x1>
					brush_minutes = 0;
    590a:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <brush_minutes>
				}
			}
			if (vacuum_state == VACUUM_RUNNING)
    590e:	90 91 53 21 	lds	r25, 0x2153	; 0x802153 <vacuum_state>
    5912:	9a 3a       	cpi	r25, 0xAA	; 170
    5914:	99 f4       	brne	.+38     	; 0x593c <__vector_79+0xe6>
			{
				if (++vacuum_minutes >= 60)
    5916:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <vacuum_minutes>
    591a:	9f 5f       	subi	r25, 0xFF	; 255
    591c:	90 93 a3 20 	sts	0x20A3, r25	; 0x8020a3 <vacuum_minutes>
    5920:	9c 33       	cpi	r25, 0x3C	; 60
    5922:	60 f0       	brcs	.+24     	; 0x593c <__vector_79+0xe6>
				{
					vacuum_hours++;
    5924:	20 91 80 25 	lds	r18, 0x2580	; 0x802580 <vacuum_hours>
    5928:	30 91 81 25 	lds	r19, 0x2581	; 0x802581 <vacuum_hours+0x1>
    592c:	2f 5f       	subi	r18, 0xFF	; 255
    592e:	3f 4f       	sbci	r19, 0xFF	; 255
    5930:	20 93 80 25 	sts	0x2580, r18	; 0x802580 <vacuum_hours>
    5934:	30 93 81 25 	sts	0x2581, r19	; 0x802581 <vacuum_hours+0x1>
					vacuum_minutes = 0;
    5938:	10 92 a3 20 	sts	0x20A3, r1	; 0x8020a3 <vacuum_minutes>
				}
			}
			if (presweep_state == ON)
    593c:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <presweep_state>
    5940:	91 30       	cpi	r25, 0x01	; 1
    5942:	99 f4       	brne	.+38     	; 0x596a <__vector_79+0x114>
			{
				if (++presweep_minutes >= 60)
    5944:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <presweep_minutes>
    5948:	9f 5f       	subi	r25, 0xFF	; 255
    594a:	90 93 a8 20 	sts	0x20A8, r25	; 0x8020a8 <presweep_minutes>
    594e:	9c 33       	cpi	r25, 0x3C	; 60
    5950:	60 f0       	brcs	.+24     	; 0x596a <__vector_79+0x114>
				{
					presweep_hours++;
    5952:	20 91 78 23 	lds	r18, 0x2378	; 0x802378 <presweep_hours>
    5956:	30 91 79 23 	lds	r19, 0x2379	; 0x802379 <presweep_hours+0x1>
    595a:	2f 5f       	subi	r18, 0xFF	; 255
    595c:	3f 4f       	sbci	r19, 0xFF	; 255
    595e:	20 93 78 23 	sts	0x2378, r18	; 0x802378 <presweep_hours>
    5962:	30 93 79 23 	sts	0x2379, r19	; 0x802379 <presweep_hours+0x1>
					presweep_minutes = 0;
    5966:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <presweep_minutes>
				}
			}
			if (eco_mode)
    596a:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <eco_mode>
    596e:	99 23       	and	r25, r25
    5970:	99 f0       	breq	.+38     	; 0x5998 <__vector_79+0x142>
			{
				if (++eco_minutes >= 60)
    5972:	90 91 8c 25 	lds	r25, 0x258C	; 0x80258c <eco_minutes>
    5976:	9f 5f       	subi	r25, 0xFF	; 255
    5978:	90 93 8c 25 	sts	0x258C, r25	; 0x80258c <eco_minutes>
    597c:	9c 33       	cpi	r25, 0x3C	; 60
    597e:	60 f0       	brcs	.+24     	; 0x5998 <__vector_79+0x142>
				{
					eco_hours++;
    5980:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <eco_hours>
    5984:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <eco_hours+0x1>
    5988:	2f 5f       	subi	r18, 0xFF	; 255
    598a:	3f 4f       	sbci	r19, 0xFF	; 255
    598c:	20 93 a1 20 	sts	0x20A1, r18	; 0x8020a1 <eco_hours>
    5990:	30 93 a2 20 	sts	0x20A2, r19	; 0x8020a2 <eco_hours+0x1>
					eco_minutes = 0;
    5994:	10 92 8c 25 	sts	0x258C, r1	; 0x80258c <eco_minutes>
				}
			}
			if (water_pump && brush_state == BRUSH_RUNNING)
    5998:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <water_pump>
    599c:	99 23       	and	r25, r25
    599e:	b1 f0       	breq	.+44     	; 0x59cc <__vector_79+0x176>
    59a0:	8a 3a       	cpi	r24, 0xAA	; 170
    59a2:	61 f5       	brne	.+88     	; 0x59fc <__vector_79+0x1a6>
			{
				if (++water_pump_minutes >= 60)
    59a4:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <water_pump_minutes>
    59a8:	8f 5f       	subi	r24, 0xFF	; 255
    59aa:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <water_pump_minutes>
    59ae:	8c 33       	cpi	r24, 0x3C	; 60
    59b0:	08 f4       	brcc	.+2      	; 0x59b4 <__vector_79+0x15e>
    59b2:	0b c1       	rjmp	.+534    	; 0x5bca <__vector_79+0x374>
				{
					water_pump_hours++;
    59b4:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <water_pump_hours>
    59b8:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <water_pump_hours+0x1>
    59bc:	01 96       	adiw	r24, 0x01	; 1
    59be:	80 93 3d 20 	sts	0x203D, r24	; 0x80203d <water_pump_hours>
    59c2:	90 93 3e 20 	sts	0x203E, r25	; 0x80203e <water_pump_hours+0x1>
					water_pump_minutes = 0;
    59c6:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <water_pump_minutes>
    59ca:	ff c0       	rjmp	.+510    	; 0x5bca <__vector_79+0x374>
				}
			}
			if (detergent_pump && brush_state == BRUSH_RUNNING)
    59cc:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <detergent_pump>
    59d0:	99 23       	and	r25, r25
    59d2:	a1 f0       	breq	.+40     	; 0x59fc <__vector_79+0x1a6>
    59d4:	8a 3a       	cpi	r24, 0xAA	; 170
    59d6:	91 f4       	brne	.+36     	; 0x59fc <__vector_79+0x1a6>
			{
				if (++detergent_pump_minutes >= 60)
    59d8:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <detergent_pump_minutes>
    59dc:	8f 5f       	subi	r24, 0xFF	; 255
    59de:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <detergent_pump_minutes>
    59e2:	8c 33       	cpi	r24, 0x3C	; 60
    59e4:	58 f0       	brcs	.+22     	; 0x59fc <__vector_79+0x1a6>
				{
					detergent_pump_hours++;
    59e6:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <detergent_pump_hours>
    59ea:	90 91 8b 25 	lds	r25, 0x258B	; 0x80258b <detergent_pump_hours+0x1>
    59ee:	01 96       	adiw	r24, 0x01	; 1
    59f0:	80 93 8a 25 	sts	0x258A, r24	; 0x80258a <detergent_pump_hours>
    59f4:	90 93 8b 25 	sts	0x258B, r25	; 0x80258b <detergent_pump_hours+0x1>
					detergent_pump_minutes = 0;
    59f8:	10 92 95 20 	sts	0x2095, r1	; 0x802095 <detergent_pump_minutes>
				}
			}
		}
		update_current = TRUE;
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	80 93 5d 23 	sts	0x235D, r24	; 0x80235d <update_current>
	}

	if (vacuum_off_timer != OFF)
    5a02:	80 91 7d 25 	lds	r24, 0x257D	; 0x80257d <vacuum_off_timer>
    5a06:	88 23       	and	r24, r24
    5a08:	19 f1       	breq	.+70     	; 0x5a50 <__vector_79+0x1fa>
	{
		//30 seconds after vacuum switch is turned off, turn off vacuum motor
		if (++vacuum_off_timer > VACUUM_OFF_TIME)
    5a0a:	80 91 7d 25 	lds	r24, 0x257D	; 0x80257d <vacuum_off_timer>
    5a0e:	8f 5f       	subi	r24, 0xFF	; 255
    5a10:	80 93 7d 25 	sts	0x257D, r24	; 0x80257d <vacuum_off_timer>
    5a14:	80 31       	cpi	r24, 0x10	; 16
    5a16:	e0 f0       	brcs	.+56     	; 0x5a50 <__vector_79+0x1fa>
		{
			vacuum_motor_set(OFF);
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	0e 94 c7 1a 	call	0x358e	; 0x358e <vacuum_motor_set>
			vacuum_state = VACUUM_OFF;
    5a1e:	8c ec       	ldi	r24, 0xCC	; 204
    5a20:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <vacuum_state>
			if (runtimer_on && accelerator == ACCEL_UP && horn == OFF && headlights == OFF)
    5a24:	80 91 67 20 	lds	r24, 0x2067	; 0x802067 <runtimer_on>
    5a28:	88 23       	and	r24, r24
    5a2a:	71 f0       	breq	.+28     	; 0x5a48 <__vector_79+0x1f2>
    5a2c:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <accelerator>
    5a30:	81 11       	cpse	r24, r1
    5a32:	0a c0       	rjmp	.+20     	; 0x5a48 <__vector_79+0x1f2>
    5a34:	80 91 75 23 	lds	r24, 0x2375	; 0x802375 <horn>
    5a38:	81 11       	cpse	r24, r1
    5a3a:	06 c0       	rjmp	.+12     	; 0x5a48 <__vector_79+0x1f2>
    5a3c:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <headlights>
    5a40:	81 11       	cpse	r24, r1
    5a42:	02 c0       	rjmp	.+4      	; 0x5a48 <__vector_79+0x1f2>
			{
				send_runtime_timer(OFF);
    5a44:	0e 94 84 29 	call	0x5308	; 0x5308 <send_runtime_timer>
			}
			update_vacuum_state();
    5a48:	0e 94 d7 13 	call	0x27ae	; 0x27ae <update_vacuum_state>
			vacuum_off_timer = OFF;
    5a4c:	10 92 7d 25 	sts	0x257D, r1	; 0x80257d <vacuum_off_timer>
		}
	}
	//If current flag has been set from 9201 driver
	if (is_1_flag | is_2_flag | is_3_flag | is_4_flag)
    5a50:	30 91 83 20 	lds	r19, 0x2083	; 0x802083 <is_1_flag>
    5a54:	80 91 77 23 	lds	r24, 0x2377	; 0x802377 <is_2_flag>
    5a58:	20 91 3f 21 	lds	r18, 0x213F	; 0x80213f <is_3_flag>
    5a5c:	90 91 72 20 	lds	r25, 0x2072	; 0x802072 <is_4_flag>
    5a60:	83 2b       	or	r24, r19
    5a62:	82 2b       	or	r24, r18
    5a64:	89 2b       	or	r24, r25
    5a66:	59 f0       	breq	.+22     	; 0x5a7e <__vector_79+0x228>
	{
		//First time around set the is_reset flag
		//Second time, turn off the 9201 devices
		//They will be turned back on in the main loop
		if (is_reset)
    5a68:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <is_reset>
    5a6c:	88 23       	and	r24, r24
    5a6e:	21 f0       	breq	.+8      	; 0x5a78 <__vector_79+0x222>
		{
			PORTF_OUTSET = (1 << DISABLE_9201);
    5a70:	80 e4       	ldi	r24, 0x40	; 64
    5a72:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
    5a76:	03 c0       	rjmp	.+6      	; 0x5a7e <__vector_79+0x228>
		}
		else
		{
			is_reset = TRUE;
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <is_reset>
		}
	}

	if (brush_head_timer != OFF)
    5a7e:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <brush_head_timer>
    5a82:	88 23       	and	r24, r24
    5a84:	69 f0       	breq	.+26     	; 0x5aa0 <__vector_79+0x24a>
	{
		//Brush head will turn off completely after 10 seconds
		if (brush_head_timer++ > ACTUATOR_RESET_SEC)
    5a86:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <brush_head_timer>
    5a8a:	91 e0       	ldi	r25, 0x01	; 1
    5a8c:	98 0f       	add	r25, r24
    5a8e:	90 93 3f 20 	sts	0x203F, r25	; 0x80203f <brush_head_timer>
    5a92:	8b 30       	cpi	r24, 0x0B	; 11
    5a94:	28 f0       	brcs	.+10     	; 0x5aa0 <__vector_79+0x24a>
		{
			BR_HD_OFF;
    5a96:	83 e0       	ldi	r24, 0x03	; 3
    5a98:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
			brush_head_timer = OFF;
    5a9c:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <brush_head_timer>
		}
	}

	if (squeegee_timer != OFF)
    5aa0:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <squeegee_timer>
    5aa4:	88 23       	and	r24, r24
    5aa6:	69 f0       	breq	.+26     	; 0x5ac2 <__vector_79+0x26c>
	{
		//Squeegee will stay off for 10 seconds before moving again
		if (squeegee_timer++ > ACTUATOR_RESET_SEC)
    5aa8:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <squeegee_timer>
    5aac:	91 e0       	ldi	r25, 0x01	; 1
    5aae:	98 0f       	add	r25, r24
    5ab0:	90 93 51 23 	sts	0x2351, r25	; 0x802351 <squeegee_timer>
    5ab4:	8b 30       	cpi	r24, 0x0B	; 11
    5ab6:	28 f0       	brcs	.+10     	; 0x5ac2 <__vector_79+0x26c>
		{
			SQ_OFF;
    5ab8:	8c e0       	ldi	r24, 0x0C	; 12
    5aba:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
			squeegee_timer = OFF;
    5abe:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <squeegee_timer>
		}
	}

	if (float_sensor_timer != OFF)
    5ac2:	80 91 97 25 	lds	r24, 0x2597	; 0x802597 <float_sensor_timer>
    5ac6:	88 23       	and	r24, r24
    5ac8:	c9 f0       	breq	.+50     	; 0x5afc <__vector_79+0x2a6>
	{
		//Check if float sensor is on for the entire duration
		if (!(PORTE_IN & (1 << FLOAT_PIN)))
    5aca:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    5ace:	88 23       	and	r24, r24
    5ad0:	9c f0       	brlt	.+38     	; 0x5af8 <__vector_79+0x2a2>
		{
			//If float sensor is on for 8 seconds
			if (float_sensor_timer++ > FLOAT_SNS_SEC)
    5ad2:	80 91 97 25 	lds	r24, 0x2597	; 0x802597 <float_sensor_timer>
    5ad6:	91 e0       	ldi	r25, 0x01	; 1
    5ad8:	98 0f       	add	r25, r24
    5ada:	90 93 97 25 	sts	0x2597, r25	; 0x802597 <float_sensor_timer>
    5ade:	89 30       	cpi	r24, 0x09	; 9
    5ae0:	68 f0       	brcs	.+26     	; 0x5afc <__vector_79+0x2a6>
			{
				send_float_flag = TRUE;
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	80 93 78 25 	sts	0x2578, r24	; 0x802578 <send_float_flag>
				tank_full = TRUE;
    5ae8:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <tank_full>
				float_sensor_timer = OFF;
    5aec:	10 92 97 25 	sts	0x2597, r1	; 0x802597 <float_sensor_timer>
				vacuum_motor_set(OFF);
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	0e 94 c7 1a 	call	0x358e	; 0x358e <vacuum_motor_set>
    5af6:	02 c0       	rjmp	.+4      	; 0x5afc <__vector_79+0x2a6>
			}
		}
		//Otherwise reset the float sensor timer
		else
		{
			float_sensor_timer = OFF;
    5af8:	10 92 97 25 	sts	0x2597, r1	; 0x802597 <float_sensor_timer>
		}
	}

	if (fault_timer)
    5afc:	80 91 89 20 	lds	r24, 0x2089	; 0x802089 <fault_timer>
    5b00:	88 23       	and	r24, r24
    5b02:	31 f1       	breq	.+76     	; 0x5b50 <__vector_79+0x2fa>
	{
		//Check if fault is on for the entire duration
		if (!(PORTE_IN & (1 << FAULT_8701)))
    5b04:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    5b08:	85 fd       	sbrc	r24, 5
    5b0a:	20 c0       	rjmp	.+64     	; 0x5b4c <__vector_79+0x2f6>
		{
			fault_timer_count++;
    5b0c:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <fault_timer_count>
    5b10:	8f 5f       	subi	r24, 0xFF	; 255
    5b12:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <fault_timer_count>
			if (fault_timer_count > 5)
    5b16:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <fault_timer_count>
    5b1a:	86 30       	cpi	r24, 0x06	; 6
    5b1c:	c8 f0       	brcs	.+50     	; 0x5b50 <__vector_79+0x2fa>
			{
				send_fault_flag = TRUE;
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <send_fault_flag>
				fault_timer = OFF;
    5b24:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <fault_timer>
				//Disable all 9201 devices
				PORTF_OUTSET = (1 << DISABLE_9201);
    5b28:	80 e4       	ldi	r24, 0x40	; 64
    5b2a:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

				//Disable all 8701 devices
				PORTE_OUTCLR = (1 << ENABLE_8701);
    5b2e:	80 e1       	ldi	r24, 0x10	; 16
    5b30:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>

				water_pump_set(OFF, OFF);
    5b34:	60 e0       	ldi	r22, 0x00	; 0
    5b36:	80 e0       	ldi	r24, 0x00	; 0
    5b38:	0e 94 2d 1c 	call	0x385a	; 0x385a <water_pump_set>
				Solenoid_set(OFF);
    5b3c:	80 e0       	ldi	r24, 0x00	; 0
    5b3e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <Solenoid_set>
				detergent_pump_set(OFF, OFF);
    5b42:	60 e0       	ldi	r22, 0x00	; 0
    5b44:	80 e0       	ldi	r24, 0x00	; 0
    5b46:	0e 94 03 1c 	call	0x3806	; 0x3806 <detergent_pump_set>
    5b4a:	02 c0       	rjmp	.+4      	; 0x5b50 <__vector_79+0x2fa>
			}
		}
		else
		{
			fault_timer = OFF;
    5b4c:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <fault_timer>
				brush_sns_out_count = 0;
			}
					}
	}*/

	if (transport_timer != OFF)
    5b50:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <transport_timer>
    5b54:	88 23       	and	r24, r24
    5b56:	59 f1       	breq	.+86     	; 0x5bae <__vector_79+0x358>
	{
		if (!transport)
    5b58:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <transport>
    5b5c:	81 11       	cpse	r24, r1
    5b5e:	02 c0       	rjmp	.+4      	; 0x5b64 <__vector_79+0x30e>
			transport_timer = OFF;
    5b60:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <transport_timer>

		//Some time after switching to transport turn off squeegee
		if (transport_timer == TRANSPORT_SQ_TIME)
    5b64:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <transport_timer>
    5b68:	81 30       	cpi	r24, 0x01	; 1
    5b6a:	79 f4       	brne	.+30     	; 0x5b8a <__vector_79+0x334>
		{
			if (squeegee_down)
    5b6c:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <squeegee_down>
    5b70:	88 23       	and	r24, r24
    5b72:	59 f0       	breq	.+22     	; 0x5b8a <__vector_79+0x334>
			{
				SQ_UP;
    5b74:	84 e0       	ldi	r24, 0x04	; 4
    5b76:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
    5b7a:	88 e0       	ldi	r24, 0x08	; 8
    5b7c:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
				squeegee_down = FALSE;
    5b80:	10 92 7a 23 	sts	0x237A, r1	; 0x80237a <squeegee_down>
				squeegee_timer = ON;
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <squeegee_timer>
			}
		}
		//Some time after switching to transport turn off vacuum
		if (transport_timer++ == TRANSPORT_VAC_TIME)
    5b8a:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <transport_timer>
    5b8e:	91 e0       	ldi	r25, 0x01	; 1
    5b90:	98 0f       	add	r25, r24
    5b92:	90 93 55 23 	sts	0x2355, r25	; 0x802355 <transport_timer>
    5b96:	8f 30       	cpi	r24, 0x0F	; 15
    5b98:	51 f4       	brne	.+20     	; 0x5bae <__vector_79+0x358>
		{
			vacuum_state = VACUUM_OFF;
    5b9a:	8c ec       	ldi	r24, 0xCC	; 204
    5b9c:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <vacuum_state>
			update_vacuum_state();
    5ba0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <update_vacuum_state>
			vacuum_motor_set(0);
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	0e 94 c7 1a 	call	0x358e	; 0x358e <vacuum_motor_set>
			transport_timer = OFF;
    5baa:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <transport_timer>
		}
	}

	//Reset timer to see if reset CAN communication should be obeyed
	if (reset_timer < 10)
    5bae:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <reset_timer>
    5bb2:	8a 30       	cpi	r24, 0x0A	; 10
    5bb4:	28 f4       	brcc	.+10     	; 0x5bc0 <__vector_79+0x36a>
		reset_timer++;
    5bb6:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <reset_timer>
    5bba:	8f 5f       	subi	r24, 0xFF	; 255
    5bbc:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <reset_timer>

	TCD0.CNT = 0;
    5bc0:	10 92 20 09 	sts	0x0920, r1	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
    5bc4:	10 92 21 09 	sts	0x0921, r1	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
}
    5bc8:	05 c0       	rjmp	.+10     	; 0x5bd4 <__vector_79+0x37e>
				{
					water_pump_hours++;
					water_pump_minutes = 0;
				}
			}
			if (detergent_pump && brush_state == BRUSH_RUNNING)
    5bca:	80 91 4c 23 	lds	r24, 0x234C	; 0x80234c <detergent_pump>
    5bce:	81 11       	cpse	r24, r1
    5bd0:	03 cf       	rjmp	.-506    	; 0x59d8 <__vector_79+0x182>
    5bd2:	14 cf       	rjmp	.-472    	; 0x59fc <__vector_79+0x1a6>
	//Reset timer to see if reset CAN communication should be obeyed
	if (reset_timer < 10)
		reset_timer++;

	TCD0.CNT = 0;
}
    5bd4:	ff 91       	pop	r31
    5bd6:	ef 91       	pop	r30
    5bd8:	bf 91       	pop	r27
    5bda:	af 91       	pop	r26
    5bdc:	9f 91       	pop	r25
    5bde:	8f 91       	pop	r24
    5be0:	7f 91       	pop	r23
    5be2:	6f 91       	pop	r22
    5be4:	5f 91       	pop	r21
    5be6:	4f 91       	pop	r20
    5be8:	3f 91       	pop	r19
    5bea:	2f 91       	pop	r18
    5bec:	0f 90       	pop	r0
    5bee:	0b be       	out	0x3b, r0	; 59
    5bf0:	0f 90       	pop	r0
    5bf2:	09 be       	out	0x39, r0	; 57
    5bf4:	0f 90       	pop	r0
    5bf6:	08 be       	out	0x38, r0	; 56
    5bf8:	0f 90       	pop	r0
    5bfa:	0f be       	out	0x3f, r0	; 63
    5bfc:	0f 90       	pop	r0
    5bfe:	1f 90       	pop	r1
    5c00:	18 95       	reti

00005c02 <__vector_16>:

//IVA002: Added for CAN Tx Queue
ISR(CAN_TX_TIMER_INT)
{
    5c02:	1f 92       	push	r1
    5c04:	0f 92       	push	r0
    5c06:	0f b6       	in	r0, 0x3f	; 63
    5c08:	0f 92       	push	r0
    5c0a:	11 24       	eor	r1, r1
    5c0c:	08 b6       	in	r0, 0x38	; 56
    5c0e:	0f 92       	push	r0
    5c10:	18 be       	out	0x38, r1	; 56
    5c12:	09 b6       	in	r0, 0x39	; 57
    5c14:	0f 92       	push	r0
    5c16:	19 be       	out	0x39, r1	; 57
    5c18:	0b b6       	in	r0, 0x3b	; 59
    5c1a:	0f 92       	push	r0
    5c1c:	1b be       	out	0x3b, r1	; 59
    5c1e:	2f 93       	push	r18
    5c20:	3f 93       	push	r19
    5c22:	4f 93       	push	r20
    5c24:	5f 93       	push	r21
    5c26:	6f 93       	push	r22
    5c28:	7f 93       	push	r23
    5c2a:	8f 93       	push	r24
    5c2c:	9f 93       	push	r25
    5c2e:	af 93       	push	r26
    5c30:	bf 93       	push	r27
    5c32:	ef 93       	push	r30
    5c34:	ff 93       	push	r31
	CQTx_dequeue();
    5c36:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <CQTx_dequeue>
	TCC0.CNT = 0;
    5c3a:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    5c3e:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
}
    5c42:	ff 91       	pop	r31
    5c44:	ef 91       	pop	r30
    5c46:	bf 91       	pop	r27
    5c48:	af 91       	pop	r26
    5c4a:	9f 91       	pop	r25
    5c4c:	8f 91       	pop	r24
    5c4e:	7f 91       	pop	r23
    5c50:	6f 91       	pop	r22
    5c52:	5f 91       	pop	r21
    5c54:	4f 91       	pop	r20
    5c56:	3f 91       	pop	r19
    5c58:	2f 91       	pop	r18
    5c5a:	0f 90       	pop	r0
    5c5c:	0b be       	out	0x3b, r0	; 59
    5c5e:	0f 90       	pop	r0
    5c60:	09 be       	out	0x39, r0	; 57
    5c62:	0f 90       	pop	r0
    5c64:	08 be       	out	0x38, r0	; 56
    5c66:	0f 90       	pop	r0
    5c68:	0f be       	out	0x3f, r0	; 63
    5c6a:	0f 90       	pop	r0
    5c6c:	1f 90       	pop	r1
    5c6e:	18 95       	reti

00005c70 <TWI_MasterInit>:
	uint8_t address,
	uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    5c70:	fc 01       	movw	r30, r24
    5c72:	60 83       	st	Z, r22
    5c74:	71 83       	std	Z+1, r23	; 0x01
    5c76:	48 63       	ori	r20, 0x38	; 56
    5c78:	db 01       	movw	r26, r22
    5c7a:	11 96       	adiw	r26, 0x01	; 1
    5c7c:	4c 93       	st	X, r20
    5c7e:	a0 81       	ld	r26, Z
    5c80:	b1 81       	ldd	r27, Z+1	; 0x01
    5c82:	15 96       	adiw	r26, 0x05	; 5
    5c84:	2c 93       	st	X, r18
    5c86:	01 90       	ld	r0, Z+
    5c88:	f0 81       	ld	r31, Z
    5c8a:	e0 2d       	mov	r30, r0
    5c8c:	81 e0       	ldi	r24, 0x01	; 1
    5c8e:	84 83       	std	Z+4, r24	; 0x04
    5c90:	08 95       	ret

00005c92 <TWI_MasterWriteRead>:
    5c92:	ef 92       	push	r14
    5c94:	ff 92       	push	r15
    5c96:	0f 93       	push	r16
    5c98:	cf 93       	push	r28
    5c9a:	df 93       	push	r29
    5c9c:	ec 01       	movw	r28, r24
    5c9e:	25 36       	cpi	r18, 0x65	; 101
    5ca0:	08 f0       	brcs	.+2      	; 0x5ca4 <TWI_MasterWriteRead+0x12>
    5ca2:	48 c0       	rjmp	.+144    	; 0x5d34 <TWI_MasterWriteRead+0xa2>
    5ca4:	0a 31       	cpi	r16, 0x1A	; 26
    5ca6:	08 f0       	brcs	.+2      	; 0x5caa <TWI_MasterWriteRead+0x18>
    5ca8:	47 c0       	rjmp	.+142    	; 0x5d38 <TWI_MasterWriteRead+0xa6>
    5caa:	fc 01       	movw	r30, r24
    5cac:	ec 57       	subi	r30, 0x7C	; 124
    5cae:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb0:	80 81       	ld	r24, Z
    5cb2:	81 11       	cpse	r24, r1
    5cb4:	43 c0       	rjmp	.+134    	; 0x5d3c <TWI_MasterWriteRead+0xaa>
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	80 83       	st	Z, r24
    5cba:	31 96       	adiw	r30, 0x01	; 1
    5cbc:	10 82       	st	Z, r1
    5cbe:	66 0f       	add	r22, r22
    5cc0:	6a 83       	std	Y+2, r22	; 0x02
    5cc2:	22 23       	and	r18, r18
    5cc4:	a1 f0       	breq	.+40     	; 0x5cee <TWI_MasterWriteRead+0x5c>
    5cc6:	7a 01       	movw	r14, r20
    5cc8:	6f ef       	ldi	r22, 0xFF	; 255
    5cca:	62 0f       	add	r22, r18
    5ccc:	70 e0       	ldi	r23, 0x00	; 0
    5cce:	6f 5f       	subi	r22, 0xFF	; 255
    5cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd2:	64 0f       	add	r22, r20
    5cd4:	75 1f       	adc	r23, r21
    5cd6:	fa 01       	movw	r30, r20
    5cd8:	df 01       	movw	r26, r30
    5cda:	ae 19       	sub	r26, r14
    5cdc:	bf 09       	sbc	r27, r15
    5cde:	91 91       	ld	r25, Z+
    5ce0:	ac 0f       	add	r26, r28
    5ce2:	bd 1f       	adc	r27, r29
    5ce4:	13 96       	adiw	r26, 0x03	; 3
    5ce6:	9c 93       	st	X, r25
    5ce8:	e6 17       	cp	r30, r22
    5cea:	f7 07       	cpc	r31, r23
    5cec:	a9 f7       	brne	.-22     	; 0x5cd8 <TWI_MasterWriteRead+0x46>
    5cee:	fe 01       	movw	r30, r28
    5cf0:	e0 58       	subi	r30, 0x80	; 128
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	20 83       	st	Z, r18
    5cf6:	de 01       	movw	r26, r28
    5cf8:	af 57       	subi	r26, 0x7F	; 127
    5cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    5cfc:	0c 93       	st	X, r16
    5cfe:	11 96       	adiw	r26, 0x01	; 1
    5d00:	1c 92       	st	X, r1
    5d02:	11 96       	adiw	r26, 0x01	; 1
    5d04:	1c 92       	st	X, r1
    5d06:	80 81       	ld	r24, Z
    5d08:	88 23       	and	r24, r24
    5d0a:	39 f0       	breq	.+14     	; 0x5d1a <TWI_MasterWriteRead+0x88>
    5d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d0e:	8e 7f       	andi	r24, 0xFE	; 254
    5d10:	e8 81       	ld	r30, Y
    5d12:	f9 81       	ldd	r31, Y+1	; 0x01
    5d14:	86 83       	std	Z+6, r24	; 0x06
    5d16:	81 e0       	ldi	r24, 0x01	; 1
    5d18:	14 c0       	rjmp	.+40     	; 0x5d42 <TWI_MasterWriteRead+0xb0>
    5d1a:	fe 01       	movw	r30, r28
    5d1c:	ef 57       	subi	r30, 0x7F	; 127
    5d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d20:	80 81       	ld	r24, Z
    5d22:	88 23       	and	r24, r24
    5d24:	69 f0       	breq	.+26     	; 0x5d40 <TWI_MasterWriteRead+0xae>
    5d26:	8a 81       	ldd	r24, Y+2	; 0x02
    5d28:	81 60       	ori	r24, 0x01	; 1
    5d2a:	e8 81       	ld	r30, Y
    5d2c:	f9 81       	ldd	r31, Y+1	; 0x01
    5d2e:	86 83       	std	Z+6, r24	; 0x06
    5d30:	81 e0       	ldi	r24, 0x01	; 1
    5d32:	07 c0       	rjmp	.+14     	; 0x5d42 <TWI_MasterWriteRead+0xb0>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	05 c0       	rjmp	.+10     	; 0x5d42 <TWI_MasterWriteRead+0xb0>
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	03 c0       	rjmp	.+6      	; 0x5d42 <TWI_MasterWriteRead+0xb0>
    5d3c:	80 e0       	ldi	r24, 0x00	; 0
    5d3e:	01 c0       	rjmp	.+2      	; 0x5d42 <TWI_MasterWriteRead+0xb0>
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	0f 91       	pop	r16
    5d48:	ff 90       	pop	r15
    5d4a:	ef 90       	pop	r14
    5d4c:	08 95       	ret

00005d4e <TWI_MasterWrite>:
    5d4e:	0f 93       	push	r16
    5d50:	00 e0       	ldi	r16, 0x00	; 0
    5d52:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <TWI_MasterWriteRead>
    5d56:	2f ef       	ldi	r18, 0xFF	; 255
    5d58:	39 ef       	ldi	r19, 0xF9	; 249
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	21 50       	subi	r18, 0x01	; 1
    5d5e:	30 40       	sbci	r19, 0x00	; 0
    5d60:	90 40       	sbci	r25, 0x00	; 0
    5d62:	e1 f7       	brne	.-8      	; 0x5d5c <TWI_MasterWrite+0xe>
    5d64:	00 c0       	rjmp	.+0      	; 0x5d66 <TWI_MasterWrite+0x18>
    5d66:	00 00       	nop
    5d68:	0f 91       	pop	r16
    5d6a:	08 95       	ret

00005d6c <TWI_MasterArbitrationLostBusErrorHandler>:
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{

	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    5d6c:	dc 01       	movw	r26, r24
    5d6e:	ed 91       	ld	r30, X+
    5d70:	fc 91       	ld	r31, X
    5d72:	11 97       	sbiw	r26, 0x01	; 1
    5d74:	24 81       	ldd	r18, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    5d76:	22 ff       	sbrs	r18, 2
    5d78:	05 c0       	rjmp	.+10     	; 0x5d84 <TWI_MasterArbitrationLostBusErrorHandler+0x18>
		twi->result = TWIM_RESULT_BUS_ERROR;
    5d7a:	34 e0       	ldi	r19, 0x04	; 4
    5d7c:	ab 57       	subi	r26, 0x7B	; 123
    5d7e:	bf 4f       	sbci	r27, 0xFF	; 255
    5d80:	3c 93       	st	X, r19
    5d82:	05 c0       	rjmp	.+10     	; 0x5d8e <TWI_MasterArbitrationLostBusErrorHandler+0x22>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    5d84:	33 e0       	ldi	r19, 0x03	; 3
    5d86:	dc 01       	movw	r26, r24
    5d88:	ab 57       	subi	r26, 0x7B	; 123
    5d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    5d8c:	3c 93       	st	X, r19
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    5d8e:	28 60       	ori	r18, 0x08	; 8
    5d90:	24 83       	std	Z+4, r18	; 0x04

	twi->status = TWIM_STATUS_READY;
    5d92:	fc 01       	movw	r30, r24
    5d94:	ec 57       	subi	r30, 0x7C	; 124
    5d96:	ff 4f       	sbci	r31, 0xFF	; 255
    5d98:	10 82       	st	Z, r1
    5d9a:	08 95       	ret

00005d9c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    5d9c:	cf 93       	push	r28
    5d9e:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite = twi->bytesToWrite;
    5da0:	fc 01       	movw	r30, r24
    5da2:	e0 58       	subi	r30, 0x80	; 128
    5da4:	ff 4f       	sbci	r31, 0xFF	; 255
    5da6:	30 81       	ld	r19, Z
	uint8_t bytesToRead = twi->bytesToRead;
    5da8:	31 96       	adiw	r30, 0x01	; 1
    5daa:	40 81       	ld	r20, Z

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    5dac:	dc 01       	movw	r26, r24
    5dae:	ed 91       	ld	r30, X+
    5db0:	fc 91       	ld	r31, X
    5db2:	24 81       	ldd	r18, Z+4	; 0x04
    5db4:	24 ff       	sbrs	r18, 4
    5db6:	0a c0       	rjmp	.+20     	; 0x5dcc <TWI_MasterWriteHandler+0x30>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5db8:	23 e0       	ldi	r18, 0x03	; 3
    5dba:	23 83       	std	Z+3, r18	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    5dbc:	fc 01       	movw	r30, r24
    5dbe:	eb 57       	subi	r30, 0x7B	; 123
    5dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc2:	25 e0       	ldi	r18, 0x05	; 5
    5dc4:	20 83       	st	Z, r18
		twi->status = TWIM_STATUS_READY;
    5dc6:	31 97       	sbiw	r30, 0x01	; 1
    5dc8:	10 82       	st	Z, r1
    5dca:	25 c0       	rjmp	.+74     	; 0x5e16 <TWI_MasterWriteHandler+0x7a>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    5dcc:	dc 01       	movw	r26, r24
    5dce:	ae 57       	subi	r26, 0x7E	; 126
    5dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    5dd2:	2c 91       	ld	r18, X
    5dd4:	23 17       	cp	r18, r19
    5dd6:	50 f4       	brcc	.+20     	; 0x5dec <TWI_MasterWriteHandler+0x50>
		uint8_t data = twi->writeData[twi->bytesWritten];
    5dd8:	2c 91       	ld	r18, X
    5dda:	ec 01       	movw	r28, r24
    5ddc:	c2 0f       	add	r28, r18
    5dde:	d1 1d       	adc	r29, r1
    5de0:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    5de2:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    5de4:	8c 91       	ld	r24, X
    5de6:	8f 5f       	subi	r24, 0xFF	; 255
    5de8:	8c 93       	st	X, r24
    5dea:	15 c0       	rjmp	.+42     	; 0x5e16 <TWI_MasterWriteHandler+0x7a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    5dec:	dc 01       	movw	r26, r24
    5dee:	ad 57       	subi	r26, 0x7D	; 125
    5df0:	bf 4f       	sbci	r27, 0xFF	; 255
    5df2:	2c 91       	ld	r18, X
    5df4:	24 17       	cp	r18, r20
    5df6:	30 f4       	brcc	.+12     	; 0x5e04 <TWI_MasterWriteHandler+0x68>
		uint8_t readAddress = twi->address | 0x01;
    5df8:	dc 01       	movw	r26, r24
    5dfa:	12 96       	adiw	r26, 0x02	; 2
    5dfc:	8c 91       	ld	r24, X
    5dfe:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    5e00:	86 83       	std	Z+6, r24	; 0x06
    5e02:	09 c0       	rjmp	.+18     	; 0x5e16 <TWI_MasterWriteHandler+0x7a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5e04:	23 e0       	ldi	r18, 0x03	; 3
    5e06:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    5e08:	fc 01       	movw	r30, r24
    5e0a:	eb 57       	subi	r30, 0x7B	; 123
    5e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0e:	21 e0       	ldi	r18, 0x01	; 1
    5e10:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    5e12:	31 97       	sbiw	r30, 0x01	; 1
    5e14:	10 82       	st	Z, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    5e16:	df 91       	pop	r29
    5e18:	cf 91       	pop	r28
    5e1a:	08 95       	ret

00005e1c <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	ed 57       	subi	r30, 0x7D	; 125
    5e20:	ff 4f       	sbci	r31, 0xFF	; 255
    5e22:	20 81       	ld	r18, Z
    5e24:	29 31       	cpi	r18, 0x19	; 25
    5e26:	90 f4       	brcc	.+36     	; 0x5e4c <TWI_MasterReadHandler+0x30>
		uint8_t data = twi->interface->MASTER.DATA;
    5e28:	dc 01       	movw	r26, r24
    5e2a:	ed 91       	ld	r30, X+
    5e2c:	fc 91       	ld	r31, X
    5e2e:	11 97       	sbiw	r26, 0x01	; 1
    5e30:	27 81       	ldd	r18, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    5e32:	fc 01       	movw	r30, r24
    5e34:	ed 57       	subi	r30, 0x7D	; 125
    5e36:	ff 4f       	sbci	r31, 0xFF	; 255
    5e38:	30 81       	ld	r19, Z
    5e3a:	a3 0f       	add	r26, r19
    5e3c:	b1 1d       	adc	r27, r1
    5e3e:	a9 59       	subi	r26, 0x99	; 153
    5e40:	bf 4f       	sbci	r27, 0xFF	; 255
    5e42:	2c 93       	st	X, r18
		twi->bytesRead++;
    5e44:	20 81       	ld	r18, Z
    5e46:	2f 5f       	subi	r18, 0xFF	; 255
    5e48:	20 83       	st	Z, r18
    5e4a:	0c c0       	rjmp	.+24     	; 0x5e64 <TWI_MasterReadHandler+0x48>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5e4c:	dc 01       	movw	r26, r24
    5e4e:	ed 91       	ld	r30, X+
    5e50:	fc 91       	ld	r31, X
    5e52:	23 e0       	ldi	r18, 0x03	; 3
    5e54:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    5e56:	22 e0       	ldi	r18, 0x02	; 2
    5e58:	fc 01       	movw	r30, r24
    5e5a:	eb 57       	subi	r30, 0x7B	; 123
    5e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e5e:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    5e60:	31 97       	sbiw	r30, 0x01	; 1
    5e62:	10 82       	st	Z, r1
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    5e64:	fc 01       	movw	r30, r24
    5e66:	ef 57       	subi	r30, 0x7F	; 127
    5e68:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6a:	30 81       	ld	r19, Z

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    5e6c:	32 96       	adiw	r30, 0x02	; 2
    5e6e:	20 81       	ld	r18, Z
    5e70:	23 17       	cp	r18, r19
    5e72:	30 f4       	brcc	.+12     	; 0x5e80 <TWI_MasterReadHandler+0x64>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5e74:	dc 01       	movw	r26, r24
    5e76:	ed 91       	ld	r30, X+
    5e78:	fc 91       	ld	r31, X
    5e7a:	82 e0       	ldi	r24, 0x02	; 2
    5e7c:	83 83       	std	Z+3, r24	; 0x03
    5e7e:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    5e80:	dc 01       	movw	r26, r24
    5e82:	ed 91       	ld	r30, X+
    5e84:	fc 91       	ld	r31, X
    5e86:	27 e0       	ldi	r18, 0x07	; 7
    5e88:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    5e8a:	fc 01       	movw	r30, r24
    5e8c:	eb 57       	subi	r30, 0x7B	; 123
    5e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e90:	21 e0       	ldi	r18, 0x01	; 1
    5e92:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    5e94:	31 97       	sbiw	r30, 0x01	; 1
    5e96:	10 82       	st	Z, r1
    5e98:	08 95       	ret

00005e9a <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	ed 91       	ld	r30, X+
    5e9e:	fc 91       	ld	r31, X
    5ea0:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    5ea2:	32 2f       	mov	r19, r18
    5ea4:	3c 70       	andi	r19, 0x0C	; 12
    5ea6:	19 f0       	breq	.+6      	; 0x5eae <TWI_MasterInterruptHandler+0x14>
		(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    5ea8:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <TWI_MasterArbitrationLostBusErrorHandler>
    5eac:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    5eae:	26 ff       	sbrs	r18, 6
    5eb0:	03 c0       	rjmp	.+6      	; 0x5eb8 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    5eb2:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <TWI_MasterWriteHandler>
    5eb6:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    5eb8:	22 23       	and	r18, r18
    5eba:	1c f4       	brge	.+6      	; 0x5ec2 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    5ebc:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <TWI_MasterReadHandler>
    5ec0:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	eb 57       	subi	r30, 0x7B	; 123
    5ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec8:	26 e0       	ldi	r18, 0x06	; 6
    5eca:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    5ecc:	31 97       	sbiw	r30, 0x01	; 1
    5ece:	10 82       	st	Z, r1
    5ed0:	08 95       	ret

00005ed2 <__subsf3>:
    5ed2:	50 58       	subi	r21, 0x80	; 128

00005ed4 <__addsf3>:
    5ed4:	bb 27       	eor	r27, r27
    5ed6:	aa 27       	eor	r26, r26
    5ed8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3x>
    5edc:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__fp_round>
    5ee0:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fp_pscA>
    5ee4:	38 f0       	brcs	.+14     	; 0x5ef4 <__addsf3+0x20>
    5ee6:	0e 94 ed 30 	call	0x61da	; 0x61da <__fp_pscB>
    5eea:	20 f0       	brcs	.+8      	; 0x5ef4 <__addsf3+0x20>
    5eec:	39 f4       	brne	.+14     	; 0x5efc <__addsf3+0x28>
    5eee:	9f 3f       	cpi	r25, 0xFF	; 255
    5ef0:	19 f4       	brne	.+6      	; 0x5ef8 <__addsf3+0x24>
    5ef2:	26 f4       	brtc	.+8      	; 0x5efc <__addsf3+0x28>
    5ef4:	0c 94 e3 30 	jmp	0x61c6	; 0x61c6 <__fp_nan>
    5ef8:	0e f4       	brtc	.+2      	; 0x5efc <__addsf3+0x28>
    5efa:	e0 95       	com	r30
    5efc:	e7 fb       	bst	r30, 7
    5efe:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <__fp_inf>

00005f02 <__addsf3x>:
    5f02:	e9 2f       	mov	r30, r25
    5f04:	0e 94 05 31 	call	0x620a	; 0x620a <__fp_split3>
    5f08:	58 f3       	brcs	.-42     	; 0x5ee0 <__addsf3+0xc>
    5f0a:	ba 17       	cp	r27, r26
    5f0c:	62 07       	cpc	r22, r18
    5f0e:	73 07       	cpc	r23, r19
    5f10:	84 07       	cpc	r24, r20
    5f12:	95 07       	cpc	r25, r21
    5f14:	20 f0       	brcs	.+8      	; 0x5f1e <__addsf3x+0x1c>
    5f16:	79 f4       	brne	.+30     	; 0x5f36 <__addsf3x+0x34>
    5f18:	a6 f5       	brtc	.+104    	; 0x5f82 <__addsf3x+0x80>
    5f1a:	0c 94 27 31 	jmp	0x624e	; 0x624e <__fp_zero>
    5f1e:	0e f4       	brtc	.+2      	; 0x5f22 <__addsf3x+0x20>
    5f20:	e0 95       	com	r30
    5f22:	0b 2e       	mov	r0, r27
    5f24:	ba 2f       	mov	r27, r26
    5f26:	a0 2d       	mov	r26, r0
    5f28:	0b 01       	movw	r0, r22
    5f2a:	b9 01       	movw	r22, r18
    5f2c:	90 01       	movw	r18, r0
    5f2e:	0c 01       	movw	r0, r24
    5f30:	ca 01       	movw	r24, r20
    5f32:	a0 01       	movw	r20, r0
    5f34:	11 24       	eor	r1, r1
    5f36:	ff 27       	eor	r31, r31
    5f38:	59 1b       	sub	r21, r25
    5f3a:	99 f0       	breq	.+38     	; 0x5f62 <__addsf3x+0x60>
    5f3c:	59 3f       	cpi	r21, 0xF9	; 249
    5f3e:	50 f4       	brcc	.+20     	; 0x5f54 <__addsf3x+0x52>
    5f40:	50 3e       	cpi	r21, 0xE0	; 224
    5f42:	68 f1       	brcs	.+90     	; 0x5f9e <__addsf3x+0x9c>
    5f44:	1a 16       	cp	r1, r26
    5f46:	f0 40       	sbci	r31, 0x00	; 0
    5f48:	a2 2f       	mov	r26, r18
    5f4a:	23 2f       	mov	r18, r19
    5f4c:	34 2f       	mov	r19, r20
    5f4e:	44 27       	eor	r20, r20
    5f50:	58 5f       	subi	r21, 0xF8	; 248
    5f52:	f3 cf       	rjmp	.-26     	; 0x5f3a <__addsf3x+0x38>
    5f54:	46 95       	lsr	r20
    5f56:	37 95       	ror	r19
    5f58:	27 95       	ror	r18
    5f5a:	a7 95       	ror	r26
    5f5c:	f0 40       	sbci	r31, 0x00	; 0
    5f5e:	53 95       	inc	r21
    5f60:	c9 f7       	brne	.-14     	; 0x5f54 <__addsf3x+0x52>
    5f62:	7e f4       	brtc	.+30     	; 0x5f82 <__addsf3x+0x80>
    5f64:	1f 16       	cp	r1, r31
    5f66:	ba 0b       	sbc	r27, r26
    5f68:	62 0b       	sbc	r22, r18
    5f6a:	73 0b       	sbc	r23, r19
    5f6c:	84 0b       	sbc	r24, r20
    5f6e:	ba f0       	brmi	.+46     	; 0x5f9e <__addsf3x+0x9c>
    5f70:	91 50       	subi	r25, 0x01	; 1
    5f72:	a1 f0       	breq	.+40     	; 0x5f9c <__addsf3x+0x9a>
    5f74:	ff 0f       	add	r31, r31
    5f76:	bb 1f       	adc	r27, r27
    5f78:	66 1f       	adc	r22, r22
    5f7a:	77 1f       	adc	r23, r23
    5f7c:	88 1f       	adc	r24, r24
    5f7e:	c2 f7       	brpl	.-16     	; 0x5f70 <__addsf3x+0x6e>
    5f80:	0e c0       	rjmp	.+28     	; 0x5f9e <__addsf3x+0x9c>
    5f82:	ba 0f       	add	r27, r26
    5f84:	62 1f       	adc	r22, r18
    5f86:	73 1f       	adc	r23, r19
    5f88:	84 1f       	adc	r24, r20
    5f8a:	48 f4       	brcc	.+18     	; 0x5f9e <__addsf3x+0x9c>
    5f8c:	87 95       	ror	r24
    5f8e:	77 95       	ror	r23
    5f90:	67 95       	ror	r22
    5f92:	b7 95       	ror	r27
    5f94:	f7 95       	ror	r31
    5f96:	9e 3f       	cpi	r25, 0xFE	; 254
    5f98:	08 f0       	brcs	.+2      	; 0x5f9c <__addsf3x+0x9a>
    5f9a:	b0 cf       	rjmp	.-160    	; 0x5efc <__addsf3+0x28>
    5f9c:	93 95       	inc	r25
    5f9e:	88 0f       	add	r24, r24
    5fa0:	08 f0       	brcs	.+2      	; 0x5fa4 <__addsf3x+0xa2>
    5fa2:	99 27       	eor	r25, r25
    5fa4:	ee 0f       	add	r30, r30
    5fa6:	97 95       	ror	r25
    5fa8:	87 95       	ror	r24
    5faa:	08 95       	ret

00005fac <__cmpsf2>:
    5fac:	0e 94 b9 30 	call	0x6172	; 0x6172 <__fp_cmp>
    5fb0:	08 f4       	brcc	.+2      	; 0x5fb4 <__cmpsf2+0x8>
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	08 95       	ret

00005fb6 <__divsf3>:
    5fb6:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__divsf3x>
    5fba:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__fp_round>
    5fbe:	0e 94 ed 30 	call	0x61da	; 0x61da <__fp_pscB>
    5fc2:	58 f0       	brcs	.+22     	; 0x5fda <__divsf3+0x24>
    5fc4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fp_pscA>
    5fc8:	40 f0       	brcs	.+16     	; 0x5fda <__divsf3+0x24>
    5fca:	29 f4       	brne	.+10     	; 0x5fd6 <__divsf3+0x20>
    5fcc:	5f 3f       	cpi	r21, 0xFF	; 255
    5fce:	29 f0       	breq	.+10     	; 0x5fda <__divsf3+0x24>
    5fd0:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <__fp_inf>
    5fd4:	51 11       	cpse	r21, r1
    5fd6:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__fp_szero>
    5fda:	0c 94 e3 30 	jmp	0x61c6	; 0x61c6 <__fp_nan>

00005fde <__divsf3x>:
    5fde:	0e 94 05 31 	call	0x620a	; 0x620a <__fp_split3>
    5fe2:	68 f3       	brcs	.-38     	; 0x5fbe <__divsf3+0x8>

00005fe4 <__divsf3_pse>:
    5fe4:	99 23       	and	r25, r25
    5fe6:	b1 f3       	breq	.-20     	; 0x5fd4 <__divsf3+0x1e>
    5fe8:	55 23       	and	r21, r21
    5fea:	91 f3       	breq	.-28     	; 0x5fd0 <__divsf3+0x1a>
    5fec:	95 1b       	sub	r25, r21
    5fee:	55 0b       	sbc	r21, r21
    5ff0:	bb 27       	eor	r27, r27
    5ff2:	aa 27       	eor	r26, r26
    5ff4:	62 17       	cp	r22, r18
    5ff6:	73 07       	cpc	r23, r19
    5ff8:	84 07       	cpc	r24, r20
    5ffa:	38 f0       	brcs	.+14     	; 0x600a <__divsf3_pse+0x26>
    5ffc:	9f 5f       	subi	r25, 0xFF	; 255
    5ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    6000:	22 0f       	add	r18, r18
    6002:	33 1f       	adc	r19, r19
    6004:	44 1f       	adc	r20, r20
    6006:	aa 1f       	adc	r26, r26
    6008:	a9 f3       	breq	.-22     	; 0x5ff4 <__divsf3_pse+0x10>
    600a:	35 d0       	rcall	.+106    	; 0x6076 <__divsf3_pse+0x92>
    600c:	0e 2e       	mov	r0, r30
    600e:	3a f0       	brmi	.+14     	; 0x601e <__divsf3_pse+0x3a>
    6010:	e0 e8       	ldi	r30, 0x80	; 128
    6012:	32 d0       	rcall	.+100    	; 0x6078 <__divsf3_pse+0x94>
    6014:	91 50       	subi	r25, 0x01	; 1
    6016:	50 40       	sbci	r21, 0x00	; 0
    6018:	e6 95       	lsr	r30
    601a:	00 1c       	adc	r0, r0
    601c:	ca f7       	brpl	.-14     	; 0x6010 <__divsf3_pse+0x2c>
    601e:	2b d0       	rcall	.+86     	; 0x6076 <__divsf3_pse+0x92>
    6020:	fe 2f       	mov	r31, r30
    6022:	29 d0       	rcall	.+82     	; 0x6076 <__divsf3_pse+0x92>
    6024:	66 0f       	add	r22, r22
    6026:	77 1f       	adc	r23, r23
    6028:	88 1f       	adc	r24, r24
    602a:	bb 1f       	adc	r27, r27
    602c:	26 17       	cp	r18, r22
    602e:	37 07       	cpc	r19, r23
    6030:	48 07       	cpc	r20, r24
    6032:	ab 07       	cpc	r26, r27
    6034:	b0 e8       	ldi	r27, 0x80	; 128
    6036:	09 f0       	breq	.+2      	; 0x603a <__divsf3_pse+0x56>
    6038:	bb 0b       	sbc	r27, r27
    603a:	80 2d       	mov	r24, r0
    603c:	bf 01       	movw	r22, r30
    603e:	ff 27       	eor	r31, r31
    6040:	93 58       	subi	r25, 0x83	; 131
    6042:	5f 4f       	sbci	r21, 0xFF	; 255
    6044:	3a f0       	brmi	.+14     	; 0x6054 <__divsf3_pse+0x70>
    6046:	9e 3f       	cpi	r25, 0xFE	; 254
    6048:	51 05       	cpc	r21, r1
    604a:	78 f0       	brcs	.+30     	; 0x606a <__divsf3_pse+0x86>
    604c:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <__fp_inf>
    6050:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__fp_szero>
    6054:	5f 3f       	cpi	r21, 0xFF	; 255
    6056:	e4 f3       	brlt	.-8      	; 0x6050 <__divsf3_pse+0x6c>
    6058:	98 3e       	cpi	r25, 0xE8	; 232
    605a:	d4 f3       	brlt	.-12     	; 0x6050 <__divsf3_pse+0x6c>
    605c:	86 95       	lsr	r24
    605e:	77 95       	ror	r23
    6060:	67 95       	ror	r22
    6062:	b7 95       	ror	r27
    6064:	f7 95       	ror	r31
    6066:	9f 5f       	subi	r25, 0xFF	; 255
    6068:	c9 f7       	brne	.-14     	; 0x605c <__divsf3_pse+0x78>
    606a:	88 0f       	add	r24, r24
    606c:	91 1d       	adc	r25, r1
    606e:	96 95       	lsr	r25
    6070:	87 95       	ror	r24
    6072:	97 f9       	bld	r25, 7
    6074:	08 95       	ret
    6076:	e1 e0       	ldi	r30, 0x01	; 1
    6078:	66 0f       	add	r22, r22
    607a:	77 1f       	adc	r23, r23
    607c:	88 1f       	adc	r24, r24
    607e:	bb 1f       	adc	r27, r27
    6080:	62 17       	cp	r22, r18
    6082:	73 07       	cpc	r23, r19
    6084:	84 07       	cpc	r24, r20
    6086:	ba 07       	cpc	r27, r26
    6088:	20 f0       	brcs	.+8      	; 0x6092 <__divsf3_pse+0xae>
    608a:	62 1b       	sub	r22, r18
    608c:	73 0b       	sbc	r23, r19
    608e:	84 0b       	sbc	r24, r20
    6090:	ba 0b       	sbc	r27, r26
    6092:	ee 1f       	adc	r30, r30
    6094:	88 f7       	brcc	.-30     	; 0x6078 <__divsf3_pse+0x94>
    6096:	e0 95       	com	r30
    6098:	08 95       	ret

0000609a <__fixunssfsi>:
    609a:	0e 94 0d 31 	call	0x621a	; 0x621a <__fp_splitA>
    609e:	88 f0       	brcs	.+34     	; 0x60c2 <__fixunssfsi+0x28>
    60a0:	9f 57       	subi	r25, 0x7F	; 127
    60a2:	98 f0       	brcs	.+38     	; 0x60ca <__fixunssfsi+0x30>
    60a4:	b9 2f       	mov	r27, r25
    60a6:	99 27       	eor	r25, r25
    60a8:	b7 51       	subi	r27, 0x17	; 23
    60aa:	b0 f0       	brcs	.+44     	; 0x60d8 <__fixunssfsi+0x3e>
    60ac:	e1 f0       	breq	.+56     	; 0x60e6 <__fixunssfsi+0x4c>
    60ae:	66 0f       	add	r22, r22
    60b0:	77 1f       	adc	r23, r23
    60b2:	88 1f       	adc	r24, r24
    60b4:	99 1f       	adc	r25, r25
    60b6:	1a f0       	brmi	.+6      	; 0x60be <__fixunssfsi+0x24>
    60b8:	ba 95       	dec	r27
    60ba:	c9 f7       	brne	.-14     	; 0x60ae <__fixunssfsi+0x14>
    60bc:	14 c0       	rjmp	.+40     	; 0x60e6 <__fixunssfsi+0x4c>
    60be:	b1 30       	cpi	r27, 0x01	; 1
    60c0:	91 f0       	breq	.+36     	; 0x60e6 <__fixunssfsi+0x4c>
    60c2:	0e 94 27 31 	call	0x624e	; 0x624e <__fp_zero>
    60c6:	b1 e0       	ldi	r27, 0x01	; 1
    60c8:	08 95       	ret
    60ca:	0c 94 27 31 	jmp	0x624e	; 0x624e <__fp_zero>
    60ce:	67 2f       	mov	r22, r23
    60d0:	78 2f       	mov	r23, r24
    60d2:	88 27       	eor	r24, r24
    60d4:	b8 5f       	subi	r27, 0xF8	; 248
    60d6:	39 f0       	breq	.+14     	; 0x60e6 <__fixunssfsi+0x4c>
    60d8:	b9 3f       	cpi	r27, 0xF9	; 249
    60da:	cc f3       	brlt	.-14     	; 0x60ce <__fixunssfsi+0x34>
    60dc:	86 95       	lsr	r24
    60de:	77 95       	ror	r23
    60e0:	67 95       	ror	r22
    60e2:	b3 95       	inc	r27
    60e4:	d9 f7       	brne	.-10     	; 0x60dc <__fixunssfsi+0x42>
    60e6:	3e f4       	brtc	.+14     	; 0x60f6 <__fixunssfsi+0x5c>
    60e8:	90 95       	com	r25
    60ea:	80 95       	com	r24
    60ec:	70 95       	com	r23
    60ee:	61 95       	neg	r22
    60f0:	7f 4f       	sbci	r23, 0xFF	; 255
    60f2:	8f 4f       	sbci	r24, 0xFF	; 255
    60f4:	9f 4f       	sbci	r25, 0xFF	; 255
    60f6:	08 95       	ret

000060f8 <__floatunsisf>:
    60f8:	e8 94       	clt
    60fa:	09 c0       	rjmp	.+18     	; 0x610e <__floatsisf+0x12>

000060fc <__floatsisf>:
    60fc:	97 fb       	bst	r25, 7
    60fe:	3e f4       	brtc	.+14     	; 0x610e <__floatsisf+0x12>
    6100:	90 95       	com	r25
    6102:	80 95       	com	r24
    6104:	70 95       	com	r23
    6106:	61 95       	neg	r22
    6108:	7f 4f       	sbci	r23, 0xFF	; 255
    610a:	8f 4f       	sbci	r24, 0xFF	; 255
    610c:	9f 4f       	sbci	r25, 0xFF	; 255
    610e:	99 23       	and	r25, r25
    6110:	a9 f0       	breq	.+42     	; 0x613c <__floatsisf+0x40>
    6112:	f9 2f       	mov	r31, r25
    6114:	96 e9       	ldi	r25, 0x96	; 150
    6116:	bb 27       	eor	r27, r27
    6118:	93 95       	inc	r25
    611a:	f6 95       	lsr	r31
    611c:	87 95       	ror	r24
    611e:	77 95       	ror	r23
    6120:	67 95       	ror	r22
    6122:	b7 95       	ror	r27
    6124:	f1 11       	cpse	r31, r1
    6126:	f8 cf       	rjmp	.-16     	; 0x6118 <__floatsisf+0x1c>
    6128:	fa f4       	brpl	.+62     	; 0x6168 <__floatsisf+0x6c>
    612a:	bb 0f       	add	r27, r27
    612c:	11 f4       	brne	.+4      	; 0x6132 <__floatsisf+0x36>
    612e:	60 ff       	sbrs	r22, 0
    6130:	1b c0       	rjmp	.+54     	; 0x6168 <__floatsisf+0x6c>
    6132:	6f 5f       	subi	r22, 0xFF	; 255
    6134:	7f 4f       	sbci	r23, 0xFF	; 255
    6136:	8f 4f       	sbci	r24, 0xFF	; 255
    6138:	9f 4f       	sbci	r25, 0xFF	; 255
    613a:	16 c0       	rjmp	.+44     	; 0x6168 <__floatsisf+0x6c>
    613c:	88 23       	and	r24, r24
    613e:	11 f0       	breq	.+4      	; 0x6144 <__floatsisf+0x48>
    6140:	96 e9       	ldi	r25, 0x96	; 150
    6142:	11 c0       	rjmp	.+34     	; 0x6166 <__floatsisf+0x6a>
    6144:	77 23       	and	r23, r23
    6146:	21 f0       	breq	.+8      	; 0x6150 <__floatsisf+0x54>
    6148:	9e e8       	ldi	r25, 0x8E	; 142
    614a:	87 2f       	mov	r24, r23
    614c:	76 2f       	mov	r23, r22
    614e:	05 c0       	rjmp	.+10     	; 0x615a <__floatsisf+0x5e>
    6150:	66 23       	and	r22, r22
    6152:	71 f0       	breq	.+28     	; 0x6170 <__floatsisf+0x74>
    6154:	96 e8       	ldi	r25, 0x86	; 134
    6156:	86 2f       	mov	r24, r22
    6158:	70 e0       	ldi	r23, 0x00	; 0
    615a:	60 e0       	ldi	r22, 0x00	; 0
    615c:	2a f0       	brmi	.+10     	; 0x6168 <__floatsisf+0x6c>
    615e:	9a 95       	dec	r25
    6160:	66 0f       	add	r22, r22
    6162:	77 1f       	adc	r23, r23
    6164:	88 1f       	adc	r24, r24
    6166:	da f7       	brpl	.-10     	; 0x615e <__floatsisf+0x62>
    6168:	88 0f       	add	r24, r24
    616a:	96 95       	lsr	r25
    616c:	87 95       	ror	r24
    616e:	97 f9       	bld	r25, 7
    6170:	08 95       	ret

00006172 <__fp_cmp>:
    6172:	99 0f       	add	r25, r25
    6174:	00 08       	sbc	r0, r0
    6176:	55 0f       	add	r21, r21
    6178:	aa 0b       	sbc	r26, r26
    617a:	e0 e8       	ldi	r30, 0x80	; 128
    617c:	fe ef       	ldi	r31, 0xFE	; 254
    617e:	16 16       	cp	r1, r22
    6180:	17 06       	cpc	r1, r23
    6182:	e8 07       	cpc	r30, r24
    6184:	f9 07       	cpc	r31, r25
    6186:	c0 f0       	brcs	.+48     	; 0x61b8 <__fp_cmp+0x46>
    6188:	12 16       	cp	r1, r18
    618a:	13 06       	cpc	r1, r19
    618c:	e4 07       	cpc	r30, r20
    618e:	f5 07       	cpc	r31, r21
    6190:	98 f0       	brcs	.+38     	; 0x61b8 <__fp_cmp+0x46>
    6192:	62 1b       	sub	r22, r18
    6194:	73 0b       	sbc	r23, r19
    6196:	84 0b       	sbc	r24, r20
    6198:	95 0b       	sbc	r25, r21
    619a:	39 f4       	brne	.+14     	; 0x61aa <__fp_cmp+0x38>
    619c:	0a 26       	eor	r0, r26
    619e:	61 f0       	breq	.+24     	; 0x61b8 <__fp_cmp+0x46>
    61a0:	23 2b       	or	r18, r19
    61a2:	24 2b       	or	r18, r20
    61a4:	25 2b       	or	r18, r21
    61a6:	21 f4       	brne	.+8      	; 0x61b0 <__fp_cmp+0x3e>
    61a8:	08 95       	ret
    61aa:	0a 26       	eor	r0, r26
    61ac:	09 f4       	brne	.+2      	; 0x61b0 <__fp_cmp+0x3e>
    61ae:	a1 40       	sbci	r26, 0x01	; 1
    61b0:	a6 95       	lsr	r26
    61b2:	8f ef       	ldi	r24, 0xFF	; 255
    61b4:	81 1d       	adc	r24, r1
    61b6:	81 1d       	adc	r24, r1
    61b8:	08 95       	ret

000061ba <__fp_inf>:
    61ba:	97 f9       	bld	r25, 7
    61bc:	9f 67       	ori	r25, 0x7F	; 127
    61be:	80 e8       	ldi	r24, 0x80	; 128
    61c0:	70 e0       	ldi	r23, 0x00	; 0
    61c2:	60 e0       	ldi	r22, 0x00	; 0
    61c4:	08 95       	ret

000061c6 <__fp_nan>:
    61c6:	9f ef       	ldi	r25, 0xFF	; 255
    61c8:	80 ec       	ldi	r24, 0xC0	; 192
    61ca:	08 95       	ret

000061cc <__fp_pscA>:
    61cc:	00 24       	eor	r0, r0
    61ce:	0a 94       	dec	r0
    61d0:	16 16       	cp	r1, r22
    61d2:	17 06       	cpc	r1, r23
    61d4:	18 06       	cpc	r1, r24
    61d6:	09 06       	cpc	r0, r25
    61d8:	08 95       	ret

000061da <__fp_pscB>:
    61da:	00 24       	eor	r0, r0
    61dc:	0a 94       	dec	r0
    61de:	12 16       	cp	r1, r18
    61e0:	13 06       	cpc	r1, r19
    61e2:	14 06       	cpc	r1, r20
    61e4:	05 06       	cpc	r0, r21
    61e6:	08 95       	ret

000061e8 <__fp_round>:
    61e8:	09 2e       	mov	r0, r25
    61ea:	03 94       	inc	r0
    61ec:	00 0c       	add	r0, r0
    61ee:	11 f4       	brne	.+4      	; 0x61f4 <__fp_round+0xc>
    61f0:	88 23       	and	r24, r24
    61f2:	52 f0       	brmi	.+20     	; 0x6208 <__fp_round+0x20>
    61f4:	bb 0f       	add	r27, r27
    61f6:	40 f4       	brcc	.+16     	; 0x6208 <__fp_round+0x20>
    61f8:	bf 2b       	or	r27, r31
    61fa:	11 f4       	brne	.+4      	; 0x6200 <__fp_round+0x18>
    61fc:	60 ff       	sbrs	r22, 0
    61fe:	04 c0       	rjmp	.+8      	; 0x6208 <__fp_round+0x20>
    6200:	6f 5f       	subi	r22, 0xFF	; 255
    6202:	7f 4f       	sbci	r23, 0xFF	; 255
    6204:	8f 4f       	sbci	r24, 0xFF	; 255
    6206:	9f 4f       	sbci	r25, 0xFF	; 255
    6208:	08 95       	ret

0000620a <__fp_split3>:
    620a:	57 fd       	sbrc	r21, 7
    620c:	90 58       	subi	r25, 0x80	; 128
    620e:	44 0f       	add	r20, r20
    6210:	55 1f       	adc	r21, r21
    6212:	59 f0       	breq	.+22     	; 0x622a <__fp_splitA+0x10>
    6214:	5f 3f       	cpi	r21, 0xFF	; 255
    6216:	71 f0       	breq	.+28     	; 0x6234 <__fp_splitA+0x1a>
    6218:	47 95       	ror	r20

0000621a <__fp_splitA>:
    621a:	88 0f       	add	r24, r24
    621c:	97 fb       	bst	r25, 7
    621e:	99 1f       	adc	r25, r25
    6220:	61 f0       	breq	.+24     	; 0x623a <__fp_splitA+0x20>
    6222:	9f 3f       	cpi	r25, 0xFF	; 255
    6224:	79 f0       	breq	.+30     	; 0x6244 <__fp_splitA+0x2a>
    6226:	87 95       	ror	r24
    6228:	08 95       	ret
    622a:	12 16       	cp	r1, r18
    622c:	13 06       	cpc	r1, r19
    622e:	14 06       	cpc	r1, r20
    6230:	55 1f       	adc	r21, r21
    6232:	f2 cf       	rjmp	.-28     	; 0x6218 <__fp_split3+0xe>
    6234:	46 95       	lsr	r20
    6236:	f1 df       	rcall	.-30     	; 0x621a <__fp_splitA>
    6238:	08 c0       	rjmp	.+16     	; 0x624a <__fp_splitA+0x30>
    623a:	16 16       	cp	r1, r22
    623c:	17 06       	cpc	r1, r23
    623e:	18 06       	cpc	r1, r24
    6240:	99 1f       	adc	r25, r25
    6242:	f1 cf       	rjmp	.-30     	; 0x6226 <__fp_splitA+0xc>
    6244:	86 95       	lsr	r24
    6246:	71 05       	cpc	r23, r1
    6248:	61 05       	cpc	r22, r1
    624a:	08 94       	sec
    624c:	08 95       	ret

0000624e <__fp_zero>:
    624e:	e8 94       	clt

00006250 <__fp_szero>:
    6250:	bb 27       	eor	r27, r27
    6252:	66 27       	eor	r22, r22
    6254:	77 27       	eor	r23, r23
    6256:	cb 01       	movw	r24, r22
    6258:	97 f9       	bld	r25, 7
    625a:	08 95       	ret

0000625c <__gesf2>:
    625c:	0e 94 b9 30 	call	0x6172	; 0x6172 <__fp_cmp>
    6260:	08 f4       	brcc	.+2      	; 0x6264 <__gesf2+0x8>
    6262:	8f ef       	ldi	r24, 0xFF	; 255
    6264:	08 95       	ret

00006266 <__mulsf3>:
    6266:	0e 94 46 31 	call	0x628c	; 0x628c <__mulsf3x>
    626a:	0c 94 f4 30 	jmp	0x61e8	; 0x61e8 <__fp_round>
    626e:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fp_pscA>
    6272:	38 f0       	brcs	.+14     	; 0x6282 <__mulsf3+0x1c>
    6274:	0e 94 ed 30 	call	0x61da	; 0x61da <__fp_pscB>
    6278:	20 f0       	brcs	.+8      	; 0x6282 <__mulsf3+0x1c>
    627a:	95 23       	and	r25, r21
    627c:	11 f0       	breq	.+4      	; 0x6282 <__mulsf3+0x1c>
    627e:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <__fp_inf>
    6282:	0c 94 e3 30 	jmp	0x61c6	; 0x61c6 <__fp_nan>
    6286:	11 24       	eor	r1, r1
    6288:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__fp_szero>

0000628c <__mulsf3x>:
    628c:	0e 94 05 31 	call	0x620a	; 0x620a <__fp_split3>
    6290:	70 f3       	brcs	.-36     	; 0x626e <__mulsf3+0x8>

00006292 <__mulsf3_pse>:
    6292:	95 9f       	mul	r25, r21
    6294:	c1 f3       	breq	.-16     	; 0x6286 <__mulsf3+0x20>
    6296:	95 0f       	add	r25, r21
    6298:	50 e0       	ldi	r21, 0x00	; 0
    629a:	55 1f       	adc	r21, r21
    629c:	62 9f       	mul	r22, r18
    629e:	f0 01       	movw	r30, r0
    62a0:	72 9f       	mul	r23, r18
    62a2:	bb 27       	eor	r27, r27
    62a4:	f0 0d       	add	r31, r0
    62a6:	b1 1d       	adc	r27, r1
    62a8:	63 9f       	mul	r22, r19
    62aa:	aa 27       	eor	r26, r26
    62ac:	f0 0d       	add	r31, r0
    62ae:	b1 1d       	adc	r27, r1
    62b0:	aa 1f       	adc	r26, r26
    62b2:	64 9f       	mul	r22, r20
    62b4:	66 27       	eor	r22, r22
    62b6:	b0 0d       	add	r27, r0
    62b8:	a1 1d       	adc	r26, r1
    62ba:	66 1f       	adc	r22, r22
    62bc:	82 9f       	mul	r24, r18
    62be:	22 27       	eor	r18, r18
    62c0:	b0 0d       	add	r27, r0
    62c2:	a1 1d       	adc	r26, r1
    62c4:	62 1f       	adc	r22, r18
    62c6:	73 9f       	mul	r23, r19
    62c8:	b0 0d       	add	r27, r0
    62ca:	a1 1d       	adc	r26, r1
    62cc:	62 1f       	adc	r22, r18
    62ce:	83 9f       	mul	r24, r19
    62d0:	a0 0d       	add	r26, r0
    62d2:	61 1d       	adc	r22, r1
    62d4:	22 1f       	adc	r18, r18
    62d6:	74 9f       	mul	r23, r20
    62d8:	33 27       	eor	r19, r19
    62da:	a0 0d       	add	r26, r0
    62dc:	61 1d       	adc	r22, r1
    62de:	23 1f       	adc	r18, r19
    62e0:	84 9f       	mul	r24, r20
    62e2:	60 0d       	add	r22, r0
    62e4:	21 1d       	adc	r18, r1
    62e6:	82 2f       	mov	r24, r18
    62e8:	76 2f       	mov	r23, r22
    62ea:	6a 2f       	mov	r22, r26
    62ec:	11 24       	eor	r1, r1
    62ee:	9f 57       	subi	r25, 0x7F	; 127
    62f0:	50 40       	sbci	r21, 0x00	; 0
    62f2:	9a f0       	brmi	.+38     	; 0x631a <__mulsf3_pse+0x88>
    62f4:	f1 f0       	breq	.+60     	; 0x6332 <__mulsf3_pse+0xa0>
    62f6:	88 23       	and	r24, r24
    62f8:	4a f0       	brmi	.+18     	; 0x630c <__mulsf3_pse+0x7a>
    62fa:	ee 0f       	add	r30, r30
    62fc:	ff 1f       	adc	r31, r31
    62fe:	bb 1f       	adc	r27, r27
    6300:	66 1f       	adc	r22, r22
    6302:	77 1f       	adc	r23, r23
    6304:	88 1f       	adc	r24, r24
    6306:	91 50       	subi	r25, 0x01	; 1
    6308:	50 40       	sbci	r21, 0x00	; 0
    630a:	a9 f7       	brne	.-22     	; 0x62f6 <__mulsf3_pse+0x64>
    630c:	9e 3f       	cpi	r25, 0xFE	; 254
    630e:	51 05       	cpc	r21, r1
    6310:	80 f0       	brcs	.+32     	; 0x6332 <__mulsf3_pse+0xa0>
    6312:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <__fp_inf>
    6316:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__fp_szero>
    631a:	5f 3f       	cpi	r21, 0xFF	; 255
    631c:	e4 f3       	brlt	.-8      	; 0x6316 <__mulsf3_pse+0x84>
    631e:	98 3e       	cpi	r25, 0xE8	; 232
    6320:	d4 f3       	brlt	.-12     	; 0x6316 <__mulsf3_pse+0x84>
    6322:	86 95       	lsr	r24
    6324:	77 95       	ror	r23
    6326:	67 95       	ror	r22
    6328:	b7 95       	ror	r27
    632a:	f7 95       	ror	r31
    632c:	e7 95       	ror	r30
    632e:	9f 5f       	subi	r25, 0xFF	; 255
    6330:	c1 f7       	brne	.-16     	; 0x6322 <__mulsf3_pse+0x90>
    6332:	fe 2b       	or	r31, r30
    6334:	88 0f       	add	r24, r24
    6336:	91 1d       	adc	r25, r1
    6338:	96 95       	lsr	r25
    633a:	87 95       	ror	r24
    633c:	97 f9       	bld	r25, 7
    633e:	08 95       	ret

00006340 <__udivmodhi4>:
    6340:	aa 1b       	sub	r26, r26
    6342:	bb 1b       	sub	r27, r27
    6344:	51 e1       	ldi	r21, 0x11	; 17
    6346:	07 c0       	rjmp	.+14     	; 0x6356 <__udivmodhi4_ep>

00006348 <__udivmodhi4_loop>:
    6348:	aa 1f       	adc	r26, r26
    634a:	bb 1f       	adc	r27, r27
    634c:	a6 17       	cp	r26, r22
    634e:	b7 07       	cpc	r27, r23
    6350:	10 f0       	brcs	.+4      	; 0x6356 <__udivmodhi4_ep>
    6352:	a6 1b       	sub	r26, r22
    6354:	b7 0b       	sbc	r27, r23

00006356 <__udivmodhi4_ep>:
    6356:	88 1f       	adc	r24, r24
    6358:	99 1f       	adc	r25, r25
    635a:	5a 95       	dec	r21
    635c:	a9 f7       	brne	.-22     	; 0x6348 <__udivmodhi4_loop>
    635e:	80 95       	com	r24
    6360:	90 95       	com	r25
    6362:	bc 01       	movw	r22, r24
    6364:	cd 01       	movw	r24, r26
    6366:	08 95       	ret

00006368 <__divmodhi4>:
    6368:	97 fb       	bst	r25, 7
    636a:	07 2e       	mov	r0, r23
    636c:	16 f4       	brtc	.+4      	; 0x6372 <__divmodhi4+0xa>
    636e:	00 94       	com	r0
    6370:	07 d0       	rcall	.+14     	; 0x6380 <__divmodhi4_neg1>
    6372:	77 fd       	sbrc	r23, 7
    6374:	09 d0       	rcall	.+18     	; 0x6388 <__divmodhi4_neg2>
    6376:	0e 94 a0 31 	call	0x6340	; 0x6340 <__udivmodhi4>
    637a:	07 fc       	sbrc	r0, 7
    637c:	05 d0       	rcall	.+10     	; 0x6388 <__divmodhi4_neg2>
    637e:	3e f4       	brtc	.+14     	; 0x638e <__divmodhi4_exit>

00006380 <__divmodhi4_neg1>:
    6380:	90 95       	com	r25
    6382:	81 95       	neg	r24
    6384:	9f 4f       	sbci	r25, 0xFF	; 255
    6386:	08 95       	ret

00006388 <__divmodhi4_neg2>:
    6388:	70 95       	com	r23
    638a:	61 95       	neg	r22
    638c:	7f 4f       	sbci	r23, 0xFF	; 255

0000638e <__divmodhi4_exit>:
    638e:	08 95       	ret

00006390 <__udivmodsi4>:
    6390:	a1 e2       	ldi	r26, 0x21	; 33
    6392:	1a 2e       	mov	r1, r26
    6394:	aa 1b       	sub	r26, r26
    6396:	bb 1b       	sub	r27, r27
    6398:	fd 01       	movw	r30, r26
    639a:	0d c0       	rjmp	.+26     	; 0x63b6 <__udivmodsi4_ep>

0000639c <__udivmodsi4_loop>:
    639c:	aa 1f       	adc	r26, r26
    639e:	bb 1f       	adc	r27, r27
    63a0:	ee 1f       	adc	r30, r30
    63a2:	ff 1f       	adc	r31, r31
    63a4:	a2 17       	cp	r26, r18
    63a6:	b3 07       	cpc	r27, r19
    63a8:	e4 07       	cpc	r30, r20
    63aa:	f5 07       	cpc	r31, r21
    63ac:	20 f0       	brcs	.+8      	; 0x63b6 <__udivmodsi4_ep>
    63ae:	a2 1b       	sub	r26, r18
    63b0:	b3 0b       	sbc	r27, r19
    63b2:	e4 0b       	sbc	r30, r20
    63b4:	f5 0b       	sbc	r31, r21

000063b6 <__udivmodsi4_ep>:
    63b6:	66 1f       	adc	r22, r22
    63b8:	77 1f       	adc	r23, r23
    63ba:	88 1f       	adc	r24, r24
    63bc:	99 1f       	adc	r25, r25
    63be:	1a 94       	dec	r1
    63c0:	69 f7       	brne	.-38     	; 0x639c <__udivmodsi4_loop>
    63c2:	60 95       	com	r22
    63c4:	70 95       	com	r23
    63c6:	80 95       	com	r24
    63c8:	90 95       	com	r25
    63ca:	9b 01       	movw	r18, r22
    63cc:	ac 01       	movw	r20, r24
    63ce:	bd 01       	movw	r22, r26
    63d0:	cf 01       	movw	r24, r30
    63d2:	08 95       	ret

000063d4 <__tablejump2__>:
    63d4:	ee 0f       	add	r30, r30
    63d6:	ff 1f       	adc	r31, r31
    63d8:	00 24       	eor	r0, r0
    63da:	00 1c       	adc	r0, r0
    63dc:	0b be       	out	0x3b, r0	; 59
    63de:	07 90       	elpm	r0, Z+
    63e0:	f6 91       	elpm	r31, Z
    63e2:	e0 2d       	mov	r30, r0
    63e4:	1b be       	out	0x3b, r1	; 59
    63e6:	09 94       	ijmp

000063e8 <__umulhisi3>:
    63e8:	a2 9f       	mul	r26, r18
    63ea:	b0 01       	movw	r22, r0
    63ec:	b3 9f       	mul	r27, r19
    63ee:	c0 01       	movw	r24, r0
    63f0:	a3 9f       	mul	r26, r19
    63f2:	70 0d       	add	r23, r0
    63f4:	81 1d       	adc	r24, r1
    63f6:	11 24       	eor	r1, r1
    63f8:	91 1d       	adc	r25, r1
    63fa:	b2 9f       	mul	r27, r18
    63fc:	70 0d       	add	r23, r0
    63fe:	81 1d       	adc	r24, r1
    6400:	11 24       	eor	r1, r1
    6402:	91 1d       	adc	r25, r1
    6404:	08 95       	ret

00006406 <__muluhisi3>:
    6406:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__umulhisi3>
    640a:	a5 9f       	mul	r26, r21
    640c:	90 0d       	add	r25, r0
    640e:	b4 9f       	mul	r27, r20
    6410:	90 0d       	add	r25, r0
    6412:	a4 9f       	mul	r26, r20
    6414:	80 0d       	add	r24, r0
    6416:	91 1d       	adc	r25, r1
    6418:	11 24       	eor	r1, r1
    641a:	08 95       	ret

0000641c <strcmp>:
    641c:	fb 01       	movw	r30, r22
    641e:	dc 01       	movw	r26, r24
    6420:	8d 91       	ld	r24, X+
    6422:	01 90       	ld	r0, Z+
    6424:	80 19       	sub	r24, r0
    6426:	01 10       	cpse	r0, r1
    6428:	d9 f3       	breq	.-10     	; 0x6420 <strcmp+0x4>
    642a:	99 0b       	sbc	r25, r25
    642c:	08 95       	ret

0000642e <sprintf>:
    642e:	0f 93       	push	r16
    6430:	1f 93       	push	r17
    6432:	cf 93       	push	r28
    6434:	df 93       	push	r29
    6436:	cd b7       	in	r28, 0x3d	; 61
    6438:	de b7       	in	r29, 0x3e	; 62
    643a:	2e 97       	sbiw	r28, 0x0e	; 14
    643c:	cd bf       	out	0x3d, r28	; 61
    643e:	de bf       	out	0x3e, r29	; 62
    6440:	0d 89       	ldd	r16, Y+21	; 0x15
    6442:	1e 89       	ldd	r17, Y+22	; 0x16
    6444:	86 e0       	ldi	r24, 0x06	; 6
    6446:	8c 83       	std	Y+4, r24	; 0x04
    6448:	09 83       	std	Y+1, r16	; 0x01
    644a:	1a 83       	std	Y+2, r17	; 0x02
    644c:	8f ef       	ldi	r24, 0xFF	; 255
    644e:	9f e7       	ldi	r25, 0x7F	; 127
    6450:	8d 83       	std	Y+5, r24	; 0x05
    6452:	9e 83       	std	Y+6, r25	; 0x06
    6454:	ae 01       	movw	r20, r28
    6456:	47 5e       	subi	r20, 0xE7	; 231
    6458:	5f 4f       	sbci	r21, 0xFF	; 255
    645a:	6f 89       	ldd	r22, Y+23	; 0x17
    645c:	78 8d       	ldd	r23, Y+24	; 0x18
    645e:	ce 01       	movw	r24, r28
    6460:	01 96       	adiw	r24, 0x01	; 1
    6462:	0e 94 40 32 	call	0x6480	; 0x6480 <vfprintf>
    6466:	ef 81       	ldd	r30, Y+7	; 0x07
    6468:	f8 85       	ldd	r31, Y+8	; 0x08
    646a:	e0 0f       	add	r30, r16
    646c:	f1 1f       	adc	r31, r17
    646e:	10 82       	st	Z, r1
    6470:	2e 96       	adiw	r28, 0x0e	; 14
    6472:	cd bf       	out	0x3d, r28	; 61
    6474:	de bf       	out	0x3e, r29	; 62
    6476:	df 91       	pop	r29
    6478:	cf 91       	pop	r28
    647a:	1f 91       	pop	r17
    647c:	0f 91       	pop	r16
    647e:	08 95       	ret

00006480 <vfprintf>:
    6480:	2f 92       	push	r2
    6482:	3f 92       	push	r3
    6484:	4f 92       	push	r4
    6486:	5f 92       	push	r5
    6488:	6f 92       	push	r6
    648a:	7f 92       	push	r7
    648c:	8f 92       	push	r8
    648e:	9f 92       	push	r9
    6490:	af 92       	push	r10
    6492:	bf 92       	push	r11
    6494:	cf 92       	push	r12
    6496:	df 92       	push	r13
    6498:	ef 92       	push	r14
    649a:	ff 92       	push	r15
    649c:	0f 93       	push	r16
    649e:	1f 93       	push	r17
    64a0:	cf 93       	push	r28
    64a2:	df 93       	push	r29
    64a4:	cd b7       	in	r28, 0x3d	; 61
    64a6:	de b7       	in	r29, 0x3e	; 62
    64a8:	2b 97       	sbiw	r28, 0x0b	; 11
    64aa:	cd bf       	out	0x3d, r28	; 61
    64ac:	de bf       	out	0x3e, r29	; 62
    64ae:	6c 01       	movw	r12, r24
    64b0:	7b 01       	movw	r14, r22
    64b2:	8a 01       	movw	r16, r20
    64b4:	fc 01       	movw	r30, r24
    64b6:	16 82       	std	Z+6, r1	; 0x06
    64b8:	17 82       	std	Z+7, r1	; 0x07
    64ba:	83 81       	ldd	r24, Z+3	; 0x03
    64bc:	81 ff       	sbrs	r24, 1
    64be:	cc c1       	rjmp	.+920    	; 0x6858 <vfprintf+0x3d8>
    64c0:	ce 01       	movw	r24, r28
    64c2:	01 96       	adiw	r24, 0x01	; 1
    64c4:	3c 01       	movw	r6, r24
    64c6:	f6 01       	movw	r30, r12
    64c8:	93 81       	ldd	r25, Z+3	; 0x03
    64ca:	f7 01       	movw	r30, r14
    64cc:	93 fd       	sbrc	r25, 3
    64ce:	85 91       	lpm	r24, Z+
    64d0:	93 ff       	sbrs	r25, 3
    64d2:	81 91       	ld	r24, Z+
    64d4:	7f 01       	movw	r14, r30
    64d6:	88 23       	and	r24, r24
    64d8:	09 f4       	brne	.+2      	; 0x64dc <vfprintf+0x5c>
    64da:	ba c1       	rjmp	.+884    	; 0x6850 <vfprintf+0x3d0>
    64dc:	85 32       	cpi	r24, 0x25	; 37
    64de:	39 f4       	brne	.+14     	; 0x64ee <vfprintf+0x6e>
    64e0:	93 fd       	sbrc	r25, 3
    64e2:	85 91       	lpm	r24, Z+
    64e4:	93 ff       	sbrs	r25, 3
    64e6:	81 91       	ld	r24, Z+
    64e8:	7f 01       	movw	r14, r30
    64ea:	85 32       	cpi	r24, 0x25	; 37
    64ec:	29 f4       	brne	.+10     	; 0x64f8 <vfprintf+0x78>
    64ee:	b6 01       	movw	r22, r12
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    64f6:	e7 cf       	rjmp	.-50     	; 0x64c6 <vfprintf+0x46>
    64f8:	91 2c       	mov	r9, r1
    64fa:	21 2c       	mov	r2, r1
    64fc:	31 2c       	mov	r3, r1
    64fe:	ff e1       	ldi	r31, 0x1F	; 31
    6500:	f3 15       	cp	r31, r3
    6502:	d8 f0       	brcs	.+54     	; 0x653a <vfprintf+0xba>
    6504:	8b 32       	cpi	r24, 0x2B	; 43
    6506:	79 f0       	breq	.+30     	; 0x6526 <vfprintf+0xa6>
    6508:	38 f4       	brcc	.+14     	; 0x6518 <vfprintf+0x98>
    650a:	80 32       	cpi	r24, 0x20	; 32
    650c:	79 f0       	breq	.+30     	; 0x652c <vfprintf+0xac>
    650e:	83 32       	cpi	r24, 0x23	; 35
    6510:	a1 f4       	brne	.+40     	; 0x653a <vfprintf+0xba>
    6512:	23 2d       	mov	r18, r3
    6514:	20 61       	ori	r18, 0x10	; 16
    6516:	1d c0       	rjmp	.+58     	; 0x6552 <vfprintf+0xd2>
    6518:	8d 32       	cpi	r24, 0x2D	; 45
    651a:	61 f0       	breq	.+24     	; 0x6534 <vfprintf+0xb4>
    651c:	80 33       	cpi	r24, 0x30	; 48
    651e:	69 f4       	brne	.+26     	; 0x653a <vfprintf+0xba>
    6520:	23 2d       	mov	r18, r3
    6522:	21 60       	ori	r18, 0x01	; 1
    6524:	16 c0       	rjmp	.+44     	; 0x6552 <vfprintf+0xd2>
    6526:	83 2d       	mov	r24, r3
    6528:	82 60       	ori	r24, 0x02	; 2
    652a:	38 2e       	mov	r3, r24
    652c:	e3 2d       	mov	r30, r3
    652e:	e4 60       	ori	r30, 0x04	; 4
    6530:	3e 2e       	mov	r3, r30
    6532:	2a c0       	rjmp	.+84     	; 0x6588 <vfprintf+0x108>
    6534:	f3 2d       	mov	r31, r3
    6536:	f8 60       	ori	r31, 0x08	; 8
    6538:	1d c0       	rjmp	.+58     	; 0x6574 <vfprintf+0xf4>
    653a:	37 fc       	sbrc	r3, 7
    653c:	2d c0       	rjmp	.+90     	; 0x6598 <vfprintf+0x118>
    653e:	20 ed       	ldi	r18, 0xD0	; 208
    6540:	28 0f       	add	r18, r24
    6542:	2a 30       	cpi	r18, 0x0A	; 10
    6544:	40 f0       	brcs	.+16     	; 0x6556 <vfprintf+0xd6>
    6546:	8e 32       	cpi	r24, 0x2E	; 46
    6548:	b9 f4       	brne	.+46     	; 0x6578 <vfprintf+0xf8>
    654a:	36 fc       	sbrc	r3, 6
    654c:	81 c1       	rjmp	.+770    	; 0x6850 <vfprintf+0x3d0>
    654e:	23 2d       	mov	r18, r3
    6550:	20 64       	ori	r18, 0x40	; 64
    6552:	32 2e       	mov	r3, r18
    6554:	19 c0       	rjmp	.+50     	; 0x6588 <vfprintf+0x108>
    6556:	36 fe       	sbrs	r3, 6
    6558:	06 c0       	rjmp	.+12     	; 0x6566 <vfprintf+0xe6>
    655a:	8a e0       	ldi	r24, 0x0A	; 10
    655c:	98 9e       	mul	r9, r24
    655e:	20 0d       	add	r18, r0
    6560:	11 24       	eor	r1, r1
    6562:	92 2e       	mov	r9, r18
    6564:	11 c0       	rjmp	.+34     	; 0x6588 <vfprintf+0x108>
    6566:	ea e0       	ldi	r30, 0x0A	; 10
    6568:	2e 9e       	mul	r2, r30
    656a:	20 0d       	add	r18, r0
    656c:	11 24       	eor	r1, r1
    656e:	22 2e       	mov	r2, r18
    6570:	f3 2d       	mov	r31, r3
    6572:	f0 62       	ori	r31, 0x20	; 32
    6574:	3f 2e       	mov	r3, r31
    6576:	08 c0       	rjmp	.+16     	; 0x6588 <vfprintf+0x108>
    6578:	8c 36       	cpi	r24, 0x6C	; 108
    657a:	21 f4       	brne	.+8      	; 0x6584 <vfprintf+0x104>
    657c:	83 2d       	mov	r24, r3
    657e:	80 68       	ori	r24, 0x80	; 128
    6580:	38 2e       	mov	r3, r24
    6582:	02 c0       	rjmp	.+4      	; 0x6588 <vfprintf+0x108>
    6584:	88 36       	cpi	r24, 0x68	; 104
    6586:	41 f4       	brne	.+16     	; 0x6598 <vfprintf+0x118>
    6588:	f7 01       	movw	r30, r14
    658a:	93 fd       	sbrc	r25, 3
    658c:	85 91       	lpm	r24, Z+
    658e:	93 ff       	sbrs	r25, 3
    6590:	81 91       	ld	r24, Z+
    6592:	7f 01       	movw	r14, r30
    6594:	81 11       	cpse	r24, r1
    6596:	b3 cf       	rjmp	.-154    	; 0x64fe <vfprintf+0x7e>
    6598:	98 2f       	mov	r25, r24
    659a:	9f 7d       	andi	r25, 0xDF	; 223
    659c:	95 54       	subi	r25, 0x45	; 69
    659e:	93 30       	cpi	r25, 0x03	; 3
    65a0:	28 f4       	brcc	.+10     	; 0x65ac <vfprintf+0x12c>
    65a2:	0c 5f       	subi	r16, 0xFC	; 252
    65a4:	1f 4f       	sbci	r17, 0xFF	; 255
    65a6:	9f e3       	ldi	r25, 0x3F	; 63
    65a8:	99 83       	std	Y+1, r25	; 0x01
    65aa:	0d c0       	rjmp	.+26     	; 0x65c6 <vfprintf+0x146>
    65ac:	83 36       	cpi	r24, 0x63	; 99
    65ae:	31 f0       	breq	.+12     	; 0x65bc <vfprintf+0x13c>
    65b0:	83 37       	cpi	r24, 0x73	; 115
    65b2:	71 f0       	breq	.+28     	; 0x65d0 <vfprintf+0x150>
    65b4:	83 35       	cpi	r24, 0x53	; 83
    65b6:	09 f0       	breq	.+2      	; 0x65ba <vfprintf+0x13a>
    65b8:	59 c0       	rjmp	.+178    	; 0x666c <vfprintf+0x1ec>
    65ba:	21 c0       	rjmp	.+66     	; 0x65fe <vfprintf+0x17e>
    65bc:	f8 01       	movw	r30, r16
    65be:	80 81       	ld	r24, Z
    65c0:	89 83       	std	Y+1, r24	; 0x01
    65c2:	0e 5f       	subi	r16, 0xFE	; 254
    65c4:	1f 4f       	sbci	r17, 0xFF	; 255
    65c6:	88 24       	eor	r8, r8
    65c8:	83 94       	inc	r8
    65ca:	91 2c       	mov	r9, r1
    65cc:	53 01       	movw	r10, r6
    65ce:	13 c0       	rjmp	.+38     	; 0x65f6 <vfprintf+0x176>
    65d0:	28 01       	movw	r4, r16
    65d2:	f2 e0       	ldi	r31, 0x02	; 2
    65d4:	4f 0e       	add	r4, r31
    65d6:	51 1c       	adc	r5, r1
    65d8:	f8 01       	movw	r30, r16
    65da:	a0 80       	ld	r10, Z
    65dc:	b1 80       	ldd	r11, Z+1	; 0x01
    65de:	36 fe       	sbrs	r3, 6
    65e0:	03 c0       	rjmp	.+6      	; 0x65e8 <vfprintf+0x168>
    65e2:	69 2d       	mov	r22, r9
    65e4:	70 e0       	ldi	r23, 0x00	; 0
    65e6:	02 c0       	rjmp	.+4      	; 0x65ec <vfprintf+0x16c>
    65e8:	6f ef       	ldi	r22, 0xFF	; 255
    65ea:	7f ef       	ldi	r23, 0xFF	; 255
    65ec:	c5 01       	movw	r24, r10
    65ee:	0e 94 4f 34 	call	0x689e	; 0x689e <strnlen>
    65f2:	4c 01       	movw	r8, r24
    65f4:	82 01       	movw	r16, r4
    65f6:	f3 2d       	mov	r31, r3
    65f8:	ff 77       	andi	r31, 0x7F	; 127
    65fa:	3f 2e       	mov	r3, r31
    65fc:	16 c0       	rjmp	.+44     	; 0x662a <vfprintf+0x1aa>
    65fe:	28 01       	movw	r4, r16
    6600:	22 e0       	ldi	r18, 0x02	; 2
    6602:	42 0e       	add	r4, r18
    6604:	51 1c       	adc	r5, r1
    6606:	f8 01       	movw	r30, r16
    6608:	a0 80       	ld	r10, Z
    660a:	b1 80       	ldd	r11, Z+1	; 0x01
    660c:	36 fe       	sbrs	r3, 6
    660e:	03 c0       	rjmp	.+6      	; 0x6616 <vfprintf+0x196>
    6610:	69 2d       	mov	r22, r9
    6612:	70 e0       	ldi	r23, 0x00	; 0
    6614:	02 c0       	rjmp	.+4      	; 0x661a <vfprintf+0x19a>
    6616:	6f ef       	ldi	r22, 0xFF	; 255
    6618:	7f ef       	ldi	r23, 0xFF	; 255
    661a:	c5 01       	movw	r24, r10
    661c:	0e 94 44 34 	call	0x6888	; 0x6888 <strnlen_P>
    6620:	4c 01       	movw	r8, r24
    6622:	f3 2d       	mov	r31, r3
    6624:	f0 68       	ori	r31, 0x80	; 128
    6626:	3f 2e       	mov	r3, r31
    6628:	82 01       	movw	r16, r4
    662a:	33 fc       	sbrc	r3, 3
    662c:	1b c0       	rjmp	.+54     	; 0x6664 <vfprintf+0x1e4>
    662e:	82 2d       	mov	r24, r2
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	88 16       	cp	r8, r24
    6634:	99 06       	cpc	r9, r25
    6636:	b0 f4       	brcc	.+44     	; 0x6664 <vfprintf+0x1e4>
    6638:	b6 01       	movw	r22, r12
    663a:	80 e2       	ldi	r24, 0x20	; 32
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    6642:	2a 94       	dec	r2
    6644:	f4 cf       	rjmp	.-24     	; 0x662e <vfprintf+0x1ae>
    6646:	f5 01       	movw	r30, r10
    6648:	37 fc       	sbrc	r3, 7
    664a:	85 91       	lpm	r24, Z+
    664c:	37 fe       	sbrs	r3, 7
    664e:	81 91       	ld	r24, Z+
    6650:	5f 01       	movw	r10, r30
    6652:	b6 01       	movw	r22, r12
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    665a:	21 10       	cpse	r2, r1
    665c:	2a 94       	dec	r2
    665e:	21 e0       	ldi	r18, 0x01	; 1
    6660:	82 1a       	sub	r8, r18
    6662:	91 08       	sbc	r9, r1
    6664:	81 14       	cp	r8, r1
    6666:	91 04       	cpc	r9, r1
    6668:	71 f7       	brne	.-36     	; 0x6646 <vfprintf+0x1c6>
    666a:	e8 c0       	rjmp	.+464    	; 0x683c <vfprintf+0x3bc>
    666c:	84 36       	cpi	r24, 0x64	; 100
    666e:	11 f0       	breq	.+4      	; 0x6674 <vfprintf+0x1f4>
    6670:	89 36       	cpi	r24, 0x69	; 105
    6672:	41 f5       	brne	.+80     	; 0x66c4 <vfprintf+0x244>
    6674:	f8 01       	movw	r30, r16
    6676:	37 fe       	sbrs	r3, 7
    6678:	07 c0       	rjmp	.+14     	; 0x6688 <vfprintf+0x208>
    667a:	60 81       	ld	r22, Z
    667c:	71 81       	ldd	r23, Z+1	; 0x01
    667e:	82 81       	ldd	r24, Z+2	; 0x02
    6680:	93 81       	ldd	r25, Z+3	; 0x03
    6682:	0c 5f       	subi	r16, 0xFC	; 252
    6684:	1f 4f       	sbci	r17, 0xFF	; 255
    6686:	08 c0       	rjmp	.+16     	; 0x6698 <vfprintf+0x218>
    6688:	60 81       	ld	r22, Z
    668a:	71 81       	ldd	r23, Z+1	; 0x01
    668c:	07 2e       	mov	r0, r23
    668e:	00 0c       	add	r0, r0
    6690:	88 0b       	sbc	r24, r24
    6692:	99 0b       	sbc	r25, r25
    6694:	0e 5f       	subi	r16, 0xFE	; 254
    6696:	1f 4f       	sbci	r17, 0xFF	; 255
    6698:	f3 2d       	mov	r31, r3
    669a:	ff 76       	andi	r31, 0x6F	; 111
    669c:	3f 2e       	mov	r3, r31
    669e:	97 ff       	sbrs	r25, 7
    66a0:	09 c0       	rjmp	.+18     	; 0x66b4 <vfprintf+0x234>
    66a2:	90 95       	com	r25
    66a4:	80 95       	com	r24
    66a6:	70 95       	com	r23
    66a8:	61 95       	neg	r22
    66aa:	7f 4f       	sbci	r23, 0xFF	; 255
    66ac:	8f 4f       	sbci	r24, 0xFF	; 255
    66ae:	9f 4f       	sbci	r25, 0xFF	; 255
    66b0:	f0 68       	ori	r31, 0x80	; 128
    66b2:	3f 2e       	mov	r3, r31
    66b4:	2a e0       	ldi	r18, 0x0A	; 10
    66b6:	30 e0       	ldi	r19, 0x00	; 0
    66b8:	a3 01       	movw	r20, r6
    66ba:	0e 94 96 34 	call	0x692c	; 0x692c <__ultoa_invert>
    66be:	88 2e       	mov	r8, r24
    66c0:	86 18       	sub	r8, r6
    66c2:	45 c0       	rjmp	.+138    	; 0x674e <vfprintf+0x2ce>
    66c4:	85 37       	cpi	r24, 0x75	; 117
    66c6:	31 f4       	brne	.+12     	; 0x66d4 <vfprintf+0x254>
    66c8:	23 2d       	mov	r18, r3
    66ca:	2f 7e       	andi	r18, 0xEF	; 239
    66cc:	b2 2e       	mov	r11, r18
    66ce:	2a e0       	ldi	r18, 0x0A	; 10
    66d0:	30 e0       	ldi	r19, 0x00	; 0
    66d2:	25 c0       	rjmp	.+74     	; 0x671e <vfprintf+0x29e>
    66d4:	93 2d       	mov	r25, r3
    66d6:	99 7f       	andi	r25, 0xF9	; 249
    66d8:	b9 2e       	mov	r11, r25
    66da:	8f 36       	cpi	r24, 0x6F	; 111
    66dc:	c1 f0       	breq	.+48     	; 0x670e <vfprintf+0x28e>
    66de:	18 f4       	brcc	.+6      	; 0x66e6 <vfprintf+0x266>
    66e0:	88 35       	cpi	r24, 0x58	; 88
    66e2:	79 f0       	breq	.+30     	; 0x6702 <vfprintf+0x282>
    66e4:	b5 c0       	rjmp	.+362    	; 0x6850 <vfprintf+0x3d0>
    66e6:	80 37       	cpi	r24, 0x70	; 112
    66e8:	19 f0       	breq	.+6      	; 0x66f0 <vfprintf+0x270>
    66ea:	88 37       	cpi	r24, 0x78	; 120
    66ec:	21 f0       	breq	.+8      	; 0x66f6 <vfprintf+0x276>
    66ee:	b0 c0       	rjmp	.+352    	; 0x6850 <vfprintf+0x3d0>
    66f0:	e9 2f       	mov	r30, r25
    66f2:	e0 61       	ori	r30, 0x10	; 16
    66f4:	be 2e       	mov	r11, r30
    66f6:	b4 fe       	sbrs	r11, 4
    66f8:	0d c0       	rjmp	.+26     	; 0x6714 <vfprintf+0x294>
    66fa:	fb 2d       	mov	r31, r11
    66fc:	f4 60       	ori	r31, 0x04	; 4
    66fe:	bf 2e       	mov	r11, r31
    6700:	09 c0       	rjmp	.+18     	; 0x6714 <vfprintf+0x294>
    6702:	34 fe       	sbrs	r3, 4
    6704:	0a c0       	rjmp	.+20     	; 0x671a <vfprintf+0x29a>
    6706:	29 2f       	mov	r18, r25
    6708:	26 60       	ori	r18, 0x06	; 6
    670a:	b2 2e       	mov	r11, r18
    670c:	06 c0       	rjmp	.+12     	; 0x671a <vfprintf+0x29a>
    670e:	28 e0       	ldi	r18, 0x08	; 8
    6710:	30 e0       	ldi	r19, 0x00	; 0
    6712:	05 c0       	rjmp	.+10     	; 0x671e <vfprintf+0x29e>
    6714:	20 e1       	ldi	r18, 0x10	; 16
    6716:	30 e0       	ldi	r19, 0x00	; 0
    6718:	02 c0       	rjmp	.+4      	; 0x671e <vfprintf+0x29e>
    671a:	20 e1       	ldi	r18, 0x10	; 16
    671c:	32 e0       	ldi	r19, 0x02	; 2
    671e:	f8 01       	movw	r30, r16
    6720:	b7 fe       	sbrs	r11, 7
    6722:	07 c0       	rjmp	.+14     	; 0x6732 <vfprintf+0x2b2>
    6724:	60 81       	ld	r22, Z
    6726:	71 81       	ldd	r23, Z+1	; 0x01
    6728:	82 81       	ldd	r24, Z+2	; 0x02
    672a:	93 81       	ldd	r25, Z+3	; 0x03
    672c:	0c 5f       	subi	r16, 0xFC	; 252
    672e:	1f 4f       	sbci	r17, 0xFF	; 255
    6730:	06 c0       	rjmp	.+12     	; 0x673e <vfprintf+0x2be>
    6732:	60 81       	ld	r22, Z
    6734:	71 81       	ldd	r23, Z+1	; 0x01
    6736:	80 e0       	ldi	r24, 0x00	; 0
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	0e 5f       	subi	r16, 0xFE	; 254
    673c:	1f 4f       	sbci	r17, 0xFF	; 255
    673e:	a3 01       	movw	r20, r6
    6740:	0e 94 96 34 	call	0x692c	; 0x692c <__ultoa_invert>
    6744:	88 2e       	mov	r8, r24
    6746:	86 18       	sub	r8, r6
    6748:	fb 2d       	mov	r31, r11
    674a:	ff 77       	andi	r31, 0x7F	; 127
    674c:	3f 2e       	mov	r3, r31
    674e:	36 fe       	sbrs	r3, 6
    6750:	0d c0       	rjmp	.+26     	; 0x676c <vfprintf+0x2ec>
    6752:	23 2d       	mov	r18, r3
    6754:	2e 7f       	andi	r18, 0xFE	; 254
    6756:	a2 2e       	mov	r10, r18
    6758:	89 14       	cp	r8, r9
    675a:	58 f4       	brcc	.+22     	; 0x6772 <vfprintf+0x2f2>
    675c:	34 fe       	sbrs	r3, 4
    675e:	0b c0       	rjmp	.+22     	; 0x6776 <vfprintf+0x2f6>
    6760:	32 fc       	sbrc	r3, 2
    6762:	09 c0       	rjmp	.+18     	; 0x6776 <vfprintf+0x2f6>
    6764:	83 2d       	mov	r24, r3
    6766:	8e 7e       	andi	r24, 0xEE	; 238
    6768:	a8 2e       	mov	r10, r24
    676a:	05 c0       	rjmp	.+10     	; 0x6776 <vfprintf+0x2f6>
    676c:	b8 2c       	mov	r11, r8
    676e:	a3 2c       	mov	r10, r3
    6770:	03 c0       	rjmp	.+6      	; 0x6778 <vfprintf+0x2f8>
    6772:	b8 2c       	mov	r11, r8
    6774:	01 c0       	rjmp	.+2      	; 0x6778 <vfprintf+0x2f8>
    6776:	b9 2c       	mov	r11, r9
    6778:	a4 fe       	sbrs	r10, 4
    677a:	0f c0       	rjmp	.+30     	; 0x679a <vfprintf+0x31a>
    677c:	fe 01       	movw	r30, r28
    677e:	e8 0d       	add	r30, r8
    6780:	f1 1d       	adc	r31, r1
    6782:	80 81       	ld	r24, Z
    6784:	80 33       	cpi	r24, 0x30	; 48
    6786:	21 f4       	brne	.+8      	; 0x6790 <vfprintf+0x310>
    6788:	9a 2d       	mov	r25, r10
    678a:	99 7e       	andi	r25, 0xE9	; 233
    678c:	a9 2e       	mov	r10, r25
    678e:	09 c0       	rjmp	.+18     	; 0x67a2 <vfprintf+0x322>
    6790:	a2 fe       	sbrs	r10, 2
    6792:	06 c0       	rjmp	.+12     	; 0x67a0 <vfprintf+0x320>
    6794:	b3 94       	inc	r11
    6796:	b3 94       	inc	r11
    6798:	04 c0       	rjmp	.+8      	; 0x67a2 <vfprintf+0x322>
    679a:	8a 2d       	mov	r24, r10
    679c:	86 78       	andi	r24, 0x86	; 134
    679e:	09 f0       	breq	.+2      	; 0x67a2 <vfprintf+0x322>
    67a0:	b3 94       	inc	r11
    67a2:	a3 fc       	sbrc	r10, 3
    67a4:	11 c0       	rjmp	.+34     	; 0x67c8 <vfprintf+0x348>
    67a6:	a0 fe       	sbrs	r10, 0
    67a8:	06 c0       	rjmp	.+12     	; 0x67b6 <vfprintf+0x336>
    67aa:	b2 14       	cp	r11, r2
    67ac:	88 f4       	brcc	.+34     	; 0x67d0 <vfprintf+0x350>
    67ae:	28 0c       	add	r2, r8
    67b0:	92 2c       	mov	r9, r2
    67b2:	9b 18       	sub	r9, r11
    67b4:	0e c0       	rjmp	.+28     	; 0x67d2 <vfprintf+0x352>
    67b6:	b2 14       	cp	r11, r2
    67b8:	60 f4       	brcc	.+24     	; 0x67d2 <vfprintf+0x352>
    67ba:	b6 01       	movw	r22, r12
    67bc:	80 e2       	ldi	r24, 0x20	; 32
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    67c4:	b3 94       	inc	r11
    67c6:	f7 cf       	rjmp	.-18     	; 0x67b6 <vfprintf+0x336>
    67c8:	b2 14       	cp	r11, r2
    67ca:	18 f4       	brcc	.+6      	; 0x67d2 <vfprintf+0x352>
    67cc:	2b 18       	sub	r2, r11
    67ce:	02 c0       	rjmp	.+4      	; 0x67d4 <vfprintf+0x354>
    67d0:	98 2c       	mov	r9, r8
    67d2:	21 2c       	mov	r2, r1
    67d4:	a4 fe       	sbrs	r10, 4
    67d6:	10 c0       	rjmp	.+32     	; 0x67f8 <vfprintf+0x378>
    67d8:	b6 01       	movw	r22, r12
    67da:	80 e3       	ldi	r24, 0x30	; 48
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    67e2:	a2 fe       	sbrs	r10, 2
    67e4:	17 c0       	rjmp	.+46     	; 0x6814 <vfprintf+0x394>
    67e6:	a1 fc       	sbrc	r10, 1
    67e8:	03 c0       	rjmp	.+6      	; 0x67f0 <vfprintf+0x370>
    67ea:	88 e7       	ldi	r24, 0x78	; 120
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	02 c0       	rjmp	.+4      	; 0x67f4 <vfprintf+0x374>
    67f0:	88 e5       	ldi	r24, 0x58	; 88
    67f2:	90 e0       	ldi	r25, 0x00	; 0
    67f4:	b6 01       	movw	r22, r12
    67f6:	0c c0       	rjmp	.+24     	; 0x6810 <vfprintf+0x390>
    67f8:	8a 2d       	mov	r24, r10
    67fa:	86 78       	andi	r24, 0x86	; 134
    67fc:	59 f0       	breq	.+22     	; 0x6814 <vfprintf+0x394>
    67fe:	a1 fe       	sbrs	r10, 1
    6800:	02 c0       	rjmp	.+4      	; 0x6806 <vfprintf+0x386>
    6802:	8b e2       	ldi	r24, 0x2B	; 43
    6804:	01 c0       	rjmp	.+2      	; 0x6808 <vfprintf+0x388>
    6806:	80 e2       	ldi	r24, 0x20	; 32
    6808:	a7 fc       	sbrc	r10, 7
    680a:	8d e2       	ldi	r24, 0x2D	; 45
    680c:	b6 01       	movw	r22, r12
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    6814:	89 14       	cp	r8, r9
    6816:	38 f4       	brcc	.+14     	; 0x6826 <vfprintf+0x3a6>
    6818:	b6 01       	movw	r22, r12
    681a:	80 e3       	ldi	r24, 0x30	; 48
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    6822:	9a 94       	dec	r9
    6824:	f7 cf       	rjmp	.-18     	; 0x6814 <vfprintf+0x394>
    6826:	8a 94       	dec	r8
    6828:	f3 01       	movw	r30, r6
    682a:	e8 0d       	add	r30, r8
    682c:	f1 1d       	adc	r31, r1
    682e:	80 81       	ld	r24, Z
    6830:	b6 01       	movw	r22, r12
    6832:	90 e0       	ldi	r25, 0x00	; 0
    6834:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    6838:	81 10       	cpse	r8, r1
    683a:	f5 cf       	rjmp	.-22     	; 0x6826 <vfprintf+0x3a6>
    683c:	22 20       	and	r2, r2
    683e:	09 f4       	brne	.+2      	; 0x6842 <vfprintf+0x3c2>
    6840:	42 ce       	rjmp	.-892    	; 0x64c6 <vfprintf+0x46>
    6842:	b6 01       	movw	r22, r12
    6844:	80 e2       	ldi	r24, 0x20	; 32
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <fputc>
    684c:	2a 94       	dec	r2
    684e:	f6 cf       	rjmp	.-20     	; 0x683c <vfprintf+0x3bc>
    6850:	f6 01       	movw	r30, r12
    6852:	86 81       	ldd	r24, Z+6	; 0x06
    6854:	97 81       	ldd	r25, Z+7	; 0x07
    6856:	02 c0       	rjmp	.+4      	; 0x685c <vfprintf+0x3dc>
    6858:	8f ef       	ldi	r24, 0xFF	; 255
    685a:	9f ef       	ldi	r25, 0xFF	; 255
    685c:	2b 96       	adiw	r28, 0x0b	; 11
    685e:	cd bf       	out	0x3d, r28	; 61
    6860:	de bf       	out	0x3e, r29	; 62
    6862:	df 91       	pop	r29
    6864:	cf 91       	pop	r28
    6866:	1f 91       	pop	r17
    6868:	0f 91       	pop	r16
    686a:	ff 90       	pop	r15
    686c:	ef 90       	pop	r14
    686e:	df 90       	pop	r13
    6870:	cf 90       	pop	r12
    6872:	bf 90       	pop	r11
    6874:	af 90       	pop	r10
    6876:	9f 90       	pop	r9
    6878:	8f 90       	pop	r8
    687a:	7f 90       	pop	r7
    687c:	6f 90       	pop	r6
    687e:	5f 90       	pop	r5
    6880:	4f 90       	pop	r4
    6882:	3f 90       	pop	r3
    6884:	2f 90       	pop	r2
    6886:	08 95       	ret

00006888 <strnlen_P>:
    6888:	fc 01       	movw	r30, r24
    688a:	05 90       	lpm	r0, Z+
    688c:	61 50       	subi	r22, 0x01	; 1
    688e:	70 40       	sbci	r23, 0x00	; 0
    6890:	01 10       	cpse	r0, r1
    6892:	d8 f7       	brcc	.-10     	; 0x688a <strnlen_P+0x2>
    6894:	80 95       	com	r24
    6896:	90 95       	com	r25
    6898:	8e 0f       	add	r24, r30
    689a:	9f 1f       	adc	r25, r31
    689c:	08 95       	ret

0000689e <strnlen>:
    689e:	fc 01       	movw	r30, r24
    68a0:	61 50       	subi	r22, 0x01	; 1
    68a2:	70 40       	sbci	r23, 0x00	; 0
    68a4:	01 90       	ld	r0, Z+
    68a6:	01 10       	cpse	r0, r1
    68a8:	d8 f7       	brcc	.-10     	; 0x68a0 <strnlen+0x2>
    68aa:	80 95       	com	r24
    68ac:	90 95       	com	r25
    68ae:	8e 0f       	add	r24, r30
    68b0:	9f 1f       	adc	r25, r31
    68b2:	08 95       	ret

000068b4 <fputc>:
    68b4:	0f 93       	push	r16
    68b6:	1f 93       	push	r17
    68b8:	cf 93       	push	r28
    68ba:	df 93       	push	r29
    68bc:	fb 01       	movw	r30, r22
    68be:	23 81       	ldd	r18, Z+3	; 0x03
    68c0:	21 fd       	sbrc	r18, 1
    68c2:	03 c0       	rjmp	.+6      	; 0x68ca <fputc+0x16>
    68c4:	8f ef       	ldi	r24, 0xFF	; 255
    68c6:	9f ef       	ldi	r25, 0xFF	; 255
    68c8:	2c c0       	rjmp	.+88     	; 0x6922 <fputc+0x6e>
    68ca:	22 ff       	sbrs	r18, 2
    68cc:	16 c0       	rjmp	.+44     	; 0x68fa <fputc+0x46>
    68ce:	46 81       	ldd	r20, Z+6	; 0x06
    68d0:	57 81       	ldd	r21, Z+7	; 0x07
    68d2:	24 81       	ldd	r18, Z+4	; 0x04
    68d4:	35 81       	ldd	r19, Z+5	; 0x05
    68d6:	42 17       	cp	r20, r18
    68d8:	53 07       	cpc	r21, r19
    68da:	44 f4       	brge	.+16     	; 0x68ec <fputc+0x38>
    68dc:	a0 81       	ld	r26, Z
    68de:	b1 81       	ldd	r27, Z+1	; 0x01
    68e0:	9d 01       	movw	r18, r26
    68e2:	2f 5f       	subi	r18, 0xFF	; 255
    68e4:	3f 4f       	sbci	r19, 0xFF	; 255
    68e6:	20 83       	st	Z, r18
    68e8:	31 83       	std	Z+1, r19	; 0x01
    68ea:	8c 93       	st	X, r24
    68ec:	26 81       	ldd	r18, Z+6	; 0x06
    68ee:	37 81       	ldd	r19, Z+7	; 0x07
    68f0:	2f 5f       	subi	r18, 0xFF	; 255
    68f2:	3f 4f       	sbci	r19, 0xFF	; 255
    68f4:	26 83       	std	Z+6, r18	; 0x06
    68f6:	37 83       	std	Z+7, r19	; 0x07
    68f8:	14 c0       	rjmp	.+40     	; 0x6922 <fputc+0x6e>
    68fa:	8b 01       	movw	r16, r22
    68fc:	ec 01       	movw	r28, r24
    68fe:	fb 01       	movw	r30, r22
    6900:	00 84       	ldd	r0, Z+8	; 0x08
    6902:	f1 85       	ldd	r31, Z+9	; 0x09
    6904:	e0 2d       	mov	r30, r0
    6906:	09 95       	icall
    6908:	89 2b       	or	r24, r25
    690a:	e1 f6       	brne	.-72     	; 0x68c4 <fputc+0x10>
    690c:	d8 01       	movw	r26, r16
    690e:	16 96       	adiw	r26, 0x06	; 6
    6910:	8d 91       	ld	r24, X+
    6912:	9c 91       	ld	r25, X
    6914:	17 97       	sbiw	r26, 0x07	; 7
    6916:	01 96       	adiw	r24, 0x01	; 1
    6918:	16 96       	adiw	r26, 0x06	; 6
    691a:	8d 93       	st	X+, r24
    691c:	9c 93       	st	X, r25
    691e:	17 97       	sbiw	r26, 0x07	; 7
    6920:	ce 01       	movw	r24, r28
    6922:	df 91       	pop	r29
    6924:	cf 91       	pop	r28
    6926:	1f 91       	pop	r17
    6928:	0f 91       	pop	r16
    692a:	08 95       	ret

0000692c <__ultoa_invert>:
    692c:	fa 01       	movw	r30, r20
    692e:	aa 27       	eor	r26, r26
    6930:	28 30       	cpi	r18, 0x08	; 8
    6932:	51 f1       	breq	.+84     	; 0x6988 <__ultoa_invert+0x5c>
    6934:	20 31       	cpi	r18, 0x10	; 16
    6936:	81 f1       	breq	.+96     	; 0x6998 <__ultoa_invert+0x6c>
    6938:	e8 94       	clt
    693a:	6f 93       	push	r22
    693c:	6e 7f       	andi	r22, 0xFE	; 254
    693e:	6e 5f       	subi	r22, 0xFE	; 254
    6940:	7f 4f       	sbci	r23, 0xFF	; 255
    6942:	8f 4f       	sbci	r24, 0xFF	; 255
    6944:	9f 4f       	sbci	r25, 0xFF	; 255
    6946:	af 4f       	sbci	r26, 0xFF	; 255
    6948:	b1 e0       	ldi	r27, 0x01	; 1
    694a:	3e d0       	rcall	.+124    	; 0x69c8 <__ultoa_invert+0x9c>
    694c:	b4 e0       	ldi	r27, 0x04	; 4
    694e:	3c d0       	rcall	.+120    	; 0x69c8 <__ultoa_invert+0x9c>
    6950:	67 0f       	add	r22, r23
    6952:	78 1f       	adc	r23, r24
    6954:	89 1f       	adc	r24, r25
    6956:	9a 1f       	adc	r25, r26
    6958:	a1 1d       	adc	r26, r1
    695a:	68 0f       	add	r22, r24
    695c:	79 1f       	adc	r23, r25
    695e:	8a 1f       	adc	r24, r26
    6960:	91 1d       	adc	r25, r1
    6962:	a1 1d       	adc	r26, r1
    6964:	6a 0f       	add	r22, r26
    6966:	71 1d       	adc	r23, r1
    6968:	81 1d       	adc	r24, r1
    696a:	91 1d       	adc	r25, r1
    696c:	a1 1d       	adc	r26, r1
    696e:	20 d0       	rcall	.+64     	; 0x69b0 <__ultoa_invert+0x84>
    6970:	09 f4       	brne	.+2      	; 0x6974 <__ultoa_invert+0x48>
    6972:	68 94       	set
    6974:	3f 91       	pop	r19
    6976:	2a e0       	ldi	r18, 0x0A	; 10
    6978:	26 9f       	mul	r18, r22
    697a:	11 24       	eor	r1, r1
    697c:	30 19       	sub	r19, r0
    697e:	30 5d       	subi	r19, 0xD0	; 208
    6980:	31 93       	st	Z+, r19
    6982:	de f6       	brtc	.-74     	; 0x693a <__ultoa_invert+0xe>
    6984:	cf 01       	movw	r24, r30
    6986:	08 95       	ret
    6988:	46 2f       	mov	r20, r22
    698a:	47 70       	andi	r20, 0x07	; 7
    698c:	40 5d       	subi	r20, 0xD0	; 208
    698e:	41 93       	st	Z+, r20
    6990:	b3 e0       	ldi	r27, 0x03	; 3
    6992:	0f d0       	rcall	.+30     	; 0x69b2 <__ultoa_invert+0x86>
    6994:	c9 f7       	brne	.-14     	; 0x6988 <__ultoa_invert+0x5c>
    6996:	f6 cf       	rjmp	.-20     	; 0x6984 <__ultoa_invert+0x58>
    6998:	46 2f       	mov	r20, r22
    699a:	4f 70       	andi	r20, 0x0F	; 15
    699c:	40 5d       	subi	r20, 0xD0	; 208
    699e:	4a 33       	cpi	r20, 0x3A	; 58
    69a0:	18 f0       	brcs	.+6      	; 0x69a8 <__ultoa_invert+0x7c>
    69a2:	49 5d       	subi	r20, 0xD9	; 217
    69a4:	31 fd       	sbrc	r19, 1
    69a6:	40 52       	subi	r20, 0x20	; 32
    69a8:	41 93       	st	Z+, r20
    69aa:	02 d0       	rcall	.+4      	; 0x69b0 <__ultoa_invert+0x84>
    69ac:	a9 f7       	brne	.-22     	; 0x6998 <__ultoa_invert+0x6c>
    69ae:	ea cf       	rjmp	.-44     	; 0x6984 <__ultoa_invert+0x58>
    69b0:	b4 e0       	ldi	r27, 0x04	; 4
    69b2:	a6 95       	lsr	r26
    69b4:	97 95       	ror	r25
    69b6:	87 95       	ror	r24
    69b8:	77 95       	ror	r23
    69ba:	67 95       	ror	r22
    69bc:	ba 95       	dec	r27
    69be:	c9 f7       	brne	.-14     	; 0x69b2 <__ultoa_invert+0x86>
    69c0:	00 97       	sbiw	r24, 0x00	; 0
    69c2:	61 05       	cpc	r22, r1
    69c4:	71 05       	cpc	r23, r1
    69c6:	08 95       	ret
    69c8:	9b 01       	movw	r18, r22
    69ca:	ac 01       	movw	r20, r24
    69cc:	0a 2e       	mov	r0, r26
    69ce:	06 94       	lsr	r0
    69d0:	57 95       	ror	r21
    69d2:	47 95       	ror	r20
    69d4:	37 95       	ror	r19
    69d6:	27 95       	ror	r18
    69d8:	ba 95       	dec	r27
    69da:	c9 f7       	brne	.-14     	; 0x69ce <__ultoa_invert+0xa2>
    69dc:	62 0f       	add	r22, r18
    69de:	73 1f       	adc	r23, r19
    69e0:	84 1f       	adc	r24, r20
    69e2:	95 1f       	adc	r25, r21
    69e4:	a0 1d       	adc	r26, r0
    69e6:	08 95       	ret

000069e8 <eeprom_read_block>:
    69e8:	e0 ec       	ldi	r30, 0xC0	; 192
    69ea:	f1 e0       	ldi	r31, 0x01	; 1
    69ec:	a7 85       	ldd	r26, Z+15	; 0x0f
    69ee:	a7 fd       	sbrc	r26, 7
    69f0:	fd cf       	rjmp	.-6      	; 0x69ec <eeprom_read_block+0x4>
    69f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    69f4:	a8 60       	ori	r26, 0x08	; 8
    69f6:	a4 87       	std	Z+12, r26	; 0x0c
    69f8:	60 50       	subi	r22, 0x00	; 0
    69fa:	70 4f       	sbci	r23, 0xF0	; 240
    69fc:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <memcpy>

00006a00 <eeprom_read_byte>:
    6a00:	03 d0       	rcall	.+6      	; 0x6a08 <eeprom_mapen>
    6a02:	80 81       	ld	r24, Z
    6a04:	99 27       	eor	r25, r25
    6a06:	08 95       	ret

00006a08 <eeprom_mapen>:
    6a08:	e0 ec       	ldi	r30, 0xC0	; 192
    6a0a:	f1 e0       	ldi	r31, 0x01	; 1
    6a0c:	37 85       	ldd	r19, Z+15	; 0x0f
    6a0e:	37 fd       	sbrc	r19, 7
    6a10:	fd cf       	rjmp	.-6      	; 0x6a0c <eeprom_mapen+0x4>
    6a12:	34 85       	ldd	r19, Z+12	; 0x0c
    6a14:	38 60       	ori	r19, 0x08	; 8
    6a16:	34 87       	std	Z+12, r19	; 0x0c
    6a18:	fc 01       	movw	r30, r24
    6a1a:	e0 50       	subi	r30, 0x00	; 0
    6a1c:	f0 4f       	sbci	r31, 0xF0	; 240
    6a1e:	08 95       	ret

00006a20 <eeprom_read_word>:
    6a20:	0e 94 04 35 	call	0x6a08	; 0x6a08 <eeprom_mapen>
    6a24:	80 81       	ld	r24, Z
    6a26:	91 81       	ldd	r25, Z+1	; 0x01
    6a28:	08 95       	ret

00006a2a <eeprom_update_block>:
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	a4 0f       	add	r26, r20
    6a2e:	b5 1f       	adc	r27, r21
    6a30:	41 50       	subi	r20, 0x01	; 1
    6a32:	50 40       	sbci	r21, 0x00	; 0
    6a34:	48 f0       	brcs	.+18     	; 0x6a48 <eeprom_update_block+0x1e>
    6a36:	cb 01       	movw	r24, r22
    6a38:	84 0f       	add	r24, r20
    6a3a:	95 1f       	adc	r25, r21
    6a3c:	2e 91       	ld	r18, -X
    6a3e:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <eeprom_update_r18>
    6a42:	41 50       	subi	r20, 0x01	; 1
    6a44:	50 40       	sbci	r21, 0x00	; 0
    6a46:	d0 f7       	brcc	.-12     	; 0x6a3c <eeprom_update_block+0x12>
    6a48:	08 95       	ret

00006a4a <eeprom_update_byte>:
    6a4a:	26 2f       	mov	r18, r22

00006a4c <eeprom_update_r18>:
    6a4c:	0e 94 04 35 	call	0x6a08	; 0x6a08 <eeprom_mapen>
    6a50:	00 80       	ld	r0, Z
    6a52:	02 16       	cp	r0, r18
    6a54:	19 f0       	breq	.+6      	; 0x6a5c <eeprom_update_r18+0x10>
    6a56:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <eeprom_write_r18>
    6a5a:	01 97       	sbiw	r24, 0x01	; 1
    6a5c:	01 97       	sbiw	r24, 0x01	; 1
    6a5e:	08 95       	ret

00006a60 <eeprom_update_word>:
    6a60:	01 96       	adiw	r24, 0x01	; 1
    6a62:	27 2f       	mov	r18, r23
    6a64:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <eeprom_update_r18>
    6a68:	0c 94 25 35 	jmp	0x6a4a	; 0x6a4a <eeprom_update_byte>

00006a6c <eeprom_write_byte>:
    6a6c:	26 2f       	mov	r18, r22

00006a6e <eeprom_write_r18>:
    6a6e:	e0 ec       	ldi	r30, 0xC0	; 192
    6a70:	f1 e0       	ldi	r31, 0x01	; 1
    6a72:	37 85       	ldd	r19, Z+15	; 0x0f
    6a74:	37 fd       	sbrc	r19, 7
    6a76:	fd cf       	rjmp	.-6      	; 0x6a72 <eeprom_write_r18+0x4>
    6a78:	34 85       	ldd	r19, Z+12	; 0x0c
    6a7a:	37 7f       	andi	r19, 0xF7	; 247
    6a7c:	34 87       	std	Z+12, r19	; 0x0c
    6a7e:	37 85       	ldd	r19, Z+15	; 0x0f
    6a80:	31 ff       	sbrs	r19, 1
    6a82:	09 c0       	rjmp	.+18     	; 0x6a96 <eeprom_write_r18+0x28>
    6a84:	36 e3       	ldi	r19, 0x36	; 54
    6a86:	32 87       	std	Z+10, r19	; 0x0a
    6a88:	38 ed       	ldi	r19, 0xD8	; 216
    6a8a:	34 bf       	out	0x34, r19	; 52
    6a8c:	31 e0       	ldi	r19, 0x01	; 1
    6a8e:	33 87       	std	Z+11, r19	; 0x0b
    6a90:	37 85       	ldd	r19, Z+15	; 0x0f
    6a92:	37 fd       	sbrc	r19, 7
    6a94:	fd cf       	rjmp	.-6      	; 0x6a90 <eeprom_write_r18+0x22>
    6a96:	33 e3       	ldi	r19, 0x33	; 51
    6a98:	32 87       	std	Z+10, r19	; 0x0a
    6a9a:	80 83       	st	Z, r24
    6a9c:	91 83       	std	Z+1, r25	; 0x01
    6a9e:	12 82       	std	Z+2, r1	; 0x02
    6aa0:	24 83       	std	Z+4, r18	; 0x04
    6aa2:	25 e3       	ldi	r18, 0x35	; 53
    6aa4:	22 87       	std	Z+10, r18	; 0x0a
    6aa6:	28 ed       	ldi	r18, 0xD8	; 216
    6aa8:	31 e0       	ldi	r19, 0x01	; 1
    6aaa:	24 bf       	out	0x34, r18	; 52
    6aac:	33 87       	std	Z+11, r19	; 0x0b
    6aae:	01 96       	adiw	r24, 0x01	; 1
    6ab0:	08 95       	ret

00006ab2 <memcpy>:
    6ab2:	fb 01       	movw	r30, r22
    6ab4:	dc 01       	movw	r26, r24
    6ab6:	02 c0       	rjmp	.+4      	; 0x6abc <memcpy+0xa>
    6ab8:	01 90       	ld	r0, Z+
    6aba:	0d 92       	st	X+, r0
    6abc:	41 50       	subi	r20, 0x01	; 1
    6abe:	50 40       	sbci	r21, 0x00	; 0
    6ac0:	d8 f7       	brcc	.-10     	; 0x6ab8 <memcpy+0x6>
    6ac2:	08 95       	ret

00006ac4 <_exit>:
    6ac4:	f8 94       	cli

00006ac6 <__stop_program>:
    6ac6:	ff cf       	rjmp	.-2      	; 0x6ac6 <__stop_program>
