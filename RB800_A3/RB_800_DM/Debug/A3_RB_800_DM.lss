
A3_RB_800_DM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00004a78  00004b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000583  00802010  00802010  00004b1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bbe0  00000000  00000000  00004f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001678  00000000  00000000  00010b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c26  00000000  00000000  000121c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f30  00000000  00000000  00015dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aac  00000000  00000000  00016d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004359  00000000  00000000  000187c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0001cb21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__ctors_end>
       4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
       8:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_2>
       c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      10:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      14:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      18:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      1c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      20:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      24:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      28:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      2c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      30:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      34:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__vector_13>
      38:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      3c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      40:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__vector_16>
      44:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      48:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      4c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      50:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      54:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      58:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__vector_22>
      5c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      60:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      64:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      68:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      6c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      70:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      74:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      78:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      7c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      80:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      84:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      88:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      8c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      90:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      94:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      98:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      9c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      a0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      a4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      a8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      ac:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__vector_43>
      b0:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__vector_44>
      b4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      b8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      bc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      c0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      c4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      c8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      cc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      d0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      d4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      d8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      dc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      e0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      e4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      e8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      ec:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      f0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      f4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      f8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
      fc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     100:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     104:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     108:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__vector_66>
     10c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     110:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     114:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     118:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     11c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     120:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     124:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     128:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     12c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     130:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     134:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     138:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     13c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     140:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     144:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     148:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     14c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     150:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     154:	0c 94 dd 20 	jmp	0x41ba	; 0x41ba <__vector_85>
     158:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     15c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     160:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     164:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     168:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     16c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     170:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     174:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     178:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     17c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     180:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     184:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     188:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     18c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     190:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     194:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     198:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     19c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1a0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1a4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1a8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1ac:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1b0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1b4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1b8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1bc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1c0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1c4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1c8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1cc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1d0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1d4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1d8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1dc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1e0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1e4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1e8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1ec:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1f0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1f4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1f8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
     1fc:	44 0d       	add	r20, r4
     1fe:	c6 0d       	add	r28, r6
     200:	c6 0d       	add	r28, r6
     202:	c6 0d       	add	r28, r6
     204:	c6 0d       	add	r28, r6
     206:	c6 0d       	add	r28, r6
     208:	c6 0d       	add	r28, r6
     20a:	c6 0d       	add	r28, r6
     20c:	c6 0d       	add	r28, r6
     20e:	c6 0d       	add	r28, r6
     210:	c6 0d       	add	r28, r6
     212:	c6 0d       	add	r28, r6
     214:	c6 0d       	add	r28, r6
     216:	c6 0d       	add	r28, r6
     218:	c6 0d       	add	r28, r6
     21a:	c6 0d       	add	r28, r6
     21c:	c6 0d       	add	r28, r6
     21e:	c6 0d       	add	r28, r6
     220:	c6 0d       	add	r28, r6
     222:	c6 0d       	add	r28, r6
     224:	c6 0d       	add	r28, r6
     226:	c6 0d       	add	r28, r6
     228:	c6 0d       	add	r28, r6
     22a:	c6 0d       	add	r28, r6
     22c:	c6 0d       	add	r28, r6
     22e:	c6 0d       	add	r28, r6
     230:	c6 0d       	add	r28, r6
     232:	c6 0d       	add	r28, r6
     234:	c6 0d       	add	r28, r6
     236:	f2 0c       	add	r15, r2
     238:	f8 0c       	add	r15, r8
     23a:	fe 0c       	add	r15, r14
     23c:	10 0d       	add	r17, r0
     23e:	0a 0d       	add	r16, r10
     240:	04 0d       	add	r16, r4
     242:	16 0d       	add	r17, r6
     244:	1c 0d       	add	r17, r12
     246:	22 0d       	add	r18, r2
     248:	c6 0d       	add	r28, r6
     24a:	c6 0d       	add	r28, r6
     24c:	c6 0d       	add	r28, r6
     24e:	c6 0d       	add	r28, r6
     250:	c6 0d       	add	r28, r6
     252:	c6 0d       	add	r28, r6
     254:	c6 0d       	add	r28, r6
     256:	c6 0d       	add	r28, r6
     258:	c6 0d       	add	r28, r6
     25a:	c6 0d       	add	r28, r6
     25c:	c6 0d       	add	r28, r6
     25e:	c6 0d       	add	r28, r6
     260:	c6 0d       	add	r28, r6
     262:	c6 0d       	add	r28, r6
     264:	c6 0d       	add	r28, r6
     266:	c6 0d       	add	r28, r6
     268:	c6 0d       	add	r28, r6
     26a:	c6 0d       	add	r28, r6
     26c:	c6 0d       	add	r28, r6
     26e:	c6 0d       	add	r28, r6
     270:	c6 0d       	add	r28, r6
     272:	c6 0d       	add	r28, r6
     274:	c6 0d       	add	r28, r6
     276:	c6 0d       	add	r28, r6
     278:	c6 0d       	add	r28, r6
     27a:	c6 0d       	add	r28, r6
     27c:	c6 0d       	add	r28, r6
     27e:	c6 0d       	add	r28, r6
     280:	a4 0d       	add	r26, r4
     282:	7a 0c       	add	r7, r10
     284:	c6 0d       	add	r28, r6
     286:	c6 0d       	add	r28, r6
     288:	93 0d       	add	r25, r3
     28a:	c6 0d       	add	r28, r6
     28c:	c6 0d       	add	r28, r6
     28e:	c6 0d       	add	r28, r6
     290:	c6 0d       	add	r28, r6
     292:	c6 0d       	add	r28, r6
     294:	c6 0d       	add	r28, r6
     296:	b5 0d       	add	r27, r5
     298:	c6 0d       	add	r28, r6
     29a:	c6 0d       	add	r28, r6
     29c:	c6 0d       	add	r28, r6
     29e:	4f 0b       	sbc	r20, r31
     2a0:	ef 0c       	add	r14, r15
     2a2:	c6 0d       	add	r28, r6
     2a4:	c6 0d       	add	r28, r6
     2a6:	c6 0d       	add	r28, r6
     2a8:	c6 0d       	add	r28, r6
     2aa:	c6 0d       	add	r28, r6
     2ac:	c6 0d       	add	r28, r6
     2ae:	28 0d       	add	r18, r8
     2b0:	c6 0d       	add	r28, r6
     2b2:	c6 0d       	add	r28, r6
     2b4:	c6 0d       	add	r28, r6
     2b6:	c6 0d       	add	r28, r6
     2b8:	c6 0d       	add	r28, r6
     2ba:	c6 0d       	add	r28, r6
     2bc:	c6 0d       	add	r28, r6
     2be:	c6 0d       	add	r28, r6
     2c0:	c6 0d       	add	r28, r6
     2c2:	c6 0d       	add	r28, r6
     2c4:	c6 0d       	add	r28, r6
     2c6:	c6 0d       	add	r28, r6
     2c8:	c6 0d       	add	r28, r6
     2ca:	c6 0d       	add	r28, r6
     2cc:	c6 0d       	add	r28, r6
     2ce:	c6 0d       	add	r28, r6
     2d0:	c6 0d       	add	r28, r6
     2d2:	c6 0d       	add	r28, r6
     2d4:	c6 0d       	add	r28, r6
     2d6:	c6 0d       	add	r28, r6
     2d8:	c6 0d       	add	r28, r6
     2da:	c6 0d       	add	r28, r6
     2dc:	c6 0d       	add	r28, r6
     2de:	c6 0d       	add	r28, r6
     2e0:	c6 0d       	add	r28, r6
     2e2:	c6 0d       	add	r28, r6
     2e4:	c6 0d       	add	r28, r6
     2e6:	c6 0d       	add	r28, r6
     2e8:	c6 0d       	add	r28, r6
     2ea:	c6 0d       	add	r28, r6
     2ec:	c6 0d       	add	r28, r6
     2ee:	63 0a       	sbc	r6, r19
     2f0:	c6 0d       	add	r28, r6
     2f2:	c6 0d       	add	r28, r6
     2f4:	c6 0d       	add	r28, r6
     2f6:	c6 0d       	add	r28, r6
     2f8:	c6 0d       	add	r28, r6
     2fa:	c6 0d       	add	r28, r6
     2fc:	c6 0d       	add	r28, r6
     2fe:	c6 0d       	add	r28, r6
     300:	c6 0d       	add	r28, r6
     302:	c6 0d       	add	r28, r6
     304:	c6 0d       	add	r28, r6
     306:	c6 0d       	add	r28, r6
     308:	c6 0d       	add	r28, r6
     30a:	c6 0d       	add	r28, r6
     30c:	c6 0d       	add	r28, r6
     30e:	c6 0d       	add	r28, r6
     310:	c6 0d       	add	r28, r6
     312:	33 0d       	add	r19, r3

00000314 <__ctors_end>:
     314:	11 24       	eor	r1, r1
     316:	1f be       	out	0x3f, r1	; 63
     318:	cf ef       	ldi	r28, 0xFF	; 255
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	df e2       	ldi	r29, 0x2F	; 47
     31e:	de bf       	out	0x3e, r29	; 62

00000320 <__do_copy_data>:
     320:	10 e2       	ldi	r17, 0x20	; 32
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e2       	ldi	r27, 0x20	; 32
     326:	e8 e7       	ldi	r30, 0x78	; 120
     328:	fa e4       	ldi	r31, 0x4A	; 74
     32a:	02 c0       	rjmp	.+4      	; 0x330 <__do_copy_data+0x10>
     32c:	05 90       	lpm	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	a0 31       	cpi	r26, 0x10	; 16
     332:	b1 07       	cpc	r27, r17
     334:	d9 f7       	brne	.-10     	; 0x32c <__do_copy_data+0xc>

00000336 <__do_clear_bss>:
     336:	25 e2       	ldi	r18, 0x25	; 37
     338:	a0 e1       	ldi	r26, 0x10	; 16
     33a:	b0 e2       	ldi	r27, 0x20	; 32
     33c:	01 c0       	rjmp	.+2      	; 0x340 <.do_clear_bss_start>

0000033e <.do_clear_bss_loop>:
     33e:	1d 92       	st	X+, r1

00000340 <.do_clear_bss_start>:
     340:	a3 39       	cpi	r26, 0x93	; 147
     342:	b2 07       	cpc	r27, r18
     344:	e1 f7       	brne	.-8      	; 0x33e <.do_clear_bss_loop>
     346:	0e 94 2f 19 	call	0x325e	; 0x325e <main>
     34a:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <_exit>

0000034e <__bad_interrupt>:
     34e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000352 <initialize_ADC>:
	{
		total -= ADC_NEG_ADJ;
		total = (uint16_t)((float)total * MAX_ADC_READING_COUNT / MAX_ADC_ADJ_COUNT);
	}

	testf = ((float)total * MAX_INPUT_VOLTAGE_READING) / 4096;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     358:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     35c:	90 e2       	ldi	r25, 0x20	; 32
     35e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     362:	95 e0       	ldi	r25, 0x05	; 5
     364:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
     368:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
     36c:	98 e0       	ldi	r25, 0x08	; 8
     36e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
     372:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
     376:	98 e1       	ldi	r25, 0x18	; 24
     378:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
     37c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
     380:	88 e5       	ldi	r24, 0x58	; 88
     382:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
     386:	08 95       	ret

00000388 <measure_accelerator_pedal>:
}

void measure_accelerator_pedal(void)
{
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	9a e0       	ldi	r25, 0x0A	; 10
	uint16_t total = 0;
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0

	for (uint8_t i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 1
		ADCA_CTRLA |= (1 << 3);
     39a:	e0 e0       	ldi	r30, 0x00	; 0
     39c:	f2 e0       	ldi	r31, 0x02	; 2
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 3))YIELD_ADC("11_ACCPED", ADCA_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCA_CH1RES;
     39e:	a2 e1       	ldi	r26, 0x12	; 18
     3a0:	b2 e0       	ldi	r27, 0x02	; 2
	uint16_t total = 0;

	for (uint8_t i = 0; i < NUM_SAMPLES; i++)
	{
		//Start channel 1
		ADCA_CTRLA |= (1 << 3);
     3a2:	80 81       	ld	r24, Z
     3a4:	88 60       	ori	r24, 0x08	; 8
     3a6:	80 83       	st	Z, r24
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 3))YIELD_ADC("11_ACCPED", ADCA_CTRLA);
     3a8:	80 81       	ld	r24, Z
     3aa:	83 fd       	sbrc	r24, 3
     3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <measure_accelerator_pedal+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ae:	cf e3       	ldi	r28, 0x3F	; 63
     3b0:	d1 e0       	ldi	r29, 0x01	; 1
     3b2:	21 97       	sbiw	r28, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <measure_accelerator_pedal+0x2a>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <measure_accelerator_pedal+0x30>
     3b8:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCA_CH1RES;
     3ba:	4d 91       	ld	r20, X+
     3bc:	5c 91       	ld	r21, X
     3be:	11 97       	sbiw	r26, 0x01	; 1
     3c0:	24 0f       	add	r18, r20
     3c2:	35 1f       	adc	r19, r21
     3c4:	91 50       	subi	r25, 0x01	; 1

void measure_accelerator_pedal(void)
{
	uint16_t total = 0;

	for (uint8_t i = 0; i < NUM_SAMPLES; i++)
     3c6:	69 f7       	brne	.-38     	; 0x3a2 <measure_accelerator_pedal+0x1a>
		//Add result to total
		_delay_us(40);
		total += ADCA_CH1RES;
	}
	//Get average of total
	total /= NUM_SAMPLES;
     3c8:	ad ec       	ldi	r26, 0xCD	; 205
     3ca:	bc ec       	ldi	r27, 0xCC	; 204
     3cc:	0e 94 bd 24 	call	0x497a	; 0x497a <__umulhisi3>
     3d0:	96 95       	lsr	r25
     3d2:	87 95       	ror	r24
     3d4:	96 95       	lsr	r25
     3d6:	87 95       	ror	r24
     3d8:	96 95       	lsr	r25
     3da:	87 95       	ror	r24
	if (total > ADC_NEG_ADJ)
     3dc:	8f 3b       	cpi	r24, 0xBF	; 191
     3de:	91 05       	cpc	r25, r1
     3e0:	08 f4       	brcc	.+2      	; 0x3e4 <measure_accelerator_pedal+0x5c>
     3e2:	75 c0       	rjmp	.+234    	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
	{
		total -= ADC_NEG_ADJ;
		total = (uint16_t)((float)total * MAX_ADC_READING_COUNT / MAX_ADC_ADJ_COUNT);
     3e4:	bc 01       	movw	r22, r24
     3e6:	6e 5b       	subi	r22, 0xBE	; 190
     3e8:	71 09       	sbc	r23, r1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	40 e8       	ldi	r20, 0x80	; 128
     3f8:	55 e4       	ldi	r21, 0x45	; 69
     3fa:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e2       	ldi	r19, 0x20	; 32
     402:	44 e7       	ldi	r20, 0x74	; 116
     404:	55 e4       	ldi	r21, 0x45	; 69
     406:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
     40a:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>

		//Adjust the pedal value for the deadband levels
		curr_pedal_level = total;
     40e:	60 93 39 20 	sts	0x2039, r22	; 0x802039 <curr_pedal_level>
     412:	70 93 3a 20 	sts	0x203A, r23	; 0x80203a <curr_pedal_level+0x1>

		if (curr_pedal_level <= low_deadband_level)
     416:	20 91 39 20 	lds	r18, 0x2039	; 0x802039 <curr_pedal_level>
     41a:	30 91 3a 20 	lds	r19, 0x203A	; 0x80203a <curr_pedal_level+0x1>
     41e:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <low_deadband_level>
     422:	90 91 38 20 	lds	r25, 0x2038	; 0x802038 <low_deadband_level+0x1>
     426:	82 17       	cp	r24, r18
     428:	93 07       	cpc	r25, r19
     42a:	28 f0       	brcs	.+10     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
		{
			curr_pedal_level = 0;
     42c:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <curr_pedal_level>
     430:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <curr_pedal_level+0x1>
     434:	50 c0       	rjmp	.+160    	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
		}
		else if (curr_pedal_level >= high_deadband_level)
     436:	40 91 39 20 	lds	r20, 0x2039	; 0x802039 <curr_pedal_level>
     43a:	50 91 3a 20 	lds	r21, 0x203A	; 0x80203a <curr_pedal_level+0x1>
     43e:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <high_deadband_level>
     442:	30 91 17 20 	lds	r19, 0x2017	; 0x802017 <high_deadband_level+0x1>
     446:	42 17       	cp	r20, r18
     448:	53 07       	cpc	r21, r19
     44a:	b8 f0       	brcs	.+46     	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
		{
			//If the currrent pedal level is more than 0.25V than the upper bound there is an error
			if (curr_pedal_level >= (high_deadband_level + 500))
     44c:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
     450:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
     454:	2c 50       	subi	r18, 0x0C	; 12
     456:	3e 4f       	sbci	r19, 0xFE	; 254
     458:	82 17       	cp	r24, r18
     45a:	93 07       	cpc	r25, r19
     45c:	28 f0       	brcs	.+10     	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
			{
				curr_pedal_level = 0;
     45e:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <curr_pedal_level>
     462:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <curr_pedal_level+0x1>
     466:	37 c0       	rjmp	.+110    	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
			}
			else
			{
				curr_pedal_level = 4095;
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	9f e0       	ldi	r25, 0x0F	; 15
     46c:	80 93 39 20 	sts	0x2039, r24	; 0x802039 <curr_pedal_level>
     470:	90 93 3a 20 	sts	0x203A, r25	; 0x80203a <curr_pedal_level+0x1>
				pedal_error_count = 0;
     474:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <pedal_error_count>
     478:	2e c0       	rjmp	.+92     	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
			}
		}
		else
		{
			if (deadband_level_difference > 0)//IVA001: Fix for div/0
     47a:	20 91 04 21 	lds	r18, 0x2104	; 0x802104 <deadband_level_difference>
     47e:	30 91 05 21 	lds	r19, 0x2105	; 0x802105 <deadband_level_difference+0x1>
     482:	21 15       	cp	r18, r1
     484:	31 05       	cpc	r19, r1
     486:	39 f1       	breq	.+78     	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
			{
				curr_pedal_level = (uint16_t)(((uint32_t)curr_pedal_level - low_deadband_level) * 4096 / deadband_level_difference);
     488:	60 91 39 20 	lds	r22, 0x2039	; 0x802039 <curr_pedal_level>
     48c:	70 91 3a 20 	lds	r23, 0x203A	; 0x80203a <curr_pedal_level+0x1>
     490:	ab 01       	movw	r20, r22
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	7a 01       	movw	r14, r20
     498:	8b 01       	movw	r16, r22
     49a:	e8 1a       	sub	r14, r24
     49c:	f9 0a       	sbc	r15, r25
     49e:	01 09       	sbc	r16, r1
     4a0:	11 09       	sbc	r17, r1
     4a2:	c8 01       	movw	r24, r16
     4a4:	b7 01       	movw	r22, r14
     4a6:	05 2e       	mov	r0, r21
     4a8:	5c e0       	ldi	r21, 0x0C	; 12
     4aa:	66 0f       	add	r22, r22
     4ac:	77 1f       	adc	r23, r23
     4ae:	88 1f       	adc	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	5a 95       	dec	r21
     4b4:	d1 f7       	brne	.-12     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4b6:	50 2d       	mov	r21, r0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	0e 94 95 24 	call	0x492a	; 0x492a <__udivmodsi4>
     4c0:	20 93 39 20 	sts	0x2039, r18	; 0x802039 <curr_pedal_level>
     4c4:	30 93 3a 20 	sts	0x203A, r19	; 0x80203a <curr_pedal_level+0x1>
				pedal_error_count = 0;
     4c8:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <pedal_error_count>
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
			}
		}
	}
	else
	{
		curr_pedal_level = 0;
     4ce:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <curr_pedal_level>
     4d2:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <curr_pedal_level+0x1>
	}

	//If recheck pedal is true, then that means pedal switch is on but level is stuck at 0
	//Check if pedal is still stuck at 0
	if (recheck_pedal)
     4d6:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <recheck_pedal>
     4da:	88 23       	and	r24, r24
     4dc:	c1 f1       	breq	.+112    	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
	{

		if (curr_pedal_level == 0)
     4de:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
     4e2:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
     4e6:	89 2b       	or	r24, r25
     4e8:	c9 f4       	brne	.+50     	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
		{
			pedal_5_sec_timer_on = TRUE;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <pedal_5_sec_timer_on>
			//if(pedal_error_count++ > 100)
			if (pedal_5_sec_timer > 4)
     4f0:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <pedal_5_sec_timer>
     4f4:	85 30       	cpi	r24, 0x05	; 5
     4f6:	58 f1       	brcs	.+86     	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
			{
				pedal_state = OFF;
     4f8:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
     4fc:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
				electrobrake_counter = ON;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
     508:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
				update_pedal_state();
     50c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
				send_pedal_error(POT_FAIL);
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
				recheck_pedal = FALSE;
     516:	10 92 6d 20 	sts	0x206D, r1	; 0x80206d <recheck_pedal>
     51a:	19 c0       	rjmp	.+50     	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
			}
		}
		else
		{
			pedal_state = ON;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <pedal_state>
     524:	90 93 40 20 	sts	0x2040, r25	; 0x802040 <pedal_state+0x1>
			pedal_5_sec_timer_on = FALSE;
     528:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <pedal_5_sec_timer_on>
			pedal_5_sec_timer = 0;
     52c:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <pedal_5_sec_timer>
			if (!emergency_stop_motor)
     530:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
     534:	81 11       	cpse	r24, r1
     536:	07 c0       	rjmp	.+14     	; 0x546 <__FUSE_REGION_LENGTH__+0x146>
			{
				E_BRAKE_OFF;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
				electrobrake_counter = OFF;
     53e:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <electrobrake_counter>
     542:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <electrobrake_counter+0x1>
			}
			update_pedal_state();
     546:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
			recheck_pedal = FALSE;
     54a:	10 92 6d 20 	sts	0x206D, r1	; 0x80206d <recheck_pedal>
		}
	}
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	08 95       	ret

0000055c <measure_motor_current>:

void measure_motor_current(void)
{
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	0f 2e       	mov	r0, r31
     57e:	f8 ec       	ldi	r31, 0xC8	; 200
     580:	bf 2e       	mov	r11, r31
     582:	f0 2d       	mov	r31, r0
	float total = 0;
     584:	c1 2c       	mov	r12, r1
     586:	d1 2c       	mov	r13, r1
     588:	76 01       	movw	r14, r12

	for (uint8_t i = 0; i < NUM_SAMPLES * 20; i++)
	{
		//Start channel 2
		ADCA_CTRLA |= (1 << 4);
     58a:	c0 e0       	ldi	r28, 0x00	; 0
     58c:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 4))YIELD_ADC("12_MTRCUR", ADCA_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCA_CH2RES;
     58e:	04 e1       	ldi	r16, 0x14	; 20
     590:	12 e0       	ldi	r17, 0x02	; 2
	float total = 0;

	for (uint8_t i = 0; i < NUM_SAMPLES * 20; i++)
	{
		//Start channel 2
		ADCA_CTRLA |= (1 << 4);
     592:	88 81       	ld	r24, Y
     594:	80 61       	ori	r24, 0x10	; 16
     596:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 4))YIELD_ADC("12_MTRCUR", ADCA_CTRLA);
     598:	88 81       	ld	r24, Y
     59a:	84 fd       	sbrc	r24, 4
     59c:	fd cf       	rjmp	.-6      	; 0x598 <measure_motor_current+0x3c>
     59e:	8f e3       	ldi	r24, 0x3F	; 63
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <measure_motor_current+0x46>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <measure_motor_current+0x4c>
     5a8:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCA_CH2RES;
     5aa:	f8 01       	movw	r30, r16
     5ac:	60 81       	ld	r22, Z
     5ae:	71 81       	ldd	r23, Z+1	; 0x01
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
     5b8:	9b 01       	movw	r18, r22
     5ba:	ac 01       	movw	r20, r24
     5bc:	c7 01       	movw	r24, r14
     5be:	b6 01       	movw	r22, r12
     5c0:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
     5c4:	6b 01       	movw	r12, r22
     5c6:	7c 01       	movw	r14, r24
     5c8:	ba 94       	dec	r11

void measure_motor_current(void)
{
	float total = 0;

	for (uint8_t i = 0; i < NUM_SAMPLES * 20; i++)
     5ca:	b1 10       	cpse	r11, r1
     5cc:	e2 cf       	rjmp	.-60     	; 0x592 <measure_motor_current+0x36>
		//Add result to total
		_delay_us(40);
		total += ADCA_CH2RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES * 20);
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	48 e4       	ldi	r20, 0x48	; 72
     5d4:	53 e4       	ldi	r21, 0x43	; 67
     5d6:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
     5da:	6b 01       	movw	r12, r22
     5dc:	7c 01       	movw	r14, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4e e3       	ldi	r20, 0x3E	; 62
     5e4:	53 e4       	ldi	r21, 0x43	; 67
     5e6:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
     5ea:	18 16       	cp	r1, r24
     5ec:	0c f0       	brlt	.+2      	; 0x5f0 <measure_motor_current+0x94>
     5ee:	7a c0       	rjmp	.+244    	; 0x6e4 <measure_motor_current+0x188>
	{
		total -= ADC_NEG_ADJ;
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	4e e3       	ldi	r20, 0x3E	; 62
     5f6:	53 e4       	ldi	r21, 0x43	; 67
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	0e 94 36 22 	call	0x446c	; 0x446c <__subsf3>
     600:	4b 01       	movw	r8, r22
     602:	5c 01       	movw	r10, r24
		//If the shunt output voltage is less than the off voltage, set current to 0
		float so = total * 0.0005; //0.0005 = 2.048V / 4096 counts
     604:	2f e6       	ldi	r18, 0x6F	; 111
     606:	32 e1       	ldi	r19, 0x12	; 18
     608:	43 e0       	ldi	r20, 0x03	; 3
     60a:	5a e3       	ldi	r21, 0x3A	; 58
     60c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     610:	2b 01       	movw	r4, r22
     612:	3c 01       	movw	r6, r24
		if (so < (v_off + 0.005)) // 5mV hysteresis
     614:	c0 90 66 20 	lds	r12, 0x2066	; 0x802066 <v_off>
     618:	d0 90 67 20 	lds	r13, 0x2067	; 0x802067 <v_off+0x1>
     61c:	e0 90 68 20 	lds	r14, 0x2068	; 0x802068 <v_off+0x2>
     620:	f0 90 69 20 	lds	r15, 0x2069	; 0x802069 <v_off+0x3>
     624:	2a e0       	ldi	r18, 0x0A	; 10
     626:	37 ed       	ldi	r19, 0xD7	; 215
     628:	43 ea       	ldi	r20, 0xA3	; 163
     62a:	5b e3       	ldi	r21, 0x3B	; 59
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c3 01       	movw	r24, r6
     63a:	b2 01       	movw	r22, r4
     63c:	0e 94 a3 22 	call	0x4546	; 0x4546 <__cmpsf2>
     640:	88 23       	and	r24, r24
     642:	fc f4       	brge	.+62     	; 0x682 <measure_motor_current+0x126>
		{
			total = 0;
			motor_current = 0;
     644:	10 92 fd 20 	sts	0x20FD, r1	; 0x8020fd <motor_current>
     648:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <motor_current+0x1>
     64c:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <motor_current+0x2>
     650:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <motor_current+0x3>
			test16 = (uint16_t)(v_off * 1000);
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	4a e7       	ldi	r20, 0x7A	; 122
     65a:	54 e4       	ldi	r21, 0x44	; 68
     65c:	c7 01       	movw	r24, r14
     65e:	b6 01       	movw	r22, r12
     660:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     664:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
     668:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <test16>
     66c:	70 93 0f 21 	sts	0x210F, r23	; 0x80210f <test16+0x1>
			testf = 0;
     670:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <testf>
     674:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <testf+0x1>
     678:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <testf+0x2>
     67c:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <testf+0x3>
     680:	55 c0       	rjmp	.+170    	; 0x72c <measure_motor_current+0x1d0>
		}
		//Otherwise calculate the motor current
		else
		{
			motor_current = (so - v_off) / AV * R_SENSE_INV;
     682:	a7 01       	movw	r20, r14
     684:	96 01       	movw	r18, r12
     686:	c3 01       	movw	r24, r6
     688:	b2 01       	movw	r22, r4
     68a:	0e 94 36 22 	call	0x446c	; 0x446c <__subsf3>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 ea       	ldi	r20, 0xA0	; 160
     694:	51 e4       	ldi	r21, 0x41	; 65
     696:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4a e7       	ldi	r20, 0x7A	; 122
     6a0:	54 e4       	ldi	r21, 0x44	; 68
     6a2:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     6a6:	60 93 fd 20 	sts	0x20FD, r22	; 0x8020fd <motor_current>
     6aa:	70 93 fe 20 	sts	0x20FE, r23	; 0x8020fe <motor_current+0x1>
     6ae:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <motor_current+0x2>
     6b2:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <motor_current+0x3>

			test16 = (uint16_t)(v_off * 1000);
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	4a e7       	ldi	r20, 0x7A	; 122
     6bc:	54 e4       	ldi	r21, 0x44	; 68
     6be:	c7 01       	movw	r24, r14
     6c0:	b6 01       	movw	r22, r12
     6c2:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     6c6:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
     6ca:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <test16>
     6ce:	70 93 0f 21 	sts	0x210F, r23	; 0x80210f <test16+0x1>
			testf = total;
     6d2:	80 92 62 20 	sts	0x2062, r8	; 0x802062 <testf>
     6d6:	90 92 63 20 	sts	0x2063, r9	; 0x802063 <testf+0x1>
     6da:	a0 92 64 20 	sts	0x2064, r10	; 0x802064 <testf+0x2>
     6de:	b0 92 65 20 	sts	0x2065, r11	; 0x802065 <testf+0x3>
     6e2:	24 c0       	rjmp	.+72     	; 0x72c <measure_motor_current+0x1d0>
		}
	}
	else
	{
		total = 0;
		motor_current = 0;
     6e4:	10 92 fd 20 	sts	0x20FD, r1	; 0x8020fd <motor_current>
     6e8:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <motor_current+0x1>
     6ec:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <motor_current+0x2>
     6f0:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <motor_current+0x3>
		test16 = (uint16_t)(v_off * 1000);
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	4a e7       	ldi	r20, 0x7A	; 122
     6fa:	54 e4       	ldi	r21, 0x44	; 68
     6fc:	60 91 66 20 	lds	r22, 0x2066	; 0x802066 <v_off>
     700:	70 91 67 20 	lds	r23, 0x2067	; 0x802067 <v_off+0x1>
     704:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <v_off+0x2>
     708:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <v_off+0x3>
     70c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     710:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
     714:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <test16>
     718:	70 93 0f 21 	sts	0x210F, r23	; 0x80210f <test16+0x1>
		testf = 0;
     71c:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <testf>
     720:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <testf+0x1>
     724:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <testf+0x2>
     728:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <testf+0x3>
	}

	//A complementary filter to filter out noise from current readings
	//Also since current readings will vary largely when PWMing this filter will average out the readings
	moving_average_current = (moving_average_current * 99 + motor_current * 1) / 100;
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	46 ec       	ldi	r20, 0xC6	; 198
     732:	52 e4       	ldi	r21, 0x42	; 66
     734:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <moving_average_current>
     738:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <moving_average_current+0x1>
     73c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <moving_average_current+0x2>
     740:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <moving_average_current+0x3>
     744:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     748:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <motor_current>
     74c:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <motor_current+0x1>
     750:	40 91 ff 20 	lds	r20, 0x20FF	; 0x8020ff <motor_current+0x2>
     754:	50 91 00 21 	lds	r21, 0x2100	; 0x802100 <motor_current+0x3>
     758:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	48 ec       	ldi	r20, 0xC8	; 200
     762:	52 e4       	ldi	r21, 0x42	; 66
     764:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
     768:	6b 01       	movw	r12, r22
     76a:	7c 01       	movw	r14, r24
     76c:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <moving_average_current>
     770:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <moving_average_current+0x1>
     774:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <moving_average_current+0x2>
     778:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <moving_average_current+0x3>

	if (moving_average_current > max_moving_average_current)
     77c:	60 91 55 20 	lds	r22, 0x2055	; 0x802055 <max_moving_average_current>
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
     796:	18 16       	cp	r1, r24
     798:	34 f4       	brge	.+12     	; 0x7a6 <measure_motor_current+0x24a>
		max_moving_average_current = moving_average_current;
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
     7a2:	60 93 55 20 	sts	0x2055, r22	; 0x802055 <max_moving_average_current>

	if (moving_average_current > over_current_rating)
     7a6:	60 91 02 21 	lds	r22, 0x2102	; 0x802102 <over_current_rating>
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
     7b4:	9b 01       	movw	r18, r22
     7b6:	ac 01       	movw	r20, r24
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
     7c0:	18 16       	cp	r1, r24
     7c2:	0c f0       	brlt	.+2      	; 0x7c6 <measure_motor_current+0x26a>
     7c4:	45 c0       	rjmp	.+138    	; 0x850 <measure_motor_current+0x2f4>
	{
		overcurrent = TRUE;//IVA001: Fix for div/0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <overcurrent>
		float t = (moving_average_current*moving_average_current - (float)rated_current*rated_current);
     7cc:	d0 91 0d 21 	lds	r29, 0x210D	; 0x80210d <rated_current>
     7d0:	c0 91 0d 21 	lds	r28, 0x210D	; 0x80210d <rated_current>
     7d4:	a7 01       	movw	r20, r14
     7d6:	96 01       	movw	r18, r12
     7d8:	c7 01       	movw	r24, r14
     7da:	b6 01       	movw	r22, r12
     7dc:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
     7e4:	6d 2f       	mov	r22, r29
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
     7f0:	4b 01       	movw	r8, r22
     7f2:	5c 01       	movw	r10, r24
     7f4:	6c 2f       	mov	r22, r28
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	c5 01       	movw	r24, r10
     806:	b4 01       	movw	r22, r8
     808:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	c7 01       	movw	r24, r14
     812:	b6 01       	movw	r22, r12
     814:	0e 94 36 22 	call	0x446c	; 0x446c <__subsf3>
     818:	6b 01       	movw	r12, r22
     81a:	7c 01       	movw	r14, r24
		if (t > 0)
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
     826:	18 16       	cp	r1, r24
     828:	34 f5       	brge	.+76     	; 0x876 <measure_motor_current+0x31a>
			overload_time = (uint8_t)(overload_time_constant / t);
     82a:	60 91 5d 20 	lds	r22, 0x205D	; 0x80205d <overload_time_constant>
     82e:	70 91 5e 20 	lds	r23, 0x205E	; 0x80205e <overload_time_constant+0x1>
     832:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <overload_time_constant+0x2>
     836:	90 91 60 20 	lds	r25, 0x2060	; 0x802060 <overload_time_constant+0x3>
     83a:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
     83e:	a7 01       	movw	r20, r14
     840:	96 01       	movw	r18, r12
     842:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
     846:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
     84a:	60 93 22 21 	sts	0x2122, r22	; 0x802122 <overload_time>
     84e:	13 c0       	rjmp	.+38     	; 0x876 <measure_motor_current+0x31a>
	}
	else if (moving_average_current < rated_current)
     850:	60 91 0d 21 	lds	r22, 0x210D	; 0x80210d <rated_current>
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	c7 01       	movw	r24, r14
     864:	b6 01       	movw	r22, r12
     866:	0e 94 a3 22 	call	0x4546	; 0x4546 <__cmpsf2>
     86a:	88 23       	and	r24, r24
     86c:	24 f4       	brge	.+8      	; 0x876 <measure_motor_current+0x31a>
	{
		overcurrent = FALSE;
     86e:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <overcurrent>
		overcurrent_count = 0;
     872:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <overcurrent_count>
	}
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	5f 90       	pop	r5
     894:	4f 90       	pop	r4
     896:	08 95       	ret

00000898 <measure_v_off>:

//Measure v off to see what the zero current voltage is
void measure_v_off(void)
{
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	0f 2e       	mov	r0, r31
     8ae:	f0 ed       	ldi	r31, 0xD0	; 208
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
	float total = 0;
     8b8:	81 2c       	mov	r8, r1
     8ba:	91 2c       	mov	r9, r1
     8bc:	54 01       	movw	r10, r8

	for (uint16_t i = 0; i < NUM_SAMPLES * 200; i++)
	{
		//Start channel 2
		ADCA_CTRLA |= (1 << 4);
     8be:	c0 e0       	ldi	r28, 0x00	; 0
     8c0:	d2 e0       	ldi	r29, 0x02	; 2
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 4))YIELD_ADC("12_MTR_VOFF", ADCA_CTRLA);
		//Add result to total
		_delay_us(40);
		total += ADCA_CH2RES;
     8c2:	04 e1       	ldi	r16, 0x14	; 20
     8c4:	12 e0       	ldi	r17, 0x02	; 2
	float total = 0;

	for (uint16_t i = 0; i < NUM_SAMPLES * 200; i++)
	{
		//Start channel 2
		ADCA_CTRLA |= (1 << 4);
     8c6:	88 81       	ld	r24, Y
     8c8:	80 61       	ori	r24, 0x10	; 16
     8ca:	88 83       	st	Y, r24
		//Wait for conversion to end
		while (ADCA_CTRLA & (1 << 4))YIELD_ADC("12_MTR_VOFF", ADCA_CTRLA);
     8cc:	88 81       	ld	r24, Y
     8ce:	84 fd       	sbrc	r24, 4
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <measure_v_off+0x34>
     8d2:	8f e3       	ldi	r24, 0x3F	; 63
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <measure_v_off+0x3e>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <measure_v_off+0x44>
     8dc:	00 00       	nop
		//Add result to total
		_delay_us(40);
		total += ADCA_CH2RES;
     8de:	f8 01       	movw	r30, r16
     8e0:	60 81       	ld	r22, Z
     8e2:	71 81       	ldd	r23, Z+1	; 0x01
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c5 01       	movw	r24, r10
     8f2:	b4 01       	movw	r22, r8
     8f4:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
     8f8:	4b 01       	movw	r8, r22
     8fa:	5c 01       	movw	r10, r24
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	ef 1a       	sub	r14, r31
     900:	f1 08       	sbc	r15, r1
//Measure v off to see what the zero current voltage is
void measure_v_off(void)
{
	float total = 0;

	for (uint16_t i = 0; i < NUM_SAMPLES * 200; i++)
     902:	09 f7       	brne	.-62     	; 0x8c6 <measure_v_off+0x2e>
		//Add result to total
		_delay_us(40);
		total += ADCA_CH2RES;
	}
	//Get average of total
	total /= (NUM_SAMPLES * 200);
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4a ef       	ldi	r20, 0xFA	; 250
     90a:	54 e4       	ldi	r21, 0x44	; 68
     90c:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
     910:	4b 01       	movw	r8, r22
     912:	5c 01       	movw	r10, r24
	//Make sure that the total is above the negative voltage range
	if (total > ADC_NEG_ADJ)
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	4e e3       	ldi	r20, 0x3E	; 62
     91a:	53 e4       	ldi	r21, 0x43	; 67
     91c:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
     920:	18 16       	cp	r1, r24
     922:	bc f4       	brge	.+46     	; 0x952 <measure_v_off+0xba>
	{
		total -= ADC_NEG_ADJ;
		v_off = total * 0.0005; //0.0005 = 2.048V / 4096 counts
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	4e e3       	ldi	r20, 0x3E	; 62
     92a:	53 e4       	ldi	r21, 0x43	; 67
     92c:	c5 01       	movw	r24, r10
     92e:	b4 01       	movw	r22, r8
     930:	0e 94 36 22 	call	0x446c	; 0x446c <__subsf3>
     934:	2f e6       	ldi	r18, 0x6F	; 111
     936:	32 e1       	ldi	r19, 0x12	; 18
     938:	43 e0       	ldi	r20, 0x03	; 3
     93a:	5a e3       	ldi	r21, 0x3A	; 58
     93c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
     940:	60 93 66 20 	sts	0x2066, r22	; 0x802066 <v_off>
     944:	70 93 67 20 	sts	0x2067, r23	; 0x802067 <v_off+0x1>
     948:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <v_off+0x2>
     94c:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <v_off+0x3>
     950:	08 c0       	rjmp	.+16     	; 0x962 <measure_v_off+0xca>
	}
	else
	{
		v_off = 0;
     952:	10 92 66 20 	sts	0x2066, r1	; 0x802066 <v_off>
     956:	10 92 67 20 	sts	0x2067, r1	; 0x802067 <v_off+0x1>
     95a:	10 92 68 20 	sts	0x2068, r1	; 0x802068 <v_off+0x2>
     95e:	10 92 69 20 	sts	0x2069, r1	; 0x802069 <v_off+0x3>
	}
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	9f 90       	pop	r9
     974:	8f 90       	pop	r8
     976:	08 95       	ret

00000978 <write_bytes_CAN>:
	CAN_on = FALSE;
}

//Writes the specified number of bytes to the specified address to the CAN controller
void write_bytes_CAN(uint8_t address, uint8_t bytes[], uint8_t num_bytes)
{
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	d8 2e       	mov	r13, r24
     988:	7b 01       	movw	r14, r22
     98a:	d4 2f       	mov	r29, r20
	CAN_CHIP_SELECT_LOW;
     98c:	01 e4       	ldi	r16, 0x41	; 65
     98e:	16 e0       	ldi	r17, 0x06	; 6
     990:	c0 e1       	ldi	r28, 0x10	; 16
     992:	f8 01       	movw	r30, r16
     994:	c0 83       	st	Z, r28
     996:	c0 93 46 06 	sts	0x0646, r28	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(WRITE_CAN);
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	write_byte_SPI(address);
     9a0:	8d 2d       	mov	r24, r13
     9a2:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	write_bytes_SPI(bytes, num_bytes);
     9a6:	6d 2f       	mov	r22, r29
     9a8:	c7 01       	movw	r24, r14
     9aa:	0e 94 b7 19 	call	0x336e	; 0x336e <write_bytes_SPI>
	CAN_CHIP_SELECT_HIGH;
     9ae:	f8 01       	movw	r30, r16
     9b0:	c0 83       	st	Z, r28
     9b2:	c0 93 45 06 	sts	0x0645, r28	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	08 95       	ret

000009c6 <initialize_CAN>:
#include <emu_CAN.h>
#endif // __SIM__

//Initializes the CAN controller
void initialize_CAN(void)
{
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <initialize_CAN+0xc>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <initialize_CAN+0xe>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	DBG("Init CAN");
	//Reset CAN controller
	CAN_CHIP_SELECT_LOW;
     9d8:	0f 2e       	mov	r0, r31
     9da:	f1 e4       	ldi	r31, 0x41	; 65
     9dc:	ef 2e       	mov	r14, r31
     9de:	f6 e0       	ldi	r31, 0x06	; 6
     9e0:	ff 2e       	mov	r15, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	10 e1       	ldi	r17, 0x10	; 16
     9e6:	f7 01       	movw	r30, r14
     9e8:	10 83       	st	Z, r17
     9ea:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(RESET_CAN);
     9ee:	80 ec       	ldi	r24, 0xC0	; 192
     9f0:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	CAN_CHIP_SELECT_HIGH;
     9f4:	f7 01       	movw	r30, r14
     9f6:	10 83       	st	Z, r17
     9f8:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	uint8_t config_bytes[4] = { 0 };
     9fc:	19 82       	std	Y+1, r1	; 0x01
     9fe:	1a 82       	std	Y+2, r1	; 0x02
     a00:	1b 82       	std	Y+3, r1	; 0x03
     a02:	1c 82       	std	Y+4, r1	; 0x04
	//TXRTSCTRL - Sets pin states of RTS pins
	//RTS pins are not used in this application
	config_bytes[0] = 0b00000000;
	write_bytes_CAN(TXRTSCTRL, config_bytes, 1);	//TXRTSCTRL
     a04:	41 e0       	ldi	r20, 0x01	; 1
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	8d e0       	ldi	r24, 0x0D	; 13
     a0e:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	//If this buffer is full messages will rollover to RXB1
	//RXB1CTRL - Control for receive buffer 0
	//This buffer only receives only standard identifier messages
	//BFPCTRL - Sets pin states of RXBF pins
	//RXBF pins not used
	config_bytes[0] = 0b00100100;	//RXB0CTRL
     a12:	84 e2       	ldi	r24, 0x24	; 36
     a14:	89 83       	std	Y+1, r24	; 0x01
	config_bytes[1] = 0b00100000;	//RXB1CTRL
     a16:	80 e2       	ldi	r24, 0x20	; 32
     a18:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[2] = 0b00000000;	//BFPCTRL
     a1a:	1b 82       	std	Y+3, r1	; 0x03
	write_bytes_CAN(RXB0CTRL, config_bytes, 3);
     a1c:	43 e0       	ldi	r20, 0x03	; 3
     a1e:	be 01       	movw	r22, r28
     a20:	6f 5f       	subi	r22, 0xFF	; 255
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	80 e6       	ldi	r24, 0x60	; 96
     a26:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	//PS2 Length - 4
	//Propagation Segment Length - 7
	/*config_bytes[0] = 0b11000000;	//CNF1
	config_bytes[1] = 0b11110011;	//CNF2
	config_bytes[2] = 0b00000011;	//CNF3*/ //153KBPS
	config_bytes[2] = 0b10000011;	//CNF1 /// BRP=3;SJW=3TQ
     a2a:	13 e8       	ldi	r17, 0x83	; 131
     a2c:	1b 83       	std	Y+3, r17	; 0x03
	config_bytes[1] = 0b01110000;	//CNF2 // BTLMODE=0;SAM=1;;PHSEG1=6;PRSEG=0; //125Kbps  //Received_125Kbps
     a2e:	80 e7       	ldi	r24, 0x70	; 112
     a30:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[0] = 0b00000110;	//CNF3 // PHSEG2=6;*/
     a32:	86 e0       	ldi	r24, 0x06	; 6
     a34:	89 83       	std	Y+1, r24	; 0x01
	write_bytes_CAN(CNF3, config_bytes, 3);
     a36:	43 e0       	ldi	r20, 0x03	; 3
     a38:	be 01       	movw	r22, r28
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	88 e2       	ldi	r24, 0x28	; 40
     a40:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	//Interrupts Enabled:
	//Message Error Interrupt
	//Transmit Buffer 0 Empty Interrupt
	//Receive Buffer 0 Full Interrupt
	//Receive Buffer 1 Full Interrupt
	config_bytes[0] = 0b10000011;	//CANINTE
     a44:	19 83       	std	Y+1, r17	; 0x01
	write_bytes_CAN(CANINTE, config_bytes, 1);
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	be 01       	movw	r22, r28
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	8b e2       	ldi	r24, 0x2B	; 43
     a50:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	config_bytes[0] = 0b00000000;
     a54:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(TXB0CTRL, config_bytes, 1);
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	be 01       	movw	r22, r28
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	80 e3       	ldi	r24, 0x30	; 48
     a60:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	write_bytes_CAN(TXB1CTRL, config_bytes, 1);
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	//CANCTRL - Sets operation modes
	//Normal operation mode
	config_bytes[0] = 0b00000000;	//CANCTRL
     a72:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANCTRL, config_bytes, 1);
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	be 01       	movw	r22, r28
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	8f e0       	ldi	r24, 0x0F	; 15
     a7e:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	//Setup interrupt line for MCP25625
	PORTC_DIRCLR = (1 << CAN_INT);
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	PORTC_INT0MASK = (1 << CAN_INT);	//Turn on interrupt
     a88:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
	PORTC_INTCTRL = 0x05;				//Low level interrupts
     a8c:	85 e0       	ldi	r24, 0x05	; 5
     a8e:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__TEXT_REGION_LENGTH__+0x700649>
	PORTC_PIN3CTRL = 0x02;				//Falling Edge
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <__TEXT_REGION_LENGTH__+0x700653>

	CAN_on = TRUE;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 56 20 	sts	0x2056, r24	; 0x802056 <CAN_on>
	can_functioning = UNTESTED;
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <can_functioning>
	can_test_timer = ON;
     aa4:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <can_test_timer>
	A1_ack_received = FALSE;
     aa8:	10 92 34 20 	sts	0x2034, r1	; 0x802034 <A1_ack_received>
	A2_ack_received = FALSE;
     aac:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <A2_ack_received>
}
     ab0:	24 96       	adiw	r28, 0x04	; 4
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	08 95       	ret

00000ac2 <reinitialize_CAN>:

//Initializes the CAN controller
void reinitialize_CAN(void)
{
     ac2:	cf 92       	push	r12
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <reinitialize_CAN+0x10>
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <reinitialize_CAN+0x12>
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
	//stop_CAN();
	//IVA002: Standardized code
	CQ_initialize();
     ad8:	0e 94 cb 07 	call	0xf96	; 0xf96 <CQ_initialize>
	CAN_on = FALSE;
     adc:	10 92 56 20 	sts	0x2056, r1	; 0x802056 <CAN_on>
	//Reset can
	PORTC_OUTCLR = (1 << CAN_RST);
     ae0:	e6 e4       	ldi	r30, 0x46	; 70
     ae2:	f6 e0       	ldi	r31, 0x06	; 6
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	39 ef       	ldi	r19, 0xF9	; 249
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	30 40       	sbci	r19, 0x00	; 0
     af2:	90 40       	sbci	r25, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <reinitialize_CAN+0x2c>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <reinitialize_CAN+0x36>
     af8:	00 00       	nop
	_delay_ms(10);
	PORTC_OUTSET = (1 << CAN_RST);
     afa:	0f 2e       	mov	r0, r31
     afc:	f5 e4       	ldi	r31, 0x45	; 69
     afe:	ef 2e       	mov	r14, r31
     b00:	f6 e0       	ldi	r31, 0x06	; 6
     b02:	ff 2e       	mov	r15, r31
     b04:	f0 2d       	mov	r31, r0
     b06:	d7 01       	movw	r26, r14
     b08:	8c 93       	st	X, r24

	//Reset CAN controller
	CAN_CHIP_SELECT_LOW;
     b0a:	0f 2e       	mov	r0, r31
     b0c:	f1 e4       	ldi	r31, 0x41	; 65
     b0e:	cf 2e       	mov	r12, r31
     b10:	f6 e0       	ldi	r31, 0x06	; 6
     b12:	df 2e       	mov	r13, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	10 e1       	ldi	r17, 0x10	; 16
     b18:	d6 01       	movw	r26, r12
     b1a:	1c 93       	st	X, r17
     b1c:	10 83       	st	Z, r17
	write_byte_SPI(RESET_CAN);
     b1e:	80 ec       	ldi	r24, 0xC0	; 192
     b20:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	CAN_CHIP_SELECT_HIGH;
     b24:	f6 01       	movw	r30, r12
     b26:	10 83       	st	Z, r17
     b28:	d7 01       	movw	r26, r14
     b2a:	1c 93       	st	X, r17

	uint8_t config_bytes[4] = { 0 };
     b2c:	19 82       	std	Y+1, r1	; 0x01
     b2e:	1a 82       	std	Y+2, r1	; 0x02
     b30:	1b 82       	std	Y+3, r1	; 0x03
     b32:	1c 82       	std	Y+4, r1	; 0x04

	//TXRTSCTRL - Sets pin states of RTS pins
	//RTS pins are not used in this application
	config_bytes[0] = 0b00000000;
	write_bytes_CAN(TXRTSCTRL, config_bytes, 1);	//TXRTSCTRL
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	be 01       	movw	r22, r28
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	8d e0       	ldi	r24, 0x0D	; 13
     b3e:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	//If this buffer is full messages will rollover to RXB1
	//RXB1CTRL - Control for receive buffer 0
	//This buffer only receives only standard identifier messages
	//BFPCTRL - Sets pin states of RXBF pins
	//RXBF pins not used
	config_bytes[0] = 0b00100100;	//RXB0CTRL
     b42:	84 e2       	ldi	r24, 0x24	; 36
     b44:	89 83       	std	Y+1, r24	; 0x01
	config_bytes[1] = 0b00100000;	//RXB1CTRL
     b46:	80 e2       	ldi	r24, 0x20	; 32
     b48:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[2] = 0b00000000;	//BFPCTRL
     b4a:	1b 82       	std	Y+3, r1	; 0x03
	write_bytes_CAN(RXB0CTRL, config_bytes, 3);
     b4c:	43 e0       	ldi	r20, 0x03	; 3
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 e6       	ldi	r24, 0x60	; 96
     b56:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	/*config_bytes[2] = 0b10000001;	//CNF1 /// BRP=1;SJW=3TQ
	config_bytes[1] = 0b11101001;	//CNF2 // BTLMODE=1;SAM=1;;PHSEG1=5;PRSEG=1; //250KBPS   //Received_250Kbps
	config_bytes[0] = 0b00000110;	//CNF3 // PHSEG2=6;*/

	config_bytes[2] = 0b10000011;	//CNF1 /// BRP=3;SJW=3TQ
     b5a:	13 e8       	ldi	r17, 0x83	; 131
     b5c:	1b 83       	std	Y+3, r17	; 0x03
	config_bytes[1] = 0b01110000;	//CNF2 // BTLMODE=0;SAM=1;;PHSEG1=6;PRSEG=0; //125Kbps  //Received_125Kbps
     b5e:	80 e7       	ldi	r24, 0x70	; 112
     b60:	8a 83       	std	Y+2, r24	; 0x02
	config_bytes[0] = 0b00000110;	//CNF3 // PHSEG2=6;
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	89 83       	std	Y+1, r24	; 0x01

	write_bytes_CAN(CNF3, config_bytes, 3);
     b66:	43 e0       	ldi	r20, 0x03	; 3
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	88 e2       	ldi	r24, 0x28	; 40
     b70:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	//Interrupts Enabled:
	//Message Error Interrupt
	//Transmit Buffer 0 Empty Interrupt
	//Receive Buffer 0 Full Interrupt
	//Receive Buffer 1 Full Interrupt
	config_bytes[0] = 0b10000011;	//CANINTE
     b74:	19 83       	std	Y+1, r17	; 0x01
	write_bytes_CAN(CANINTE, config_bytes, 1);
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	be 01       	movw	r22, r28
     b7a:	6f 5f       	subi	r22, 0xFF	; 255
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	8b e2       	ldi	r24, 0x2B	; 43
     b80:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	config_bytes[0] = 0b00000000;
     b84:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(TXB0CTRL, config_bytes, 1);
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	be 01       	movw	r22, r28
     b8a:	6f 5f       	subi	r22, 0xFF	; 255
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	80 e3       	ldi	r24, 0x30	; 48
     b90:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
	write_bytes_CAN(TXB1CTRL, config_bytes, 1);
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	be 01       	movw	r22, r28
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	//CANCTRL - Sets operation modes
	//Normal operation mode
	config_bytes[0] = 0b00000000;	//CANCTRL
     ba2:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANCTRL, config_bytes, 1);
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	be 01       	movw	r22, r28
     ba8:	6f 5f       	subi	r22, 0xFF	; 255
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	8f e0       	ldi	r24, 0x0F	; 15
     bae:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>

	//Setup interrupt line for MCP25625
	PORTC_DIRCLR = (1 << CAN_INT);
     bb2:	88 e0       	ldi	r24, 0x08	; 8
     bb4:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	PORTC_INT0MASK = (1 << CAN_INT);	//Turn on interrupt
     bb8:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
	PORTC_INTCTRL = 0x05;				//Low level interrupts
     bbc:	85 e0       	ldi	r24, 0x05	; 5
     bbe:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <__TEXT_REGION_LENGTH__+0x700649>
	PORTC_PIN3CTRL = 0x02;				//Falling Edge
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <__TEXT_REGION_LENGTH__+0x700653>

	CAN_on = TRUE;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	80 93 56 20 	sts	0x2056, r24	; 0x802056 <CAN_on>
}
     bce:	24 96       	adiw	r28, 0x04	; 4
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	08 95       	ret

00000be4 <read_bytes_CAN>:
}

#ifndef  __SIM__
//Reads the specified number of bytes to the specified address to the CAN controller
void read_bytes_CAN(uint8_t address, uint8_t bytes[], uint8_t num_bytes)
{
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	d8 2e       	mov	r13, r24
     bf4:	7b 01       	movw	r14, r22
     bf6:	d4 2f       	mov	r29, r20
	CAN_CHIP_SELECT_LOW;
     bf8:	01 e4       	ldi	r16, 0x41	; 65
     bfa:	16 e0       	ldi	r17, 0x06	; 6
     bfc:	c0 e1       	ldi	r28, 0x10	; 16
     bfe:	f8 01       	movw	r30, r16
     c00:	c0 83       	st	Z, r28
     c02:	c0 93 46 06 	sts	0x0646, r28	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(READ_CAN);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	write_byte_SPI(address);
     c0c:	8d 2d       	mov	r24, r13
     c0e:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	read_bytes_SPI(bytes, num_bytes);
     c12:	6d 2f       	mov	r22, r29
     c14:	c7 01       	movw	r24, r14
     c16:	0e 94 cc 19 	call	0x3398	; 0x3398 <read_bytes_SPI>
	CAN_CHIP_SELECT_HIGH;
     c1a:	f8 01       	movw	r30, r16
     c1c:	c0 83       	st	Z, r28
     c1e:	c0 93 45 06 	sts	0x0645, r28	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	08 95       	ret

00000c32 <read_byte_CAN>:

//Reads the specified register from the CAN controller
uint8_t read_byte_CAN(uint8_t address)
{
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	1f 92       	push	r1
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	08 2f       	mov	r16, r24
	CAN_CHIP_SELECT_LOW;
     c46:	0f 2e       	mov	r0, r31
     c48:	f1 e4       	ldi	r31, 0x41	; 65
     c4a:	ef 2e       	mov	r14, r31
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	ff 2e       	mov	r15, r31
     c50:	f0 2d       	mov	r31, r0
     c52:	10 e1       	ldi	r17, 0x10	; 16
     c54:	f7 01       	movw	r30, r14
     c56:	10 83       	st	Z, r17
     c58:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	write_byte_SPI(READ_CAN);
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	write_byte_SPI(address);
     c62:	80 2f       	mov	r24, r16
     c64:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	uint8_t bytes[1];
	read_bytes_SPI(bytes, 1);
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	ce 01       	movw	r24, r28
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	0e 94 cc 19 	call	0x3398	; 0x3398 <read_bytes_SPI>
	CAN_CHIP_SELECT_HIGH;
     c72:	f7 01       	movw	r30, r14
     c74:	10 83       	st	Z, r17
     c76:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	return bytes[0];
}
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	0f 90       	pop	r0
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	08 95       	ret

00000c8c <transmit_CAN>:
#endif // ! __SIM__

//Adds a CAN message on the Tx queue
void transmit_CAN(uint16_t dataID, uint8_t remote_transmission_request,
	uint8_t data_length, uint8_t data[])
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	2b 97       	sbiw	r28, 0x0b	; 11
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	de bf       	out	0x3e, r29	; 62
	uint8_t buff[TX_BLOCK_SIZE];
	buff[0] = dataID;
     c9a:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = remote_transmission_request;
     c9c:	6a 83       	std	Y+2, r22	; 0x02
	buff[2] = data_length;
     c9e:	4b 83       	std	Y+3, r20	; 0x03
	for (uint8_t i = 0; i < data_length; i++)
     ca0:	44 23       	and	r20, r20
     ca2:	79 f0       	breq	.+30     	; 0xcc2 <transmit_CAN+0x36>
     ca4:	a2 2f       	mov	r26, r18
     ca6:	b3 2f       	mov	r27, r19
     ca8:	fe 01       	movw	r30, r28
     caa:	34 96       	adiw	r30, 0x04	; 4
     cac:	41 50       	subi	r20, 0x01	; 1
     cae:	9e 01       	movw	r18, r28
     cb0:	24 0f       	add	r18, r20
     cb2:	31 1d       	adc	r19, r1
     cb4:	2b 5f       	subi	r18, 0xFB	; 251
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
		buff[i + 3] = data[i];
     cb8:	8d 91       	ld	r24, X+
     cba:	81 93       	st	Z+, r24
{
	uint8_t buff[TX_BLOCK_SIZE];
	buff[0] = dataID;
	buff[1] = remote_transmission_request;
	buff[2] = data_length;
	for (uint8_t i = 0; i < data_length; i++)
     cbc:	e2 17       	cp	r30, r18
     cbe:	f3 07       	cpc	r31, r19
     cc0:	d9 f7       	brne	.-10     	; 0xcb8 <transmit_CAN+0x2c>
		buff[i + 3] = data[i];
	CQTx_enqueue(buff);
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <CQTx_enqueue>
}
     cca:	2b 96       	adiw	r28, 0x0b	; 11
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <transmit_CAN_>:

//Transmits a CAN message on the CAN bus
void transmit_CAN_(uint8_t dataID, uint8_t remote_transmission_request,
	uint8_t data_length, uint8_t data[])
{
     cd6:	2f 92       	push	r2
     cd8:	3f 92       	push	r3
     cda:	4f 92       	push	r4
     cdc:	5f 92       	push	r5
     cde:	6f 92       	push	r6
     ce0:	7f 92       	push	r7
     ce2:	8f 92       	push	r8
     ce4:	9f 92       	push	r9
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <transmit_CAN_+0x26>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <transmit_CAN_+0x28>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	28 2e       	mov	r2, r24
     d04:	46 2e       	mov	r4, r22
     d06:	54 2e       	mov	r5, r20
     d08:	59 01       	movw	r10, r18
	uint8_t retry = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	89 83       	std	Y+1, r24	; 0x01

jump_retry:
	Check_flag = 1;
     d0e:	33 24       	eor	r3, r3
     d10:	33 94       	inc	r3
	CAN_CHIP_SELECT_LOW;
     d12:	01 e4       	ldi	r16, 0x41	; 65
     d14:	16 e0       	ldi	r17, 0x06	; 6
     d16:	68 94       	set
     d18:	77 24       	eor	r7, r7
     d1a:	74 f8       	bld	r7, 4
     d1c:	67 2c       	mov	r6, r7
     d1e:	0f 2e       	mov	r0, r31
     d20:	f6 e4       	ldi	r31, 0x46	; 70
     d22:	ef 2e       	mov	r14, r31
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	ff 2e       	mov	r15, r31
     d28:	f0 2d       	mov	r31, r0
     d2a:	9f ef       	ldi	r25, 0xFF	; 255
     d2c:	94 0f       	add	r25, r20
     d2e:	e9 2f       	mov	r30, r25
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	31 96       	adiw	r30, 0x01	; 1
     d34:	e2 0f       	add	r30, r18
     d36:	f3 1f       	adc	r31, r19
     d38:	eb 83       	std	Y+3, r30	; 0x03
     d3a:	fc 83       	std	Y+4, r31	; 0x04
		for (uint8_t i = 0; i < data_length; i++)
		{
			write_byte_SPI(data[i]);
		}
	}
	CAN_CHIP_SELECT_HIGH;
     d3c:	0f 2e       	mov	r0, r31
     d3e:	f5 e4       	ldi	r31, 0x45	; 69
     d40:	cf 2e       	mov	r12, r31
     d42:	f6 e0       	ldi	r31, 0x06	; 6
     d44:	df 2e       	mov	r13, r31
     d46:	f0 2d       	mov	r31, r0
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <transmit_CAN_+0x76>
	}
	else
	{
		if (retry == 1)
		{
			retry--;
     d4a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t data_length, uint8_t data[])
{
	uint8_t retry = 1;

jump_retry:
	Check_flag = 1;
     d4c:	30 92 03 21 	sts	0x2103, r3	; 0x802103 <Check_flag>
	CAN_CHIP_SELECT_LOW;
     d50:	f8 01       	movw	r30, r16
     d52:	60 82       	st	Z, r6
     d54:	f7 01       	movw	r30, r14
     d56:	60 82       	st	Z, r6
	write_byte_SPI(LOAD_TX_BUFFER_CAN | LOAD_BUFFER_0);
     d58:	80 e4       	ldi	r24, 0x40	; 64
     d5a:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	//   10 ..................03.......00  .... .......................
	//   28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	//    1  0  0  0  0  1  1  1  1  1  1  1  1  x  x  x  x  x  x  x  x  1  0  1  0  0  0  1  1

	//Bits 10-3 of standard identifier
	write_byte_SPI(0b10000111);
     d5e:	87 e8       	ldi	r24, 0x87	; 135
     d60:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>

	//Bits 2-0 of standard identifier 
	//& extended identifier enable bit & bits 17-16 of extended identifier
	//Extended identifier is used
	write_byte_SPI(0b11101011);
     d64:	8b ee       	ldi	r24, 0xEB	; 235
     d66:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>

	//Bits 15-8 of extended identifier
	write_byte_SPI(dataID);
     d6a:	82 2d       	mov	r24, r2
     d6c:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>

	//Bits 7-0 of extended identifier
	write_byte_SPI(0xA3);
     d70:	83 ea       	ldi	r24, 0xA3	; 163
     d72:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>

	//If remote transmission request is required
	//set RTR bit as 1, and set data length to 0
	if (remote_transmission_request)
     d76:	44 20       	and	r4, r4
     d78:	21 f0       	breq	.+8      	; 0xd82 <transmit_CAN_+0xac>
	{
		uint8_t rtr_dlc = 0x40;
		write_byte_SPI(rtr_dlc);
     d7a:	80 e4       	ldi	r24, 0x40	; 64
     d7c:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
     d80:	10 c0       	rjmp	.+32     	; 0xda2 <transmit_CAN_+0xcc>
	}
	//Else set data length and write the data bytes
	else
	{
		uint8_t rtr_dlc = data_length;
		write_byte_SPI(rtr_dlc);
     d82:	85 2d       	mov	r24, r5
     d84:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
		for (uint8_t i = 0; i < data_length; i++)
     d88:	55 20       	and	r5, r5
     d8a:	59 f0       	breq	.+22     	; 0xda2 <transmit_CAN_+0xcc>
     d8c:	45 01       	movw	r8, r10
		{
			write_byte_SPI(data[i]);
     d8e:	f4 01       	movw	r30, r8
     d90:	81 91       	ld	r24, Z+
     d92:	4f 01       	movw	r8, r30
     d94:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	//Else set data length and write the data bytes
	else
	{
		uint8_t rtr_dlc = data_length;
		write_byte_SPI(rtr_dlc);
		for (uint8_t i = 0; i < data_length; i++)
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	88 16       	cp	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	b1 f7       	brne	.-20     	; 0xd8e <transmit_CAN_+0xb8>
		{
			write_byte_SPI(data[i]);
		}
	}
	CAN_CHIP_SELECT_HIGH;
     da2:	f8 01       	movw	r30, r16
     da4:	70 82       	st	Z, r7
     da6:	f6 01       	movw	r30, r12
     da8:	70 82       	st	Z, r7

	//Send out data through CAN
	CAN_CHIP_SELECT_LOW;
     daa:	f8 01       	movw	r30, r16
     dac:	70 82       	st	Z, r7
     dae:	f7 01       	movw	r30, r14
     db0:	70 82       	st	Z, r7
	write_byte_SPI(WRITE_CAN);
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	write_byte_SPI(TXB0CTRL);
     db8:	80 e3       	ldi	r24, 0x30	; 48
     dba:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	if (Check_flag)
     dbe:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <Check_flag>
     dc2:	88 23       	and	r24, r24
     dc4:	21 f0       	breq	.+8      	; 0xdce <transmit_CAN_+0xf8>
	{
		write_byte_SPI(0x08);
     dc6:	88 e0       	ldi	r24, 0x08	; 8
     dc8:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <transmit_CAN_+0x100>
	}
	else
	{
		if (retry == 1)
     dce:	f9 81       	ldd	r31, Y+1	; 0x01
     dd0:	f1 30       	cpi	r31, 0x01	; 1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <transmit_CAN_+0x100>
     dd4:	ba cf       	rjmp	.-140    	; 0xd4a <transmit_CAN_+0x74>
		{
			retry--;
			goto jump_retry;
		}
	}
	CAN_CHIP_SELECT_HIGH;
     dd6:	80 e1       	ldi	r24, 0x10	; 16
     dd8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     ddc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	Check_flag = 0;
     de0:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <Check_flag>
}
     de4:	24 96       	adiw	r28, 0x04	; 4
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	9f 90       	pop	r9
     e00:	8f 90       	pop	r8
     e02:	7f 90       	pop	r7
     e04:	6f 90       	pop	r6
     e06:	5f 90       	pop	r5
     e08:	4f 90       	pop	r4
     e0a:	3f 90       	pop	r3
     e0c:	2f 90       	pop	r2
     e0e:	08 95       	ret

00000e10 <reset_CAN_error>:

//If CAN error has set reset the CAN controller
void reset_CAN_error(void)
{
     e10:	cf 93       	push	r28
	//IVA002: Fix for CAN SPI Corruption
	CAN_MX_LOCK();
     e12:	f8 94       	cli
	uint8_t t_error = read_byte_CAN(TEC);
     e14:	8c e1       	ldi	r24, 0x1C	; 28
     e16:	0e 94 19 06 	call	0xc32	; 0xc32 <read_byte_CAN>
     e1a:	c8 2f       	mov	r28, r24
	uint8_t r_error = read_byte_CAN(REC);
     e1c:	8d e1       	ldi	r24, 0x1D	; 29
     e1e:	0e 94 19 06 	call	0xc32	; 0xc32 <read_byte_CAN>

	if (t_error > 120 || r_error > 120)
     e22:	c9 37       	cpi	r28, 0x79	; 121
     e24:	10 f4       	brcc	.+4      	; 0xe2a <reset_CAN_error+0x1a>
     e26:	89 37       	cpi	r24, 0x79	; 121
     e28:	10 f0       	brcs	.+4      	; 0xe2e <reset_CAN_error+0x1e>
	{
		reinitialize_CAN();
     e2a:	0e 94 61 05 	call	0xac2	; 0xac2 <reinitialize_CAN>
	}
	CAN_MX_UNLOCK();
     e2e:	78 94       	sei
}
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <__vector_2>:

ISR(CAN_INTERRUPT)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	2d 97       	sbiw	r28, 0x0d	; 13
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	de bf       	out	0x3e, r29	; 62
	if (Check_flag)
     e68:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <Check_flag>
     e6c:	81 11       	cpse	r24, r1
	{
		Check_flag = 0;
     e6e:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <Check_flag>
	}
	uint8_t int_flags;
	int_flags = read_byte_CAN(CANINTF);
     e72:	8c e2       	ldi	r24, 0x2C	; 44
     e74:	0e 94 19 06 	call	0xc32	; 0xc32 <read_byte_CAN>
     e78:	18 2f       	mov	r17, r24

	//If either error interrupt flag is raised, notify the user
	if (int_flags & ERRIF)
     e7a:	85 ff       	sbrs	r24, 5
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <__vector_2+0x5c>
	{
		errorCount++;
     e7e:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <__data_end>
     e82:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <__data_end+0x1>
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end>
     e8c:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x1>
	}
	if (int_flags & MERRF)
     e90:	11 23       	and	r17, r17
     e92:	4c f4       	brge	.+18     	; 0xea6 <__vector_2+0x72>
	{
		errorCount++;
     e94:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <__data_end>
     e98:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <__data_end+0x1>
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end>
     ea2:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x1>
	}

	//If either receive buffer is full read the data and perform accordingly
	if (int_flags & RXB0_FULL)
     ea6:	10 ff       	sbrs	r17, 0
     ea8:	2a c0       	rjmp	.+84     	; 0xefe <__vector_2+0xca>
	{
		uint8_t data[8] = { 0 };
     eaa:	fe 01       	movw	r30, r28
     eac:	32 96       	adiw	r30, 0x02	; 2
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	df 01       	movw	r26, r30
     eb2:	1d 92       	st	X+, r1
     eb4:	8a 95       	dec	r24
     eb6:	e9 f7       	brne	.-6      	; 0xeb2 <__vector_2+0x7e>
		//Read only bits 3-0 of RXB0DLC to get the data length code
		uint8_t data_length = read_byte_CAN(RXB0DLC) & 0x0F;
     eb8:	85 e6       	ldi	r24, 0x65	; 101
     eba:	0e 94 19 06 	call	0xc32	; 0xc32 <read_byte_CAN>
     ebe:	08 2f       	mov	r16, r24
     ec0:	0f 70       	andi	r16, 0x0F	; 15
		if (data_length > 8) //IVA001: Incase of corruption do not process the data
     ec2:	09 30       	cpi	r16, 0x09	; 9
     ec4:	e0 f4       	brcc	.+56     	; 0xefe <__vector_2+0xca>
		{
			DBG1("A3 CAN Corruption CH0 %d", data_length);
		}
		else
		{
			read_bytes_CAN(RXB0D0, data, data_length);
     ec6:	40 2f       	mov	r20, r16
     ec8:	be 01       	movw	r22, r28
     eca:	6e 5f       	subi	r22, 0xFE	; 254
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	86 e6       	ldi	r24, 0x66	; 102
     ed0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <read_bytes_CAN>

			uint8_t ids[4] = { 0 };
     ed4:	1a 86       	std	Y+10, r1	; 0x0a
     ed6:	1b 86       	std	Y+11, r1	; 0x0b
     ed8:	1c 86       	std	Y+12, r1	; 0x0c
     eda:	1d 86       	std	Y+13, r1	; 0x0d
			read_bytes_CAN(RXB0SIDH, ids, 4);
     edc:	44 e0       	ldi	r20, 0x04	; 4
     ede:	be 01       	movw	r22, r28
     ee0:	66 5f       	subi	r22, 0xF6	; 246
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	81 e6       	ldi	r24, 0x61	; 97
     ee6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <read_bytes_CAN>

			if ((ids[1] && 0b00001000) != 0) // ignore std ids
     eea:	8b 85       	ldd	r24, Y+11	; 0x0b
     eec:	88 23       	and	r24, r24
     eee:	39 f0       	breq	.+14     	; 0xefe <__vector_2+0xca>
			{
				uint16_t can_id = ids[2];
				CQRx_enqueue(data, can_id, data_length);
     ef0:	6c 85       	ldd	r22, Y+12	; 0x0c
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	40 2f       	mov	r20, r16
     ef6:	ce 01       	movw	r24, r28
     ef8:	02 96       	adiw	r24, 0x02	; 2
     efa:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <CQRx_enqueue>
			}
		}
	}
	if (int_flags & RXB1_FULL)
     efe:	11 ff       	sbrs	r17, 1
     f00:	2a c0       	rjmp	.+84     	; 0xf56 <__vector_2+0x122>
	{
		uint8_t data[8] = { 0 };
     f02:	fe 01       	movw	r30, r28
     f04:	32 96       	adiw	r30, 0x02	; 2
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	df 01       	movw	r26, r30
     f0a:	1d 92       	st	X+, r1
     f0c:	8a 95       	dec	r24
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <__vector_2+0xd6>
		uint8_t data_length = read_byte_CAN(RXB1DLC) & 0x0F;
     f10:	85 e7       	ldi	r24, 0x75	; 117
     f12:	0e 94 19 06 	call	0xc32	; 0xc32 <read_byte_CAN>
     f16:	18 2f       	mov	r17, r24
     f18:	1f 70       	andi	r17, 0x0F	; 15
		if (data_length > 8) //IVA001: Incase of corruption do not process the data
     f1a:	19 30       	cpi	r17, 0x09	; 9
     f1c:	e0 f4       	brcc	.+56     	; 0xf56 <__vector_2+0x122>
		{
			DBG1("A3 CAN Corruption CH1 %d", data_length);
		}
		else
		{
			read_bytes_CAN(RXB1D0, data, data_length);
     f1e:	41 2f       	mov	r20, r17
     f20:	be 01       	movw	r22, r28
     f22:	6e 5f       	subi	r22, 0xFE	; 254
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	86 e7       	ldi	r24, 0x76	; 118
     f28:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <read_bytes_CAN>

			//IVA002: J1939 Implementation
			uint8_t ids[4] = { 0 };
     f2c:	1a 86       	std	Y+10, r1	; 0x0a
     f2e:	1b 86       	std	Y+11, r1	; 0x0b
     f30:	1c 86       	std	Y+12, r1	; 0x0c
     f32:	1d 86       	std	Y+13, r1	; 0x0d
			read_bytes_CAN(RXB1SIDH, ids, 4);
     f34:	44 e0       	ldi	r20, 0x04	; 4
     f36:	be 01       	movw	r22, r28
     f38:	66 5f       	subi	r22, 0xF6	; 246
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	81 e7       	ldi	r24, 0x71	; 113
     f3e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <read_bytes_CAN>
			if ((ids[1] && 0b00001000) != 0) // ignore std ids
     f42:	8b 85       	ldd	r24, Y+11	; 0x0b
     f44:	88 23       	and	r24, r24
     f46:	39 f0       	breq	.+14     	; 0xf56 <__vector_2+0x122>
			{
				uint16_t can_id = ids[2];
				CQRx_enqueue(data, can_id, data_length);
     f48:	6c 85       	ldd	r22, Y+12	; 0x0c
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	41 2f       	mov	r20, r17
     f4e:	ce 01       	movw	r24, r28
     f50:	02 96       	adiw	r24, 0x02	; 2
     f52:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <CQRx_enqueue>
			}
		}
	}

	//Clear the flags
	uint8_t clear[1] = { 0x00 };
     f56:	19 82       	std	Y+1, r1	; 0x01
	write_bytes_CAN(CANINTF, clear, 1);
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	be 01       	movw	r22, r28
     f5c:	6f 5f       	subi	r22, 0xFF	; 255
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	8c e2       	ldi	r24, 0x2C	; 44
     f62:	0e 94 bc 04 	call	0x978	; 0x978 <write_bytes_CAN>
}
     f66:	2d 96       	adiw	r28, 0x0d	; 13
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <CQ_initialize>:
	CQ_MX_UNLOCK();

	if (tmp == 0)
		return TRUE;
	return FALSE;
}
     f96:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <CQRx_size>
     f9a:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <CQRx_front>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <CQRx_rear>
     fa4:	10 92 38 21 	sts	0x2138, r1	; 0x802138 <CQTx_size>
     fa8:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <CQTx_front>
     fac:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <CQTx_rear>
     fb0:	08 95       	ret

00000fb2 <CQRx_queueIsEmpty>:
     fb2:	f8 94       	cli
     fb4:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <CQRx_size>
     fb8:	78 94       	sei
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	91 11       	cpse	r25, r1
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret

00000fc2 <CQRx_enqueue>:
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	f8 2e       	mov	r15, r24
     fce:	09 2f       	mov	r16, r25
     fd0:	eb 01       	movw	r28, r22
     fd2:	14 2f       	mov	r17, r20
     fd4:	f8 94       	cli
     fd6:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <CQRx_rear>
     fda:	08 2e       	mov	r0, r24
     fdc:	00 0c       	add	r0, r0
     fde:	99 0b       	sbc	r25, r25
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	64 e6       	ldi	r22, 0x64	; 100
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	0e 94 81 24 	call	0x4902	; 0x4902 <__divmodhi4>
     fea:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <CQRx_rear>
     fee:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <CQRx_size>
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <CQRx_size>
     ff8:	78 94       	sei
     ffa:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <CQRx_size>
     ffe:	84 36       	cpi	r24, 0x64	; 100
    1000:	58 f1       	brcs	.+86     	; 0x1058 <CQRx_enqueue+0x96>
    1002:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <send_CAN_buffer_overflow>
    1006:	28 c0       	rjmp	.+80     	; 0x1058 <CQRx_enqueue+0x96>
    1008:	81 17       	cp	r24, r17
    100a:	68 f4       	brcc	.+26     	; 0x1026 <CQRx_enqueue+0x64>
    100c:	30 91 36 21 	lds	r19, 0x2136	; 0x802136 <CQRx_rear>
    1010:	20 81       	ld	r18, Z
    1012:	dc 01       	movw	r26, r24
    1014:	48 e0       	ldi	r20, 0x08	; 8
    1016:	34 02       	muls	r19, r20
    1018:	a0 0d       	add	r26, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	11 24       	eor	r1, r1
    101e:	a0 59       	subi	r26, 0x90	; 144
    1020:	bd 4d       	sbci	r27, 0xDD	; 221
    1022:	2c 93       	st	X, r18
    1024:	0b c0       	rjmp	.+22     	; 0x103c <CQRx_enqueue+0x7a>
    1026:	20 91 36 21 	lds	r18, 0x2136	; 0x802136 <CQRx_rear>
    102a:	dc 01       	movw	r26, r24
    102c:	38 e0       	ldi	r19, 0x08	; 8
    102e:	23 02       	muls	r18, r19
    1030:	a0 0d       	add	r26, r0
    1032:	b1 1d       	adc	r27, r1
    1034:	11 24       	eor	r1, r1
    1036:	a0 59       	subi	r26, 0x90	; 144
    1038:	bd 4d       	sbci	r27, 0xDD	; 221
    103a:	1c 92       	st	X, r1
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	31 96       	adiw	r30, 0x01	; 1
    1040:	88 30       	cpi	r24, 0x08	; 8
    1042:	91 05       	cpc	r25, r1
    1044:	09 f7       	brne	.-62     	; 0x1008 <CQRx_enqueue+0x46>
    1046:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <CQRx_rear>
    104a:	ee 0f       	add	r30, r30
    104c:	ff 0b       	sbc	r31, r31
    104e:	e8 55       	subi	r30, 0x58	; 88
    1050:	fe 4d       	sbci	r31, 0xDE	; 222
    1052:	c0 83       	st	Z, r28
    1054:	d1 83       	std	Z+1, r29	; 0x01
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <CQRx_enqueue+0xa0>
    1058:	ef 2d       	mov	r30, r15
    105a:	f0 2f       	mov	r31, r16
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	d3 cf       	rjmp	.-90     	; 0x1008 <CQRx_enqueue+0x46>
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	08 95       	ret

0000106e <CQRx_dequeue>:
    106e:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <CQRx_size>
    1072:	88 23       	and	r24, r24
    1074:	31 f1       	breq	.+76     	; 0x10c2 <CQRx_dequeue+0x54>
    1076:	f8 94       	cli
    1078:	e0 91 35 21 	lds	r30, 0x2135	; 0x802135 <CQRx_front>
    107c:	ee 0f       	add	r30, r30
    107e:	ff 0b       	sbc	r31, r31
    1080:	e8 55       	subi	r30, 0x58	; 88
    1082:	fe 4d       	sbci	r31, 0xDE	; 222
    1084:	30 81       	ld	r19, Z
    1086:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <CQRx_front>
    108a:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <CQRx_size>
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <CQRx_size>
    1094:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <CQRx_front>
    1098:	08 2e       	mov	r0, r24
    109a:	00 0c       	add	r0, r0
    109c:	99 0b       	sbc	r25, r25
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	64 e6       	ldi	r22, 0x64	; 100
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	0e 94 81 24 	call	0x4902	; 0x4902 <__divmodhi4>
    10a8:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <CQRx_front>
    10ac:	78 94       	sei
    10ae:	88 e0       	ldi	r24, 0x08	; 8
    10b0:	28 02       	muls	r18, r24
    10b2:	b0 01       	movw	r22, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	60 59       	subi	r22, 0x90	; 144
    10b8:	7d 4d       	sbci	r23, 0xDD	; 221
    10ba:	83 2f       	mov	r24, r19
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 4a 0a 	call	0x1494	; 0x1494 <processCAN>
    10c2:	08 95       	ret

000010c4 <CQTx_enqueue>:

//Add unprocessed communication to queue
void CQTx_enqueue(uint8_t* data)
{
    10c4:	fc 01       	movw	r30, r24
	DBG1("A3:CQTx: %d", CQTx_size);

	CQ_MX_LOCK();
    10c6:	f8 94       	cli
	//Get position of new data
	CQTx_rear = (CQTx_rear + 1) % TX_QUEUE_SIZE;
    10c8:	80 91 37 21 	lds	r24, 0x2137	; 0x802137 <CQTx_rear>
    10cc:	08 2e       	mov	r0, r24
    10ce:	00 0c       	add	r0, r0
    10d0:	99 0b       	sbc	r25, r25
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	6a e0       	ldi	r22, 0x0A	; 10
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	0e 94 81 24 	call	0x4902	; 0x4902 <__divmodhi4>
    10dc:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <CQTx_rear>
	CQTx_size++;
    10e0:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <CQTx_size>
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <CQTx_size>
	CQ_MX_UNLOCK();
    10ea:	78 94       	sei

	//DBG2("EnQ %d, 0x%X", CQ_Size, &CQ_Size);
	//Print error message to screen if CAn buffer overflow
	//Buffer overflow should not occur in the field, increase size if buffer ever overflows
	if (CQTx_size >= TX_QUEUE_SIZE)
    10ec:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <CQTx_size>
	{
	}

	uint8_t *p = CQTx_data_queue[CQTx_rear];
    10f0:	a0 91 37 21 	lds	r26, 0x2137	; 0x802137 <CQTx_rear>
	//Copy over data
	memcpy(&p[0], &data[0], TX_BLOCK_SIZE);
    10f4:	8b e0       	ldi	r24, 0x0B	; 11
    10f6:	a8 02       	muls	r26, r24
    10f8:	d0 01       	movw	r26, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	a7 5c       	subi	r26, 0xC7	; 199
    10fe:	be 4d       	sbci	r27, 0xDE	; 222
    1100:	8b e0       	ldi	r24, 0x0B	; 11
    1102:	01 90       	ld	r0, Z+
    1104:	0d 92       	st	X+, r0
    1106:	8a 95       	dec	r24
    1108:	e1 f7       	brne	.-8      	; 0x1102 <CQTx_enqueue+0x3e>
    110a:	08 95       	ret

0000110c <CQTx_dequeue>:
}

//Get the communication data at the front of the queue
void CQTx_dequeue(void)
{
	if (CQTx_size == 0)
    110c:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <CQTx_size>
    1110:	88 23       	and	r24, r24
    1112:	09 f1       	breq	.+66     	; 0x1156 <CQTx_dequeue+0x4a>
		return;

	uint8_t*  data;

	data = CQTx_data_queue[CQTx_front];
    1114:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <CQTx_front>
    1118:	8b e0       	ldi	r24, 0x0B	; 11
    111a:	e8 02       	muls	r30, r24
    111c:	f0 01       	movw	r30, r0
    111e:	11 24       	eor	r1, r1
    1120:	e7 5c       	subi	r30, 0xC7	; 199
    1122:	fe 4d       	sbci	r31, 0xDE	; 222
	//Update new front
	CQTx_size--;
    1124:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <CQTx_size>
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <CQTx_size>
	CQTx_front = (CQTx_front + 1) % TX_QUEUE_SIZE;
    112e:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <CQTx_front>
    1132:	08 2e       	mov	r0, r24
    1134:	00 0c       	add	r0, r0
    1136:	99 0b       	sbc	r25, r25
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	6a e0       	ldi	r22, 0x0A	; 10
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	0e 94 81 24 	call	0x4902	; 0x4902 <__divmodhi4>
    1142:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <CQTx_front>
	transmit_CAN_((uint16_t)data[0], data[1], data[2], &data[3]);
    1146:	9f 01       	movw	r18, r30
    1148:	2d 5f       	subi	r18, 0xFD	; 253
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	42 81       	ldd	r20, Z+2	; 0x02
    114e:	61 81       	ldd	r22, Z+1	; 0x01
    1150:	80 81       	ld	r24, Z
    1152:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <transmit_CAN_>
    1156:	08 95       	ret

00001158 <filter_pedal_state>:
void send_SD_buffer_overflow(void)
{
	uint8_t message[1];
	transmit_CAN(SD_BUFFER_OVERFLOW, 0, 1, message);
	_delay_ms(10);
}
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	00 d0       	rcall	.+0      	; 0x115e <filter_pedal_state+0x6>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	88 23       	and	r24, r24
    1164:	51 f0       	breq	.+20     	; 0x117a <filter_pedal_state+0x22>
    1166:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <pedal_ack_pending>
    116a:	88 23       	and	r24, r24
    116c:	31 f0       	breq	.+12     	; 0x117a <filter_pedal_state+0x22>
    116e:	60 93 91 25 	sts	0x2591, r22	; 0x802591 <pedal_state_q>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 92 25 	sts	0x2592, r24	; 0x802592 <pedal_upd_pending>
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <filter_pedal_state+0x40>
    117a:	8a ea       	ldi	r24, 0xAA	; 170
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 90 25 	sts	0x2590, r24	; 0x802590 <pedal_ack_pending>
    1186:	9e 01       	movw	r18, r28
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	42 e0       	ldi	r20, 0x02	; 2
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	80 ea       	ldi	r24, 0xA0	; 160
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <update_pedal_state>:
    11a2:	60 91 3f 20 	lds	r22, 0x203F	; 0x80203f <pedal_state>
    11a6:	70 91 40 20 	lds	r23, 0x2040	; 0x802040 <pedal_state+0x1>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	0e 94 ac 08 	call	0x1158	; 0x1158 <filter_pedal_state>
    11b0:	08 95       	ret

000011b2 <update_pedal_level>:
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <update_pedal_level+0x6>
    11b8:	1f 92       	push	r1
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	8b eb       	ldi	r24, 0xBB	; 187
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    11c6:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    11d0:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	9e 01       	movw	r18, r28
    11d8:	2f 5f       	subi	r18, 0xFF	; 255
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	43 e0       	ldi	r20, 0x03	; 3
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	80 ea       	ldi	r24, 0xA0	; 160
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    11e8:	23 96       	adiw	r28, 0x03	; 3
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	08 95       	ret

000011f4 <send_back_safety_error>:
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	1f 92       	push	r1
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	9e 01       	movw	r18, r28
    1202:	2f 5f       	subi	r18, 0xFF	; 255
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	83 ea       	ldi	r24, 0xA3	; 163
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1212:	0f 90       	pop	r0
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <send_pedal_error>:
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	1f 92       	push	r1
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	9e 01       	movw	r18, r28
    1228:	2f 5f       	subi	r18, 0xFF	; 255
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	8c ea       	ldi	r24, 0xAC	; 172
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1238:	0f 90       	pop	r0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <send_key_error>:
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	9e 01       	movw	r18, r28
    124e:	2f 5f       	subi	r18, 0xFF	; 255
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	8c ea       	ldi	r24, 0xAC	; 172
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    125e:	0f 90       	pop	r0
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <send_brake_seat_error>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	1f 92       	push	r1
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	9e 01       	movw	r18, r28
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	8c ea       	ldi	r24, 0xAC	; 172
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <send_CAN_ACK>:
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	1f 92       	push	r1
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	83 ea       	ldi	r24, 0xA3	; 163
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	9e 01       	movw	r18, r28
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	41 e0       	ldi	r20, 0x01	; 1
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	8e ed       	ldi	r24, 0xDE	; 222
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	89 ef       	ldi	r24, 0xF9	; 249
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	80 40       	sbci	r24, 0x00	; 0
    12b6:	90 40       	sbci	r25, 0x00	; 0
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <send_CAN_ACK+0x26>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <send_CAN_ACK+0x30>
    12bc:	00 00       	nop
    12be:	0f 90       	pop	r0
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <send_serial_num>:
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	28 97       	sbiw	r28, 0x08	; 8
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	2f ef       	ldi	r18, 0xFF	; 255
    12da:	81 ee       	ldi	r24, 0xE1	; 225
    12dc:	94 e0       	ldi	r25, 0x04	; 4
    12de:	21 50       	subi	r18, 0x01	; 1
    12e0:	80 40       	sbci	r24, 0x00	; 0
    12e2:	90 40       	sbci	r25, 0x00	; 0
    12e4:	e1 f7       	brne	.-8      	; 0x12de <send_serial_num+0x18>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <send_serial_num+0x22>
    12e8:	00 00       	nop
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	06 e4       	ldi	r16, 0x46	; 70
    12f0:	10 e2       	ldi	r17, 0x20	; 32
    12f2:	f8 01       	movw	r30, r16
    12f4:	80 81       	ld	r24, Z
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	81 81       	ldd	r24, Z+1	; 0x01
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	8c 83       	std	Y+4, r24	; 0x04
    1300:	83 81       	ldd	r24, Z+3	; 0x03
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	8e 83       	std	Y+6, r24	; 0x06
    1308:	85 81       	ldd	r24, Z+5	; 0x05
    130a:	8f 83       	std	Y+7, r24	; 0x07
    130c:	ff ef       	ldi	r31, 0xFF	; 255
    130e:	23 ef       	ldi	r18, 0xF3	; 243
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	f1 50       	subi	r31, 0x01	; 1
    1314:	20 40       	sbci	r18, 0x00	; 0
    1316:	80 40       	sbci	r24, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <send_serial_num+0x4c>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <send_serial_num+0x56>
    131c:	00 00       	nop
    131e:	9e 01       	movw	r18, r28
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	47 e0       	ldi	r20, 0x07	; 7
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	83 e5       	ldi	r24, 0x53	; 83
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	e3 ef       	ldi	r30, 0xF3	; 243
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	91 50       	subi	r25, 0x01	; 1
    1338:	e0 40       	sbci	r30, 0x00	; 0
    133a:	f0 40       	sbci	r31, 0x00	; 0
    133c:	e1 f7       	brne	.-8      	; 0x1336 <send_serial_num+0x70>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <send_serial_num+0x7a>
    1340:	00 00       	nop
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	f8 01       	movw	r30, r16
    1348:	86 81       	ldd	r24, Z+6	; 0x06
    134a:	8a 83       	std	Y+2, r24	; 0x02
    134c:	87 81       	ldd	r24, Z+7	; 0x07
    134e:	8b 83       	std	Y+3, r24	; 0x03
    1350:	80 85       	ldd	r24, Z+8	; 0x08
    1352:	8c 83       	std	Y+4, r24	; 0x04
    1354:	81 85       	ldd	r24, Z+9	; 0x09
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	82 85       	ldd	r24, Z+10	; 0x0a
    135a:	8e 83       	std	Y+6, r24	; 0x06
    135c:	83 85       	ldd	r24, Z+11	; 0x0b
    135e:	8f 83       	std	Y+7, r24	; 0x07
    1360:	ff ef       	ldi	r31, 0xFF	; 255
    1362:	23 ef       	ldi	r18, 0xF3	; 243
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	f1 50       	subi	r31, 0x01	; 1
    1368:	20 40       	sbci	r18, 0x00	; 0
    136a:	80 40       	sbci	r24, 0x00	; 0
    136c:	e1 f7       	brne	.-8      	; 0x1366 <send_serial_num+0xa0>
    136e:	00 c0       	rjmp	.+0      	; 0x1370 <send_serial_num+0xaa>
    1370:	00 00       	nop
    1372:	9e 01       	movw	r18, r28
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	47 e0       	ldi	r20, 0x07	; 7
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	83 e5       	ldi	r24, 0x53	; 83
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	e3 ef       	ldi	r30, 0xF3	; 243
    1388:	f1 e0       	ldi	r31, 0x01	; 1
    138a:	91 50       	subi	r25, 0x01	; 1
    138c:	e0 40       	sbci	r30, 0x00	; 0
    138e:	f0 40       	sbci	r31, 0x00	; 0
    1390:	e1 f7       	brne	.-8      	; 0x138a <send_serial_num+0xc4>
    1392:	00 c0       	rjmp	.+0      	; 0x1394 <send_serial_num+0xce>
    1394:	00 00       	nop
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	f8 01       	movw	r30, r16
    139c:	84 85       	ldd	r24, Z+12	; 0x0c
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	85 85       	ldd	r24, Z+13	; 0x0d
    13a2:	8b 83       	std	Y+3, r24	; 0x03
    13a4:	ff ef       	ldi	r31, 0xFF	; 255
    13a6:	23 ef       	ldi	r18, 0xF3	; 243
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	f1 50       	subi	r31, 0x01	; 1
    13ac:	20 40       	sbci	r18, 0x00	; 0
    13ae:	80 40       	sbci	r24, 0x00	; 0
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <send_serial_num+0xe4>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <send_serial_num+0xee>
    13b4:	00 00       	nop
    13b6:	9e 01       	movw	r18, r28
    13b8:	2f 5f       	subi	r18, 0xFF	; 255
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	43 e0       	ldi	r20, 0x03	; 3
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	83 e5       	ldi	r24, 0x53	; 83
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	e3 ef       	ldi	r30, 0xF3	; 243
    13cc:	f1 e0       	ldi	r31, 0x01	; 1
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	e0 40       	sbci	r30, 0x00	; 0
    13d2:	f0 40       	sbci	r31, 0x00	; 0
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <send_serial_num+0x108>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <send_serial_num+0x112>
    13d8:	00 00       	nop
    13da:	28 96       	adiw	r28, 0x08	; 8
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <send_overcurrent_error>:
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	1f 92       	push	r1
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	87 e0       	ldi	r24, 0x07	; 7
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	9e 01       	movw	r18, r28
    13fa:	2f 5f       	subi	r18, 0xFF	; 255
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	8c ea       	ldi	r24, 0xAC	; 172
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	89 ef       	ldi	r24, 0xF9	; 249
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	21 50       	subi	r18, 0x01	; 1
    1412:	80 40       	sbci	r24, 0x00	; 0
    1414:	90 40       	sbci	r25, 0x00	; 0
    1416:	e1 f7       	brne	.-8      	; 0x1410 <send_overcurrent_error+0x26>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <send_overcurrent_error+0x30>
    141a:	00 00       	nop
    141c:	0f 90       	pop	r0
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <send_reset_CAN>:
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	1f 92       	push	r1
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	9e 01       	movw	r18, r28
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	84 e9       	ldi	r24, 0x94	; 148
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1440:	2f ef       	ldi	r18, 0xFF	; 255
    1442:	89 ef       	ldi	r24, 0xF9	; 249
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	80 40       	sbci	r24, 0x00	; 0
    144a:	90 40       	sbci	r25, 0x00	; 0
    144c:	e1 f7       	brne	.-8      	; 0x1446 <send_reset_CAN+0x22>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <send_reset_CAN+0x2c>
    1450:	00 00       	nop
    1452:	0f 90       	pop	r0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <send_motor_parameter_error>:
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	1f 92       	push	r1
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	88 e0       	ldi	r24, 0x08	; 8
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	9e 01       	movw	r18, r28
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	8c ea       	ldi	r24, 0xAC	; 172
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    147a:	2f ef       	ldi	r18, 0xFF	; 255
    147c:	89 ef       	ldi	r24, 0xF9	; 249
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	80 40       	sbci	r24, 0x00	; 0
    1484:	90 40       	sbci	r25, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <send_motor_parameter_error+0x26>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <send_motor_parameter_error+0x30>
    148a:	00 00       	nop
    148c:	0f 90       	pop	r0
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <processCAN>:
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	64 97       	sbiw	r28, 0x14	; 20
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	83 55       	subi	r24, 0x53	; 83
    14b0:	91 09       	sbc	r25, r1
    14b2:	8c 38       	cpi	r24, 0x8C	; 140
    14b4:	91 05       	cpc	r25, r1
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <processCAN+0x26>
    14b8:	69 c3       	rjmp	.+1746   	; 0x1b8c <processCAN+0x6f8>
    14ba:	db 01       	movw	r26, r22
    14bc:	82 50       	subi	r24, 0x02	; 2
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	fc 01       	movw	r30, r24
    14c2:	0c 94 b7 24 	jmp	0x496e	; 0x496e <__tablejump2__>
    14c6:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <manual_mode>
    14ca:	81 11       	cpse	r24, r1
    14cc:	5f c3       	rjmp	.+1726   	; 0x1b8c <processCAN+0x6f8>
    14ce:	15 96       	adiw	r26, 0x05	; 5
    14d0:	8c 91       	ld	r24, X
    14d2:	15 97       	sbiw	r26, 0x05	; 5
    14d4:	8f 70       	andi	r24, 0x0F	; 15
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	39 f5       	brne	.+78     	; 0x1528 <processCAN+0x94>
    14da:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    14de:	8a 3a       	cpi	r24, 0xAA	; 170
    14e0:	41 f4       	brne	.+16     	; 0x14f2 <processCAN+0x5e>
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <fr_transition>
    14e8:	91 11       	cpse	r25, r1
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <fr_transition>
    14f0:	17 c0       	rjmp	.+46     	; 0x1520 <processCAN+0x8c>
    14f2:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    14f6:	8c 3c       	cpi	r24, 0xCC	; 204
    14f8:	21 f0       	breq	.+8      	; 0x1502 <processCAN+0x6e>
    14fa:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	21 f4       	brne	.+8      	; 0x150a <processCAN+0x76>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    1508:	0b c0       	rjmp	.+22     	; 0x1520 <processCAN+0x8c>
    150a:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    150e:	8b 3b       	cpi	r24, 0xBB	; 187
    1510:	39 f4       	brne	.+14     	; 0x1520 <processCAN+0x8c>
    1512:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1516:	81 fd       	sbrc	r24, 1
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <processCAN+0x8c>
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    1520:	8b eb       	ldi	r24, 0xBB	; 187
    1522:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
    1526:	28 c0       	rjmp	.+80     	; 0x1578 <processCAN+0xe4>
    1528:	81 11       	cpse	r24, r1
    152a:	26 c0       	rjmp	.+76     	; 0x1578 <processCAN+0xe4>
    152c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    1530:	8b 3b       	cpi	r24, 0xBB	; 187
    1532:	41 f4       	brne	.+16     	; 0x1544 <processCAN+0xb0>
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <fr_transition>
    153a:	91 11       	cpse	r25, r1
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <fr_transition>
    1542:	17 c0       	rjmp	.+46     	; 0x1572 <processCAN+0xde>
    1544:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    1548:	8c 3c       	cpi	r24, 0xCC	; 204
    154a:	21 f0       	breq	.+8      	; 0x1554 <processCAN+0xc0>
    154c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	21 f4       	brne	.+8      	; 0x155c <processCAN+0xc8>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <processCAN+0xde>
    155c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    1560:	8a 3a       	cpi	r24, 0xAA	; 170
    1562:	39 f4       	brne	.+14     	; 0x1572 <processCAN+0xde>
    1564:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1568:	81 ff       	sbrs	r24, 1
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <processCAN+0xde>
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    1572:	8a ea       	ldi	r24, 0xAA	; 170
    1574:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
    1578:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	09 f4       	brne	.+2      	; 0x1582 <processCAN+0xee>
    1580:	05 c3       	rjmp	.+1546   	; 0x1b8c <processCAN+0x6f8>
    1582:	16 96       	adiw	r26, 0x06	; 6
    1584:	8c 91       	ld	r24, X
    1586:	8f 70       	andi	r24, 0x0F	; 15
    1588:	09 f0       	breq	.+2      	; 0x158c <processCAN+0xf8>
    158a:	43 c0       	rjmp	.+134    	; 0x1612 <processCAN+0x17e>
    158c:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	09 f0       	breq	.+2      	; 0x1596 <processCAN+0x102>
    1594:	fb c2       	rjmp	.+1526   	; 0x1b8c <processCAN+0x6f8>
    1596:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <speed>
    159a:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    159e:	8a 3a       	cpi	r24, 0xAA	; 170
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <processCAN+0x110>
    15a2:	f4 c2       	rjmp	.+1512   	; 0x1b8c <processCAN+0x6f8>
    15a4:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    15a8:	90 91 2b 09 	lds	r25, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    15ac:	00 91 17 21 	lds	r16, 0x2117	; 0x802117 <minimum_pwm>
    15b0:	10 91 18 21 	lds	r17, 0x2118	; 0x802118 <minimum_pwm+0x1>
    15b4:	80 17       	cp	r24, r16
    15b6:	91 07       	cpc	r25, r17
    15b8:	38 f1       	brcs	.+78     	; 0x1608 <processCAN+0x174>
    15ba:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <slow_level_pwm_ratio>
    15be:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <slow_level_pwm_ratio+0x1>
    15c2:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <slow_level_pwm_ratio+0x2>
    15c6:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <slow_level_pwm_ratio+0x3>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	a9 01       	movw	r20, r18
    15d0:	c7 01       	movw	r24, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <processCAN+0x14a>
    15dc:	d7 c2       	rjmp	.+1454   	; 0x1b8c <processCAN+0x6f8>
    15de:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    15e2:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    15e6:	60 1b       	sub	r22, r16
    15e8:	71 0b       	sbc	r23, r17
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    15f2:	a7 01       	movw	r20, r14
    15f4:	96 01       	movw	r18, r12
    15f6:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    15fa:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    15fe:	60 93 2f 21 	sts	0x212F, r22	; 0x80212f <pedal_level>
    1602:	70 93 30 21 	sts	0x2130, r23	; 0x802130 <pedal_level+0x1>
    1606:	c2 c2       	rjmp	.+1412   	; 0x1b8c <processCAN+0x6f8>
    1608:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    160c:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
    1610:	bd c2       	rjmp	.+1402   	; 0x1b8c <processCAN+0x6f8>
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	09 f0       	breq	.+2      	; 0x1618 <processCAN+0x184>
    1616:	ba c2       	rjmp	.+1396   	; 0x1b8c <processCAN+0x6f8>
    1618:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    161c:	81 11       	cpse	r24, r1
    161e:	b6 c2       	rjmp	.+1388   	; 0x1b8c <processCAN+0x6f8>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <speed>
    1626:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    162a:	8a 3a       	cpi	r24, 0xAA	; 170
    162c:	09 f0       	breq	.+2      	; 0x1630 <processCAN+0x19c>
    162e:	ae c2       	rjmp	.+1372   	; 0x1b8c <processCAN+0x6f8>
    1630:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    1634:	90 91 2b 09 	lds	r25, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    1638:	00 91 17 21 	lds	r16, 0x2117	; 0x802117 <minimum_pwm>
    163c:	10 91 18 21 	lds	r17, 0x2118	; 0x802118 <minimum_pwm+0x1>
    1640:	80 17       	cp	r24, r16
    1642:	91 07       	cpc	r25, r17
    1644:	38 f1       	brcs	.+78     	; 0x1694 <processCAN+0x200>
    1646:	c0 90 1c 20 	lds	r12, 0x201C	; 0x80201c <fast_level_pwm_ratio>
    164a:	d0 90 1d 20 	lds	r13, 0x201D	; 0x80201d <fast_level_pwm_ratio+0x1>
    164e:	e0 90 1e 20 	lds	r14, 0x201E	; 0x80201e <fast_level_pwm_ratio+0x2>
    1652:	f0 90 1f 20 	lds	r15, 0x201F	; 0x80201f <fast_level_pwm_ratio+0x3>
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	a9 01       	movw	r20, r18
    165c:	c7 01       	movw	r24, r14
    165e:	b6 01       	movw	r22, r12
    1660:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__gesf2>
    1664:	18 16       	cp	r1, r24
    1666:	0c f0       	brlt	.+2      	; 0x166a <processCAN+0x1d6>
    1668:	91 c2       	rjmp	.+1314   	; 0x1b8c <processCAN+0x6f8>
    166a:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    166e:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    1672:	60 1b       	sub	r22, r16
    1674:	71 0b       	sbc	r23, r17
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    167e:	a7 01       	movw	r20, r14
    1680:	96 01       	movw	r18, r12
    1682:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1686:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    168a:	60 93 2f 21 	sts	0x212F, r22	; 0x80212f <pedal_level>
    168e:	70 93 30 21 	sts	0x2130, r23	; 0x802130 <pedal_level+0x1>
    1692:	7c c2       	rjmp	.+1272   	; 0x1b8c <processCAN+0x6f8>
    1694:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    1698:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
    169c:	77 c2       	rjmp	.+1262   	; 0x1b8c <processCAN+0x6f8>
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
    16a4:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    16a8:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
    16ac:	8c 91       	ld	r24, X
    16ae:	88 23       	and	r24, r24
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <processCAN+0x222>
    16b2:	8d 3d       	cpi	r24, 0xDD	; 221
    16b4:	39 f5       	brne	.+78     	; 0x1704 <processCAN+0x270>
    16b6:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <pot_low_deadband>
    16ba:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <pot_low_deadband+0x1>
    16be:	99 83       	std	Y+1, r25	; 0x01
    16c0:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <pot_low_deadband>
    16c4:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <pot_low_deadband+0x1>
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    16ce:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
    16d2:	9b 83       	std	Y+3, r25	; 0x03
    16d4:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    16d8:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
    16dc:	8c 83       	std	Y+4, r24	; 0x04
    16de:	9e 01       	movw	r18, r28
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	44 e0       	ldi	r20, 0x04	; 4
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	84 ea       	ldi	r24, 0xA4	; 164
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    16f0:	ff ef       	ldi	r31, 0xFF	; 255
    16f2:	29 ef       	ldi	r18, 0xF9	; 249
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	f1 50       	subi	r31, 0x01	; 1
    16f8:	20 40       	sbci	r18, 0x00	; 0
    16fa:	80 40       	sbci	r24, 0x00	; 0
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <processCAN+0x262>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <processCAN+0x26c>
    1700:	00 00       	nop
    1702:	44 c2       	rjmp	.+1160   	; 0x1b8c <processCAN+0x6f8>
    1704:	8a 3a       	cpi	r24, 0xAA	; 170
    1706:	09 f0       	breq	.+2      	; 0x170a <processCAN+0x276>
    1708:	71 c0       	rjmp	.+226    	; 0x17ec <processCAN+0x358>
    170a:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    170e:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    1712:	89 2b       	or	r24, r25
    1714:	d1 f3       	breq	.-12     	; 0x170a <processCAN+0x276>
    1716:	8a e0       	ldi	r24, 0x0A	; 10
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	e0 e0       	ldi	r30, 0x00	; 0
    1720:	f2 e0       	ldi	r31, 0x02	; 2
    1722:	62 e1       	ldi	r22, 0x12	; 18
    1724:	72 e0       	ldi	r23, 0x02	; 2
    1726:	40 81       	ld	r20, Z
    1728:	48 60       	ori	r20, 0x08	; 8
    172a:	40 83       	st	Z, r20
    172c:	40 81       	ld	r20, Z
    172e:	43 fd       	sbrc	r20, 3
    1730:	fd cf       	rjmp	.-6      	; 0x172c <processCAN+0x298>
    1732:	af e3       	ldi	r26, 0x3F	; 63
    1734:	bf e1       	ldi	r27, 0x1F	; 31
    1736:	11 97       	sbiw	r26, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <processCAN+0x2a2>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <processCAN+0x2a8>
    173c:	00 00       	nop
    173e:	db 01       	movw	r26, r22
    1740:	4d 91       	ld	r20, X+
    1742:	5c 91       	ld	r21, X
    1744:	24 0f       	add	r18, r20
    1746:	35 1f       	adc	r19, r21
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	69 f7       	brne	.-38     	; 0x1726 <processCAN+0x292>
    174c:	ad ec       	ldi	r26, 0xCD	; 205
    174e:	bc ec       	ldi	r27, 0xCC	; 204
    1750:	0e 94 bd 24 	call	0x497a	; 0x497a <__umulhisi3>
    1754:	96 95       	lsr	r25
    1756:	87 95       	ror	r24
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	96 95       	lsr	r25
    175e:	87 95       	ror	r24
    1760:	8f 3b       	cpi	r24, 0xBF	; 191
    1762:	91 05       	cpc	r25, r1
    1764:	30 f1       	brcs	.+76     	; 0x17b2 <processCAN+0x31e>
    1766:	bc 01       	movw	r22, r24
    1768:	6e 5b       	subi	r22, 0xBE	; 190
    176a:	71 09       	sbc	r23, r1
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	55 e4       	ldi	r21, 0x45	; 69
    177c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e2       	ldi	r19, 0x20	; 32
    1784:	44 e7       	ldi	r20, 0x74	; 116
    1786:	55 e4       	ldi	r21, 0x45	; 69
    1788:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    178c:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    17a4:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    17a8:	60 93 6a 20 	sts	0x206A, r22	; 0x80206a <temp1>
    17ac:	70 93 6b 20 	sts	0x206B, r23	; 0x80206b <temp1+0x1>
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <processCAN+0x326>
    17b2:	10 92 6a 20 	sts	0x206A, r1	; 0x80206a <temp1>
    17b6:	10 92 6b 20 	sts	0x206B, r1	; 0x80206b <temp1+0x1>
    17ba:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <temp1>
    17be:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <temp1+0x1>
    17c2:	99 83       	std	Y+1, r25	; 0x01
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	9e 01       	movw	r18, r28
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	42 e0       	ldi	r20, 0x02	; 2
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	84 ea       	ldi	r24, 0xA4	; 164
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    17d8:	bf ef       	ldi	r27, 0xFF	; 255
    17da:	e9 ef       	ldi	r30, 0xF9	; 249
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	b1 50       	subi	r27, 0x01	; 1
    17e0:	e0 40       	sbci	r30, 0x00	; 0
    17e2:	f0 40       	sbci	r31, 0x00	; 0
    17e4:	e1 f7       	brne	.-8      	; 0x17de <processCAN+0x34a>
    17e6:	00 c0       	rjmp	.+0      	; 0x17e8 <processCAN+0x354>
    17e8:	00 00       	nop
    17ea:	d0 c1       	rjmp	.+928    	; 0x1b8c <processCAN+0x6f8>
    17ec:	8b 3b       	cpi	r24, 0xBB	; 187
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <processCAN+0x35e>
    17f0:	6b c0       	rjmp	.+214    	; 0x18c8 <processCAN+0x434>
    17f2:	8a e0       	ldi	r24, 0x0A	; 10
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	e0 e0       	ldi	r30, 0x00	; 0
    17fc:	f2 e0       	ldi	r31, 0x02	; 2
    17fe:	62 e1       	ldi	r22, 0x12	; 18
    1800:	72 e0       	ldi	r23, 0x02	; 2
    1802:	40 81       	ld	r20, Z
    1804:	48 60       	ori	r20, 0x08	; 8
    1806:	40 83       	st	Z, r20
    1808:	40 81       	ld	r20, Z
    180a:	43 fd       	sbrc	r20, 3
    180c:	fd cf       	rjmp	.-6      	; 0x1808 <processCAN+0x374>
    180e:	af e3       	ldi	r26, 0x3F	; 63
    1810:	bf e1       	ldi	r27, 0x1F	; 31
    1812:	11 97       	sbiw	r26, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <processCAN+0x37e>
    1816:	00 c0       	rjmp	.+0      	; 0x1818 <processCAN+0x384>
    1818:	00 00       	nop
    181a:	db 01       	movw	r26, r22
    181c:	4d 91       	ld	r20, X+
    181e:	5c 91       	ld	r21, X
    1820:	24 0f       	add	r18, r20
    1822:	35 1f       	adc	r19, r21
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	69 f7       	brne	.-38     	; 0x1802 <processCAN+0x36e>
    1828:	ad ec       	ldi	r26, 0xCD	; 205
    182a:	bc ec       	ldi	r27, 0xCC	; 204
    182c:	0e 94 bd 24 	call	0x497a	; 0x497a <__umulhisi3>
    1830:	96 95       	lsr	r25
    1832:	87 95       	ror	r24
    1834:	96 95       	lsr	r25
    1836:	87 95       	ror	r24
    1838:	96 95       	lsr	r25
    183a:	87 95       	ror	r24
    183c:	8f 3b       	cpi	r24, 0xBF	; 191
    183e:	91 05       	cpc	r25, r1
    1840:	30 f1       	brcs	.+76     	; 0x188e <processCAN+0x3fa>
    1842:	bc 01       	movw	r22, r24
    1844:	6e 5b       	subi	r22, 0xBE	; 190
    1846:	71 09       	sbc	r23, r1
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	55 e4       	ldi	r21, 0x45	; 69
    1858:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e2       	ldi	r19, 0x20	; 32
    1860:	44 e7       	ldi	r20, 0x74	; 116
    1862:	55 e4       	ldi	r21, 0x45	; 69
    1864:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1868:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1880:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1884:	60 93 2c 20 	sts	0x202C, r22	; 0x80202c <temp2>
    1888:	70 93 2d 20 	sts	0x202D, r23	; 0x80202d <temp2+0x1>
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <processCAN+0x402>
    188e:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <temp2>
    1892:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <temp2+0x1>
    1896:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <temp2>
    189a:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <temp2+0x1>
    189e:	99 83       	std	Y+1, r25	; 0x01
    18a0:	8a 83       	std	Y+2, r24	; 0x02
    18a2:	9e 01       	movw	r18, r28
    18a4:	2f 5f       	subi	r18, 0xFF	; 255
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	42 e0       	ldi	r20, 0x02	; 2
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	84 ea       	ldi	r24, 0xA4	; 164
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    18b4:	bf ef       	ldi	r27, 0xFF	; 255
    18b6:	e9 ef       	ldi	r30, 0xF9	; 249
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	b1 50       	subi	r27, 0x01	; 1
    18bc:	e0 40       	sbci	r30, 0x00	; 0
    18be:	f0 40       	sbci	r31, 0x00	; 0
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <processCAN+0x426>
    18c2:	00 c0       	rjmp	.+0      	; 0x18c4 <processCAN+0x430>
    18c4:	00 00       	nop
    18c6:	62 c1       	rjmp	.+708    	; 0x1b8c <processCAN+0x6f8>
    18c8:	8c 3c       	cpi	r24, 0xCC	; 204
    18ca:	09 f0       	breq	.+2      	; 0x18ce <processCAN+0x43a>
    18cc:	5f c1       	rjmp	.+702    	; 0x1b8c <processCAN+0x6f8>
    18ce:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <temp1>
    18d2:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <temp1+0x1>
    18d6:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <pot_low_deadband>
    18da:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <pot_low_deadband+0x1>
    18de:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <temp2>
    18e2:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <temp2+0x1>
    18e6:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <pot_high_deadband>
    18ea:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <pot_high_deadband+0x1>
    18ee:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <update_motor_settings>
    18f2:	4c c1       	rjmp	.+664    	; 0x1b8c <processCAN+0x6f8>
    18f4:	4a e0       	ldi	r20, 0x0A	; 10
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	e0 e0       	ldi	r30, 0x00	; 0
    18fe:	f2 e0       	ldi	r31, 0x02	; 2
    1900:	a2 e1       	ldi	r26, 0x12	; 18
    1902:	b2 e0       	ldi	r27, 0x02	; 2
    1904:	80 81       	ld	r24, Z
    1906:	88 60       	ori	r24, 0x08	; 8
    1908:	80 83       	st	Z, r24
    190a:	80 81       	ld	r24, Z
    190c:	83 fd       	sbrc	r24, 3
    190e:	fd cf       	rjmp	.-6      	; 0x190a <processCAN+0x476>
    1910:	8f e3       	ldi	r24, 0x3F	; 63
    1912:	9f e1       	ldi	r25, 0x1F	; 31
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <processCAN+0x480>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <processCAN+0x486>
    191a:	00 00       	nop
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	11 97       	sbiw	r26, 0x01	; 1
    1922:	28 0f       	add	r18, r24
    1924:	39 1f       	adc	r19, r25
    1926:	41 50       	subi	r20, 0x01	; 1
    1928:	51 09       	sbc	r21, r1
    192a:	61 f7       	brne	.-40     	; 0x1904 <processCAN+0x470>
    192c:	ad ec       	ldi	r26, 0xCD	; 205
    192e:	bc ec       	ldi	r27, 0xCC	; 204
    1930:	0e 94 bd 24 	call	0x497a	; 0x497a <__umulhisi3>
    1934:	96 95       	lsr	r25
    1936:	87 95       	ror	r24
    1938:	96 95       	lsr	r25
    193a:	87 95       	ror	r24
    193c:	96 95       	lsr	r25
    193e:	87 95       	ror	r24
    1940:	8f 3b       	cpi	r24, 0xBF	; 191
    1942:	91 05       	cpc	r25, r1
    1944:	30 f1       	brcs	.+76     	; 0x1992 <processCAN+0x4fe>
    1946:	bc 01       	movw	r22, r24
    1948:	6e 5b       	subi	r22, 0xBE	; 190
    194a:	71 09       	sbc	r23, r1
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	55 e4       	ldi	r21, 0x45	; 69
    195c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e2       	ldi	r19, 0x20	; 32
    1964:	44 e7       	ldi	r20, 0x74	; 116
    1966:	55 e4       	ldi	r21, 0x45	; 69
    1968:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    196c:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1984:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1988:	60 93 2c 20 	sts	0x202C, r22	; 0x80202c <temp2>
    198c:	70 93 2d 20 	sts	0x202D, r23	; 0x80202d <temp2+0x1>
    1990:	04 c0       	rjmp	.+8      	; 0x199a <processCAN+0x506>
    1992:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <temp2>
    1996:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <temp2+0x1>
    199a:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <temp2>
    199e:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <temp2+0x1>
    19a2:	99 83       	std	Y+1, r25	; 0x01
    19a4:	8a 83       	std	Y+2, r24	; 0x02
    19a6:	9f ef       	ldi	r25, 0xFF	; 255
    19a8:	a9 ef       	ldi	r26, 0xF9	; 249
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	a0 40       	sbci	r26, 0x00	; 0
    19b0:	b0 40       	sbci	r27, 0x00	; 0
    19b2:	e1 f7       	brne	.-8      	; 0x19ac <processCAN+0x518>
    19b4:	00 c0       	rjmp	.+0      	; 0x19b6 <processCAN+0x522>
    19b6:	00 00       	nop
    19b8:	9e 01       	movw	r18, r28
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	42 e0       	ldi	r20, 0x02	; 2
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	87 e9       	ldi	r24, 0x97	; 151
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    19ca:	ef ef       	ldi	r30, 0xFF	; 255
    19cc:	f9 ef       	ldi	r31, 0xF9	; 249
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	e1 50       	subi	r30, 0x01	; 1
    19d2:	f0 40       	sbci	r31, 0x00	; 0
    19d4:	20 40       	sbci	r18, 0x00	; 0
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <processCAN+0x53c>
    19d8:	00 c0       	rjmp	.+0      	; 0x19da <processCAN+0x546>
    19da:	00 00       	nop
    19dc:	d7 c0       	rjmp	.+430    	; 0x1b8c <processCAN+0x6f8>
    19de:	0e 94 99 13 	call	0x2732	; 0x2732 <set_to_default>
    19e2:	d4 c0       	rjmp	.+424    	; 0x1b8c <processCAN+0x6f8>
    19e4:	8c 91       	ld	r24, X
    19e6:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <acceleration>
    19ea:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <update_accel_settings>
    19ee:	ce c0       	rjmp	.+412    	; 0x1b8c <processCAN+0x6f8>
    19f0:	8c 91       	ld	r24, X
    19f2:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <deceleration>
    19f6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <update_decel_settings>
    19fa:	c8 c0       	rjmp	.+400    	; 0x1b8c <processCAN+0x6f8>
    19fc:	8c 91       	ld	r24, X
    19fe:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <brake_delay>
    1a02:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <update_break_delay_settings>
    1a06:	c2 c0       	rjmp	.+388    	; 0x1b8c <processCAN+0x6f8>
    1a08:	8c 91       	ld	r24, X
    1a0a:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <reverse_speed>
    1a0e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <update_reverse_speed>
    1a12:	bc c0       	rjmp	.+376    	; 0x1b8c <processCAN+0x6f8>
    1a14:	8c 91       	ld	r24, X
    1a16:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <fast_speed>
    1a1a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <update_fast_speed>
    1a1e:	b6 c0       	rjmp	.+364    	; 0x1b8c <processCAN+0x6f8>
    1a20:	8c 91       	ld	r24, X
    1a22:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <slow_speed>
    1a26:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <update_slow_speed>
    1a2a:	b0 c0       	rjmp	.+352    	; 0x1b8c <processCAN+0x6f8>
    1a2c:	8c 91       	ld	r24, X
    1a2e:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <rated_current>
    1a32:	0e 94 01 18 	call	0x3002	; 0x3002 <update_current_rating>
    1a36:	aa c0       	rjmp	.+340    	; 0x1b8c <processCAN+0x6f8>
    1a38:	8c 91       	ld	r24, X
    1a3a:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <max_current>
    1a3e:	0e 94 4b 18 	call	0x3096	; 0x3096 <update_max_current>
    1a42:	a4 c0       	rjmp	.+328    	; 0x1b8c <processCAN+0x6f8>
    1a44:	8c 91       	ld	r24, X
    1a46:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <full_overload_time>
    1a4a:	0e 94 95 18 	call	0x312a	; 0x312a <update_over_current_time>
    1a4e:	9e c0       	rjmp	.+316    	; 0x1b8c <processCAN+0x6f8>
    1a50:	8c 91       	ld	r24, X
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <processCAN+0x5c4>
    1a56:	9a c0       	rjmp	.+308    	; 0x1b8c <processCAN+0x6f8>
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    1a64:	93 c0       	rjmp	.+294    	; 0x1b8c <processCAN+0x6f8>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <can_functioning>
    1a6c:	8c 91       	ld	r24, X
    1a6e:	81 3a       	cpi	r24, 0xA1	; 161
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <processCAN+0x5e0>
    1a72:	8c c0       	rjmp	.+280    	; 0x1b8c <processCAN+0x6f8>
    1a74:	0e 94 46 09 	call	0x128c	; 0x128c <send_CAN_ACK>
    1a78:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <motor_parameter_error>
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <processCAN+0x5ee>
    1a80:	85 c0       	rjmp	.+266    	; 0x1b8c <processCAN+0x6f8>
    1a82:	0e 94 2d 0a 	call	0x145a	; 0x145a <send_motor_parameter_error>
    1a86:	82 c0       	rjmp	.+260    	; 0x1b8c <processCAN+0x6f8>
    1a88:	8c 91       	ld	r24, X
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	d1 f4       	brne	.+52     	; 0x1ac2 <processCAN+0x62e>
    1a8e:	e6 e4       	ldi	r30, 0x46	; 70
    1a90:	f0 e2       	ldi	r31, 0x20	; 32
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	8c 91       	ld	r24, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	80 83       	st	Z, r24
    1a9a:	12 96       	adiw	r26, 0x02	; 2
    1a9c:	8c 91       	ld	r24, X
    1a9e:	12 97       	sbiw	r26, 0x02	; 2
    1aa0:	81 83       	std	Z+1, r24	; 0x01
    1aa2:	13 96       	adiw	r26, 0x03	; 3
    1aa4:	8c 91       	ld	r24, X
    1aa6:	13 97       	sbiw	r26, 0x03	; 3
    1aa8:	82 83       	std	Z+2, r24	; 0x02
    1aaa:	14 96       	adiw	r26, 0x04	; 4
    1aac:	8c 91       	ld	r24, X
    1aae:	14 97       	sbiw	r26, 0x04	; 4
    1ab0:	83 83       	std	Z+3, r24	; 0x03
    1ab2:	15 96       	adiw	r26, 0x05	; 5
    1ab4:	8c 91       	ld	r24, X
    1ab6:	15 97       	sbiw	r26, 0x05	; 5
    1ab8:	84 83       	std	Z+4, r24	; 0x04
    1aba:	16 96       	adiw	r26, 0x06	; 6
    1abc:	8c 91       	ld	r24, X
    1abe:	85 83       	std	Z+5, r24	; 0x05
    1ac0:	65 c0       	rjmp	.+202    	; 0x1b8c <processCAN+0x6f8>
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	d1 f4       	brne	.+52     	; 0x1afa <processCAN+0x666>
    1ac6:	11 96       	adiw	r26, 0x01	; 1
    1ac8:	8c 91       	ld	r24, X
    1aca:	11 97       	sbiw	r26, 0x01	; 1
    1acc:	e6 e4       	ldi	r30, 0x46	; 70
    1ace:	f0 e2       	ldi	r31, 0x20	; 32
    1ad0:	86 83       	std	Z+6, r24	; 0x06
    1ad2:	12 96       	adiw	r26, 0x02	; 2
    1ad4:	8c 91       	ld	r24, X
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
    1ad8:	87 83       	std	Z+7, r24	; 0x07
    1ada:	13 96       	adiw	r26, 0x03	; 3
    1adc:	8c 91       	ld	r24, X
    1ade:	13 97       	sbiw	r26, 0x03	; 3
    1ae0:	80 87       	std	Z+8, r24	; 0x08
    1ae2:	14 96       	adiw	r26, 0x04	; 4
    1ae4:	8c 91       	ld	r24, X
    1ae6:	14 97       	sbiw	r26, 0x04	; 4
    1ae8:	81 87       	std	Z+9, r24	; 0x09
    1aea:	15 96       	adiw	r26, 0x05	; 5
    1aec:	8c 91       	ld	r24, X
    1aee:	15 97       	sbiw	r26, 0x05	; 5
    1af0:	82 87       	std	Z+10, r24	; 0x0a
    1af2:	16 96       	adiw	r26, 0x06	; 6
    1af4:	8c 91       	ld	r24, X
    1af6:	83 87       	std	Z+11, r24	; 0x0b
    1af8:	49 c0       	rjmp	.+146    	; 0x1b8c <processCAN+0x6f8>
    1afa:	83 30       	cpi	r24, 0x03	; 3
    1afc:	89 f4       	brne	.+34     	; 0x1b20 <processCAN+0x68c>
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	8c 91       	ld	r24, X
    1b02:	11 97       	sbiw	r26, 0x01	; 1
    1b04:	e6 e4       	ldi	r30, 0x46	; 70
    1b06:	f0 e2       	ldi	r31, 0x20	; 32
    1b08:	84 87       	std	Z+12, r24	; 0x0c
    1b0a:	12 96       	adiw	r26, 0x02	; 2
    1b0c:	8c 91       	ld	r24, X
    1b0e:	85 87       	std	Z+13, r24	; 0x0d
    1b10:	4e e0       	ldi	r20, 0x0E	; 14
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	60 e4       	ldi	r22, 0x40	; 64
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	cf 01       	movw	r24, r30
    1b1a:	0e 94 ed 24 	call	0x49da	; 0x49da <eeprom_update_block>
    1b1e:	36 c0       	rjmp	.+108    	; 0x1b8c <processCAN+0x6f8>
    1b20:	0e 94 63 09 	call	0x12c6	; 0x12c6 <send_serial_num>
    1b24:	33 c0       	rjmp	.+102    	; 0x1b8c <processCAN+0x6f8>
    1b26:	80 91 31 20 	lds	r24, 0x2031	; 0x802031 <reset_timer>
    1b2a:	8a 30       	cpi	r24, 0x0A	; 10
    1b2c:	68 f0       	brcs	.+26     	; 0x1b48 <processCAN+0x6b4>
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	88 ed       	ldi	r24, 0xD8	; 216
    1b32:	08 b6       	in	r0, 0x38	; 56
    1b34:	18 be       	out	0x38, r1	; 56
    1b36:	84 bf       	out	0x34, r24	; 52
    1b38:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b3c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1b40:	81 fd       	sbrc	r24, 1
    1b42:	fc cf       	rjmp	.-8      	; 0x1b3c <processCAN+0x6a8>
    1b44:	08 be       	out	0x38, r0	; 56
    1b46:	ff cf       	rjmp	.-2      	; 0x1b46 <processCAN+0x6b2>
    1b48:	80 91 31 20 	lds	r24, 0x2031	; 0x802031 <reset_timer>
    1b4c:	8a 30       	cpi	r24, 0x0A	; 10
    1b4e:	68 f0       	brcs	.+26     	; 0x1b6a <processCAN+0x6d6>
    1b50:	93 e0       	ldi	r25, 0x03	; 3
    1b52:	88 ed       	ldi	r24, 0xD8	; 216
    1b54:	08 b6       	in	r0, 0x38	; 56
    1b56:	18 be       	out	0x38, r1	; 56
    1b58:	84 bf       	out	0x34, r24	; 52
    1b5a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b5e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1b62:	81 fd       	sbrc	r24, 1
    1b64:	fc cf       	rjmp	.-8      	; 0x1b5e <processCAN+0x6ca>
    1b66:	08 be       	out	0x38, r0	; 56
    1b68:	ff cf       	rjmp	.-2      	; 0x1b68 <processCAN+0x6d4>
    1b6a:	8c 91       	ld	r24, X
    1b6c:	8c 3a       	cpi	r24, 0xAC	; 172
    1b6e:	71 f4       	brne	.+28     	; 0x1b8c <processCAN+0x6f8>
    1b70:	80 91 92 25 	lds	r24, 0x2592	; 0x802592 <pedal_upd_pending>
    1b74:	88 23       	and	r24, r24
    1b76:	41 f0       	breq	.+16     	; 0x1b88 <processCAN+0x6f4>
    1b78:	10 92 92 25 	sts	0x2592, r1	; 0x802592 <pedal_upd_pending>
    1b7c:	60 91 91 25 	lds	r22, 0x2591	; 0x802591 <pedal_state_q>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 ac 08 	call	0x1158	; 0x1158 <filter_pedal_state>
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <processCAN+0x6f8>
    1b88:	10 92 90 25 	sts	0x2590, r1	; 0x802590 <pedal_ack_pending>
    1b8c:	64 96       	adiw	r28, 0x14	; 20
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	df 90       	pop	r13
    1ba0:	cf 90       	pop	r12
    1ba2:	08 95       	ret

00001ba4 <send_CAN_buffer_overflow>:
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	1f 92       	push	r1
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9e 01       	movw	r18, r28
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	89 e0       	ldi	r24, 0x09	; 9
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	89 ef       	ldi	r24, 0xF9	; 249
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	21 50       	subi	r18, 0x01	; 1
    1bc8:	80 40       	sbci	r24, 0x00	; 0
    1bca:	90 40       	sbci	r25, 0x00	; 0
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <send_CAN_buffer_overflow+0x22>
    1bce:	00 c0       	rjmp	.+0      	; 0x1bd0 <send_CAN_buffer_overflow+0x2c>
    1bd0:	00 00       	nop
    1bd2:	0f 90       	pop	r0
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <send_drive_motor_current>:

void send_drive_motor_current(void)
{
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	1f 92       	push	r1
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = (uint8_t)moving_average_current;
    1be4:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <moving_average_current>
    1be8:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <moving_average_current+0x1>
    1bec:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <moving_average_current+0x2>
    1bf0:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <moving_average_current+0x3>
    1bf4:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1bf8:	69 83       	std	Y+1, r22	; 0x01
	transmit_CAN(DRIVE_CURRENT_CAN, 0, 1, message);
    1bfa:	9e 01       	movw	r18, r28
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	86 ea       	ldi	r24, 0xA6	; 166
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1c0c:	2f ef       	ldi	r18, 0xFF	; 255
    1c0e:	89 ef       	ldi	r24, 0xF9	; 249
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	21 50       	subi	r18, 0x01	; 1
    1c14:	80 40       	sbci	r24, 0x00	; 0
    1c16:	90 40       	sbci	r25, 0x00	; 0
    1c18:	e1 f7       	brne	.-8      	; 0x1c12 <send_drive_motor_current+0x38>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <send_drive_motor_current+0x42>
    1c1c:	00 00       	nop
	_delay_ms(10);
}
    1c1e:	0f 90       	pop	r0
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <send_max_drive_motor_current>:

void send_max_drive_motor_current(void)
{
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	1f 92       	push	r1
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[1];
	message[0] = (uint8_t)max_moving_average_current;
    1c30:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <max_moving_average_current>
    1c34:	89 83       	std	Y+1, r24	; 0x01
	transmit_CAN(MAX_DRIVE_CURRENT_CAN, 0, 1, message);
    1c36:	9e 01       	movw	r18, r28
    1c38:	2f 5f       	subi	r18, 0xFF	; 255
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	87 ea       	ldi	r24, 0xA7	; 167
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 46 06 	call	0xc8c	; 0xc8c <transmit_CAN>
    1c48:	2f ef       	ldi	r18, 0xFF	; 255
    1c4a:	89 ef       	ldi	r24, 0xF9	; 249
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	80 40       	sbci	r24, 0x00	; 0
    1c52:	90 40       	sbci	r25, 0x00	; 0
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <send_max_drive_motor_current+0x28>
    1c56:	00 c0       	rjmp	.+0      	; 0x1c58 <send_max_drive_motor_current+0x32>
    1c58:	00 00       	nop
	_delay_ms(10);
}
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <initialize_Screen>:

#include "lcd_screen.h"

 //Initialize the LCD screen using the example setup in the LCD data sheet
void initialize_Screen(void)
{
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	2a 97       	sbiw	r28, 0x0a	; 10
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	de bf       	out	0x3e, r29	; 62
	char message[10];

	message[0] = (0x00);													//Control bit with continuous data stream
    1c70:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);													//Function Set (8-bit data, 2 Line 5x8 character mode, Normal Instruction Table Chosen)
    1c72:	88 e3       	ldi	r24, 0x38	; 56
    1c74:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 2);
    1c76:	22 e0       	ldi	r18, 0x02	; 2
    1c78:	ae 01       	movw	r20, r28
    1c7a:	4f 5f       	subi	r20, 0xFF	; 255
    1c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7e:	6c e3       	ldi	r22, 0x3C	; 60
    1c80:	84 e7       	ldi	r24, 0x74	; 116
    1c82:	90 e2       	ldi	r25, 0x20	; 32
    1c84:	0e 94 74 21 	call	0x42e8	; 0x42e8 <TWI_MasterWrite>

	message[0] = (0x00);
    1c88:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);													//Function Set (8-bit data, 2 Line 5x8 character mode, Extension Instruction Table Chosen)
    1c8a:	89 e3       	ldi	r24, 0x39	; 57
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 2);
    1c8e:	22 e0       	ldi	r18, 0x02	; 2
    1c90:	ae 01       	movw	r20, r28
    1c92:	4f 5f       	subi	r20, 0xFF	; 255
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	6c e3       	ldi	r22, 0x3C	; 60
    1c98:	84 e7       	ldi	r24, 0x74	; 116
    1c9a:	90 e2       	ldi	r25, 0x20	; 32
    1c9c:	0e 94 74 21 	call	0x42e8	; 0x42e8 <TWI_MasterWrite>

	message[0] = (0x00);
    1ca0:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);													//Set frame frequency to 192 Hz and Voltage Bias to 1/5
    1ca2:	84 e1       	ldi	r24, 0x14	; 20
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x70);													//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
    1ca6:	80 e7       	ldi	r24, 0x70	; 112
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);													//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
    1caa:	8e e5       	ldi	r24, 0x5E	; 94
    1cac:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);													//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
    1cae:	8d e6       	ldi	r24, 0x6D	; 109
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 5);
    1cb2:	25 e0       	ldi	r18, 0x05	; 5
    1cb4:	ae 01       	movw	r20, r28
    1cb6:	4f 5f       	subi	r20, 0xFF	; 255
    1cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cba:	6c e3       	ldi	r22, 0x3C	; 60
    1cbc:	84 e7       	ldi	r24, 0x74	; 116
    1cbe:	90 e2       	ldi	r25, 0x20	; 32
    1cc0:	0e 94 74 21 	call	0x42e8	; 0x42e8 <TWI_MasterWrite>

	message[0] = (0x00);
    1cc4:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x0C);													//Turn on display and turn on cursor and cursor blink
    1cc6:	8c e0       	ldi	r24, 0x0C	; 12
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x01);													//Clear the display	- Entry Mode Set is required afterwards
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x06);													//Entry Mode Set - Increment DDRAM Address (cursor) and do not shift display												
    1cce:	86 e0       	ldi	r24, 0x06	; 6
    1cd0:	8c 83       	std	Y+4, r24	; 0x04
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, (uint8_t *)message, 4);
    1cd2:	24 e0       	ldi	r18, 0x04	; 4
    1cd4:	ae 01       	movw	r20, r28
    1cd6:	4f 5f       	subi	r20, 0xFF	; 255
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	6c e3       	ldi	r22, 0x3C	; 60
    1cdc:	84 e7       	ldi	r24, 0x74	; 116
    1cde:	90 e2       	ldi	r25, 0x20	; 32
    1ce0:	0e 94 74 21 	call	0x42e8	; 0x42e8 <TWI_MasterWrite>
}
    1ce4:	2a 96       	adiw	r28, 0x0a	; 10
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	08 95       	ret

00001cf0 <initialize_motor>:

#include "motor.h"


void initialize_motor(void)
{
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
	//Motor input setup
	PORTD_DIRSET = (1 << FR_DIR) | (1 << PWM);
    1d06:	83 e0       	ldi	r24, 0x03	; 3
    1d08:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>

	//Reverse buzzer setup
	PORTB_DIRSET = (1 << REV_BUZZ) | (1 << E_BRK);
    1d0c:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>

	E_BRAKE_ON;
    1d10:	e6 e2       	ldi	r30, 0x26	; 38
    1d12:	f6 e0       	ldi	r31, 0x06	; 6
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 83       	st	Z, r24
	REVERSE_BUZZER_OFF;
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	90 83       	st	Z, r25

	//Motor Controller
	//Prescalar /8
	TCD0.CTRLA = 0x01;  //0x04
    1d1c:	e0 e0       	ldi	r30, 0x00	; 0
    1d1e:	f9 e0       	ldi	r31, 0x09	; 9
    1d20:	80 83       	st	Z, r24

	//Enable pin A & B with single slope PWM
	TCD0.CTRLB = 0x23;
    1d22:	83 e2       	ldi	r24, 0x23	; 35
    1d24:	81 83       	std	Z+1, r24	; 0x01
	//Set period to 1000 counts ~500Hz
	TCD0.PER = 4090;//4090;    
    1d26:	8a ef       	ldi	r24, 0xFA	; 250
    1d28:	9f e0       	ldi	r25, 0x0F	; 15
    1d2a:	86 a3       	std	Z+38, r24	; 0x26
    1d2c:	97 a3       	std	Z+39, r25	; 0x27
	SET_MOTOR_SPEED(0);
    1d2e:	12 a6       	std	Z+42, r1	; 0x2a
    1d30:	13 a6       	std	Z+43, r1	; 0x2b

	//Accelerator switch and Brake/Seat switch setup
	PORTE.PIN0CTRL |= PORT_OPC_PULLUP_gc;
    1d32:	e0 e8       	ldi	r30, 0x80	; 128
    1d34:	f6 e0       	ldi	r31, 0x06	; 6
    1d36:	80 89       	ldd	r24, Z+16	; 0x10
    1d38:	88 61       	ori	r24, 0x18	; 24
    1d3a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN3CTRL |= PORT_OPC_PULLUP_gc;
    1d3c:	83 89       	ldd	r24, Z+19	; 0x13
    1d3e:	88 61       	ori	r24, 0x18	; 24
    1d40:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.INT0MASK |= (1 << PDL_SW) | (1 << BRK_SEAT_SW);
    1d42:	82 85       	ldd	r24, Z+10	; 0x0a
    1d44:	89 60       	ori	r24, 0x09	; 9
    1d46:	82 87       	std	Z+10, r24	; 0x0a
	PORTE.INTCTRL |= PORT_INT0LVL_LO_gc;
    1d48:	81 85       	ldd	r24, Z+9	; 0x09
    1d4a:	81 60       	ori	r24, 0x01	; 1
    1d4c:	81 87       	std	Z+9, r24	; 0x09

	//Forward/reverse switch setup
	PORTA.PIN5CTRL |= PORT_OPC_PULLUP_gc;
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b6 e0       	ldi	r27, 0x06	; 6
    1d52:	55 96       	adiw	r26, 0x15	; 21
    1d54:	8c 91       	ld	r24, X
    1d56:	55 97       	sbiw	r26, 0x15	; 21
    1d58:	88 61       	ori	r24, 0x18	; 24
    1d5a:	55 96       	adiw	r26, 0x15	; 21
    1d5c:	8c 93       	st	X, r24
    1d5e:	55 97       	sbiw	r26, 0x15	; 21
	PORTA.PIN6CTRL |= PORT_OPC_PULLUP_gc;
    1d60:	56 96       	adiw	r26, 0x16	; 22
    1d62:	8c 91       	ld	r24, X
    1d64:	56 97       	sbiw	r26, 0x16	; 22
    1d66:	88 61       	ori	r24, 0x18	; 24
    1d68:	56 96       	adiw	r26, 0x16	; 22
    1d6a:	8c 93       	st	X, r24
    1d6c:	56 97       	sbiw	r26, 0x16	; 22
	PORTA.PIN4CTRL |= PORT_OPC_PULLUP_gc;
    1d6e:	54 96       	adiw	r26, 0x14	; 20
    1d70:	8c 91       	ld	r24, X
    1d72:	54 97       	sbiw	r26, 0x14	; 20
    1d74:	88 61       	ori	r24, 0x18	; 24
    1d76:	54 96       	adiw	r26, 0x14	; 20
    1d78:	8c 93       	st	X, r24
    1d7a:	54 97       	sbiw	r26, 0x14	; 20
	PORTA.INT0MASK |= (1 << FWR_SW) | (1 << REV_SW) | (1 << TOP_PIN);
    1d7c:	1a 96       	adiw	r26, 0x0a	; 10
    1d7e:	8c 91       	ld	r24, X
    1d80:	1a 97       	sbiw	r26, 0x0a	; 10
    1d82:	80 67       	ori	r24, 0x70	; 112
    1d84:	1a 96       	adiw	r26, 0x0a	; 10
    1d86:	8c 93       	st	X, r24
    1d88:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTA.INTCTRL |= PORT_INT0LVL_LO_gc;
    1d8a:	19 96       	adiw	r26, 0x09	; 9
    1d8c:	8c 91       	ld	r24, X
    1d8e:	19 97       	sbiw	r26, 0x09	; 9
    1d90:	81 60       	ori	r24, 0x01	; 1
    1d92:	19 96       	adiw	r26, 0x09	; 9
    1d94:	8c 93       	st	X, r24
	//Back safety and slow switch setup
	PORTE.PIN2CTRL |= PORT_OPC_PULLUP_gc;
    1d96:	82 89       	ldd	r24, Z+18	; 0x12
    1d98:	88 61       	ori	r24, 0x18	; 24
    1d9a:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN1CTRL |= PORT_OPC_PULLUP_gc;
    1d9c:	81 89       	ldd	r24, Z+17	; 0x11
    1d9e:	88 61       	ori	r24, 0x18	; 24
    1da0:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.INT1MASK |= (1 << KEY_SW) | (1 << SLOW_SW);
    1da2:	83 85       	ldd	r24, Z+11	; 0x0b
    1da4:	86 60       	ori	r24, 0x06	; 6
    1da6:	83 87       	std	Z+11, r24	; 0x0b
	PORTE.INTCTRL |= PORT_INT1LVL_LO_gc;
    1da8:	81 85       	ldd	r24, Z+9	; 0x09
    1daa:	84 60       	ori	r24, 0x04	; 4
    1dac:	81 87       	std	Z+9, r24	; 0x09

	//DAC setup for DRV8701 current chopping Vref
	//Turn on channel 0 DAC and turn on DAC
	DACB.CTRLA = 0b00000101;
    1dae:	e0 e2       	ldi	r30, 0x20	; 32
    1db0:	f3 e0       	ldi	r31, 0x03	; 3
    1db2:	85 e0       	ldi	r24, 0x05	; 5
    1db4:	80 83       	st	Z, r24
	//Single channel operation on DAC0
	DACB.CTRLB = 0b00000000;
    1db6:	11 82       	std	Z+1, r1	; 0x01
	//Use 2.048V on Aref for reference voltage
	DACB.CTRLC = 0b00010000;
    1db8:	80 e1       	ldi	r24, 0x10	; 16
    1dba:	82 83       	std	Z+2, r24	; 0x02
	//Setup DAC depending on max current 
	if (max_current >= 100)
    1dbc:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <max_current>
    1dc0:	84 36       	cpi	r24, 0x64	; 100
    1dc2:	38 f0       	brcs	.+14     	; 0x1dd2 <initialize_motor+0xe2>
		DACB.CH0DATA = 0xFFFF;
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
    1dc8:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__TEXT_REGION_LENGTH__+0x700338>
    1dcc:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__TEXT_REGION_LENGTH__+0x700339>
    1dd0:	2f c0       	rjmp	.+94     	; 0x1e30 <initialize_motor+0x140>
	else
		DACB.CH0DATA = (uint16_t)(((float)max_current * AV / R_SENSE_INV + v_off) / 2.048 * MAX_ADC_READING_COUNT);
    1dd2:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <max_current>
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 ea       	ldi	r20, 0xA0	; 160
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a e7       	ldi	r20, 0x7A	; 122
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1df8:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <v_off>
    1dfc:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <v_off+0x1>
    1e00:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <v_off+0x2>
    1e04:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <v_off+0x3>
    1e08:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    1e0c:	2f e6       	ldi	r18, 0x6F	; 111
    1e0e:	32 e1       	ldi	r19, 0x12	; 18
    1e10:	43 e0       	ldi	r20, 0x03	; 3
    1e12:	50 e4       	ldi	r21, 0x40	; 64
    1e14:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	55 e4       	ldi	r21, 0x45	; 69
    1e20:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1e24:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1e28:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x700338>
    1e2c:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x700339>
    1e30:	2f ef       	ldi	r18, 0xFF	; 255
    1e32:	87 e8       	ldi	r24, 0x87	; 135
    1e34:	93 e1       	ldi	r25, 0x13	; 19
    1e36:	21 50       	subi	r18, 0x01	; 1
    1e38:	80 40       	sbci	r24, 0x00	; 0
    1e3a:	90 40       	sbci	r25, 0x00	; 0
    1e3c:	e1 f7       	brne	.-8      	; 0x1e36 <initialize_motor+0x146>
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <initialize_motor+0x150>
    1e40:	00 00       	nop

	_delay_ms(200);

	direction = UNTESTED;
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
	//Check motor direction switch
	if (!(PORTA_IN & (1 << FWR_SW)) || !(PORTA_IN & (1 << REV_SW)))
    1e48:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1e4c:	85 ff       	sbrs	r24, 5
    1e4e:	04 c0       	rjmp	.+8      	; 0x1e58 <initialize_motor+0x168>
    1e50:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1e54:	86 fd       	sbrc	r24, 6
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <initialize_motor+0x170>
	{
		manual_mode = TRUE;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <initialize_motor+0x174>
	}
	else
	{
		manual_mode = FALSE;
    1e60:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <manual_mode>
	}
	speed = FAST;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <speed>
	fr_transition = FALSE;
    1e6a:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <fr_transition>
	stop_motor = FALSE;
    1e6e:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <stop_motor>
	emergency_stop_motor = FALSE;
    1e72:	10 92 fb 20 	sts	0x20FB, r1	; 0x8020fb <emergency_stop_motor>
	back_safety_adjust = FALSE;
    1e76:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <back_safety_adjust>
	//Check if the pedal is currently activated
	if ((PORTE_IN & (1 << KEY_SW)))
    1e7a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    1e7e:	82 ff       	sbrs	r24, 2
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <initialize_motor+0x19c>
	{
#ifndef BENCH_TEST //IVA002: Supress the error in bench test
		send_key_switch_error = TRUE;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <send_key_switch_error>
		emergency_stop_motor = TRUE;
    1e88:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
#endif
	}

	if (!(PORTE_IN & (1 << PDL_SW)))
    1e8c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    1e90:	80 fd       	sbrc	r24, 0
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <initialize_motor+0x1aa>
	{
#ifndef BENCH_TEST //IVA002: Supress the error in bench test
		send_pedal_switch_error = TRUE;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <send_pedal_switch_error>
#endif
	}
	//Check if the key switch input is connected


	pedal_state = OFF;
    1e9a:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    1e9e:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>

	curr_pedal_level = OFF;
    1ea2:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <curr_pedal_level>
    1ea6:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <curr_pedal_level+0x1>


	//Calculate motor setting values
	if (fast_speed > 0 && slow_speed > 0 && reverse_speed > 0) //IVA001: Fix for div/0
    1eaa:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <fast_speed>
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <initialize_motor+0x1c4>
    1eb2:	ac c1       	rjmp	.+856    	; 0x220c <initialize_motor+0x51c>
    1eb4:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <slow_speed>
    1eb8:	88 23       	and	r24, r24
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <initialize_motor+0x1ce>
    1ebc:	a7 c1       	rjmp	.+846    	; 0x220c <initialize_motor+0x51c>
    1ebe:	80 91 32 20 	lds	r24, 0x2032	; 0x802032 <reverse_speed>
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <initialize_motor+0x1d8>
    1ec6:	a2 c1       	rjmp	.+836    	; 0x220c <initialize_motor+0x51c>
	{
		fast_level_increment = (uint16_t)((float)ACCELERATION_LEVEL_INCREMENT / ((float)fast_speed / 100));
    1ec8:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <acceleration>
    1ecc:	10 91 14 21 	lds	r17, 0x2114	; 0x802114 <fast_speed>
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	c0 e0       	ldi	r28, 0x00	; 0
    1ed4:	d0 e1       	ldi	r29, 0x10	; 16
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1ee4:	6b 01       	movw	r12, r22
    1ee6:	7c 01       	movw	r14, r24
    1ee8:	61 2f       	mov	r22, r17
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	48 ec       	ldi	r20, 0xC8	; 200
    1efa:	52 e4       	ldi	r21, 0x42	; 66
    1efc:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1f00:	9b 01       	movw	r18, r22
    1f02:	ac 01       	movw	r20, r24
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1f0c:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1f10:	6b 01       	movw	r12, r22
    1f12:	7c 01       	movw	r14, r24
    1f14:	60 93 23 20 	sts	0x2023, r22	; 0x802023 <fast_level_increment>
    1f18:	70 93 24 20 	sts	0x2024, r23	; 0x802024 <fast_level_increment+0x1>
		slow_level_increment = (uint16_t)((float)ACCELERATION_LEVEL_INCREMENT / ((float)slow_speed / 100));
    1f1c:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <acceleration>
    1f20:	10 91 26 20 	lds	r17, 0x2026	; 0x802026 <slow_speed>
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	ce 01       	movw	r24, r28
    1f28:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1f34:	4b 01       	movw	r8, r22
    1f36:	5c 01       	movw	r10, r24
    1f38:	61 2f       	mov	r22, r17
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	48 ec       	ldi	r20, 0xC8	; 200
    1f4a:	52 e4       	ldi	r21, 0x42	; 66
    1f4c:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1f50:	9b 01       	movw	r18, r22
    1f52:	ac 01       	movw	r20, r24
    1f54:	c5 01       	movw	r24, r10
    1f56:	b4 01       	movw	r22, r8
    1f58:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1f5c:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1f60:	60 93 1e 21 	sts	0x211E, r22	; 0x80211e <slow_level_increment>
    1f64:	70 93 1f 21 	sts	0x211F, r23	; 0x80211f <slow_level_increment+0x1>
		reverse_level_increment = (uint16_t)((float)fast_level_increment / ((float)reverse_speed / 100));
    1f68:	10 91 32 20 	lds	r17, 0x2032	; 0x802032 <reverse_speed>
    1f6c:	b6 01       	movw	r22, r12
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1f76:	6b 01       	movw	r12, r22
    1f78:	7c 01       	movw	r14, r24
    1f7a:	61 2f       	mov	r22, r17
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	48 ec       	ldi	r20, 0xC8	; 200
    1f8c:	52 e4       	ldi	r21, 0x42	; 66
    1f8e:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1f92:	9b 01       	movw	r18, r22
    1f94:	ac 01       	movw	r20, r24
    1f96:	c7 01       	movw	r24, r14
    1f98:	b6 01       	movw	r22, r12
    1f9a:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1f9e:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1fa2:	60 93 35 20 	sts	0x2035, r22	; 0x802035 <reverse_level_increment>
    1fa6:	70 93 36 20 	sts	0x2036, r23	; 0x802036 <reverse_level_increment+0x1>
		pwm_increment = ACCELERATION_PWM_INCREMENT;
    1faa:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <acceleration>
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	44 eb       	ldi	r20, 0xB4	; 180
    1fc4:	52 e4       	ldi	r21, 0x42	; 66
    1fc6:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	48 ec       	ldi	r20, 0xC8	; 200
    1fd0:	52 e4       	ldi	r21, 0x42	; 66
    1fd2:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    1fd6:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    1fda:	60 93 1c 21 	sts	0x211C, r22	; 0x80211c <pwm_increment>
    1fde:	70 93 1d 21 	sts	0x211D, r23	; 0x80211d <pwm_increment+0x1>

		fast_level_decrement = (uint16_t)((float)DECELERATION_LEVEL_DECREMENT / ((float)fast_speed / 100));
    1fe2:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    1fe6:	10 91 14 21 	lds	r17, 0x2114	; 0x802114 <fast_speed>
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	ce 01       	movw	r24, r28
    1fee:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    1ffa:	6b 01       	movw	r12, r22
    1ffc:	7c 01       	movw	r14, r24
    1ffe:	61 2f       	mov	r22, r17
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	48 ec       	ldi	r20, 0xC8	; 200
    2010:	52 e4       	ldi	r21, 0x42	; 66
    2012:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	c7 01       	movw	r24, r14
    201c:	b6 01       	movw	r22, r12
    201e:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2022:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    2026:	6b 01       	movw	r12, r22
    2028:	7c 01       	movw	r14, r24
    202a:	60 93 2b 21 	sts	0x212B, r22	; 0x80212b <fast_level_decrement>
    202e:	70 93 2c 21 	sts	0x212C, r23	; 0x80212c <fast_level_decrement+0x1>
		slow_level_decrement = (uint16_t)((float)DECELERATION_LEVEL_DECREMENT / ((float)slow_speed / 100));
    2032:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2036:	10 91 26 20 	lds	r17, 0x2026	; 0x802026 <slow_speed>
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	ce 01       	movw	r24, r28
    203e:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    204a:	4b 01       	movw	r8, r22
    204c:	5c 01       	movw	r10, r24
    204e:	61 2f       	mov	r22, r17
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	48 ec       	ldi	r20, 0xC8	; 200
    2060:	52 e4       	ldi	r21, 0x42	; 66
    2062:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2066:	9b 01       	movw	r18, r22
    2068:	ac 01       	movw	r20, r24
    206a:	c5 01       	movw	r24, r10
    206c:	b4 01       	movw	r22, r8
    206e:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2072:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    2076:	60 93 15 21 	sts	0x2115, r22	; 0x802115 <slow_level_decrement>
    207a:	70 93 16 21 	sts	0x2116, r23	; 0x802116 <slow_level_decrement+0x1>
		reverse_level_decrement = (uint16_t)((float)fast_level_decrement / ((float)reverse_speed / 100));
    207e:	10 91 32 20 	lds	r17, 0x2032	; 0x802032 <reverse_speed>
    2082:	b6 01       	movw	r22, r12
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    208c:	6b 01       	movw	r12, r22
    208e:	7c 01       	movw	r14, r24
    2090:	61 2f       	mov	r22, r17
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	48 ec       	ldi	r20, 0xC8	; 200
    20a2:	52 e4       	ldi	r21, 0x42	; 66
    20a4:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    20a8:	9b 01       	movw	r18, r22
    20aa:	ac 01       	movw	r20, r24
    20ac:	c7 01       	movw	r24, r14
    20ae:	b6 01       	movw	r22, r12
    20b0:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    20b4:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    20b8:	60 93 0b 21 	sts	0x210B, r22	; 0x80210b <reverse_level_decrement>
    20bc:	70 93 0c 21 	sts	0x210C, r23	; 0x80210c <reverse_level_decrement+0x1>
		pwm_decrement = DECELERATION_PWM_DECREMENT;
    20c0:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	ce 01       	movw	r24, r28
    20c8:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	44 eb       	ldi	r20, 0xB4	; 180
    20da:	52 e4       	ldi	r21, 0x42	; 66
    20dc:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	48 ec       	ldi	r20, 0xC8	; 200
    20e6:	52 e4       	ldi	r21, 0x42	; 66
    20e8:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    20ec:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    20f0:	60 93 42 20 	sts	0x2042, r22	; 0x802042 <pwm_decrement>
    20f4:	70 93 43 20 	sts	0x2043, r23	; 0x802043 <pwm_decrement+0x1>

		fast_level_pwm_ratio = (float)LEVEL_PWM_RATIO * ((float)fast_speed / 100);
    20f8:	60 91 14 21 	lds	r22, 0x2114	; 0x802114 <fast_speed>
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	48 ec       	ldi	r20, 0xC8	; 200
    210c:	52 e4       	ldi	r21, 0x42	; 66
    210e:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2112:	26 e6       	ldi	r18, 0x66	; 102
    2114:	36 e6       	ldi	r19, 0x66	; 102
    2116:	46 e6       	ldi	r20, 0x66	; 102
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    211e:	6b 01       	movw	r12, r22
    2120:	7c 01       	movw	r14, r24
    2122:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <fast_level_pwm_ratio>
    2126:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <fast_level_pwm_ratio+0x1>
    212a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <fast_level_pwm_ratio+0x2>
    212e:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <fast_level_pwm_ratio+0x3>
		slow_level_pwm_ratio = (float)LEVEL_PWM_RATIO * ((float)slow_speed / 100);
    2132:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <slow_speed>
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	48 ec       	ldi	r20, 0xC8	; 200
    2146:	52 e4       	ldi	r21, 0x42	; 66
    2148:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    214c:	26 e6       	ldi	r18, 0x66	; 102
    214e:	36 e6       	ldi	r19, 0x66	; 102
    2150:	46 e6       	ldi	r20, 0x66	; 102
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    2158:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <slow_level_pwm_ratio>
    215c:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <slow_level_pwm_ratio+0x1>
    2160:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <slow_level_pwm_ratio+0x2>
    2164:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <slow_level_pwm_ratio+0x3>
		reverse_level_pwm_ratio = (float)fast_level_pwm_ratio * ((float)reverse_speed / 100);
    2168:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <reverse_speed>
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	48 ec       	ldi	r20, 0xC8	; 200
    217c:	52 e4       	ldi	r21, 0x42	; 66
    217e:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2182:	a7 01       	movw	r20, r14
    2184:	96 01       	movw	r18, r12
    2186:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    218a:	60 93 26 21 	sts	0x2126, r22	; 0x802126 <reverse_level_pwm_ratio>
    218e:	70 93 27 21 	sts	0x2127, r23	; 0x802127 <reverse_level_pwm_ratio+0x1>
    2192:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <reverse_level_pwm_ratio+0x2>
    2196:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <reverse_level_pwm_ratio+0x3>

		minimum_pwm = (uint16_t)(4096 * ((float)MINIMUM_PWM_PERCENTAGE / 100));
    219a:	89 e9       	ldi	r24, 0x99	; 153
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <minimum_pwm>
    21a2:	90 93 18 21 	sts	0x2118, r25	; 0x802118 <minimum_pwm+0x1>
		max_reverse_pwm = (uint16_t)(4096 * ((float)reverse_speed / 100));
    21a6:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <reverse_speed>
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	48 ec       	ldi	r20, 0xC8	; 200
    21ba:	52 e4       	ldi	r21, 0x42	; 66
    21bc:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	55 e4       	ldi	r21, 0x45	; 69
    21c8:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    21cc:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    21d0:	60 93 70 20 	sts	0x2070, r22	; 0x802070 <max_reverse_pwm>
    21d4:	70 93 71 20 	sts	0x2071, r23	; 0x802071 <max_reverse_pwm+0x1>

		low_deadband_level = pot_low_deadband * 2; // 2 = (4096 count / 2048 mV)
    21d8:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <pot_low_deadband>
    21dc:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <pot_low_deadband+0x1>
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	20 93 37 20 	sts	0x2037, r18	; 0x802037 <low_deadband_level>
    21e8:	30 93 38 20 	sts	0x2038, r19	; 0x802038 <low_deadband_level+0x1>
		high_deadband_level = pot_high_deadband * 2; // 2 = (4096 count / 2048 mV)
    21ec:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    21f0:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <high_deadband_level>
    21fc:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <high_deadband_level+0x1>
		deadband_level_difference = high_deadband_level - low_deadband_level;
    2200:	82 1b       	sub	r24, r18
    2202:	93 0b       	sbc	r25, r19
    2204:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <deadband_level_difference>
    2208:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <deadband_level_difference+0x1>
	}
	pedal_level = OFF;
    220c:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    2210:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
	electrobrake_counter = OFF;
    2214:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <electrobrake_counter>
    2218:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <electrobrake_counter+0x1>
	motor_off_time = ENERGY_RELEASE_TIME + 1;
    221c:	89 e0       	ldi	r24, 0x09	; 9
    221e:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <motor_off_time>
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	bf 90       	pop	r11
    2232:	af 90       	pop	r10
    2234:	9f 90       	pop	r9
    2236:	8f 90       	pop	r8
    2238:	08 95       	ret

0000223a <__vector_43>:

//Interrupt for the accelerator pedal switch
ISR(PEDAL_SWITCH_INT)
{
    223a:	1f 92       	push	r1
    223c:	0f 92       	push	r0
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	0f 92       	push	r0
    2242:	11 24       	eor	r1, r1
    2244:	2f 93       	push	r18
    2246:	3f 93       	push	r19
    2248:	4f 93       	push	r20
    224a:	5f 93       	push	r21
    224c:	6f 93       	push	r22
    224e:	7f 93       	push	r23
    2250:	8f 93       	push	r24
    2252:	9f 93       	push	r25
    2254:	af 93       	push	r26
    2256:	bf 93       	push	r27
    2258:	ef 93       	push	r30
    225a:	ff 93       	push	r31
	//Check to see if the brake/seat switch is closed otherwise inform user
	if (!(PORTE_IN & (1 << PDL_SW)) && ((PORTE_IN & (1 << BRK_SEAT_SW)) || (PORTA_IN & (1 << TOP_PIN))))
    225c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    2260:	80 fd       	sbrc	r24, 0
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <__vector_43+0x48>
    2264:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    2268:	83 fd       	sbrc	r24, 3
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <__vector_43+0x3a>
    226c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    2270:	84 ff       	sbrs	r24, 4
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <__vector_43+0x48>
	{
		send_brake_seat_error(BRAKE_SEAT_SWITCH_OPEN);
    2274:	8d e0       	ldi	r24, 0x0D	; 13
    2276:	0e 94 33 09 	call	0x1266	; 0x1266 <send_brake_seat_error>
		send_brake_seat_switch_error = SENT;
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	80 93 41 20 	sts	0x2041, r24	; 0x802041 <send_brake_seat_switch_error>
    2280:	11 c0       	rjmp	.+34     	; 0x22a4 <__vector_43+0x6a>
	}
	//If pedal is released or brake/seat switch is closed, inform user
	else if (((PORTE_IN & (1 << PDL_SW)) || !(PORTE_IN & (1 << BRK_SEAT_SW))) && send_brake_seat_switch_error == SENT)
    2282:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    2286:	80 fd       	sbrc	r24, 0
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <__vector_43+0x58>
    228a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    228e:	83 fd       	sbrc	r24, 3
    2290:	09 c0       	rjmp	.+18     	; 0x22a4 <__vector_43+0x6a>
    2292:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <send_brake_seat_switch_error>
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	29 f4       	brne	.+10     	; 0x22a4 <__vector_43+0x6a>
	{
		send_brake_seat_error(BRAKE_SEAT_SWITCH_CLOSED);
    229a:	8e e0       	ldi	r24, 0x0E	; 14
    229c:	0e 94 33 09 	call	0x1266	; 0x1266 <send_brake_seat_error>
		send_brake_seat_switch_error = FALSE;
    22a0:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <send_brake_seat_switch_error>
	}

	//If both switches are low then the pedal state is on otherwise pedal is off
	if (!(PORTE_IN & (1 << BRK_SEAT_SW)) && !(PORTE_IN & (1 << PDL_SW)) && !(PORTA_IN & (1 << TOP_PIN)) && can_functioning != UNTESTED)
    22a4:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    22a8:	83 fd       	sbrc	r24, 3
    22aa:	38 c0       	rjmp	.+112    	; 0x231c <__vector_43+0xe2>
    22ac:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    22b0:	80 fd       	sbrc	r24, 0
    22b2:	34 c0       	rjmp	.+104    	; 0x231c <__vector_43+0xe2>
    22b4:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    22b8:	84 fd       	sbrc	r24, 4
    22ba:	30 c0       	rjmp	.+96     	; 0x231c <__vector_43+0xe2>
    22bc:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    22c0:	83 30       	cpi	r24, 0x03	; 3
    22c2:	61 f1       	breq	.+88     	; 0x231c <__vector_43+0xe2>
	{
		if (curr_pedal_level == 0 && !emergency_stop_motor)
    22c4:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    22c8:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    22cc:	89 2b       	or	r24, r25
    22ce:	91 f4       	brne	.+36     	; 0x22f4 <__vector_43+0xba>
    22d0:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    22d4:	81 11       	cpse	r24, r1
    22d6:	0e c0       	rjmp	.+28     	; 0x22f4 <__vector_43+0xba>
		{
			recheck_pedal = TRUE;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	80 93 6d 20 	sts	0x206D, r24	; 0x80206d <recheck_pedal>
			pedal_5_sec_timer_on = TRUE;
    22de:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <pedal_5_sec_timer_on>
			pedal_5_sec_timer = 0;
    22e2:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <pedal_5_sec_timer>
			if (pedal_error_count >= 100)
    22e6:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <pedal_error_count>
    22ea:	84 36       	cpi	r24, 0x64	; 100
    22ec:	f0 f1       	brcs	.+124    	; 0x236a <__vector_43+0x130>
			{
				pedal_error_count = 0;
    22ee:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <pedal_error_count>
    22f2:	3b c0       	rjmp	.+118    	; 0x236a <__vector_43+0x130>
			}
		}
		else
		{
			pedal_state = ON;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <pedal_state>
    22fc:	90 93 40 20 	sts	0x2040, r25	; 0x802040 <pedal_state+0x1>
			update_pedal_state();
    2300:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
			if (!emergency_stop_motor)
    2304:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    2308:	81 11       	cpse	r24, r1
    230a:	2f c0       	rjmp	.+94     	; 0x236a <__vector_43+0x130>
			{
				E_BRAKE_OFF;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
				electrobrake_counter = OFF;
    2312:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <electrobrake_counter>
    2316:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <electrobrake_counter+0x1>
    231a:	27 c0       	rjmp	.+78     	; 0x236a <__vector_43+0x130>
		}
	}
	else
	{
		//If the pedal state changed set motor off time to 0
		if (pedal_state != OFF)
    231c:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    2320:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    2324:	89 2b       	or	r24, r25
    2326:	11 f0       	breq	.+4      	; 0x232c <__vector_43+0xf2>
		{
			motor_off_time = 0;
    2328:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <motor_off_time>
		}
		pedal_state = OFF;
    232c:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    2330:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
		recheck_pedal = FALSE;
    2334:	10 92 6d 20 	sts	0x206D, r1	; 0x80206d <recheck_pedal>
		pedal_5_sec_timer_on = FALSE;
    2338:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <pedal_5_sec_timer_on>
		pedal_5_sec_timer = 0;
    233c:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <pedal_5_sec_timer>
		update_pedal_state();
    2340:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
		if (send_pedal_switch_error == SENT && (PORTE_IN & (1 << PDL_SW)))
    2344:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <send_pedal_switch_error>
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	49 f4       	brne	.+18     	; 0x235e <__vector_43+0x124>
    234c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    2350:	80 ff       	sbrs	r24, 0
    2352:	05 c0       	rjmp	.+10     	; 0x235e <__vector_43+0x124>
		{
			send_pedal_error(PEDAL_SWITCH_OPEN);
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
			send_pedal_switch_error = FALSE;
    235a:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <send_pedal_switch_error>
		}
		electrobrake_counter = ON;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    2366:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
	}
}
    236a:	ff 91       	pop	r31
    236c:	ef 91       	pop	r30
    236e:	bf 91       	pop	r27
    2370:	af 91       	pop	r26
    2372:	9f 91       	pop	r25
    2374:	8f 91       	pop	r24
    2376:	7f 91       	pop	r23
    2378:	6f 91       	pop	r22
    237a:	5f 91       	pop	r21
    237c:	4f 91       	pop	r20
    237e:	3f 91       	pop	r19
    2380:	2f 91       	pop	r18
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	0f 90       	pop	r0
    2388:	1f 90       	pop	r1
    238a:	18 95       	reti

0000238c <__vector_66>:

//Interrupt for the forward reverse emergency control switch
ISR(FORWARD_REVERSE_SWITCH_INT)
{
    238c:	1f 92       	push	r1
    238e:	0f 92       	push	r0
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	0f 92       	push	r0
    2394:	11 24       	eor	r1, r1
    2396:	2f 93       	push	r18
    2398:	3f 93       	push	r19
    239a:	4f 93       	push	r20
    239c:	5f 93       	push	r21
    239e:	6f 93       	push	r22
    23a0:	7f 93       	push	r23
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
	//First make sure can is not functioning before accepting emergency switch
	//If CAN is functioning send error
	//Otherwise allow emergency switch to function

	//Check to see if the top switch is closed otherwise inform user
	if (!(PORTE_IN & (1 << PDL_SW)) && (PORTA_IN & (1 << TOP_PIN)))
    23ae:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    23b2:	80 fd       	sbrc	r24, 0
    23b4:	0a c0       	rjmp	.+20     	; 0x23ca <__vector_66+0x3e>
    23b6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    23ba:	84 ff       	sbrs	r24, 4
    23bc:	06 c0       	rjmp	.+12     	; 0x23ca <__vector_66+0x3e>
	{
		send_brake_seat_error(BRAKE_SEAT_SWITCH_OPEN);
    23be:	8d e0       	ldi	r24, 0x0D	; 13
    23c0:	0e 94 33 09 	call	0x1266	; 0x1266 <send_brake_seat_error>
		send_brake_seat_switch_error = SENT;
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	80 93 41 20 	sts	0x2041, r24	; 0x802041 <send_brake_seat_switch_error>
	}
	if (!(PORTA_IN & (1 << FWR_SW)))
    23ca:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    23ce:	85 fd       	sbrc	r24, 5
    23d0:	43 c0       	rjmp	.+134    	; 0x2458 <__vector_66+0xcc>
	{
		if (can_functioning == UNTESTED)
    23d2:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    23d6:	83 30       	cpi	r24, 0x03	; 3
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <__vector_66+0x56>
		{
			manual_mode = TRUE;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
    23e0:	a6 c0       	rjmp	.+332    	; 0x252e <__vector_66+0x1a2>
		}
		else if (can_functioning == TRUE)
    23e2:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	41 f5       	brne	.+80     	; 0x243a <__vector_66+0xae>
		{
			emergency_stop_motor = TRUE;
    23ea:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
			//If the pedal state changed set motor off time to 0
			if (pedal_state != OFF)
    23ee:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    23f2:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    23f6:	89 2b       	or	r24, r25
    23f8:	11 f0       	breq	.+4      	; 0x23fe <__vector_66+0x72>
			{
				motor_off_time = 0;
    23fa:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <motor_off_time>
			}
			pedal_state = OFF;
    23fe:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    2402:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
			pedal_level = OFF;
    2406:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    240a:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
			electrobrake_counter = ON;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    2416:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
			update_pedal_state();
    241a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
			send_pedal_error(MANUAL_SWITCH_CLOSED);
    241e:	85 e0       	ldi	r24, 0x05	; 5
    2420:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
			if (send_pedal_switch_error)
    2424:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <send_pedal_switch_error>
    2428:	88 23       	and	r24, r24
    242a:	09 f4       	brne	.+2      	; 0x242e <__vector_66+0xa2>
    242c:	80 c0       	rjmp	.+256    	; 0x252e <__vector_66+0x1a2>
			{
				send_pedal_error(PEDAL_SWITCH_CLOSED);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
				send_pedal_switch_error = FALSE;
    2434:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <send_pedal_switch_error>
    2438:	7a c0       	rjmp	.+244    	; 0x252e <__vector_66+0x1a2>
			}
		}
		else
		{
			direction = FORWARD;
    243a:	8a ea       	ldi	r24, 0xAA	; 170
    243c:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
			manual_mode = TRUE;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
			fr_transition = !fr_transition;
    2446:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <fr_transition>
    244a:	91 11       	cpse	r25, r1
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <fr_transition>
			stop_motor = FALSE;
    2452:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <stop_motor>
    2456:	6b c0       	rjmp	.+214    	; 0x252e <__vector_66+0x1a2>
		}
	}
	else if (!(PORTA_IN & (1 << REV_SW)))
    2458:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    245c:	86 fd       	sbrc	r24, 6
    245e:	42 c0       	rjmp	.+132    	; 0x24e4 <__vector_66+0x158>
	{
		if (can_functioning == UNTESTED)
    2460:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	21 f4       	brne	.+8      	; 0x2470 <__vector_66+0xe4>
		{
			manual_mode = TRUE;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
    246e:	5f c0       	rjmp	.+190    	; 0x252e <__vector_66+0x1a2>
		}
		else if (can_functioning == TRUE)
    2470:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	39 f5       	brne	.+78     	; 0x24c6 <__vector_66+0x13a>
		{
			emergency_stop_motor = TRUE;
    2478:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
			//If the pedal state changed set motor off time to 0
			if (pedal_state != OFF)
    247c:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    2480:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    2484:	89 2b       	or	r24, r25
    2486:	11 f0       	breq	.+4      	; 0x248c <__vector_66+0x100>
			{
				motor_off_time = 0;
    2488:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <motor_off_time>
			}
			pedal_state = OFF;
    248c:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    2490:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
			pedal_level = OFF;
    2494:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    2498:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
			electrobrake_counter = ON;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    24a4:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
			update_pedal_state();
    24a8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
			send_pedal_error(MANUAL_SWITCH_CLOSED);
    24ac:	85 e0       	ldi	r24, 0x05	; 5
    24ae:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
			if (send_pedal_switch_error)
    24b2:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <send_pedal_switch_error>
    24b6:	88 23       	and	r24, r24
    24b8:	d1 f1       	breq	.+116    	; 0x252e <__vector_66+0x1a2>
			{
				send_pedal_error(PEDAL_SWITCH_CLOSED);
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
				send_pedal_switch_error = FALSE;
    24c0:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <send_pedal_switch_error>
    24c4:	34 c0       	rjmp	.+104    	; 0x252e <__vector_66+0x1a2>
			}
		}
		else
		{
			direction = REVERSE;
    24c6:	8b eb       	ldi	r24, 0xBB	; 187
    24c8:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
			manual_mode = TRUE;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
			fr_transition = !fr_transition;
    24d2:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <fr_transition>
    24d6:	91 11       	cpse	r25, r1
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <fr_transition>
			stop_motor = FALSE;
    24de:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <stop_motor>
    24e2:	25 c0       	rjmp	.+74     	; 0x252e <__vector_66+0x1a2>
		}
	}
	else
	{
		//If the pedal state changed set motor off time to 0
		if (pedal_state != OFF)
    24e4:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    24e8:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    24ec:	89 2b       	or	r24, r25
    24ee:	11 f0       	breq	.+4      	; 0x24f4 <__vector_66+0x168>
		{
			motor_off_time = 0;
    24f0:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <motor_off_time>
		}
		pedal_state = OFF;
    24f4:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    24f8:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
		update_pedal_state();
    24fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
		direction = NEUTRAL;
    2500:	8c ec       	ldi	r24, 0xCC	; 204
    2502:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
		manual_mode = FALSE;
    2506:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <manual_mode>
		send_pedal_error(MANUAL_SWITCH_OPEN);
    250a:	86 e0       	ldi	r24, 0x06	; 6
    250c:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
		REVERSE_BUZZER_OFF;
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		electrobrake_counter = ON;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    251e:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
		if (emergency_stop_motor != PERMANENT)
    2522:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    2526:	83 30       	cpi	r24, 0x03	; 3
    2528:	11 f0       	breq	.+4      	; 0x252e <__vector_66+0x1a2>
		{
			emergency_stop_motor = FALSE;
    252a:	10 92 fb 20 	sts	0x20FB, r1	; 0x8020fb <emergency_stop_motor>
		}
	}
}
    252e:	ff 91       	pop	r31
    2530:	ef 91       	pop	r30
    2532:	bf 91       	pop	r27
    2534:	af 91       	pop	r26
    2536:	9f 91       	pop	r25
    2538:	8f 91       	pop	r24
    253a:	7f 91       	pop	r23
    253c:	6f 91       	pop	r22
    253e:	5f 91       	pop	r21
    2540:	4f 91       	pop	r20
    2542:	3f 91       	pop	r19
    2544:	2f 91       	pop	r18
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti

00002550 <__vector_44>:

//Interrupt for back safety and slow switch
ISR(BACK_SAFETY_SWITCH_INT)
{
    2550:	1f 92       	push	r1
    2552:	0f 92       	push	r0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	0f 92       	push	r0
    2558:	11 24       	eor	r1, r1
    255a:	cf 92       	push	r12
    255c:	df 92       	push	r13
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	2f 93       	push	r18
    2564:	3f 93       	push	r19
    2566:	4f 93       	push	r20
    2568:	5f 93       	push	r21
    256a:	6f 93       	push	r22
    256c:	7f 93       	push	r23
    256e:	8f 93       	push	r24
    2570:	9f 93       	push	r25
    2572:	af 93       	push	r26
    2574:	bf 93       	push	r27
    2576:	ef 93       	push	r30
    2578:	ff 93       	push	r31
	//If the key switch is turned off
	if (PORTE_IN & (1 << KEY_SW))
    257a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    257e:	82 ff       	sbrs	r24, 2
    2580:	57 c0       	rjmp	.+174    	; 0x2630 <__vector_44+0xe0>
	{
		//If the pedal is being pressed or less than 900 ms have passed since the pedal has been released
		//Keep the motor speed high for 800 ms so it can lose most of its energy and then turn off the motor
		if (pedal_state == ON || motor_off_time <= ENERGY_RELEASE_TIME)
    2582:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    2586:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	29 f0       	breq	.+10     	; 0x2598 <__vector_44+0x48>
    258e:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <motor_off_time>
    2592:	89 30       	cpi	r24, 0x09	; 9
    2594:	08 f0       	brcs	.+2      	; 0x2598 <__vector_44+0x48>
    2596:	4c c0       	rjmp	.+152    	; 0x2630 <__vector_44+0xe0>
		{
			pedal_level = 3000; //About 75% pwm
    2598:	88 eb       	ldi	r24, 0xB8	; 184
    259a:	9b e0       	ldi	r25, 0x0B	; 11
    259c:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    25a0:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
			SET_MOTOR_SPEED(pedal_level * fast_level_pwm_ratio + minimum_pwm);
    25a4:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    25a8:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    25b4:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <fast_level_pwm_ratio>
    25b8:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <fast_level_pwm_ratio+0x1>
    25bc:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <fast_level_pwm_ratio+0x2>
    25c0:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <fast_level_pwm_ratio+0x3>
    25c4:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    25c8:	6b 01       	movw	r12, r22
    25ca:	7c 01       	movw	r14, r24
    25cc:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    25d0:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	c7 01       	movw	r24, r14
    25e2:	b6 01       	movw	r22, r12
    25e4:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    25e8:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    25ec:	e0 e0       	ldi	r30, 0x00	; 0
    25ee:	f9 e0       	ldi	r31, 0x09	; 9
    25f0:	62 a7       	std	Z+42, r22	; 0x2a
    25f2:	73 a7       	std	Z+43, r23	; 0x2b
    25f4:	2f ef       	ldi	r18, 0xFF	; 255
    25f6:	8f e1       	ldi	r24, 0x1F	; 31
    25f8:	9e e4       	ldi	r25, 0x4E	; 78
    25fa:	21 50       	subi	r18, 0x01	; 1
    25fc:	80 40       	sbci	r24, 0x00	; 0
    25fe:	90 40       	sbci	r25, 0x00	; 0
    2600:	e1 f7       	brne	.-8      	; 0x25fa <__vector_44+0xaa>
    2602:	00 c0       	rjmp	.+0      	; 0x2604 <__vector_44+0xb4>
    2604:	00 00       	nop
			_delay_ms(800);
			pedal_state = OFF; SET_MOTOR_SPEED(0);
    2606:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    260a:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
    260e:	12 a6       	std	Z+42, r1	; 0x2a
    2610:	13 a6       	std	Z+43, r1	; 0x2b
    2612:	2f ef       	ldi	r18, 0xFF	; 255
    2614:	87 ea       	ldi	r24, 0xA7	; 167
    2616:	91 e6       	ldi	r25, 0x61	; 97
    2618:	21 50       	subi	r18, 0x01	; 1
    261a:	80 40       	sbci	r24, 0x00	; 0
    261c:	90 40       	sbci	r25, 0x00	; 0
    261e:	e1 f7       	brne	.-8      	; 0x2618 <__vector_44+0xc8>
    2620:	00 c0       	rjmp	.+0      	; 0x2622 <__vector_44+0xd2>
    2622:	00 00       	nop
			_delay_ms(1000);
			electrobrake_counter = ON;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    262c:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
		}
	}
	//If the slow switch is triggered, change to slow mode and update pwm
	if (!(PORTE_IN & (1 << SLOW_SW)))
    2630:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    2634:	81 fd       	sbrc	r24, 1
    2636:	33 c0       	rjmp	.+102    	; 0x269e <__vector_44+0x14e>
	{
		speed = SLOW_MANUAL;
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <speed>
		if (direction == FORWARD)
    263e:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    2642:	8a 3a       	cpi	r24, 0xAA	; 170
    2644:	09 f0       	breq	.+2      	; 0x2648 <__vector_44+0xf8>
    2646:	60 c0       	rjmp	.+192    	; 0x2708 <__vector_44+0x1b8>
		{
			if (GET_MOTOR_SPEED() >= minimum_pwm)
    2648:	20 91 2a 09 	lds	r18, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    264c:	30 91 2b 09 	lds	r19, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    2650:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <minimum_pwm>
    2654:	90 91 18 21 	lds	r25, 0x2118	; 0x802118 <minimum_pwm+0x1>
    2658:	28 17       	cp	r18, r24
    265a:	39 07       	cpc	r19, r25
    265c:	d8 f0       	brcs	.+54     	; 0x2694 <__vector_44+0x144>
				pedal_level = (GET_MOTOR_SPEED() - minimum_pwm) / slow_level_pwm_ratio;
    265e:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    2662:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    2666:	68 1b       	sub	r22, r24
    2668:	79 0b       	sbc	r23, r25
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2672:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <slow_level_pwm_ratio>
    2676:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <slow_level_pwm_ratio+0x1>
    267a:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <slow_level_pwm_ratio+0x2>
    267e:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <slow_level_pwm_ratio+0x3>
    2682:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    2686:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    268a:	60 93 2f 21 	sts	0x212F, r22	; 0x80212f <pedal_level>
    268e:	70 93 30 21 	sts	0x2130, r23	; 0x802130 <pedal_level+0x1>
    2692:	3a c0       	rjmp	.+116    	; 0x2708 <__vector_44+0x1b8>
			else
				pedal_level = 0;
    2694:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    2698:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
    269c:	35 c0       	rjmp	.+106    	; 0x2708 <__vector_44+0x1b8>
		}
	}
	//Otherwise change back to fast mode and update pwm
	else if (speed == SLOW_MANUAL)
    269e:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	89 f5       	brne	.+98     	; 0x2708 <__vector_44+0x1b8>
	{
		speed = FAST;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <speed>
		if (direction == FORWARD)
    26ac:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    26b0:	8a 3a       	cpi	r24, 0xAA	; 170
    26b2:	51 f5       	brne	.+84     	; 0x2708 <__vector_44+0x1b8>
		{
			if (GET_MOTOR_SPEED() >= minimum_pwm)
    26b4:	20 91 2a 09 	lds	r18, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    26b8:	30 91 2b 09 	lds	r19, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    26bc:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <minimum_pwm>
    26c0:	90 91 18 21 	lds	r25, 0x2118	; 0x802118 <minimum_pwm+0x1>
    26c4:	28 17       	cp	r18, r24
    26c6:	39 07       	cpc	r19, r25
    26c8:	d8 f0       	brcs	.+54     	; 0x2700 <__vector_44+0x1b0>
				pedal_level = (GET_MOTOR_SPEED() - minimum_pwm) / fast_level_pwm_ratio;
    26ca:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    26ce:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    26d2:	68 1b       	sub	r22, r24
    26d4:	79 0b       	sbc	r23, r25
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    26de:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <fast_level_pwm_ratio>
    26e2:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <fast_level_pwm_ratio+0x1>
    26e6:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <fast_level_pwm_ratio+0x2>
    26ea:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <fast_level_pwm_ratio+0x3>
    26ee:	0e 94 a8 22 	call	0x4550	; 0x4550 <__divsf3>
    26f2:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    26f6:	60 93 2f 21 	sts	0x212F, r22	; 0x80212f <pedal_level>
    26fa:	70 93 30 21 	sts	0x2130, r23	; 0x802130 <pedal_level+0x1>
    26fe:	04 c0       	rjmp	.+8      	; 0x2708 <__vector_44+0x1b8>
			else
				pedal_level = 0;
    2700:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    2704:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>

		back_safety_adjust = TRUE;
		back_safety_adjust_counter = 0;
		send_back_safety_error(BACK_SAFETY_ALERT);
	}*/
}
    2708:	ff 91       	pop	r31
    270a:	ef 91       	pop	r30
    270c:	bf 91       	pop	r27
    270e:	af 91       	pop	r26
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	7f 91       	pop	r23
    2716:	6f 91       	pop	r22
    2718:	5f 91       	pop	r21
    271a:	4f 91       	pop	r20
    271c:	3f 91       	pop	r19
    271e:	2f 91       	pop	r18
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	0f 90       	pop	r0
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	0f 90       	pop	r0
    272e:	1f 90       	pop	r1
    2730:	18 95       	reti

00002732 <set_to_default>:
	over_current_rating = (uint8_t)((float)rated_current * 1.10);
	overload_time_constant = (uint32_t)(((float)max_current * max_current - (float)rated_current * rated_current) * full_overload_time);
}

void set_to_default(void)
{
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
	cli();
    273c:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_ACCELERATION_ADDR, ACCELERATION_RATE);		//Time to max acceleration in 100ms/unit = 3 sec
    273e:	6e e1       	ldi	r22, 0x1E	; 30
    2740:	84 e1       	ldi	r24, 0x14	; 20
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_DECELERATION_ADDR, DECELERATION_RATE);		//Time from max acceleration to stop in 100ms/unit = 500ms
    2748:	68 e0       	ldi	r22, 0x08	; 8
    274a:	85 e1       	ldi	r24, 0x15	; 21
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY_ADDR, BRAKE_DELAY);				//Time brake pedal press to stop in 100ms/unit = 1.2 sec
    2752:	6c e0       	ldi	r22, 0x0C	; 12
    2754:	80 e1       	ldi	r24, 0x10	; 16
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED_ADDR, MAX_REVERSE_SPEED);		//Reverse speed in percentage of max speed = 40%
    275c:	6c e3       	ldi	r22, 0x3C	; 60
    275e:	81 e1       	ldi	r24, 0x11	; 17
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED_ADDR, SLOW_PWM_PERCENTAGE);		//Slow forward speed in percentage of max speed = 60%
    2766:	6c e3       	ldi	r22, 0x3C	; 60
    2768:	83 e1       	ldi	r24, 0x13	; 19
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED_ADDR, FAST_PWM_PERCENTAGE); 		//Fast forward speed in percentage of max speed = 100%
    2770:	64 e6       	ldi	r22, 0x64	; 100
    2772:	82 e1       	ldi	r24, 0x12	; 18
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING_ADDR, RATED_CURRENT);			//Default current rating in A/unit = 30A
    277a:	6e e1       	ldi	r22, 0x1E	; 30
    277c:	86 e1       	ldi	r24, 0x16	; 22
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT_ADDR, MAX_RUNNING_CURRENT);		//Max working current rating in A/unit = 100A
    2784:	64 e6       	ldi	r22, 0x64	; 100
    2786:	87 e1       	ldi	r24, 0x17	; 23
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME_ADDR, MAX_OVERCURRENT_TIME);	//Max number of seconds allowed over working current rating in seconds = 45 seconds
    278e:	6d e2       	ldi	r22, 0x2D	; 45
    2790:	88 e1       	ldi	r24, 0x18	; 24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_word((uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR, POT_LOW_DEADBAND);	//Voltage in mV of the end of the low side deadband of the pot = 0 V
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	89 e1       	ldi	r24, 0x19	; 25
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 08 25 	call	0x4a10	; 0x4a10 <eeprom_update_word>
	eeprom_update_word((uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR, POT_HIGH_DEADBAND);	//Voltage in mV of the start of the high side deadband of the pot = 2.048 V
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	78 e0       	ldi	r23, 0x08	; 8
    27a8:	8b e1       	ldi	r24, 0x1B	; 27
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 08 25 	call	0x4a10	; 0x4a10 <eeprom_update_word>

	//Read in the drive motor settings
	acceleration = eeprom_read_byte((const uint8_t *)EEP8_ACCELERATION_ADDR);
    27b0:	84 e1       	ldi	r24, 0x14	; 20
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    27b8:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <acceleration>
	deceleration = eeprom_read_byte((const uint8_t *)EEP8_DECELERATION_ADDR);
    27bc:	85 e1       	ldi	r24, 0x15	; 21
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    27c4:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <deceleration>
	brake_delay = eeprom_read_byte((const uint8_t *)EEP8_BRAKE_DELAY_ADDR);
    27c8:	80 e1       	ldi	r24, 0x10	; 16
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    27d0:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <brake_delay>
	reverse_speed = eeprom_read_byte((const uint8_t *)EEP8_REVERSE_SPEED_ADDR);
    27d4:	81 e1       	ldi	r24, 0x11	; 17
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    27dc:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <reverse_speed>
	slow_speed = eeprom_read_byte((const uint8_t *)EEP8_SLOW_SPEED_ADDR);
    27e0:	83 e1       	ldi	r24, 0x13	; 19
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    27e8:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <slow_speed>
	fast_speed = eeprom_read_byte((const uint8_t *)EEP8_FAST_SPEED_ADDR);
    27ec:	82 e1       	ldi	r24, 0x12	; 18
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    27f4:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <fast_speed>
	rated_current = eeprom_read_byte((const uint8_t *)EEP8_CURRENT_RATING_ADDR);
    27f8:	86 e1       	ldi	r24, 0x16	; 22
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    2800:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <rated_current>
	max_current = eeprom_read_byte((const uint8_t *)EEP8_MAX_CURRENT_ADDR);
    2804:	87 e1       	ldi	r24, 0x17	; 23
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    280c:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <max_current>
	full_overload_time = eeprom_read_byte((const uint8_t *)EEP8_OVERLOAD_TIME_ADDR);
    2810:	88 e1       	ldi	r24, 0x18	; 24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    2818:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <full_overload_time>
	pot_low_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR);
    281c:	89 e1       	ldi	r24, 0x19	; 25
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <eeprom_read_word>
    2824:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <pot_low_deadband>
    2828:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <pot_low_deadband+0x1>
	pot_high_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR);
    282c:	8b e1       	ldi	r24, 0x1B	; 27
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <eeprom_read_word>
    2834:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <pot_high_deadband>
    2838:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <pot_high_deadband+0x1>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    283c:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2840:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2844:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2848:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    284c:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2850:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2854:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2858:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    285c:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2860:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2864:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2868:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    286c:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
	rated_current = eeprom_read_byte((const uint8_t *)EEP8_CURRENT_RATING_ADDR);
	max_current = eeprom_read_byte((const uint8_t *)EEP8_MAX_CURRENT_ADDR);
	full_overload_time = eeprom_read_byte((const uint8_t *)EEP8_OVERLOAD_TIME_ADDR);
	pot_low_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR);
	pot_high_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR);
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2870:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2874:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2878:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    287c:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2880:	6f 25       	eor	r22, r15
    2882:	6f 27       	eor	r22, r31
    2884:	6e 27       	eor	r22, r30
    2886:	67 27       	eor	r22, r23
    2888:	65 27       	eor	r22, r21
    288a:	64 27       	eor	r22, r20
    288c:	63 27       	eor	r22, r19
    288e:	62 27       	eor	r22, r18
    2890:	80 27       	eor	r24, r16
    2892:	8d 27       	eor	r24, r29
    2894:	8b 27       	eor	r24, r27
    2896:	68 27       	eor	r22, r24
    2898:	8f e1       	ldi	r24, 0x1F	; 31
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    28a0:	78 94       	sei
}
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	08 95       	ret

000028ae <initialize_RB_settings>:
 */

#include "motor_settings.h"

void initialize_RB_settings(void)
{
    28ae:	2f 92       	push	r2
    28b0:	3f 92       	push	r3
    28b2:	4f 92       	push	r4
    28b4:	5f 92       	push	r5
    28b6:	6f 92       	push	r6
    28b8:	7f 92       	push	r7
    28ba:	8f 92       	push	r8
    28bc:	9f 92       	push	r9
    28be:	af 92       	push	r10
    28c0:	bf 92       	push	r11
    28c2:	cf 92       	push	r12
    28c4:	df 92       	push	r13
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	60 97       	sbiw	r28, 0x10	; 16
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	de bf       	out	0x3e, r29	; 62
	//Check if the device settings have ever been set
	//Usually only needs to do this first time powering on
	if (eeprom_read_byte((const uint8_t *)EEP8_DEVICE_SETTINGS_SET_ADDR) != DEVICE_SETTINGS_SET)
    28dc:	80 e2       	ldi	r24, 0x20	; 32
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    28e4:	8a 3a       	cpi	r24, 0xAA	; 170
    28e6:	39 f1       	breq	.+78     	; 0x2936 <initialize_RB_settings+0x88>
	{
		set_to_default();
    28e8:	0e 94 99 13 	call	0x2732	; 0x2732 <set_to_default>
		eeprom_update_byte((uint8_t *)EEP8_DEVICE_SETTINGS_SET_ADDR, DEVICE_SETTINGS_SET);
    28ec:	6a ea       	ldi	r22, 0xAA	; 170
    28ee:	80 e2       	ldi	r24, 0x20	; 32
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>

		uint8_t temp[A3_SERIAL_NUM_LEN + 1] = "RV000000000000";
    28f6:	8f e0       	ldi	r24, 0x0F	; 15
    28f8:	e0 e0       	ldi	r30, 0x00	; 0
    28fa:	f0 e2       	ldi	r31, 0x20	; 32
    28fc:	de 01       	movw	r26, r28
    28fe:	11 96       	adiw	r26, 0x01	; 1
    2900:	01 90       	ld	r0, Z+
    2902:	0d 92       	st	X+, r0
    2904:	8a 95       	dec	r24
    2906:	e1 f7       	brne	.-8      	; 0x2900 <initialize_RB_settings+0x52>
		eeprom_update_block((const void*)temp, (void *)EEPxx_A3_SERIAL_NUM, A3_SERIAL_NUM_LEN);
    2908:	4e e0       	ldi	r20, 0x0E	; 14
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	60 e4       	ldi	r22, 0x40	; 64
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	ce 01       	movw	r24, r28
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	0e 94 ed 24 	call	0x49da	; 0x49da <eeprom_update_block>
		eeprom_busy_wait();
    2918:	ef ec       	ldi	r30, 0xCF	; 207
    291a:	f1 e0       	ldi	r31, 0x01	; 1
    291c:	80 81       	ld	r24, Z
    291e:	88 23       	and	r24, r24
    2920:	ec f3       	brlt	.-6      	; 0x291c <initialize_RB_settings+0x6e>

		//Read in A1 serial number
		eeprom_read_block((void *)A3_serial_num, (const void*)EEPxx_A3_SERIAL_NUM, A3_SERIAL_NUM_LEN);
    2922:	4e e0       	ldi	r20, 0x0E	; 14
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	60 e4       	ldi	r22, 0x40	; 64
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	86 e4       	ldi	r24, 0x46	; 70
    292c:	90 e2       	ldi	r25, 0x20	; 32
    292e:	0e 94 cc 24 	call	0x4998	; 0x4998 <eeprom_read_block>
		A3_serial_num[A3_SERIAL_NUM_LEN] = '\0';
    2932:	10 92 54 20 	sts	0x2054, r1	; 0x802054 <A3_serial_num+0xe>
	}

	//Read in serial number
	eeprom_read_block((void *)A3_serial_num, (const void*)EEPxx_A3_SERIAL_NUM, A3_SERIAL_NUM_LEN);
    2936:	4e e0       	ldi	r20, 0x0E	; 14
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	60 e4       	ldi	r22, 0x40	; 64
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	86 e4       	ldi	r24, 0x46	; 70
    2940:	90 e2       	ldi	r25, 0x20	; 32
    2942:	0e 94 cc 24 	call	0x4998	; 0x4998 <eeprom_read_block>
	if (A3_serial_num[0] != 0x52)// || A3_serial_num[0] > 0x39)
    2946:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <A3_serial_num>
    294a:	82 35       	cpi	r24, 0x52	; 82
    294c:	b1 f0       	breq	.+44     	; 0x297a <initialize_RB_settings+0xcc>
	{
		uint8_t temp[A3_SERIAL_NUM_LEN + 1] = "RV000000000000";
    294e:	8f e0       	ldi	r24, 0x0F	; 15
    2950:	e0 e0       	ldi	r30, 0x00	; 0
    2952:	f0 e2       	ldi	r31, 0x20	; 32
    2954:	de 01       	movw	r26, r28
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	01 90       	ld	r0, Z+
    295a:	0d 92       	st	X+, r0
    295c:	8a 95       	dec	r24
    295e:	e1 f7       	brne	.-8      	; 0x2958 <initialize_RB_settings+0xaa>
		eeprom_update_block((const void*)temp, (void *)EEPxx_A3_SERIAL_NUM, A3_SERIAL_NUM_LEN);
    2960:	4e e0       	ldi	r20, 0x0E	; 14
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	60 e4       	ldi	r22, 0x40	; 64
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	ce 01       	movw	r24, r28
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	0e 94 ed 24 	call	0x49da	; 0x49da <eeprom_update_block>
		eeprom_busy_wait();
    2970:	ef ec       	ldi	r30, 0xCF	; 207
    2972:	f1 e0       	ldi	r31, 0x01	; 1
    2974:	80 81       	ld	r24, Z
    2976:	88 23       	and	r24, r24
    2978:	ec f3       	brlt	.-6      	; 0x2974 <initialize_RB_settings+0xc6>
	}
	eeprom_read_block((void *)A3_serial_num, (const void*)EEPxx_A3_SERIAL_NUM, A3_SERIAL_NUM_LEN);
    297a:	4e e0       	ldi	r20, 0x0E	; 14
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	60 e4       	ldi	r22, 0x40	; 64
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	86 e4       	ldi	r24, 0x46	; 70
    2984:	90 e2       	ldi	r25, 0x20	; 32
    2986:	0e 94 cc 24 	call	0x4998	; 0x4998 <eeprom_read_block>
	A3_serial_num[A3_SERIAL_NUM_LEN] = '\0';
    298a:	10 92 54 20 	sts	0x2054, r1	; 0x802054 <A3_serial_num+0xe>

	//Read in the drive motor settings
	acceleration = eeprom_read_byte((const uint8_t *)EEP8_ACCELERATION_ADDR);
    298e:	84 e1       	ldi	r24, 0x14	; 20
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    2996:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <acceleration>
	deceleration = eeprom_read_byte((const uint8_t *)EEP8_DECELERATION_ADDR);
    299a:	85 e1       	ldi	r24, 0x15	; 21
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29a2:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <deceleration>
	brake_delay = eeprom_read_byte((const uint8_t *)EEP8_BRAKE_DELAY_ADDR);
    29a6:	80 e1       	ldi	r24, 0x10	; 16
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29ae:	80 93 27 20 	sts	0x2027, r24	; 0x802027 <brake_delay>
	reverse_speed = eeprom_read_byte((const uint8_t *)EEP8_REVERSE_SPEED_ADDR);
    29b2:	81 e1       	ldi	r24, 0x11	; 17
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29ba:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <reverse_speed>
	slow_speed = eeprom_read_byte((const uint8_t *)EEP8_SLOW_SPEED_ADDR);
    29be:	83 e1       	ldi	r24, 0x13	; 19
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29c6:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <slow_speed>
	fast_speed = eeprom_read_byte((const uint8_t *)EEP8_FAST_SPEED_ADDR);
    29ca:	82 e1       	ldi	r24, 0x12	; 18
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29d2:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <fast_speed>
	rated_current = eeprom_read_byte((const uint8_t *)EEP8_CURRENT_RATING_ADDR);
    29d6:	86 e1       	ldi	r24, 0x16	; 22
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29de:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <rated_current>
	max_current = eeprom_read_byte((const uint8_t *)EEP8_MAX_CURRENT_ADDR);
    29e2:	87 e1       	ldi	r24, 0x17	; 23
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29ea:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <max_current>
	full_overload_time = eeprom_read_byte((const uint8_t *)EEP8_OVERLOAD_TIME_ADDR);
    29ee:	88 e1       	ldi	r24, 0x18	; 24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>
    29f6:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <full_overload_time>
	pot_low_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR);
    29fa:	89 e1       	ldi	r24, 0x19	; 25
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <eeprom_read_word>
    2a02:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <pot_low_deadband>
    2a06:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <pot_low_deadband+0x1>
	pot_high_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR);
    2a0a:	8b e1       	ldi	r24, 0x1B	; 27
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <eeprom_read_word>
    2a12:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <pot_high_deadband>
    2a16:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <pot_high_deadband+0x1>

	//Get and compare checksums
	//If they do not match reset the settings to the default
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2a1a:	20 90 2e 21 	lds	r2, 0x212E	; 0x80212e <acceleration>
    2a1e:	30 90 08 21 	lds	r3, 0x2108	; 0x802108 <deceleration>
    2a22:	40 90 27 20 	lds	r4, 0x2027	; 0x802027 <brake_delay>
    2a26:	50 90 32 20 	lds	r5, 0x2032	; 0x802032 <reverse_speed>
    2a2a:	c0 90 26 20 	lds	r12, 0x2026	; 0x802026 <slow_speed>
    2a2e:	d0 90 14 21 	lds	r13, 0x2114	; 0x802114 <fast_speed>
    2a32:	e0 90 0d 21 	lds	r14, 0x210D	; 0x80210d <rated_current>
    2a36:	f0 90 01 21 	lds	r15, 0x2101	; 0x802101 <max_current>
    2a3a:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <full_overload_time>
    2a3e:	88 8b       	std	Y+16, r24	; 0x10
    2a40:	60 90 6e 20 	lds	r6, 0x206E	; 0x80206e <pot_low_deadband>
    2a44:	70 90 6f 20 	lds	r7, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2a48:	80 90 6e 20 	lds	r8, 0x206E	; 0x80206e <pot_low_deadband>
    2a4c:	90 90 6f 20 	lds	r9, 0x206F	; 0x80206f <pot_low_deadband+0x1>
	pot_low_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR);
	pot_high_deadband = eeprom_read_word((const uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR);

	//Get and compare checksums
	//If they do not match reset the settings to the default
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2a50:	00 91 31 21 	lds	r16, 0x2131	; 0x802131 <pot_high_deadband>
    2a54:	10 91 32 21 	lds	r17, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2a58:	a0 90 31 21 	lds	r10, 0x2131	; 0x802131 <pot_high_deadband>
    2a5c:	b0 90 32 21 	lds	r11, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	uint8_t stored_checksum = eeprom_read_byte((const uint8_t *)EEP8_CHECKSUM_ADDR);
    2a60:	8f e1       	ldi	r24, 0x1F	; 31
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <eeprom_read_byte>

	if (checksum != stored_checksum)
    2a68:	32 24       	eor	r3, r2
    2a6a:	43 24       	eor	r4, r3
    2a6c:	54 24       	eor	r5, r4
    2a6e:	c5 24       	eor	r12, r5
    2a70:	dc 24       	eor	r13, r12
    2a72:	ed 24       	eor	r14, r13
    2a74:	fe 24       	eor	r15, r14
    2a76:	98 89       	ldd	r25, Y+16	; 0x10
    2a78:	f9 26       	eor	r15, r25
    2a7a:	06 25       	eor	r16, r6
    2a7c:	09 25       	eor	r16, r9
    2a7e:	0b 25       	eor	r16, r11
    2a80:	f0 26       	eor	r15, r16
    2a82:	f8 16       	cp	r15, r24
    2a84:	29 f0       	breq	.+10     	; 0x2a90 <initialize_RB_settings+0x1e2>
	{
		motor_parameter_error = TRUE;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 73 20 	sts	0x2073, r24	; 0x802073 <motor_parameter_error>
		set_to_default();
    2a8c:	0e 94 99 13 	call	0x2732	; 0x2732 <set_to_default>
		eeprom_busy_wait();
		SDRF_cnt = eeprom_read_byte((const uint8_t *) EEP_SDRF_cnt_location);
		eeprom_busy_wait();
	}*/

	over_current_rating = (uint8_t)((float)rated_current * 1.10);
    2a90:	60 91 0d 21 	lds	r22, 0x210D	; 0x80210d <rated_current>
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2a9e:	2d ec       	ldi	r18, 0xCD	; 205
    2aa0:	3c ec       	ldi	r19, 0xCC	; 204
    2aa2:	4c e8       	ldi	r20, 0x8C	; 140
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    2aaa:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    2aae:	60 93 02 21 	sts	0x2102, r22	; 0x802102 <over_current_rating>
	overload_time_constant = (uint32_t)(((float)max_current * max_current - (float)rated_current * rated_current) * full_overload_time);
    2ab2:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <max_current>
    2ab6:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <max_current>
    2aba:	f0 90 0d 21 	lds	r15, 0x210D	; 0x80210d <rated_current>
    2abe:	00 91 0d 21 	lds	r16, 0x210D	; 0x80210d <rated_current>
    2ac2:	10 91 3e 20 	lds	r17, 0x203E	; 0x80203e <full_overload_time>
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2ad0:	4b 01       	movw	r8, r22
    2ad2:	5c 01       	movw	r10, r24
    2ad4:	6e 2d       	mov	r22, r14
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
    2ae0:	9b 01       	movw	r18, r22
    2ae2:	ac 01       	movw	r20, r24
    2ae4:	c5 01       	movw	r24, r10
    2ae6:	b4 01       	movw	r22, r8
    2ae8:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    2aec:	4b 01       	movw	r8, r22
    2aee:	5c 01       	movw	r10, r24
    2af0:	6f 2d       	mov	r22, r15
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    2afc:	6b 01       	movw	r12, r22
    2afe:	7c 01       	movw	r14, r24
    2b00:	60 2f       	mov	r22, r16
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
    2b0c:	9b 01       	movw	r18, r22
    2b0e:	ac 01       	movw	r20, r24
    2b10:	c7 01       	movw	r24, r14
    2b12:	b6 01       	movw	r22, r12
    2b14:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    2b18:	9b 01       	movw	r18, r22
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	c5 01       	movw	r24, r10
    2b1e:	b4 01       	movw	r22, r8
    2b20:	0e 94 36 22 	call	0x446c	; 0x446c <__subsf3>
    2b24:	6b 01       	movw	r12, r22
    2b26:	7c 01       	movw	r14, r24
    2b28:	61 2f       	mov	r22, r17
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 4b 23 	call	0x4696	; 0x4696 <__floatsisf>
    2b34:	9b 01       	movw	r18, r22
    2b36:	ac 01       	movw	r20, r24
    2b38:	c7 01       	movw	r24, r14
    2b3a:	b6 01       	movw	r22, r12
    2b3c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    2b40:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    2b44:	60 93 5d 20 	sts	0x205D, r22	; 0x80205d <overload_time_constant>
    2b48:	70 93 5e 20 	sts	0x205E, r23	; 0x80205e <overload_time_constant+0x1>
    2b4c:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <overload_time_constant+0x2>
    2b50:	90 93 60 20 	sts	0x2060, r25	; 0x802060 <overload_time_constant+0x3>
}
    2b54:	60 96       	adiw	r28, 0x10	; 16
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	ff 90       	pop	r15
    2b64:	ef 90       	pop	r14
    2b66:	df 90       	pop	r13
    2b68:	cf 90       	pop	r12
    2b6a:	bf 90       	pop	r11
    2b6c:	af 90       	pop	r10
    2b6e:	9f 90       	pop	r9
    2b70:	8f 90       	pop	r8
    2b72:	7f 90       	pop	r7
    2b74:	6f 90       	pop	r6
    2b76:	5f 90       	pop	r5
    2b78:	4f 90       	pop	r4
    2b7a:	3f 90       	pop	r3
    2b7c:	2f 90       	pop	r2
    2b7e:	08 95       	ret

00002b80 <update_motor_settings>:
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
	sei();
}

void update_motor_settings(void)
{
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
	cli();
    2b8a:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_ACCELERATION_ADDR, acceleration);			//Time to max acceleration in 100ms/unit
    2b8c:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <acceleration>
    2b90:	84 e1       	ldi	r24, 0x14	; 20
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_DECELERATION_ADDR, deceleration);			//Time from max acceleration to stop in 100ms/unit
    2b98:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2b9c:	85 e1       	ldi	r24, 0x15	; 21
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY_ADDR, brake_delay);				//Time brake pedal press to stop in 100ms/unit
    2ba4:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <brake_delay>
    2ba8:	80 e1       	ldi	r24, 0x10	; 16
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED_ADDR, reverse_speed);			//Reverse speed in percentage of max speed
    2bb0:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <reverse_speed>
    2bb4:	81 e1       	ldi	r24, 0x11	; 17
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED_ADDR, slow_speed);				//Slow forward speed in percentage of max speed
    2bbc:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <slow_speed>
    2bc0:	83 e1       	ldi	r24, 0x13	; 19
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED_ADDR, fast_speed); 				//Fast forward speed in percentage of max speed
    2bc8:	60 91 14 21 	lds	r22, 0x2114	; 0x802114 <fast_speed>
    2bcc:	82 e1       	ldi	r24, 0x12	; 18
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING_ADDR, rated_current);		//Rated current in A/unit
    2bd4:	60 91 0d 21 	lds	r22, 0x210D	; 0x80210d <rated_current>
    2bd8:	86 e1       	ldi	r24, 0x16	; 22
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT_ADDR, max_current);				//Max working current rating in A/unit
    2be0:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <max_current>
    2be4:	87 e1       	ldi	r24, 0x17	; 23
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME_ADDR, full_overload_time);			//Max number of seconds allowed over working current rating in seconds
    2bec:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <full_overload_time>
    2bf0:	88 e1       	ldi	r24, 0x18	; 24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_update_word((uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR, pot_low_deadband);	//Voltage in mV of the end of the low side deadband of the pot
    2bf8:	60 91 6e 20 	lds	r22, 0x206E	; 0x80206e <pot_low_deadband>
    2bfc:	70 91 6f 20 	lds	r23, 0x206F	; 0x80206f <pot_low_deadband+0x1>
    2c00:	89 e1       	ldi	r24, 0x19	; 25
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 08 25 	call	0x4a10	; 0x4a10 <eeprom_update_word>
	eeprom_update_word((uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR, pot_high_deadband);	//Voltage in mV of the start of the high side deadband of the pot
    2c08:	60 91 31 21 	lds	r22, 0x2131	; 0x802131 <pot_high_deadband>
    2c0c:	70 91 32 21 	lds	r23, 0x2132	; 0x802132 <pot_high_deadband+0x1>
    2c10:	8b e1       	ldi	r24, 0x1B	; 27
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 08 25 	call	0x4a10	; 0x4a10 <eeprom_update_word>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2c18:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2c1c:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2c20:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2c24:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2c28:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2c2c:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2c30:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2c34:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2c38:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2c3c:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2c40:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2c44:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2c48:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING_ADDR, rated_current);		//Rated current in A/unit
	eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT_ADDR, max_current);				//Max working current rating in A/unit
	eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME_ADDR, full_overload_time);			//Max number of seconds allowed over working current rating in seconds
	eeprom_update_word((uint16_t *)EEP16_POT_LOW_DEADBAND_ADDR, pot_low_deadband);	//Voltage in mV of the end of the low side deadband of the pot
	eeprom_update_word((uint16_t *)EEP16_POT_HIGH_DEADBAND_ADDR, pot_high_deadband);	//Voltage in mV of the start of the high side deadband of the pot
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2c4c:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2c50:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2c54:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2c58:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2c5c:	6f 25       	eor	r22, r15
    2c5e:	6f 27       	eor	r22, r31
    2c60:	6e 27       	eor	r22, r30
    2c62:	67 27       	eor	r22, r23
    2c64:	65 27       	eor	r22, r21
    2c66:	64 27       	eor	r22, r20
    2c68:	63 27       	eor	r22, r19
    2c6a:	62 27       	eor	r22, r18
    2c6c:	80 27       	eor	r24, r16
    2c6e:	8d 27       	eor	r24, r29
    2c70:	8b 27       	eor	r24, r27
    2c72:	68 27       	eor	r22, r24
    2c74:	8f e1       	ldi	r24, 0x1F	; 31
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    2c7c:	78 94       	sei
}
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	08 95       	ret

00002c8a <update_accel_settings>:

void update_accel_settings(void)
{
    2c8a:	ff 92       	push	r15
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
	cli();
    2c94:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_ACCELERATION_ADDR, acceleration);			//Time to max acceleration in 100ms/unit
    2c96:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <acceleration>
    2c9a:	84 e1       	ldi	r24, 0x14	; 20
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    2ca2:	ef ec       	ldi	r30, 0xCF	; 207
    2ca4:	f1 e0       	ldi	r31, 0x01	; 1
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 23       	and	r24, r24
    2caa:	ec f3       	brlt	.-6      	; 0x2ca6 <update_accel_settings+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2cac:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2cb0:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2cb4:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2cb8:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2cbc:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2cc0:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2cc4:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2cc8:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2ccc:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2cd0:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2cd4:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2cd8:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2cdc:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_ACCELERATION_ADDR, acceleration);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2ce0:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2ce4:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2ce8:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2cec:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2cf0:	6f 25       	eor	r22, r15
    2cf2:	6f 27       	eor	r22, r31
    2cf4:	6e 27       	eor	r22, r30
    2cf6:	67 27       	eor	r22, r23
    2cf8:	65 27       	eor	r22, r21
    2cfa:	64 27       	eor	r22, r20
    2cfc:	63 27       	eor	r22, r19
    2cfe:	62 27       	eor	r22, r18
    2d00:	80 27       	eor	r24, r16
    2d02:	8d 27       	eor	r24, r29
    2d04:	8b 27       	eor	r24, r27
    2d06:	68 27       	eor	r22, r24
    2d08:	8f e1       	ldi	r24, 0x1F	; 31
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>

	sei();
    2d10:	78 94       	sei
}
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	ff 90       	pop	r15
    2d1c:	08 95       	ret

00002d1e <update_decel_settings>:
void update_decel_settings(void)
{
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
	cli();
    2d28:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_DECELERATION_ADDR, deceleration);			//Time to max acceleration in 100ms/unit
    2d2a:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2d2e:	85 e1       	ldi	r24, 0x15	; 21
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    2d36:	ef ec       	ldi	r30, 0xCF	; 207
    2d38:	f1 e0       	ldi	r31, 0x01	; 1
    2d3a:	80 81       	ld	r24, Z
    2d3c:	88 23       	and	r24, r24
    2d3e:	ec f3       	brlt	.-6      	; 0x2d3a <update_decel_settings+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2d40:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2d44:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2d48:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2d4c:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2d50:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2d54:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2d58:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2d5c:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2d60:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2d64:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2d68:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2d6c:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2d70:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_DECELERATION_ADDR, deceleration);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2d74:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2d78:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2d7c:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2d80:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2d84:	6f 25       	eor	r22, r15
    2d86:	6f 27       	eor	r22, r31
    2d88:	6e 27       	eor	r22, r30
    2d8a:	67 27       	eor	r22, r23
    2d8c:	65 27       	eor	r22, r21
    2d8e:	64 27       	eor	r22, r20
    2d90:	63 27       	eor	r22, r19
    2d92:	62 27       	eor	r22, r18
    2d94:	80 27       	eor	r24, r16
    2d96:	8d 27       	eor	r24, r29
    2d98:	8b 27       	eor	r24, r27
    2d9a:	68 27       	eor	r22, r24
    2d9c:	8f e1       	ldi	r24, 0x1F	; 31
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    2da4:	78 94       	sei
}
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	1f 91       	pop	r17
    2dac:	0f 91       	pop	r16
    2dae:	ff 90       	pop	r15
    2db0:	08 95       	ret

00002db2 <update_break_delay_settings>:
void update_break_delay_settings(void)
{
    2db2:	ff 92       	push	r15
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
	cli();
    2dbc:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY_ADDR, brake_delay);			//Time to max acceleration in 100ms/unit
    2dbe:	60 91 27 20 	lds	r22, 0x2027	; 0x802027 <brake_delay>
    2dc2:	80 e1       	ldi	r24, 0x10	; 16
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    2dca:	ef ec       	ldi	r30, 0xCF	; 207
    2dcc:	f1 e0       	ldi	r31, 0x01	; 1
    2dce:	80 81       	ld	r24, Z
    2dd0:	88 23       	and	r24, r24
    2dd2:	ec f3       	brlt	.-6      	; 0x2dce <update_break_delay_settings+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2dd4:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2dd8:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2ddc:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2de0:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2de4:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2de8:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2dec:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2df0:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2df4:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2df8:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2dfc:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2e00:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2e04:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_BRAKE_DELAY_ADDR, brake_delay);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2e08:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2e0c:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2e10:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2e14:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2e18:	6f 25       	eor	r22, r15
    2e1a:	6f 27       	eor	r22, r31
    2e1c:	6e 27       	eor	r22, r30
    2e1e:	67 27       	eor	r22, r23
    2e20:	65 27       	eor	r22, r21
    2e22:	64 27       	eor	r22, r20
    2e24:	63 27       	eor	r22, r19
    2e26:	62 27       	eor	r22, r18
    2e28:	80 27       	eor	r24, r16
    2e2a:	8d 27       	eor	r24, r29
    2e2c:	8b 27       	eor	r24, r27
    2e2e:	68 27       	eor	r22, r24
    2e30:	8f e1       	ldi	r24, 0x1F	; 31
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    2e38:	78 94       	sei
}
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	ff 90       	pop	r15
    2e44:	08 95       	ret

00002e46 <update_reverse_speed>:
void update_reverse_speed(void)
{
    2e46:	ff 92       	push	r15
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
	cli();
    2e50:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED_ADDR, reverse_speed);			//Time to max acceleration in 100ms/unit
    2e52:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <reverse_speed>
    2e56:	81 e1       	ldi	r24, 0x11	; 17
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    2e5e:	ef ec       	ldi	r30, 0xCF	; 207
    2e60:	f1 e0       	ldi	r31, 0x01	; 1
    2e62:	80 81       	ld	r24, Z
    2e64:	88 23       	and	r24, r24
    2e66:	ec f3       	brlt	.-6      	; 0x2e62 <update_reverse_speed+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2e68:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2e6c:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2e70:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2e74:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2e78:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2e7c:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2e80:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2e84:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2e88:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2e8c:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2e90:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2e94:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2e98:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_REVERSE_SPEED_ADDR, reverse_speed);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2e9c:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2ea0:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2ea4:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2ea8:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2eac:	6f 25       	eor	r22, r15
    2eae:	6f 27       	eor	r22, r31
    2eb0:	6e 27       	eor	r22, r30
    2eb2:	67 27       	eor	r22, r23
    2eb4:	65 27       	eor	r22, r21
    2eb6:	64 27       	eor	r22, r20
    2eb8:	63 27       	eor	r22, r19
    2eba:	62 27       	eor	r22, r18
    2ebc:	80 27       	eor	r24, r16
    2ebe:	8d 27       	eor	r24, r29
    2ec0:	8b 27       	eor	r24, r27
    2ec2:	68 27       	eor	r22, r24
    2ec4:	8f e1       	ldi	r24, 0x1F	; 31
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    2ecc:	78 94       	sei
}
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	08 95       	ret

00002eda <update_fast_speed>:
void update_fast_speed(void)
{
    2eda:	ff 92       	push	r15
    2edc:	0f 93       	push	r16
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
	cli();
    2ee4:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED_ADDR, fast_speed);			//Time to max acceleration in 100ms/unit
    2ee6:	60 91 14 21 	lds	r22, 0x2114	; 0x802114 <fast_speed>
    2eea:	82 e1       	ldi	r24, 0x12	; 18
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    2ef2:	ef ec       	ldi	r30, 0xCF	; 207
    2ef4:	f1 e0       	ldi	r31, 0x01	; 1
    2ef6:	80 81       	ld	r24, Z
    2ef8:	88 23       	and	r24, r24
    2efa:	ec f3       	brlt	.-6      	; 0x2ef6 <update_fast_speed+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2efc:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2f00:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2f04:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2f08:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2f0c:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2f10:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2f14:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2f18:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2f1c:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2f20:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2f24:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2f28:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2f2c:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_FAST_SPEED_ADDR, fast_speed);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2f30:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2f34:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2f38:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2f3c:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2f40:	6f 25       	eor	r22, r15
    2f42:	6f 27       	eor	r22, r31
    2f44:	6e 27       	eor	r22, r30
    2f46:	67 27       	eor	r22, r23
    2f48:	65 27       	eor	r22, r21
    2f4a:	64 27       	eor	r22, r20
    2f4c:	63 27       	eor	r22, r19
    2f4e:	62 27       	eor	r22, r18
    2f50:	80 27       	eor	r24, r16
    2f52:	8d 27       	eor	r24, r29
    2f54:	8b 27       	eor	r24, r27
    2f56:	68 27       	eor	r22, r24
    2f58:	8f e1       	ldi	r24, 0x1F	; 31
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    2f60:	78 94       	sei
}
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	08 95       	ret

00002f6e <update_slow_speed>:
void update_slow_speed(void)
{
    2f6e:	ff 92       	push	r15
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
	cli();
    2f78:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED_ADDR, slow_speed);			//Time to max acceleration in 100ms/unit
    2f7a:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <slow_speed>
    2f7e:	83 e1       	ldi	r24, 0x13	; 19
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    2f86:	ef ec       	ldi	r30, 0xCF	; 207
    2f88:	f1 e0       	ldi	r31, 0x01	; 1
    2f8a:	80 81       	ld	r24, Z
    2f8c:	88 23       	and	r24, r24
    2f8e:	ec f3       	brlt	.-6      	; 0x2f8a <update_slow_speed+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2f90:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    2f94:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    2f98:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    2f9c:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    2fa0:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    2fa4:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    2fa8:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    2fac:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    2fb0:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    2fb4:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    2fb8:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    2fbc:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    2fc0:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_SLOW_SPEED_ADDR, slow_speed);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    2fc4:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    2fc8:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    2fcc:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    2fd0:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    2fd4:	6f 25       	eor	r22, r15
    2fd6:	6f 27       	eor	r22, r31
    2fd8:	6e 27       	eor	r22, r30
    2fda:	67 27       	eor	r22, r23
    2fdc:	65 27       	eor	r22, r21
    2fde:	64 27       	eor	r22, r20
    2fe0:	63 27       	eor	r22, r19
    2fe2:	62 27       	eor	r22, r18
    2fe4:	80 27       	eor	r24, r16
    2fe6:	8d 27       	eor	r24, r29
    2fe8:	8b 27       	eor	r24, r27
    2fea:	68 27       	eor	r22, r24
    2fec:	8f e1       	ldi	r24, 0x1F	; 31
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    2ff4:	78 94       	sei
}
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	08 95       	ret

00003002 <update_current_rating>:
void update_current_rating(void)
{
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
	cli();
    300c:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING_ADDR, rated_current);			//Time to max acceleration in 100ms/unit
    300e:	60 91 0d 21 	lds	r22, 0x210D	; 0x80210d <rated_current>
    3012:	86 e1       	ldi	r24, 0x16	; 22
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    301a:	ef ec       	ldi	r30, 0xCF	; 207
    301c:	f1 e0       	ldi	r31, 0x01	; 1
    301e:	80 81       	ld	r24, Z
    3020:	88 23       	and	r24, r24
    3022:	ec f3       	brlt	.-6      	; 0x301e <update_current_rating+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    3024:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    3028:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    302c:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    3030:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    3034:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    3038:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    303c:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    3040:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    3044:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    3048:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    304c:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    3050:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    3054:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_CURRENT_RATING_ADDR, rated_current);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    3058:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    305c:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    3060:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    3064:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    3068:	6f 25       	eor	r22, r15
    306a:	6f 27       	eor	r22, r31
    306c:	6e 27       	eor	r22, r30
    306e:	67 27       	eor	r22, r23
    3070:	65 27       	eor	r22, r21
    3072:	64 27       	eor	r22, r20
    3074:	63 27       	eor	r22, r19
    3076:	62 27       	eor	r22, r18
    3078:	80 27       	eor	r24, r16
    307a:	8d 27       	eor	r24, r29
    307c:	8b 27       	eor	r24, r27
    307e:	68 27       	eor	r22, r24
    3080:	8f e1       	ldi	r24, 0x1F	; 31
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    3088:	78 94       	sei
}
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	ff 90       	pop	r15
    3094:	08 95       	ret

00003096 <update_max_current>:
void update_max_current(void)
{
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
	cli();
    30a0:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT_ADDR, max_current);			//Time to max acceleration in 100ms/unit
    30a2:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <max_current>
    30a6:	87 e1       	ldi	r24, 0x17	; 23
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    30ae:	ef ec       	ldi	r30, 0xCF	; 207
    30b0:	f1 e0       	ldi	r31, 0x01	; 1
    30b2:	80 81       	ld	r24, Z
    30b4:	88 23       	and	r24, r24
    30b6:	ec f3       	brlt	.-6      	; 0x30b2 <update_max_current+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    30b8:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    30bc:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    30c0:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    30c4:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    30c8:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    30cc:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    30d0:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    30d4:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    30d8:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    30dc:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    30e0:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    30e4:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    30e8:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_MAX_CURRENT_ADDR, max_current);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    30ec:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    30f0:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    30f4:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    30f8:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    30fc:	6f 25       	eor	r22, r15
    30fe:	6f 27       	eor	r22, r31
    3100:	6e 27       	eor	r22, r30
    3102:	67 27       	eor	r22, r23
    3104:	65 27       	eor	r22, r21
    3106:	64 27       	eor	r22, r20
    3108:	63 27       	eor	r22, r19
    310a:	62 27       	eor	r22, r18
    310c:	80 27       	eor	r24, r16
    310e:	8d 27       	eor	r24, r29
    3110:	8b 27       	eor	r24, r27
    3112:	68 27       	eor	r22, r24
    3114:	8f e1       	ldi	r24, 0x1F	; 31
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    311c:	78 94       	sei
}
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	ff 90       	pop	r15
    3128:	08 95       	ret

0000312a <update_over_current_time>:
void update_over_current_time(void)
{
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
	cli();
    3134:	f8 94       	cli
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME_ADDR, full_overload_time);			//Time to max acceleration in 100ms/unit
    3136:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <full_overload_time>
    313a:	88 e1       	ldi	r24, 0x18	; 24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	eeprom_busy_wait();
    3142:	ef ec       	ldi	r30, 0xCF	; 207
    3144:	f1 e0       	ldi	r31, 0x01	; 1
    3146:	80 81       	ld	r24, Z
    3148:	88 23       	and	r24, r24
    314a:	ec f3       	brlt	.-6      	; 0x3146 <update_over_current_time+0x1c>
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    314c:	f0 90 2e 21 	lds	r15, 0x212E	; 0x80212e <acceleration>
    3150:	60 91 08 21 	lds	r22, 0x2108	; 0x802108 <deceleration>
    3154:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <brake_delay>
    3158:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <reverse_speed>
    315c:	70 91 26 20 	lds	r23, 0x2026	; 0x802026 <slow_speed>
    3160:	50 91 14 21 	lds	r21, 0x2114	; 0x802114 <fast_speed>
    3164:	40 91 0d 21 	lds	r20, 0x210D	; 0x80210d <rated_current>
    3168:	30 91 01 21 	lds	r19, 0x2101	; 0x802101 <max_current>
    316c:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <full_overload_time>
    3170:	00 91 6e 20 	lds	r16, 0x206E	; 0x80206e <pot_low_deadband>
    3174:	10 91 6f 20 	lds	r17, 0x206F	; 0x80206f <pot_low_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
    3178:	c0 91 6e 20 	lds	r28, 0x206E	; 0x80206e <pot_low_deadband>
    317c:	d0 91 6f 20 	lds	r29, 0x206F	; 0x80206f <pot_low_deadband+0x1>
{
	cli();
	//Set default settings for RB values
	eeprom_update_byte((uint8_t *)EEP8_OVERLOAD_TIME_ADDR, full_overload_time);			//Time to max acceleration in 100ms/unit
	eeprom_busy_wait();
	uint8_t checksum = acceleration ^ deceleration ^ brake_delay ^ reverse_speed ^ slow_speed ^ fast_speed
    3180:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <pot_high_deadband>
    3184:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <pot_high_deadband+0x1>
		^ rated_current ^ max_current ^ full_overload_time
		^ ((uint8_t)pot_low_deadband & 0xFF) ^ ((uint8_t)(pot_low_deadband >> 8))
		^ ((uint8_t)pot_high_deadband & 0xFF) ^ ((uint8_t)(pot_high_deadband >> 8));
    3188:	a0 91 31 21 	lds	r26, 0x2131	; 0x802131 <pot_high_deadband>
    318c:	b0 91 32 21 	lds	r27, 0x2132	; 0x802132 <pot_high_deadband+0x1>
	eeprom_update_byte((uint8_t *)EEP8_CHECKSUM_ADDR, checksum); // Checksum of settings
    3190:	6f 25       	eor	r22, r15
    3192:	6f 27       	eor	r22, r31
    3194:	6e 27       	eor	r22, r30
    3196:	67 27       	eor	r22, r23
    3198:	65 27       	eor	r22, r21
    319a:	64 27       	eor	r22, r20
    319c:	63 27       	eor	r22, r19
    319e:	62 27       	eor	r22, r18
    31a0:	80 27       	eor	r24, r16
    31a2:	8d 27       	eor	r24, r29
    31a4:	8b 27       	eor	r24, r27
    31a6:	68 27       	eor	r22, r24
    31a8:	8f e1       	ldi	r24, 0x1F	; 31
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 fd 24 	call	0x49fa	; 0x49fa <eeprom_update_byte>
	sei();
    31b0:	78 94       	sei
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	08 95       	ret

000031be <initialize>:
	}
}

void initialize(void)
{
	initialize_SPI();
    31be:	0e 94 9c 19 	call	0x3338	; 0x3338 <initialize_SPI>
	initialize_32Mhz();
    31c2:	0e 94 0e 1a 	call	0x341c	; 0x341c <initialize_32Mhz>
    31c6:	2f ef       	ldi	r18, 0xFF	; 255
    31c8:	37 ea       	ldi	r19, 0xA7	; 167
    31ca:	81 e6       	ldi	r24, 0x61	; 97
    31cc:	21 50       	subi	r18, 0x01	; 1
    31ce:	30 40       	sbci	r19, 0x00	; 0
    31d0:	80 40       	sbci	r24, 0x00	; 0
    31d2:	e1 f7       	brne	.-8      	; 0x31cc <initialize+0xe>
    31d4:	00 c0       	rjmp	.+0      	; 0x31d6 <initialize+0x18>
    31d6:	00 00       	nop
	//1 second delay to make sure power has settled
	//Without this delay EEPROM could get corrupted when initially reading
	_delay_ms(1000);

	PORTD_DIRSET = (1 << ACTIVITY_LED);
    31d8:	84 e0       	ldi	r24, 0x04	; 4
    31da:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	ACTIVITY_LED_ON;
    31de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    31e2:	9f ef       	ldi	r25, 0xFF	; 255
    31e4:	27 ea       	ldi	r18, 0xA7	; 167
    31e6:	31 e6       	ldi	r19, 0x61	; 97
    31e8:	91 50       	subi	r25, 0x01	; 1
    31ea:	20 40       	sbci	r18, 0x00	; 0
    31ec:	30 40       	sbci	r19, 0x00	; 0
    31ee:	e1 f7       	brne	.-8      	; 0x31e8 <initialize+0x2a>
    31f0:	00 c0       	rjmp	.+0      	; 0x31f2 <initialize+0x34>
    31f2:	00 00       	nop
	_delay_ms(1000);
	ACTIVITY_LED_OFF;
    31f4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

	//Reset CAN controller
	PORTC_OUTSET = (1 << CAN_RST);
    31f8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	CQ_initialize();
    31fc:	0e 94 cb 07 	call	0xf96	; 0xf96 <CQ_initialize>
	initialize_ADC();
    3200:	0e 94 a9 01 	call	0x352	; 0x352 <initialize_ADC>
	measure_v_off();
    3204:	0e 94 4c 04 	call	0x898	; 0x898 <measure_v_off>
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	99 ef       	ldi	r25, 0xF9	; 249
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	81 50       	subi	r24, 0x01	; 1
    3210:	90 40       	sbci	r25, 0x00	; 0
    3212:	20 40       	sbci	r18, 0x00	; 0
    3214:	e1 f7       	brne	.-8      	; 0x320e <initialize+0x50>
    3216:	00 c0       	rjmp	.+0      	; 0x3218 <initialize+0x5a>
    3218:	00 00       	nop
	_delay_ms(10);

	// Enable internal pull-up on PC0, PC1
	PORTCFG.MPCMASK = 0x03; // Configure several PINxCTRL registers at the same time
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	PORTC.PIN0CTRL = PORT_OPC_PULLUP_gc; //Enable pull-up to get a defined level on the switches
    3220:	88 e1       	ldi	r24, 0x18	; 24
    3222:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>

	//Initialize the TWI master module using the TWIC port
	TWI_MasterInit(&twiMaster,
    3226:	2b e9       	ldi	r18, 0x9B	; 155
    3228:	40 e4       	ldi	r20, 0x40	; 64
    322a:	60 e8       	ldi	r22, 0x80	; 128
    322c:	74 e0       	ldi	r23, 0x04	; 4
    322e:	84 e7       	ldi	r24, 0x74	; 116
    3230:	90 e2       	ldi	r25, 0x20	; 32
    3232:	0e 94 05 21 	call	0x420a	; 0x420a <TWI_MasterInit>
		&TWIC,
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING);

	initialize_RB_settings();
    3236:	0e 94 57 14 	call	0x28ae	; 0x28ae <initialize_RB_settings>

	//Enable low level interrupts
	PMIC_CTRL = 0x07;
    323a:	87 e0       	ldi	r24, 0x07	; 7
    323c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//Enable global interrupts
	sei();
    3240:	78 94       	sei

	initialize_CAN();
    3242:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <initialize_CAN>
	initialize_Screen();
    3246:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <initialize_Screen>

	initialize_motor();
    324a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <initialize_motor>
	initialize_timers();
    324e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <initialize_timers>

	check_initial_switch_counter = ON;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <check_initial_switch_counter>
#ifndef __SIM__ //IVA002: Donot send reset CAN in simulator
	send_reset_CAN();
    3258:	0e 94 12 0a 	call	0x1424	; 0x1424 <send_reset_CAN>
    325c:	08 95       	ret

0000325e <main>:


int main(void)
{
	//Reset CAN controller
	PORTC_DIRSET = (1 << CAN_RST);
    325e:	84 e0       	ldi	r24, 0x04	; 4
    3260:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	PORTC_OUTCLR = (1 << CAN_RST);
    3264:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>

	initialize();
    3268:	0e 94 df 18 	call	0x31be	; 0x31be <initialize>
	*/
	//IDLE_LOOP
	while (true)
	{
		//Measure pedal level and current constantly
		measure_accelerator_pedal();
    326c:	0e 94 c4 01 	call	0x388	; 0x388 <measure_accelerator_pedal>
		measure_motor_current();
    3270:	0e 94 ae 02 	call	0x55c	; 0x55c <measure_motor_current>

		//Update the pedal level every 200 ms
		if (_100_ms_check > 2 && can_functioning == TRUE && can_test_timer == OFF && emergency_stop_motor == FALSE)
    3274:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <_100_ms_check>
    3278:	83 30       	cpi	r24, 0x03	; 3
    327a:	80 f0       	brcs	.+32     	; 0x329c <main+0x3e>
    327c:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    3280:	81 30       	cpi	r24, 0x01	; 1
    3282:	61 f4       	brne	.+24     	; 0x329c <main+0x3e>
    3284:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <can_test_timer>
    3288:	81 11       	cpse	r24, r1
    328a:	08 c0       	rjmp	.+16     	; 0x329c <main+0x3e>
    328c:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    3290:	81 11       	cpse	r24, r1
    3292:	04 c0       	rjmp	.+8      	; 0x329c <main+0x3e>
		{
			update_pedal_level();
    3294:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <update_pedal_level>
			_100_ms_check = FALSE;
    3298:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <_100_ms_check>
		}

		if (!CQRx_queueIsEmpty() && CAN_on)
    329c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <CQRx_queueIsEmpty>
    32a0:	81 11       	cpse	r24, r1
    32a2:	08 c0       	rjmp	.+16     	; 0x32b4 <main+0x56>
    32a4:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <CAN_on>
    32a8:	88 23       	and	r24, r24
    32aa:	21 f0       	breq	.+8      	; 0x32b4 <main+0x56>
		{
			CQRx_dequeue();
    32ac:	0e 94 37 08 	call	0x106e	; 0x106e <CQRx_dequeue>
			reset_CAN_error();
    32b0:	0e 94 08 07 	call	0xe10	; 0xe10 <reset_CAN_error>
		}

		//Log drive current every minute
		if (log_current_counter >= 60 && pedal_state == ON)
    32b4:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <log_current_counter>
    32b8:	8c 33       	cpi	r24, 0x3C	; 60
    32ba:	50 f0       	brcs	.+20     	; 0x32d0 <main+0x72>
    32bc:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    32c0:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	21 f4       	brne	.+8      	; 0x32d0 <main+0x72>
		{
			send_drive_motor_current();
    32c8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <send_drive_motor_current>
			log_current_counter = 0;
    32cc:	10 92 72 20 	sts	0x2072, r1	; 0x802072 <log_current_counter>
		}

		//Log max drive current every 5 minutes
		if (log_max_current_counter >= 302)
    32d0:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <log_max_current_counter>
    32d4:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <log_max_current_counter+0x1>
    32d8:	8e 32       	cpi	r24, 0x2E	; 46
    32da:	91 40       	sbci	r25, 0x01	; 1
    32dc:	38 f2       	brcs	.-114    	; 0x326c <main+0xe>
		{
			send_max_drive_motor_current();
    32de:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <send_max_drive_motor_current>
			log_max_current_counter = 0;
    32e2:	10 92 57 20 	sts	0x2057, r1	; 0x802057 <log_max_current_counter>
    32e6:	10 92 58 20 	sts	0x2058, r1	; 0x802058 <log_max_current_counter+0x1>
    32ea:	c0 cf       	rjmp	.-128    	; 0x326c <main+0xe>

000032ec <__vector_13>:
	send_reset_CAN();
#endif // !__SIM__
}

ISR(TWIC_TWIM_vect)
{
    32ec:	1f 92       	push	r1
    32ee:	0f 92       	push	r0
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	0f 92       	push	r0
    32f4:	11 24       	eor	r1, r1
    32f6:	2f 93       	push	r18
    32f8:	3f 93       	push	r19
    32fa:	4f 93       	push	r20
    32fc:	5f 93       	push	r21
    32fe:	6f 93       	push	r22
    3300:	7f 93       	push	r23
    3302:	8f 93       	push	r24
    3304:	9f 93       	push	r25
    3306:	af 93       	push	r26
    3308:	bf 93       	push	r27
    330a:	ef 93       	push	r30
    330c:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
    330e:	84 e7       	ldi	r24, 0x74	; 116
    3310:	90 e2       	ldi	r25, 0x20	; 32
    3312:	0e 94 1a 22 	call	0x4434	; 0x4434 <TWI_MasterInterruptHandler>
}
    3316:	ff 91       	pop	r31
    3318:	ef 91       	pop	r30
    331a:	bf 91       	pop	r27
    331c:	af 91       	pop	r26
    331e:	9f 91       	pop	r25
    3320:	8f 91       	pop	r24
    3322:	7f 91       	pop	r23
    3324:	6f 91       	pop	r22
    3326:	5f 91       	pop	r21
    3328:	4f 91       	pop	r20
    332a:	3f 91       	pop	r19
    332c:	2f 91       	pop	r18
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <initialize_SPI>:
uint8_t write_read_byte_SPI(uint8_t _byte)
{
	write_byte_SPI(_byte);
	uint8_t byte = CAN_SPI_BUS.DATA;
	return byte;
}
    3338:	e1 e4       	ldi	r30, 0x41	; 65
    333a:	f6 e0       	ldi	r31, 0x06	; 6
    333c:	80 e1       	ldi	r24, 0x10	; 16
    333e:	80 83       	st	Z, r24
    3340:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    3344:	80 e2       	ldi	r24, 0x20	; 32
    3346:	80 83       	st	Z, r24
    3348:	80 e8       	ldi	r24, 0x80	; 128
    334a:	80 83       	st	Z, r24
    334c:	82 ed       	ldi	r24, 0xD2	; 210
    334e:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    3352:	08 95       	ret

00003354 <write_byte_SPI>:
    3354:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    3358:	89 ee       	ldi	r24, 0xE9	; 233
    335a:	9d ef       	ldi	r25, 0xFD	; 253
    335c:	e0 ec       	ldi	r30, 0xC0	; 192
    335e:	f8 e0       	ldi	r31, 0x08	; 8
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <write_byte_SPI+0x12>
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	19 f0       	breq	.+6      	; 0x336c <write_byte_SPI+0x18>
    3366:	22 81       	ldd	r18, Z+2	; 0x02
    3368:	22 23       	and	r18, r18
    336a:	dc f7       	brge	.-10     	; 0x3362 <write_byte_SPI+0xe>
    336c:	08 95       	ret

0000336e <write_bytes_SPI>:

//Writes the number of specified byte from the array to the SPI bus
void write_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
    336e:	0f 93       	push	r16
    3370:	1f 93       	push	r17
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
	for (int i = 0; i < num_bytes; i++)
    3376:	66 23       	and	r22, r22
    3378:	51 f0       	breq	.+20     	; 0x338e <write_bytes_SPI+0x20>
    337a:	8c 01       	movw	r16, r24
    337c:	ec 01       	movw	r28, r24
    337e:	06 0f       	add	r16, r22
    3380:	11 1d       	adc	r17, r1
	{
		write_byte_SPI(bytes[i]);
    3382:	89 91       	ld	r24, Y+
    3384:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
}

//Writes the number of specified byte from the array to the SPI bus
void write_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
    3388:	c0 17       	cp	r28, r16
    338a:	d1 07       	cpc	r29, r17
    338c:	d1 f7       	brne	.-12     	; 0x3382 <write_bytes_SPI+0x14>
	{
		write_byte_SPI(bytes[i]);
	}
}
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	08 95       	ret

00003398 <read_bytes_SPI>:

//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
	for (int i = 0; i < num_bytes; i++)
    33a4:	66 23       	and	r22, r22
    33a6:	99 f0       	breq	.+38     	; 0x33ce <read_bytes_SPI+0x36>
    33a8:	8c 01       	movw	r16, r24
    33aa:	ec 01       	movw	r28, r24
    33ac:	06 0f       	add	r16, r22
    33ae:	11 1d       	adc	r17, r1

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI(uint8_t _byte)
{
	write_byte_SPI(_byte);
	uint8_t byte = CAN_SPI_BUS.DATA;
    33b0:	0f 2e       	mov	r0, r31
    33b2:	f0 ec       	ldi	r31, 0xC0	; 192
    33b4:	ef 2e       	mov	r14, r31
    33b6:	f8 e0       	ldi	r31, 0x08	; 8
    33b8:	ff 2e       	mov	r15, r31
    33ba:	f0 2d       	mov	r31, r0
}

//Reads a single byte from the SPI bus
uint8_t write_read_byte_SPI(uint8_t _byte)
{
	write_byte_SPI(_byte);
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	0e 94 aa 19 	call	0x3354	; 0x3354 <write_byte_SPI>
	uint8_t byte = CAN_SPI_BUS.DATA;
    33c2:	f7 01       	movw	r30, r14
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
	{
		bytes[i] = write_read_byte_SPI(0x00);
    33c6:	99 93       	st	Y+, r25
}

//Reads the number of specified bytes to the array from the SPI bus
void read_bytes_SPI(uint8_t bytes[], uint8_t num_bytes)
{
	for (int i = 0; i < num_bytes; i++)
    33c8:	c0 17       	cp	r28, r16
    33ca:	d1 07       	cpc	r29, r17
    33cc:	b9 f7       	brne	.-18     	; 0x33bc <read_bytes_SPI+0x24>
	{
		bytes[i] = write_read_byte_SPI(0x00);
	}
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	08 95       	ret

000033dc <initialize_timers>:

void initialize_timers(void)
{
	//Second timer
	//Enable timer 0 with /1024 prescalar
	TCC0.CTRLA = 0x07;
    33dc:	e0 e0       	ldi	r30, 0x00	; 0
    33de:	f8 e0       	ldi	r31, 0x08	; 8
    33e0:	97 e0       	ldi	r25, 0x07	; 7
    33e2:	90 83       	st	Z, r25
	//Enable Compare A interrupt
	TCC0.INTCTRLB = 0x01;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CCA = 31250;
    33e8:	22 e1       	ldi	r18, 0x12	; 18
    33ea:	3a e7       	ldi	r19, 0x7A	; 122
    33ec:	20 a7       	std	Z+40, r18	; 0x28
    33ee:	31 a7       	std	Z+41, r19	; 0x29

	//Motor Update & e-Brake Timer
	//100 msec timer
	//Enable timer 0 with /256 prescalar
	TCC1.CTRLA = 0x06;
    33f0:	e0 e4       	ldi	r30, 0x40	; 64
    33f2:	f8 e0       	ldi	r31, 0x08	; 8
    33f4:	26 e0       	ldi	r18, 0x06	; 6
    33f6:	20 83       	st	Z, r18
	//Enable Compare A interrupt
	TCC1.INTCTRLB = 0x01;
    33f8:	87 83       	std	Z+7, r24	; 0x07
	TCC1.CCA = 12500;
    33fa:	24 ed       	ldi	r18, 0xD4	; 212
    33fc:	30 e3       	ldi	r19, 0x30	; 48
    33fe:	20 a7       	std	Z+40, r18	; 0x28
    3400:	31 a7       	std	Z+41, r19	; 0x29

//IVA002: Added for CAN Tx Queue
	//25 ms CAN TX timer
	//Enable timer 0 with /1024 prescalar
	TCD1.CTRLA = 0x07;
    3402:	e0 e4       	ldi	r30, 0x40	; 64
    3404:	f9 e0       	ldi	r31, 0x09	; 9
    3406:	90 83       	st	Z, r25
	//Enable Compare A interrupt
	TCD1.INTCTRLB = 0x01;
    3408:	87 83       	std	Z+7, r24	; 0x07
	TCD1.CCA = 781;
    340a:	8d e0       	ldi	r24, 0x0D	; 13
    340c:	93 e0       	ldi	r25, 0x03	; 3
    340e:	80 a7       	std	Z+40, r24	; 0x28
    3410:	91 a7       	std	Z+41, r25	; 0x29

	overcurrent = FALSE;
    3412:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <overcurrent>
	overcurrent_count = 0;
    3416:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <overcurrent_count>
    341a:	08 95       	ret

0000341c <initialize_32Mhz>:
//Enabling the 32 Mhz clock will change the system clock to 8 Mhz
//The 32 Mhz clock goes through a /4 before the system clock
void initialize_32Mhz(void)
{
	//Enable the 32 Mhz clock
	OSC.CTRL |= 0x02;
    341c:	e0 e5       	ldi	r30, 0x50	; 80
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	82 60       	ori	r24, 0x02	; 2
    3424:	80 83       	st	Z, r24
	//Wait for the clock to stabilize
	while (!(OSC.STATUS & 0x02));
    3426:	81 81       	ldd	r24, Z+1	; 0x01
    3428:	81 ff       	sbrs	r24, 1
    342a:	fd cf       	rjmp	.-6      	; 0x3426 <initialize_32Mhz+0xa>
	//Protect the Io registers
	CCP = CCP_IOREG_gc;
    342c:	88 ed       	ldi	r24, 0xD8	; 216
    342e:	84 bf       	out	0x34, r24	; 52
	//Set the clock to the 32 Mhz clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    3436:	08 95       	ret

00003438 <__vector_16>:
}

ISR(SECOND_INT)
{
    3438:	1f 92       	push	r1
    343a:	0f 92       	push	r0
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	0f 92       	push	r0
    3440:	11 24       	eor	r1, r1
    3442:	2f 93       	push	r18
    3444:	3f 93       	push	r19
    3446:	4f 93       	push	r20
    3448:	5f 93       	push	r21
    344a:	6f 93       	push	r22
    344c:	7f 93       	push	r23
    344e:	8f 93       	push	r24
    3450:	9f 93       	push	r25
    3452:	af 93       	push	r26
    3454:	bf 93       	push	r27
    3456:	ef 93       	push	r30
    3458:	ff 93       	push	r31
	TCC0.CNT = 0;
    345a:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    345e:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>

	log_current_counter++;
    3462:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <log_current_counter>
    3466:	8f 5f       	subi	r24, 0xFF	; 255
    3468:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <log_current_counter>
	log_max_current_counter++;
    346c:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <log_max_current_counter>
    3470:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <log_max_current_counter+0x1>
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <log_max_current_counter>
    347a:	90 93 58 20 	sts	0x2058, r25	; 0x802058 <log_max_current_counter+0x1>
	//pedal not functioning means check for 5 sec then indicate error to A1 board 
	if (pedal_5_sec_timer_on)
    347e:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <pedal_5_sec_timer_on>
    3482:	88 23       	and	r24, r24
    3484:	29 f0       	breq	.+10     	; 0x3490 <__vector_16+0x58>
	{
		pedal_5_sec_timer++;
    3486:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <pedal_5_sec_timer>
    348a:	8f 5f       	subi	r24, 0xFF	; 255
    348c:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <pedal_5_sec_timer>
	}
	//The last current measurement was over the rated limit begin counting to see how long the overcurrent persists
	if (overcurrent)
    3490:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <overcurrent>
    3494:	88 23       	and	r24, r24
    3496:	79 f0       	breq	.+30     	; 0x34b6 <__vector_16+0x7e>
	{
		//If the time spent during overcurrent surpasses the maximum set time for overcurrent
		//Stop the motor
		if (++overcurrent_count > overload_time)
    3498:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <overcurrent_count>
    349c:	8f 5f       	subi	r24, 0xFF	; 255
    349e:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <overcurrent_count>
    34a2:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <overload_time>
    34a6:	98 17       	cp	r25, r24
    34a8:	40 f4       	brcc	.+16     	; 0x34ba <__vector_16+0x82>
		{
			emergency_stop_motor = PERMANENT;
    34aa:	83 e0       	ldi	r24, 0x03	; 3
    34ac:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
			send_overcurrent_error();
    34b0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <send_overcurrent_error>
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <__vector_16+0x82>
		}
	}
	else
	{
		overcurrent_count = 0;
    34b6:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <overcurrent_count>
	}
	//Send pedal error if it occurs
	if (manual_mode && can_functioning == TRUE)
    34ba:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <manual_mode>
    34be:	88 23       	and	r24, r24
    34c0:	01 f1       	breq	.+64     	; 0x3502 <__vector_16+0xca>
    34c2:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	e1 f4       	brne	.+56     	; 0x3502 <__vector_16+0xca>
	{
		send_pedal_error(MANUAL_SWITCH_CLOSED);
    34ca:	85 e0       	ldi	r24, 0x05	; 5
    34cc:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
		emergency_stop_motor = TRUE;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
		electrobrake_counter = ON;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    34de:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
		REVERSE_BUZZER_OFF;
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		pedal_level = OFF;
    34e8:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    34ec:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
		pedal_state = OFF;
    34f0:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <pedal_state>
    34f4:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <pedal_state+0x1>
		update_pedal_state();
    34f8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <update_pedal_state>
		manual_mode = FALSE;
    34fc:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <manual_mode>
    3500:	35 c0       	rjmp	.+106    	; 0x356c <__vector_16+0x134>
	}
	else if (manual_mode && can_functioning == FALSE && direction == UNTESTED)
    3502:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <manual_mode>
    3506:	88 23       	and	r24, r24
    3508:	89 f1       	breq	.+98     	; 0x356c <__vector_16+0x134>
    350a:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    350e:	81 11       	cpse	r24, r1
    3510:	2d c0       	rjmp	.+90     	; 0x356c <__vector_16+0x134>
    3512:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    3516:	83 30       	cpi	r24, 0x03	; 3
    3518:	49 f5       	brne	.+82     	; 0x356c <__vector_16+0x134>
	{
		if (!(PORTA_IN & (1 << FWR_SW)))
    351a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    351e:	85 fd       	sbrc	r24, 5
    3520:	0c c0       	rjmp	.+24     	; 0x353a <__vector_16+0x102>
		{
			manual_mode = TRUE;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
			direction = FORWARD;
    3528:	9a ea       	ldi	r25, 0xAA	; 170
    352a:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <direction>
			SET_MOTOR_FORWARD;
    352e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
			REVERSE_BUZZER_OFF;
    3532:	82 e0       	ldi	r24, 0x02	; 2
    3534:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    3538:	19 c0       	rjmp	.+50     	; 0x356c <__vector_16+0x134>
		}
		else if (!(PORTA_IN & (1 << REV_SW)))
    353a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    353e:	86 fd       	sbrc	r24, 6
    3540:	0c c0       	rjmp	.+24     	; 0x355a <__vector_16+0x122>
		{
			manual_mode = TRUE;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <manual_mode>
			direction = REVERSE;
    3548:	9b eb       	ldi	r25, 0xBB	; 187
    354a:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <direction>
			SET_MOTOR_REVERSE;
    354e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
			REVERSE_BUZZER_ON;
    3552:	82 e0       	ldi	r24, 0x02	; 2
    3554:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    3558:	09 c0       	rjmp	.+18     	; 0x356c <__vector_16+0x134>
		}
		else
		{
			direction = NEUTRAL;
    355a:	8c ec       	ldi	r24, 0xCC	; 204
    355c:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <direction>
			if (emergency_stop_motor != PERMANENT)
    3560:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    3564:	83 30       	cpi	r24, 0x03	; 3
    3566:	11 f0       	breq	.+4      	; 0x356c <__vector_16+0x134>
			{
				emergency_stop_motor = FALSE;
    3568:	10 92 fb 20 	sts	0x20FB, r1	; 0x8020fb <emergency_stop_motor>
			}
		}
	}

	//Send key switch error if it occurs
	if (send_key_switch_error)
    356c:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <send_key_switch_error>
    3570:	88 23       	and	r24, r24
    3572:	49 f0       	breq	.+18     	; 0x3586 <__vector_16+0x14e>
	{
		if ((PORTE_IN & (1 << KEY_SW)))
    3574:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    3578:	82 ff       	sbrs	r24, 2
    357a:	03 c0       	rjmp	.+6      	; 0x3582 <__vector_16+0x14a>
		{
			send_key_error(KEY_SWITCH_OPEN);
    357c:	81 e1       	ldi	r24, 0x11	; 17
    357e:	0e 94 20 09 	call	0x1240	; 0x1240 <send_key_error>
		}
		send_key_switch_error = FALSE;
    3582:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <send_key_switch_error>
	}

	//Send pedal switch error if it occurs
	if (send_pedal_switch_error)
    3586:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <send_pedal_switch_error>
    358a:	88 23       	and	r24, r24
    358c:	51 f0       	breq	.+20     	; 0x35a2 <__vector_16+0x16a>
	{
		if (!(PORTE_IN & (1 << PDL_SW)))
    358e:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    3592:	80 fd       	sbrc	r24, 0
    3594:	03 c0       	rjmp	.+6      	; 0x359c <__vector_16+0x164>
		{
			send_pedal_error(PEDAL_SWITCH_CLOSED);
    3596:	82 e0       	ldi	r24, 0x02	; 2
    3598:	0e 94 0d 09 	call	0x121a	; 0x121a <send_pedal_error>
		}
		send_pedal_switch_error = SENT;
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <send_pedal_switch_error>
	}

	//Give the CAN bus about 5 seconds to begin working
	if (can_test_timer != OFF && can_test_timer++ > 5)
    35a2:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <can_test_timer>
    35a6:	88 23       	and	r24, r24
    35a8:	81 f0       	breq	.+32     	; 0x35ca <__vector_16+0x192>
    35aa:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <can_test_timer>
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	98 0f       	add	r25, r24
    35b2:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <can_test_timer>
    35b6:	86 30       	cpi	r24, 0x06	; 6
    35b8:	40 f0       	brcs	.+16     	; 0x35ca <__vector_16+0x192>
	{
		if (can_functioning == UNTESTED)
    35ba:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <can_functioning>
    35be:	83 30       	cpi	r24, 0x03	; 3
    35c0:	11 f4       	brne	.+4      	; 0x35c6 <__vector_16+0x18e>
			can_functioning = FALSE;
    35c2:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <can_functioning>
		can_test_timer = OFF;
    35c6:	10 92 2b 20 	sts	0x202B, r1	; 0x80202b <can_test_timer>
	}

	if (reset_timer < 10)
    35ca:	80 91 31 20 	lds	r24, 0x2031	; 0x802031 <reset_timer>
    35ce:	8a 30       	cpi	r24, 0x0A	; 10
    35d0:	28 f4       	brcc	.+10     	; 0x35dc <__vector_16+0x1a4>
		reset_timer++;
    35d2:	80 91 31 20 	lds	r24, 0x2031	; 0x802031 <reset_timer>
    35d6:	8f 5f       	subi	r24, 0xFF	; 255
    35d8:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <reset_timer>
}
    35dc:	ff 91       	pop	r31
    35de:	ef 91       	pop	r30
    35e0:	bf 91       	pop	r27
    35e2:	af 91       	pop	r26
    35e4:	9f 91       	pop	r25
    35e6:	8f 91       	pop	r24
    35e8:	7f 91       	pop	r23
    35ea:	6f 91       	pop	r22
    35ec:	5f 91       	pop	r21
    35ee:	4f 91       	pop	r20
    35f0:	3f 91       	pop	r19
    35f2:	2f 91       	pop	r18
    35f4:	0f 90       	pop	r0
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	0f 90       	pop	r0
    35fa:	1f 90       	pop	r1
    35fc:	18 95       	reti

000035fe <__vector_22>:

ISR(_100_MS_TIMER_INT)
{
    35fe:	1f 92       	push	r1
    3600:	0f 92       	push	r0
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	0f 92       	push	r0
    3606:	11 24       	eor	r1, r1
    3608:	cf 92       	push	r12
    360a:	df 92       	push	r13
    360c:	ef 92       	push	r14
    360e:	ff 92       	push	r15
    3610:	2f 93       	push	r18
    3612:	3f 93       	push	r19
    3614:	4f 93       	push	r20
    3616:	5f 93       	push	r21
    3618:	6f 93       	push	r22
    361a:	7f 93       	push	r23
    361c:	8f 93       	push	r24
    361e:	9f 93       	push	r25
    3620:	af 93       	push	r26
    3622:	bf 93       	push	r27
    3624:	ef 93       	push	r30
    3626:	ff 93       	push	r31
	TCC1.CNT = 0;
    3628:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    362c:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>

	_100_ms_check++;
    3630:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <_100_ms_check>
    3634:	8f 5f       	subi	r24, 0xFF	; 255
    3636:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <_100_ms_check>

	//This counter counts the 100s of millseconds that have passed since the pedal was released
	if (motor_off_time <= ENERGY_RELEASE_TIME && pedal_state == OFF)
    363a:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <motor_off_time>
    363e:	89 30       	cpi	r24, 0x09	; 9
    3640:	58 f4       	brcc	.+22     	; 0x3658 <__vector_22+0x5a>
    3642:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    3646:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    364a:	89 2b       	or	r24, r25
    364c:	29 f4       	brne	.+10     	; 0x3658 <__vector_22+0x5a>
		motor_off_time++;
    364e:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <motor_off_time>
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <motor_off_time>

	//Turn on the electrobrake after some time defined in the settings
	if (electrobrake_counter)
    3658:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <electrobrake_counter>
    365c:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <electrobrake_counter+0x1>
    3660:	89 2b       	or	r24, r25
    3662:	d1 f0       	breq	.+52     	; 0x3698 <__vector_22+0x9a>
	{
		electrobrake_counter++;
    3664:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <electrobrake_counter>
    3668:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <electrobrake_counter+0x1>
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <electrobrake_counter>
    3672:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <electrobrake_counter+0x1>
		if (electrobrake_counter > brake_delay)
    3676:	80 91 27 20 	lds	r24, 0x2027	; 0x802027 <brake_delay>
    367a:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <electrobrake_counter>
    367e:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <electrobrake_counter+0x1>
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	82 17       	cp	r24, r18
    3686:	93 07       	cpc	r25, r19
    3688:	38 f4       	brcc	.+14     	; 0x3698 <__vector_22+0x9a>
		{
			electrobrake_counter = OFF;
    368a:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <electrobrake_counter>
    368e:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <electrobrake_counter+0x1>
			E_BRAKE_ON;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		}
	}

	if (!emergency_stop_motor)
    3698:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    369c:	81 11       	cpse	r24, r1
    369e:	9a c1       	rjmp	.+820    	; 0x39d4 <__vector_22+0x3d6>
	{
		if (back_safety_adjust)
    36a0:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <back_safety_adjust>
    36a4:	88 23       	and	r24, r24
    36a6:	09 f4       	brne	.+2      	; 0x36aa <__vector_22+0xac>
    36a8:	ce c0       	rjmp	.+412    	; 0x3846 <__vector_22+0x248>
		{
			if (direction == FORWARD)
    36aa:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    36ae:	8a 3a       	cpi	r24, 0xAA	; 170
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <__vector_22+0xb6>
    36b2:	58 c0       	rjmp	.+176    	; 0x3764 <__vector_22+0x166>
			{
				//If the difference between the pedal level and the current pedal level is greater than the level increment
				//Increase the pedal level and pwm by the preset increment
				if (pedal_level < (4090 + fast_level_increment))
    36b4:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <fast_level_increment>
    36b8:	90 91 24 20 	lds	r25, 0x2024	; 0x802024 <fast_level_increment+0x1>
    36bc:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    36c0:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    36c4:	ac 01       	movw	r20, r24
    36c6:	46 50       	subi	r20, 0x06	; 6
    36c8:	50 4f       	sbci	r21, 0xF0	; 240
    36ca:	24 17       	cp	r18, r20
    36cc:	35 07       	cpc	r19, r21
    36ce:	b8 f4       	brcc	.+46     	; 0x36fe <__vector_22+0x100>
				{
					pedal_level += fast_level_increment;
    36d0:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    36d4:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    36d8:	82 0f       	add	r24, r18
    36da:	93 1f       	adc	r25, r19
    36dc:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    36e0:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(GET_MOTOR_SPEED() + pwm_increment);
    36e4:	e0 e0       	ldi	r30, 0x00	; 0
    36e6:	f9 e0       	ldi	r31, 0x09	; 9
    36e8:	22 a5       	ldd	r18, Z+42	; 0x2a
    36ea:	33 a5       	ldd	r19, Z+43	; 0x2b
    36ec:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <pwm_increment>
    36f0:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <pwm_increment+0x1>
    36f4:	82 0f       	add	r24, r18
    36f6:	93 1f       	adc	r25, r19
    36f8:	82 a7       	std	Z+42, r24	; 0x2a
    36fa:	93 a7       	std	Z+43, r25	; 0x2b
    36fc:	8a c0       	rjmp	.+276    	; 0x3812 <__vector_22+0x214>
				}
				//If the difference between the pedal level and the current pedal level is less than the level increment
				//Increase the pedal level and pwm to the current pedal level
				else if (pedal_level <= (4090 - PEDAL_LEVEL_HYSTERESIS) || 4090 > (4096 - PEDAL_LEVEL_HYSTERESIS))
    36fe:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3702:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
				{
					pedal_level = 4090;
    3706:	8a ef       	ldi	r24, 0xFA	; 250
    3708:	9f e0       	ldi	r25, 0x0F	; 15
    370a:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    370e:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(pedal_level * fast_level_pwm_ratio + minimum_pwm);
    3712:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    3716:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3722:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <fast_level_pwm_ratio>
    3726:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <fast_level_pwm_ratio+0x1>
    372a:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <fast_level_pwm_ratio+0x2>
    372e:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <fast_level_pwm_ratio+0x3>
    3732:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    3736:	6b 01       	movw	r12, r22
    3738:	7c 01       	movw	r14, r24
    373a:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    373e:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    374a:	9b 01       	movw	r18, r22
    374c:	ac 01       	movw	r20, r24
    374e:	c7 01       	movw	r24, r14
    3750:	b6 01       	movw	r22, r12
    3752:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    3756:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    375a:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    375e:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3762:	57 c0       	rjmp	.+174    	; 0x3812 <__vector_22+0x214>
			}
			else
			{
				//If the difference between the pedal level and the current pedal level is greater than the level increment
				//Increase the pedal level and pwm by the preset increment
				if (pedal_level < (4090 + reverse_level_increment))
    3764:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <reverse_level_increment>
    3768:	90 91 36 20 	lds	r25, 0x2036	; 0x802036 <reverse_level_increment+0x1>
    376c:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3770:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3774:	ac 01       	movw	r20, r24
    3776:	46 50       	subi	r20, 0x06	; 6
    3778:	50 4f       	sbci	r21, 0xF0	; 240
    377a:	24 17       	cp	r18, r20
    377c:	35 07       	cpc	r19, r21
    377e:	b8 f4       	brcc	.+46     	; 0x37ae <__vector_22+0x1b0>
				{
					pedal_level += reverse_level_increment;
    3780:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3784:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3788:	82 0f       	add	r24, r18
    378a:	93 1f       	adc	r25, r19
    378c:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3790:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(GET_MOTOR_SPEED() + pwm_increment);
    3794:	e0 e0       	ldi	r30, 0x00	; 0
    3796:	f9 e0       	ldi	r31, 0x09	; 9
    3798:	22 a5       	ldd	r18, Z+42	; 0x2a
    379a:	33 a5       	ldd	r19, Z+43	; 0x2b
    379c:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <pwm_increment>
    37a0:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <pwm_increment+0x1>
    37a4:	82 0f       	add	r24, r18
    37a6:	93 1f       	adc	r25, r19
    37a8:	82 a7       	std	Z+42, r24	; 0x2a
    37aa:	93 a7       	std	Z+43, r25	; 0x2b
    37ac:	32 c0       	rjmp	.+100    	; 0x3812 <__vector_22+0x214>
				}
				//If the difference between the pedal level and the current pedal level is less than the level increment
				//Increase the pedal level and pwm to the current pedal level
				else if (pedal_level <= (4090 - PEDAL_LEVEL_HYSTERESIS) || 4090 > (4096 - PEDAL_LEVEL_HYSTERESIS))
    37ae:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    37b2:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
				{
					pedal_level = 4090;
    37b6:	8a ef       	ldi	r24, 0xFA	; 250
    37b8:	9f e0       	ldi	r25, 0x0F	; 15
    37ba:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    37be:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(pedal_level * reverse_level_pwm_ratio + minimum_pwm);
    37c2:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    37c6:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    37d2:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <reverse_level_pwm_ratio>
    37d6:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <reverse_level_pwm_ratio+0x1>
    37da:	40 91 28 21 	lds	r20, 0x2128	; 0x802128 <reverse_level_pwm_ratio+0x2>
    37de:	50 91 29 21 	lds	r21, 0x2129	; 0x802129 <reverse_level_pwm_ratio+0x3>
    37e2:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    37e6:	6b 01       	movw	r12, r22
    37e8:	7c 01       	movw	r14, r24
    37ea:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    37ee:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    37fa:	9b 01       	movw	r18, r22
    37fc:	ac 01       	movw	r20, r24
    37fe:	c7 01       	movw	r24, r14
    3800:	b6 01       	movw	r22, r12
    3802:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    3806:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    380a:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    380e:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
				}
			}

			if (back_safety_adjust_counter++ > 10)
    3812:	80 91 3b 20 	lds	r24, 0x203B	; 0x80203b <back_safety_adjust_counter>
    3816:	91 e0       	ldi	r25, 0x01	; 1
    3818:	98 0f       	add	r25, r24
    381a:	90 93 3b 20 	sts	0x203B, r25	; 0x80203b <back_safety_adjust_counter>
    381e:	8b 30       	cpi	r24, 0x0B	; 11
    3820:	08 f4       	brcc	.+2      	; 0x3824 <__vector_22+0x226>
    3822:	b6 c4       	rjmp	.+2412   	; 0x4190 <__vector_22+0xb92>
			{
				if (!(PORTE_IN & (1 << KEY_SW)))
    3824:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    3828:	82 fd       	sbrc	r24, 2
    382a:	07 c0       	rjmp	.+14     	; 0x383a <__vector_22+0x23c>
				{
					emergency_stop_motor = PERMANENT;
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <emergency_stop_motor>
					send_back_safety_error(BACK_SAFETY_UNRESOLVED);
    3832:	8c ec       	ldi	r24, 0xCC	; 204
    3834:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <send_back_safety_error>
    3838:	ab c4       	rjmp	.+2390   	; 0x4190 <__vector_22+0xb92>
				}
				else
				{
					back_safety_adjust = FALSE;
    383a:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <back_safety_adjust>
					send_back_safety_error(BACK_SAFETY_RESOLVED);
    383e:	8b eb       	ldi	r24, 0xBB	; 187
    3840:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <send_back_safety_error>
    3844:	a5 c4       	rjmp	.+2378   	; 0x4190 <__vector_22+0xb92>
				}
			}
			return;
		}

		if (fr_transition == TRUE)
    3846:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <fr_transition>
    384a:	81 30       	cpi	r24, 0x01	; 1
    384c:	09 f0       	breq	.+2      	; 0x3850 <__vector_22+0x252>
    384e:	c2 c0       	rjmp	.+388    	; 0x39d4 <__vector_22+0x3d6>
		{
			if (direction == REVERSE)
    3850:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    3854:	8b 3b       	cpi	r24, 0xBB	; 187
    3856:	09 f0       	breq	.+2      	; 0x385a <__vector_22+0x25c>
    3858:	7c c0       	rjmp	.+248    	; 0x3952 <__vector_22+0x354>
			{
				if (speed == FAST)
    385a:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    385e:	81 30       	cpi	r24, 0x01	; 1
    3860:	e1 f5       	brne	.+120    	; 0x38da <__vector_22+0x2dc>
				{
					//If the current pedal level is less than the minimum pedal level and either the pedal level is already less than the minimum or within a level increment
					//Turn off the motor
					if (pedal_level <= fast_level_decrement)
    3862:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3866:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    386a:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <fast_level_decrement>
    386e:	90 91 2c 21 	lds	r25, 0x212C	; 0x80212c <fast_level_decrement+0x1>
    3872:	82 17       	cp	r24, r18
    3874:	93 07       	cpc	r25, r19
    3876:	88 f0       	brcs	.+34     	; 0x389a <__vector_22+0x29c>
					{
						pedal_level = 0;
    3878:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    387c:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
						SET_MOTOR_SPEED(OFF);
    3880:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3884:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
						fr_transition = FALSE;
    3888:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <fr_transition>
						REVERSE_BUZZER_ON;
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
						SET_MOTOR_REVERSE;
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    3898:	7b c4       	rjmp	.+2294   	; 0x4190 <__vector_22+0xb92>
					}
					//If the difference between the pedal level and the current pedal level is greater than the level increment
					//Decrease the pedal level and pwm by the preset increment
					else if (pedal_level > (0 + fast_level_decrement))
    389a:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    389e:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    38a2:	82 17       	cp	r24, r18
    38a4:	93 07       	cpc	r25, r19
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <__vector_22+0x2ac>
    38a8:	73 c4       	rjmp	.+2278   	; 0x4190 <__vector_22+0xb92>
					{
						pedal_level -= fast_level_decrement;
    38aa:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    38ae:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    38b2:	a9 01       	movw	r20, r18
    38b4:	48 1b       	sub	r20, r24
    38b6:	59 0b       	sbc	r21, r25
    38b8:	40 93 2f 21 	sts	0x212F, r20	; 0x80212f <pedal_level>
    38bc:	50 93 30 21 	sts	0x2130, r21	; 0x802130 <pedal_level+0x1>
						SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    38c0:	e0 e0       	ldi	r30, 0x00	; 0
    38c2:	f9 e0       	ldi	r31, 0x09	; 9
    38c4:	82 a5       	ldd	r24, Z+42	; 0x2a
    38c6:	93 a5       	ldd	r25, Z+43	; 0x2b
    38c8:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    38cc:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    38d0:	82 1b       	sub	r24, r18
    38d2:	93 0b       	sbc	r25, r19
    38d4:	82 a7       	std	Z+42, r24	; 0x2a
    38d6:	93 a7       	std	Z+43, r25	; 0x2b
    38d8:	5b c4       	rjmp	.+2230   	; 0x4190 <__vector_22+0xb92>
				}
				else
				{
					//If the current pedal level is less than the minimum pedal level and either the pedal level is already less than the minimum or within a level increment
					//Turn off the motor
					if (pedal_level <= slow_level_decrement)
    38da:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    38de:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    38e2:	80 91 15 21 	lds	r24, 0x2115	; 0x802115 <slow_level_decrement>
    38e6:	90 91 16 21 	lds	r25, 0x2116	; 0x802116 <slow_level_decrement+0x1>
    38ea:	82 17       	cp	r24, r18
    38ec:	93 07       	cpc	r25, r19
    38ee:	88 f0       	brcs	.+34     	; 0x3912 <__vector_22+0x314>
					{
						pedal_level = 0;
    38f0:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    38f4:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
						SET_MOTOR_SPEED(OFF);
    38f8:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    38fc:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
						fr_transition = FALSE;
    3900:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <fr_transition>
						REVERSE_BUZZER_ON;
    3904:	82 e0       	ldi	r24, 0x02	; 2
    3906:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
						SET_MOTOR_REVERSE;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    3910:	3f c4       	rjmp	.+2174   	; 0x4190 <__vector_22+0xb92>
					}
					//If the difference between the pedal level and the current pedal level is greater than the level increment
					//Decrease the pedal level and pwm by the preset increment
					else if (pedal_level > (0 + slow_level_decrement))
    3912:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3916:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    391a:	82 17       	cp	r24, r18
    391c:	93 07       	cpc	r25, r19
    391e:	08 f0       	brcs	.+2      	; 0x3922 <__vector_22+0x324>
    3920:	37 c4       	rjmp	.+2158   	; 0x4190 <__vector_22+0xb92>
					{
						pedal_level -= slow_level_decrement;
    3922:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3926:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    392a:	a9 01       	movw	r20, r18
    392c:	48 1b       	sub	r20, r24
    392e:	59 0b       	sbc	r21, r25
    3930:	40 93 2f 21 	sts	0x212F, r20	; 0x80212f <pedal_level>
    3934:	50 93 30 21 	sts	0x2130, r21	; 0x802130 <pedal_level+0x1>
						SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    3938:	e0 e0       	ldi	r30, 0x00	; 0
    393a:	f9 e0       	ldi	r31, 0x09	; 9
    393c:	82 a5       	ldd	r24, Z+42	; 0x2a
    393e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3940:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    3944:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    3948:	82 1b       	sub	r24, r18
    394a:	93 0b       	sbc	r25, r19
    394c:	82 a7       	std	Z+42, r24	; 0x2a
    394e:	93 a7       	std	Z+43, r25	; 0x2b
    3950:	1f c4       	rjmp	.+2110   	; 0x4190 <__vector_22+0xb92>
					}
				}
			}
			else if (direction == FORWARD)
    3952:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    3956:	8a 3a       	cpi	r24, 0xAA	; 170
    3958:	09 f0       	breq	.+2      	; 0x395c <__vector_22+0x35e>
    395a:	1a c4       	rjmp	.+2100   	; 0x4190 <__vector_22+0xb92>
			{
				//If the current pedal level is less than the minimum pedal level and either the pedal level is already less than the minimum or within a level increment
				//Turn off the motor
				if (pedal_level <= reverse_level_decrement)
    395c:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3960:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3964:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <reverse_level_decrement>
    3968:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <reverse_level_decrement+0x1>
    396c:	82 17       	cp	r24, r18
    396e:	93 07       	cpc	r25, r19
    3970:	88 f0       	brcs	.+34     	; 0x3994 <__vector_22+0x396>
				{
					pedal_level = 0;
    3972:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    3976:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(OFF);
    397a:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    397e:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
					fr_transition = FALSE;
    3982:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <fr_transition>
					REVERSE_BUZZER_OFF;
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
					SET_MOTOR_FORWARD;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    3992:	fe c3       	rjmp	.+2044   	; 0x4190 <__vector_22+0xb92>
				}
				//If the difference between the pedal level and the current pedal level is greater than the level increment
				//Decrease the pedal level and pwm by the preset increment
				else if (pedal_level > (0 + reverse_level_decrement))
    3994:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3998:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    399c:	82 17       	cp	r24, r18
    399e:	93 07       	cpc	r25, r19
    39a0:	08 f0       	brcs	.+2      	; 0x39a4 <__vector_22+0x3a6>
    39a2:	f6 c3       	rjmp	.+2028   	; 0x4190 <__vector_22+0xb92>
				{
					pedal_level -= reverse_level_decrement;
    39a4:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    39a8:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    39ac:	a9 01       	movw	r20, r18
    39ae:	48 1b       	sub	r20, r24
    39b0:	59 0b       	sbc	r21, r25
    39b2:	40 93 2f 21 	sts	0x212F, r20	; 0x80212f <pedal_level>
    39b6:	50 93 30 21 	sts	0x2130, r21	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    39ba:	e0 e0       	ldi	r30, 0x00	; 0
    39bc:	f9 e0       	ldi	r31, 0x09	; 9
    39be:	82 a5       	ldd	r24, Z+42	; 0x2a
    39c0:	93 a5       	ldd	r25, Z+43	; 0x2b
    39c2:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    39c6:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    39ca:	82 1b       	sub	r24, r18
    39cc:	93 0b       	sbc	r25, r19
    39ce:	82 a7       	std	Z+42, r24	; 0x2a
    39d0:	93 a7       	std	Z+43, r25	; 0x2b
    39d2:	de c3       	rjmp	.+1980   	; 0x4190 <__vector_22+0xb92>
			return;
		}
	}

	//If the pedal switch turns off or the direction is set to neutral the motor will decelerate to 0
	if (pedal_state == OFF || direction == NEUTRAL || direction == UNTESTED || emergency_stop_motor || stop_motor == TRUE)
    39d4:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    39d8:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    39dc:	89 2b       	or	r24, r25
    39de:	89 f0       	breq	.+34     	; 0x3a02 <__vector_22+0x404>
    39e0:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    39e4:	8c 3c       	cpi	r24, 0xCC	; 204
    39e6:	69 f0       	breq	.+26     	; 0x3a02 <__vector_22+0x404>
    39e8:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    39ec:	83 30       	cpi	r24, 0x03	; 3
    39ee:	49 f0       	breq	.+18     	; 0x3a02 <__vector_22+0x404>
    39f0:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <emergency_stop_motor>
    39f4:	81 11       	cpse	r24, r1
    39f6:	05 c0       	rjmp	.+10     	; 0x3a02 <__vector_22+0x404>
    39f8:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <stop_motor>
    39fc:	81 30       	cpi	r24, 0x01	; 1
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <__vector_22+0x404>
    3a00:	b9 c0       	rjmp	.+370    	; 0x3b74 <__vector_22+0x576>
	{
		if (direction == REVERSE)
    3a02:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    3a06:	8b 3b       	cpi	r24, 0xBB	; 187
    3a08:	d9 f5       	brne	.+118    	; 0x3a80 <__vector_22+0x482>
		{
			//If the current pedal level is less than the minimum pedal level and either the pedal level is already less than the minimum or within a level increment
			//Turn off the motor
			if (pedal_level <= reverse_level_decrement)
    3a0a:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3a0e:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3a12:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <reverse_level_decrement>
    3a16:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <reverse_level_decrement+0x1>
    3a1a:	82 17       	cp	r24, r18
    3a1c:	93 07       	cpc	r25, r19
    3a1e:	80 f0       	brcs	.+32     	; 0x3a40 <__vector_22+0x442>
			{
				pedal_level = 0;
    3a20:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    3a24:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(OFF);
    3a28:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3a2c:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
				if (stop_motor)
    3a30:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <stop_motor>
    3a34:	88 23       	and	r24, r24
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <__vector_22+0x43c>
    3a38:	ab c3       	rjmp	.+1878   	; 0x4190 <__vector_22+0xb92>
				{
					stop_motor = FALSE;
    3a3a:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <stop_motor>
    3a3e:	a8 c3       	rjmp	.+1872   	; 0x4190 <__vector_22+0xb92>
				}

			}
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Decrease the pedal level and pwm by the preset increment
			else if (pedal_level > reverse_level_decrement)
    3a40:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3a44:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3a48:	82 17       	cp	r24, r18
    3a4a:	93 07       	cpc	r25, r19
    3a4c:	08 f0       	brcs	.+2      	; 0x3a50 <__vector_22+0x452>
    3a4e:	a0 c3       	rjmp	.+1856   	; 0x4190 <__vector_22+0xb92>
			{
				pedal_level -= reverse_level_decrement;
    3a50:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3a54:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3a58:	a9 01       	movw	r20, r18
    3a5a:	48 1b       	sub	r20, r24
    3a5c:	59 0b       	sbc	r21, r25
    3a5e:	40 93 2f 21 	sts	0x212F, r20	; 0x80212f <pedal_level>
    3a62:	50 93 30 21 	sts	0x2130, r21	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    3a66:	e0 e0       	ldi	r30, 0x00	; 0
    3a68:	f9 e0       	ldi	r31, 0x09	; 9
    3a6a:	82 a5       	ldd	r24, Z+42	; 0x2a
    3a6c:	93 a5       	ldd	r25, Z+43	; 0x2b
    3a6e:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    3a72:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    3a76:	82 1b       	sub	r24, r18
    3a78:	93 0b       	sbc	r25, r19
    3a7a:	82 a7       	std	Z+42, r24	; 0x2a
    3a7c:	93 a7       	std	Z+43, r25	; 0x2b
    3a7e:	88 c3       	rjmp	.+1808   	; 0x4190 <__vector_22+0xb92>
			}
		}
		else if (speed == FAST)
    3a80:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    3a84:	81 30       	cpi	r24, 0x01	; 1
    3a86:	d9 f5       	brne	.+118    	; 0x3afe <__vector_22+0x500>
		{
			//If the current pedal level is less than the minimum pedal level and either the pedal level is already less than the minimum or within a level increment
			//Turn off the motor
			if (pedal_level <= fast_level_decrement)
    3a88:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3a8c:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3a90:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <fast_level_decrement>
    3a94:	90 91 2c 21 	lds	r25, 0x212C	; 0x80212c <fast_level_decrement+0x1>
    3a98:	82 17       	cp	r24, r18
    3a9a:	93 07       	cpc	r25, r19
    3a9c:	80 f0       	brcs	.+32     	; 0x3abe <__vector_22+0x4c0>
			{
				pedal_level = 0;
    3a9e:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    3aa2:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(OFF);
    3aa6:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3aaa:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
				if (stop_motor)
    3aae:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <stop_motor>
    3ab2:	88 23       	and	r24, r24
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <__vector_22+0x4ba>
    3ab6:	6c c3       	rjmp	.+1752   	; 0x4190 <__vector_22+0xb92>
				{
					stop_motor = FALSE;
    3ab8:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <stop_motor>
    3abc:	69 c3       	rjmp	.+1746   	; 0x4190 <__vector_22+0xb92>
				}
			}
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Decrease the pedal level and pwm by the preset increment
			else if (pedal_level > fast_level_decrement)
    3abe:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3ac2:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3ac6:	82 17       	cp	r24, r18
    3ac8:	93 07       	cpc	r25, r19
    3aca:	08 f0       	brcs	.+2      	; 0x3ace <__vector_22+0x4d0>
    3acc:	61 c3       	rjmp	.+1730   	; 0x4190 <__vector_22+0xb92>
			{
				pedal_level -= fast_level_decrement;
    3ace:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3ad2:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3ad6:	a9 01       	movw	r20, r18
    3ad8:	48 1b       	sub	r20, r24
    3ada:	59 0b       	sbc	r21, r25
    3adc:	40 93 2f 21 	sts	0x212F, r20	; 0x80212f <pedal_level>
    3ae0:	50 93 30 21 	sts	0x2130, r21	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    3ae4:	e0 e0       	ldi	r30, 0x00	; 0
    3ae6:	f9 e0       	ldi	r31, 0x09	; 9
    3ae8:	82 a5       	ldd	r24, Z+42	; 0x2a
    3aea:	93 a5       	ldd	r25, Z+43	; 0x2b
    3aec:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    3af0:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    3af4:	82 1b       	sub	r24, r18
    3af6:	93 0b       	sbc	r25, r19
    3af8:	82 a7       	std	Z+42, r24	; 0x2a
    3afa:	93 a7       	std	Z+43, r25	; 0x2b
    3afc:	49 c3       	rjmp	.+1682   	; 0x4190 <__vector_22+0xb92>
		}
		else
		{
			//If the current pedal level is less than the minimum pedal level and either the pedal level is already less than the minimum or within a level increment
			//Turn off the motor
			if (pedal_level <= slow_level_decrement)
    3afe:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3b02:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3b06:	80 91 15 21 	lds	r24, 0x2115	; 0x802115 <slow_level_decrement>
    3b0a:	90 91 16 21 	lds	r25, 0x2116	; 0x802116 <slow_level_decrement+0x1>
    3b0e:	82 17       	cp	r24, r18
    3b10:	93 07       	cpc	r25, r19
    3b12:	80 f0       	brcs	.+32     	; 0x3b34 <__vector_22+0x536>
			{
				pedal_level = 0;
    3b14:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    3b18:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(OFF);
    3b1c:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3b20:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
				if (stop_motor)
    3b24:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <stop_motor>
    3b28:	88 23       	and	r24, r24
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <__vector_22+0x530>
    3b2c:	31 c3       	rjmp	.+1634   	; 0x4190 <__vector_22+0xb92>
				{
					stop_motor = FALSE;
    3b2e:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <stop_motor>
    3b32:	2e c3       	rjmp	.+1628   	; 0x4190 <__vector_22+0xb92>
				}
			}
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Decrease the pedal level and pwm by the preset increment
			else if (pedal_level > slow_level_decrement)
    3b34:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3b38:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3b3c:	82 17       	cp	r24, r18
    3b3e:	93 07       	cpc	r25, r19
    3b40:	08 f0       	brcs	.+2      	; 0x3b44 <__vector_22+0x546>
    3b42:	26 c3       	rjmp	.+1612   	; 0x4190 <__vector_22+0xb92>
			{
				pedal_level -= slow_level_decrement;
    3b44:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3b48:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3b4c:	a9 01       	movw	r20, r18
    3b4e:	48 1b       	sub	r20, r24
    3b50:	59 0b       	sbc	r21, r25
    3b52:	40 93 2f 21 	sts	0x212F, r20	; 0x80212f <pedal_level>
    3b56:	50 93 30 21 	sts	0x2130, r21	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    3b5a:	e0 e0       	ldi	r30, 0x00	; 0
    3b5c:	f9 e0       	ldi	r31, 0x09	; 9
    3b5e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3b60:	93 a5       	ldd	r25, Z+43	; 0x2b
    3b62:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    3b66:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    3b6a:	82 1b       	sub	r24, r18
    3b6c:	93 0b       	sbc	r25, r19
    3b6e:	82 a7       	std	Z+42, r24	; 0x2a
    3b70:	93 a7       	std	Z+43, r25	; 0x2b
    3b72:	0e c3       	rjmp	.+1564   	; 0x4190 <__vector_22+0xb92>
		}
		return;
	}

	//If the pedal level is less than the current pedal level
	if (pedal_level < curr_pedal_level)
    3b74:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3b78:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3b7c:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3b80:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3b84:	28 17       	cp	r18, r24
    3b86:	39 07       	cpc	r19, r25
    3b88:	08 f0       	brcs	.+2      	; 0x3b8c <__vector_22+0x58e>
    3b8a:	54 c1       	rjmp	.+680    	; 0x3e34 <__vector_22+0x836>
	{
		if (direction == REVERSE)
    3b8c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    3b90:	8b 3b       	cpi	r24, 0xBB	; 187
    3b92:	09 f0       	breq	.+2      	; 0x3b96 <__vector_22+0x598>
    3b94:	6e c0       	rjmp	.+220    	; 0x3c72 <__vector_22+0x674>
		{
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Increase the pedal level and pwm by the preset increment
			if (pedal_level < (curr_pedal_level + reverse_level_increment))
    3b96:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3b9a:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3b9e:	20 91 35 20 	lds	r18, 0x2035	; 0x802035 <reverse_level_increment>
    3ba2:	30 91 36 20 	lds	r19, 0x2036	; 0x802036 <reverse_level_increment+0x1>
    3ba6:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <pedal_level>
    3baa:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <pedal_level+0x1>
    3bae:	82 0f       	add	r24, r18
    3bb0:	93 1f       	adc	r25, r19
    3bb2:	48 17       	cp	r20, r24
    3bb4:	59 07       	cpc	r21, r25
    3bb6:	b8 f4       	brcc	.+46     	; 0x3be6 <__vector_22+0x5e8>
			{
				pedal_level += reverse_level_increment;
    3bb8:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3bbc:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3bc0:	28 0f       	add	r18, r24
    3bc2:	39 1f       	adc	r19, r25
    3bc4:	20 93 2f 21 	sts	0x212F, r18	; 0x80212f <pedal_level>
    3bc8:	30 93 30 21 	sts	0x2130, r19	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() + pwm_increment);
    3bcc:	e0 e0       	ldi	r30, 0x00	; 0
    3bce:	f9 e0       	ldi	r31, 0x09	; 9
    3bd0:	22 a5       	ldd	r18, Z+42	; 0x2a
    3bd2:	33 a5       	ldd	r19, Z+43	; 0x2b
    3bd4:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <pwm_increment>
    3bd8:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <pwm_increment+0x1>
    3bdc:	82 0f       	add	r24, r18
    3bde:	93 1f       	adc	r25, r19
    3be0:	82 a7       	std	Z+42, r24	; 0x2a
    3be2:	93 a7       	std	Z+43, r25	; 0x2b
    3be4:	d5 c2       	rjmp	.+1450   	; 0x4190 <__vector_22+0xb92>
			}
			//If the difference between the pedal level and the current pedal level is less than the level increment
			//Increase the pedal level and pwm to the current pedal level
			else if (pedal_level <= (curr_pedal_level - PEDAL_LEVEL_HYSTERESIS) || curr_pedal_level >= (4096 - PEDAL_LEVEL_HYSTERESIS))
    3be6:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3bea:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3bee:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3bf2:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3bf6:	84 56       	subi	r24, 0x64	; 100
    3bf8:	91 09       	sbc	r25, r1
    3bfa:	82 17       	cp	r24, r18
    3bfc:	93 07       	cpc	r25, r19
    3bfe:	40 f4       	brcc	.+16     	; 0x3c10 <__vector_22+0x612>
    3c00:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3c04:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3c08:	8c 39       	cpi	r24, 0x9C	; 156
    3c0a:	9f 40       	sbci	r25, 0x0F	; 15
    3c0c:	08 f4       	brcc	.+2      	; 0x3c10 <__vector_22+0x612>
    3c0e:	c0 c2       	rjmp	.+1408   	; 0x4190 <__vector_22+0xb92>
			{
				pedal_level = curr_pedal_level;
    3c10:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3c14:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3c18:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3c1c:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(pedal_level * reverse_level_pwm_ratio + minimum_pwm);
    3c20:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    3c24:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3c30:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <reverse_level_pwm_ratio>
    3c34:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <reverse_level_pwm_ratio+0x1>
    3c38:	40 91 28 21 	lds	r20, 0x2128	; 0x802128 <reverse_level_pwm_ratio+0x2>
    3c3c:	50 91 29 21 	lds	r21, 0x2129	; 0x802129 <reverse_level_pwm_ratio+0x3>
    3c40:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    3c44:	6b 01       	movw	r12, r22
    3c46:	7c 01       	movw	r14, r24
    3c48:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    3c4c:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3c58:	9b 01       	movw	r18, r22
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	c7 01       	movw	r24, r14
    3c5e:	b6 01       	movw	r22, r12
    3c60:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    3c64:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    3c68:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3c6c:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3c70:	8f c2       	rjmp	.+1310   	; 0x4190 <__vector_22+0xb92>
			}
		}
		else if (speed == FAST)
    3c72:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    3c76:	81 30       	cpi	r24, 0x01	; 1
    3c78:	09 f0       	breq	.+2      	; 0x3c7c <__vector_22+0x67e>
    3c7a:	6e c0       	rjmp	.+220    	; 0x3d58 <__vector_22+0x75a>
		{
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Increase the pedal level and pwm by the preset increment
			if (pedal_level < (curr_pedal_level + fast_level_increment))
    3c7c:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3c80:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3c84:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <fast_level_increment>
    3c88:	30 91 24 20 	lds	r19, 0x2024	; 0x802024 <fast_level_increment+0x1>
    3c8c:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <pedal_level>
    3c90:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <pedal_level+0x1>
    3c94:	82 0f       	add	r24, r18
    3c96:	93 1f       	adc	r25, r19
    3c98:	48 17       	cp	r20, r24
    3c9a:	59 07       	cpc	r21, r25
    3c9c:	b8 f4       	brcc	.+46     	; 0x3ccc <__vector_22+0x6ce>
			{
				pedal_level += fast_level_increment;
    3c9e:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3ca2:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3ca6:	28 0f       	add	r18, r24
    3ca8:	39 1f       	adc	r19, r25
    3caa:	20 93 2f 21 	sts	0x212F, r18	; 0x80212f <pedal_level>
    3cae:	30 93 30 21 	sts	0x2130, r19	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() + pwm_increment);
    3cb2:	e0 e0       	ldi	r30, 0x00	; 0
    3cb4:	f9 e0       	ldi	r31, 0x09	; 9
    3cb6:	22 a5       	ldd	r18, Z+42	; 0x2a
    3cb8:	33 a5       	ldd	r19, Z+43	; 0x2b
    3cba:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <pwm_increment>
    3cbe:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <pwm_increment+0x1>
    3cc2:	82 0f       	add	r24, r18
    3cc4:	93 1f       	adc	r25, r19
    3cc6:	82 a7       	std	Z+42, r24	; 0x2a
    3cc8:	93 a7       	std	Z+43, r25	; 0x2b
    3cca:	62 c2       	rjmp	.+1220   	; 0x4190 <__vector_22+0xb92>
			}
			//If the difference between the pedal level and the current pedal level is less than the level increment
			//Increase the pedal level and pwm to the current pedal level
			else if (pedal_level <= (curr_pedal_level - PEDAL_LEVEL_HYSTERESIS) || curr_pedal_level > (4096 - PEDAL_LEVEL_HYSTERESIS))
    3ccc:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3cd0:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3cd4:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3cd8:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3cdc:	84 56       	subi	r24, 0x64	; 100
    3cde:	91 09       	sbc	r25, r1
    3ce0:	82 17       	cp	r24, r18
    3ce2:	93 07       	cpc	r25, r19
    3ce4:	40 f4       	brcc	.+16     	; 0x3cf6 <__vector_22+0x6f8>
    3ce6:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3cea:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3cee:	8d 39       	cpi	r24, 0x9D	; 157
    3cf0:	9f 40       	sbci	r25, 0x0F	; 15
    3cf2:	08 f4       	brcc	.+2      	; 0x3cf6 <__vector_22+0x6f8>
    3cf4:	4d c2       	rjmp	.+1178   	; 0x4190 <__vector_22+0xb92>
			{
				pedal_level = curr_pedal_level;
    3cf6:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3cfa:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3cfe:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3d02:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(pedal_level * fast_level_pwm_ratio + minimum_pwm);
    3d06:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    3d0a:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3d16:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <fast_level_pwm_ratio>
    3d1a:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <fast_level_pwm_ratio+0x1>
    3d1e:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <fast_level_pwm_ratio+0x2>
    3d22:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <fast_level_pwm_ratio+0x3>
    3d26:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    3d2a:	6b 01       	movw	r12, r22
    3d2c:	7c 01       	movw	r14, r24
    3d2e:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    3d32:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3d3e:	9b 01       	movw	r18, r22
    3d40:	ac 01       	movw	r20, r24
    3d42:	c7 01       	movw	r24, r14
    3d44:	b6 01       	movw	r22, r12
    3d46:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    3d4a:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    3d4e:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3d52:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3d56:	1c c2       	rjmp	.+1080   	; 0x4190 <__vector_22+0xb92>
		}
		else
		{
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Increase the pedal level and pwm by the preset increment
			if (pedal_level < (curr_pedal_level + slow_level_increment))
    3d58:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3d5c:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3d60:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <slow_level_increment>
    3d64:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <slow_level_increment+0x1>
    3d68:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <pedal_level>
    3d6c:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <pedal_level+0x1>
    3d70:	82 0f       	add	r24, r18
    3d72:	93 1f       	adc	r25, r19
    3d74:	48 17       	cp	r20, r24
    3d76:	59 07       	cpc	r21, r25
    3d78:	b8 f4       	brcc	.+46     	; 0x3da8 <__vector_22+0x7aa>
			{
				pedal_level += slow_level_increment;
    3d7a:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3d7e:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3d82:	28 0f       	add	r18, r24
    3d84:	39 1f       	adc	r19, r25
    3d86:	20 93 2f 21 	sts	0x212F, r18	; 0x80212f <pedal_level>
    3d8a:	30 93 30 21 	sts	0x2130, r19	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() + pwm_increment);
    3d8e:	e0 e0       	ldi	r30, 0x00	; 0
    3d90:	f9 e0       	ldi	r31, 0x09	; 9
    3d92:	22 a5       	ldd	r18, Z+42	; 0x2a
    3d94:	33 a5       	ldd	r19, Z+43	; 0x2b
    3d96:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <pwm_increment>
    3d9a:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <pwm_increment+0x1>
    3d9e:	82 0f       	add	r24, r18
    3da0:	93 1f       	adc	r25, r19
    3da2:	82 a7       	std	Z+42, r24	; 0x2a
    3da4:	93 a7       	std	Z+43, r25	; 0x2b
    3da6:	f4 c1       	rjmp	.+1000   	; 0x4190 <__vector_22+0xb92>
			}
			//If the difference between the pedal level and the current pedal level is less than the level increment
			//Increase the pedal level and pwm to the current pedal level
			else if (pedal_level <= (curr_pedal_level - PEDAL_LEVEL_HYSTERESIS) || curr_pedal_level >= (4096 - PEDAL_LEVEL_HYSTERESIS))
    3da8:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3dac:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3db0:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3db4:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3db8:	84 56       	subi	r24, 0x64	; 100
    3dba:	91 09       	sbc	r25, r1
    3dbc:	82 17       	cp	r24, r18
    3dbe:	93 07       	cpc	r25, r19
    3dc0:	40 f4       	brcc	.+16     	; 0x3dd2 <__vector_22+0x7d4>
    3dc2:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3dc6:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3dca:	8c 39       	cpi	r24, 0x9C	; 156
    3dcc:	9f 40       	sbci	r25, 0x0F	; 15
    3dce:	08 f4       	brcc	.+2      	; 0x3dd2 <__vector_22+0x7d4>
    3dd0:	df c1       	rjmp	.+958    	; 0x4190 <__vector_22+0xb92>
			{
				pedal_level = curr_pedal_level;
    3dd2:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3dd6:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3dda:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3dde:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(pedal_level * slow_level_pwm_ratio + minimum_pwm);
    3de2:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    3de6:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3df2:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <slow_level_pwm_ratio>
    3df6:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <slow_level_pwm_ratio+0x1>
    3dfa:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <slow_level_pwm_ratio+0x2>
    3dfe:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <slow_level_pwm_ratio+0x3>
    3e02:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    3e06:	6b 01       	movw	r12, r22
    3e08:	7c 01       	movw	r14, r24
    3e0a:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    3e0e:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3e1a:	9b 01       	movw	r18, r22
    3e1c:	ac 01       	movw	r20, r24
    3e1e:	c7 01       	movw	r24, r14
    3e20:	b6 01       	movw	r22, r12
    3e22:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    3e26:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    3e2a:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3e2e:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3e32:	ae c1       	rjmp	.+860    	; 0x4190 <__vector_22+0xb92>
			}
		}
	}
	//If the pedal level is greater than the current pedal level
	else if (pedal_level > curr_pedal_level)
    3e34:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3e38:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3e3c:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3e40:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3e44:	82 17       	cp	r24, r18
    3e46:	93 07       	cpc	r25, r19
    3e48:	08 f0       	brcs	.+2      	; 0x3e4c <__vector_22+0x84e>
    3e4a:	a2 c1       	rjmp	.+836    	; 0x4190 <__vector_22+0xb92>
	{
		if (direction == REVERSE)
    3e4c:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <direction>
    3e50:	8b 3b       	cpi	r24, 0xBB	; 187
    3e52:	09 f0       	breq	.+2      	; 0x3e56 <__vector_22+0x858>
    3e54:	89 c0       	rjmp	.+274    	; 0x3f68 <__vector_22+0x96a>
		{
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Decrease the pedal level and pwm by the preset increment
			if (pedal_level > (curr_pedal_level + reverse_level_decrement))
    3e56:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3e5a:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3e5e:	20 91 0b 21 	lds	r18, 0x210B	; 0x80210b <reverse_level_decrement>
    3e62:	30 91 0c 21 	lds	r19, 0x210C	; 0x80210c <reverse_level_decrement+0x1>
    3e66:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <pedal_level>
    3e6a:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <pedal_level+0x1>
    3e6e:	82 0f       	add	r24, r18
    3e70:	93 1f       	adc	r25, r19
    3e72:	84 17       	cp	r24, r20
    3e74:	95 07       	cpc	r25, r21
    3e76:	b8 f4       	brcc	.+46     	; 0x3ea6 <__vector_22+0x8a8>
			{
				pedal_level -= reverse_level_decrement;
    3e78:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3e7c:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3e80:	82 1b       	sub	r24, r18
    3e82:	93 0b       	sbc	r25, r19
    3e84:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3e88:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    3e8c:	e0 e0       	ldi	r30, 0x00	; 0
    3e8e:	f9 e0       	ldi	r31, 0x09	; 9
    3e90:	82 a5       	ldd	r24, Z+42	; 0x2a
    3e92:	93 a5       	ldd	r25, Z+43	; 0x2b
    3e94:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    3e98:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    3e9c:	82 1b       	sub	r24, r18
    3e9e:	93 0b       	sbc	r25, r19
    3ea0:	82 a7       	std	Z+42, r24	; 0x2a
    3ea2:	93 a7       	std	Z+43, r25	; 0x2b
    3ea4:	75 c1       	rjmp	.+746    	; 0x4190 <__vector_22+0xb92>
			}
			//If the difference between the pedal level and the current pedal level is less than the level increment
			//Decrease the pedal level and pwm to the current pedal level
			else if (pedal_level >= (curr_pedal_level + PEDAL_LEVEL_HYSTERESIS) && pedal_level > PEDAL_LEVEL_HYSTERESIS)
    3ea6:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3eaa:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3eae:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3eb2:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3eb6:	8c 59       	subi	r24, 0x9C	; 156
    3eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eba:	28 17       	cp	r18, r24
    3ebc:	39 07       	cpc	r19, r25
    3ebe:	c0 f1       	brcs	.+112    	; 0x3f30 <__vector_22+0x932>
    3ec0:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3ec4:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3ec8:	85 36       	cpi	r24, 0x65	; 101
    3eca:	91 05       	cpc	r25, r1
    3ecc:	88 f1       	brcs	.+98     	; 0x3f30 <__vector_22+0x932>
			{
				pedal_level = curr_pedal_level;
    3ece:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3ed2:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3ed6:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3eda:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(pedal_level * reverse_level_pwm_ratio + minimum_pwm);
    3ede:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    3ee2:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3eee:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <reverse_level_pwm_ratio>
    3ef2:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <reverse_level_pwm_ratio+0x1>
    3ef6:	40 91 28 21 	lds	r20, 0x2128	; 0x802128 <reverse_level_pwm_ratio+0x2>
    3efa:	50 91 29 21 	lds	r21, 0x2129	; 0x802129 <reverse_level_pwm_ratio+0x3>
    3efe:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    3f02:	6b 01       	movw	r12, r22
    3f04:	7c 01       	movw	r14, r24
    3f06:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    3f0a:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    3f16:	9b 01       	movw	r18, r22
    3f18:	ac 01       	movw	r20, r24
    3f1a:	c7 01       	movw	r24, r14
    3f1c:	b6 01       	movw	r22, r12
    3f1e:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    3f22:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    3f26:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3f2a:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3f2e:	30 c1       	rjmp	.+608    	; 0x4190 <__vector_22+0xb92>
			}
			else if (curr_pedal_level <= PEDAL_LEVEL_HYSTERESIS)
    3f30:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3f34:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3f38:	85 36       	cpi	r24, 0x65	; 101
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	08 f0       	brcs	.+2      	; 0x3f40 <__vector_22+0x942>
    3f3e:	28 c1       	rjmp	.+592    	; 0x4190 <__vector_22+0xb92>
			{
				if (pedal_state == OFF)
    3f40:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    3f44:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    3f48:	89 2b       	or	r24, r25
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <__vector_22+0x950>
    3f4c:	21 c1       	rjmp	.+578    	; 0x4190 <__vector_22+0xb92>
				{
					pedal_level = OFF;
    3f4e:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    3f52:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(minimum_pwm);
    3f56:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <minimum_pwm>
    3f5a:	90 91 18 21 	lds	r25, 0x2118	; 0x802118 <minimum_pwm+0x1>
    3f5e:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3f62:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3f66:	14 c1       	rjmp	.+552    	; 0x4190 <__vector_22+0xb92>
				}
			}
		}
		else if (speed == FAST)
    3f68:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <speed>
    3f6c:	81 30       	cpi	r24, 0x01	; 1
    3f6e:	09 f0       	breq	.+2      	; 0x3f72 <__vector_22+0x974>
    3f70:	89 c0       	rjmp	.+274    	; 0x4084 <__vector_22+0xa86>
		{
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Decrease the pedal level and pwm by the preset increment
			if (pedal_level > (curr_pedal_level + fast_level_decrement))
    3f72:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3f76:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3f7a:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <fast_level_decrement>
    3f7e:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <fast_level_decrement+0x1>
    3f82:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <pedal_level>
    3f86:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <pedal_level+0x1>
    3f8a:	82 0f       	add	r24, r18
    3f8c:	93 1f       	adc	r25, r19
    3f8e:	84 17       	cp	r24, r20
    3f90:	95 07       	cpc	r25, r21
    3f92:	b8 f4       	brcc	.+46     	; 0x3fc2 <__vector_22+0x9c4>
			{
				pedal_level -= fast_level_decrement;
    3f94:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3f98:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3f9c:	82 1b       	sub	r24, r18
    3f9e:	93 0b       	sbc	r25, r19
    3fa0:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3fa4:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    3fa8:	e0 e0       	ldi	r30, 0x00	; 0
    3faa:	f9 e0       	ldi	r31, 0x09	; 9
    3fac:	82 a5       	ldd	r24, Z+42	; 0x2a
    3fae:	93 a5       	ldd	r25, Z+43	; 0x2b
    3fb0:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    3fb4:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    3fb8:	82 1b       	sub	r24, r18
    3fba:	93 0b       	sbc	r25, r19
    3fbc:	82 a7       	std	Z+42, r24	; 0x2a
    3fbe:	93 a7       	std	Z+43, r25	; 0x2b
    3fc0:	e7 c0       	rjmp	.+462    	; 0x4190 <__vector_22+0xb92>
			}
			//If the difference between the pedal level and the current pedal level is less than the level increment
			//Decrease the pedal level and pwm to the current pedal level
			else if (pedal_level >= (curr_pedal_level + PEDAL_LEVEL_HYSTERESIS) && pedal_level > PEDAL_LEVEL_HYSTERESIS)
    3fc2:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3fc6:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3fca:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    3fce:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    3fd2:	8c 59       	subi	r24, 0x9C	; 156
    3fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd6:	28 17       	cp	r18, r24
    3fd8:	39 07       	cpc	r19, r25
    3fda:	c0 f1       	brcs	.+112    	; 0x404c <__vector_22+0xa4e>
    3fdc:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    3fe0:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    3fe4:	85 36       	cpi	r24, 0x65	; 101
    3fe6:	91 05       	cpc	r25, r1
    3fe8:	88 f1       	brcs	.+98     	; 0x404c <__vector_22+0xa4e>
			{
				pedal_level = curr_pedal_level;
    3fea:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    3fee:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    3ff2:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    3ff6:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(pedal_level * fast_level_pwm_ratio + minimum_pwm);
    3ffa:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    3ffe:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    400a:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <fast_level_pwm_ratio>
    400e:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <fast_level_pwm_ratio+0x1>
    4012:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <fast_level_pwm_ratio+0x2>
    4016:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <fast_level_pwm_ratio+0x3>
    401a:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    401e:	6b 01       	movw	r12, r22
    4020:	7c 01       	movw	r14, r24
    4022:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    4026:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    4032:	9b 01       	movw	r18, r22
    4034:	ac 01       	movw	r20, r24
    4036:	c7 01       	movw	r24, r14
    4038:	b6 01       	movw	r22, r12
    403a:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    403e:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    4042:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    4046:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    404a:	a2 c0       	rjmp	.+324    	; 0x4190 <__vector_22+0xb92>
			}
			else if (curr_pedal_level <= PEDAL_LEVEL_HYSTERESIS)
    404c:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    4050:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    4054:	85 36       	cpi	r24, 0x65	; 101
    4056:	91 05       	cpc	r25, r1
    4058:	08 f0       	brcs	.+2      	; 0x405c <__vector_22+0xa5e>
    405a:	9a c0       	rjmp	.+308    	; 0x4190 <__vector_22+0xb92>
			{
				if (pedal_state == OFF)
    405c:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    4060:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    4064:	89 2b       	or	r24, r25
    4066:	09 f0       	breq	.+2      	; 0x406a <__vector_22+0xa6c>
    4068:	93 c0       	rjmp	.+294    	; 0x4190 <__vector_22+0xb92>
				{
					pedal_level = OFF;
    406a:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    406e:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(minimum_pwm);
    4072:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <minimum_pwm>
    4076:	90 91 18 21 	lds	r25, 0x2118	; 0x802118 <minimum_pwm+0x1>
    407a:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    407e:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    4082:	86 c0       	rjmp	.+268    	; 0x4190 <__vector_22+0xb92>
		}
		else
		{
			//If the difference between the pedal level and the current pedal level is greater than the level increment
			//Decrease the pedal level and pwm by the preset increment
			if (pedal_level > (curr_pedal_level + slow_level_decrement))
    4084:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    4088:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    408c:	20 91 15 21 	lds	r18, 0x2115	; 0x802115 <slow_level_decrement>
    4090:	30 91 16 21 	lds	r19, 0x2116	; 0x802116 <slow_level_decrement+0x1>
    4094:	40 91 2f 21 	lds	r20, 0x212F	; 0x80212f <pedal_level>
    4098:	50 91 30 21 	lds	r21, 0x2130	; 0x802130 <pedal_level+0x1>
    409c:	82 0f       	add	r24, r18
    409e:	93 1f       	adc	r25, r19
    40a0:	84 17       	cp	r24, r20
    40a2:	95 07       	cpc	r25, r21
    40a4:	b8 f4       	brcc	.+46     	; 0x40d4 <__vector_22+0xad6>
			{
				pedal_level -= slow_level_decrement;
    40a6:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    40aa:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    40ae:	82 1b       	sub	r24, r18
    40b0:	93 0b       	sbc	r25, r19
    40b2:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    40b6:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(GET_MOTOR_SPEED() - pwm_decrement);
    40ba:	e0 e0       	ldi	r30, 0x00	; 0
    40bc:	f9 e0       	ldi	r31, 0x09	; 9
    40be:	82 a5       	ldd	r24, Z+42	; 0x2a
    40c0:	93 a5       	ldd	r25, Z+43	; 0x2b
    40c2:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <pwm_decrement>
    40c6:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <pwm_decrement+0x1>
    40ca:	82 1b       	sub	r24, r18
    40cc:	93 0b       	sbc	r25, r19
    40ce:	82 a7       	std	Z+42, r24	; 0x2a
    40d0:	93 a7       	std	Z+43, r25	; 0x2b
    40d2:	5e c0       	rjmp	.+188    	; 0x4190 <__vector_22+0xb92>
			}
			//If the difference between the pedal level and the current pedal level is less than the level increment
			//Decrease the pedal level and pwm to the current pedal level
			else if (pedal_level >= (curr_pedal_level + PEDAL_LEVEL_HYSTERESIS) && pedal_level > PEDAL_LEVEL_HYSTERESIS)
    40d4:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    40d8:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    40dc:	20 91 2f 21 	lds	r18, 0x212F	; 0x80212f <pedal_level>
    40e0:	30 91 30 21 	lds	r19, 0x2130	; 0x802130 <pedal_level+0x1>
    40e4:	8c 59       	subi	r24, 0x9C	; 156
    40e6:	9f 4f       	sbci	r25, 0xFF	; 255
    40e8:	28 17       	cp	r18, r24
    40ea:	39 07       	cpc	r19, r25
    40ec:	c0 f1       	brcs	.+112    	; 0x415e <__vector_22+0xb60>
    40ee:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <pedal_level>
    40f2:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <pedal_level+0x1>
    40f6:	85 36       	cpi	r24, 0x65	; 101
    40f8:	91 05       	cpc	r25, r1
    40fa:	88 f1       	brcs	.+98     	; 0x415e <__vector_22+0xb60>
			{
				pedal_level = curr_pedal_level;
    40fc:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    4100:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    4104:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <pedal_level>
    4108:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <pedal_level+0x1>
				SET_MOTOR_SPEED(pedal_level * slow_level_pwm_ratio + minimum_pwm);
    410c:	60 91 2f 21 	lds	r22, 0x212F	; 0x80212f <pedal_level>
    4110:	70 91 30 21 	lds	r23, 0x2130	; 0x802130 <pedal_level+0x1>
    4114:	80 e0       	ldi	r24, 0x00	; 0
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    411c:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <slow_level_pwm_ratio>
    4120:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <slow_level_pwm_ratio+0x1>
    4124:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <slow_level_pwm_ratio+0x2>
    4128:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <slow_level_pwm_ratio+0x3>
    412c:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsf3>
    4130:	6b 01       	movw	r12, r22
    4132:	7c 01       	movw	r14, r24
    4134:	60 91 17 21 	lds	r22, 0x2117	; 0x802117 <minimum_pwm>
    4138:	70 91 18 21 	lds	r23, 0x2118	; 0x802118 <minimum_pwm+0x1>
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 49 23 	call	0x4692	; 0x4692 <__floatunsisf>
    4144:	9b 01       	movw	r18, r22
    4146:	ac 01       	movw	r20, r24
    4148:	c7 01       	movw	r24, r14
    414a:	b6 01       	movw	r22, r12
    414c:	0e 94 37 22 	call	0x446e	; 0x446e <__addsf3>
    4150:	0e 94 1a 23 	call	0x4634	; 0x4634 <__fixunssfsi>
    4154:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    4158:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    415c:	19 c0       	rjmp	.+50     	; 0x4190 <__vector_22+0xb92>
			}
			else if (curr_pedal_level <= PEDAL_LEVEL_HYSTERESIS)
    415e:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <curr_pedal_level>
    4162:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <curr_pedal_level+0x1>
    4166:	85 36       	cpi	r24, 0x65	; 101
    4168:	91 05       	cpc	r25, r1
    416a:	90 f4       	brcc	.+36     	; 0x4190 <__vector_22+0xb92>
			{
				if (pedal_state == OFF)
    416c:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <pedal_state>
    4170:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <pedal_state+0x1>
    4174:	89 2b       	or	r24, r25
    4176:	61 f4       	brne	.+24     	; 0x4190 <__vector_22+0xb92>
				{
					pedal_level = OFF;
    4178:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <pedal_level>
    417c:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <pedal_level+0x1>
					SET_MOTOR_SPEED(minimum_pwm);
    4180:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <minimum_pwm>
    4184:	90 91 18 21 	lds	r25, 0x2118	; 0x802118 <minimum_pwm+0x1>
    4188:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    418c:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
				}
			}
		}

	}
}
    4190:	ff 91       	pop	r31
    4192:	ef 91       	pop	r30
    4194:	bf 91       	pop	r27
    4196:	af 91       	pop	r26
    4198:	9f 91       	pop	r25
    419a:	8f 91       	pop	r24
    419c:	7f 91       	pop	r23
    419e:	6f 91       	pop	r22
    41a0:	5f 91       	pop	r21
    41a2:	4f 91       	pop	r20
    41a4:	3f 91       	pop	r19
    41a6:	2f 91       	pop	r18
    41a8:	ff 90       	pop	r15
    41aa:	ef 90       	pop	r14
    41ac:	df 90       	pop	r13
    41ae:	cf 90       	pop	r12
    41b0:	0f 90       	pop	r0
    41b2:	0f be       	out	0x3f, r0	; 63
    41b4:	0f 90       	pop	r0
    41b6:	1f 90       	pop	r1
    41b8:	18 95       	reti

000041ba <__vector_85>:

//IVA002: Added for CAN Tx Queue
ISR(CAN_TX_TIMER_INT)
{
    41ba:	1f 92       	push	r1
    41bc:	0f 92       	push	r0
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	0f 92       	push	r0
    41c2:	11 24       	eor	r1, r1
    41c4:	2f 93       	push	r18
    41c6:	3f 93       	push	r19
    41c8:	4f 93       	push	r20
    41ca:	5f 93       	push	r21
    41cc:	6f 93       	push	r22
    41ce:	7f 93       	push	r23
    41d0:	8f 93       	push	r24
    41d2:	9f 93       	push	r25
    41d4:	af 93       	push	r26
    41d6:	bf 93       	push	r27
    41d8:	ef 93       	push	r30
    41da:	ff 93       	push	r31
	CQTx_dequeue();
    41dc:	0e 94 86 08 	call	0x110c	; 0x110c <CQTx_dequeue>
	TCD1.CNT = 0;
    41e0:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <__TEXT_REGION_LENGTH__+0x700960>
    41e4:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <__TEXT_REGION_LENGTH__+0x700961>
}
    41e8:	ff 91       	pop	r31
    41ea:	ef 91       	pop	r30
    41ec:	bf 91       	pop	r27
    41ee:	af 91       	pop	r26
    41f0:	9f 91       	pop	r25
    41f2:	8f 91       	pop	r24
    41f4:	7f 91       	pop	r23
    41f6:	6f 91       	pop	r22
    41f8:	5f 91       	pop	r21
    41fa:	4f 91       	pop	r20
    41fc:	3f 91       	pop	r19
    41fe:	2f 91       	pop	r18
    4200:	0f 90       	pop	r0
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	0f 90       	pop	r0
    4206:	1f 90       	pop	r1
    4208:	18 95       	reti

0000420a <TWI_MasterInit>:
	uint8_t address,
	uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    420a:	fc 01       	movw	r30, r24
    420c:	60 83       	st	Z, r22
    420e:	71 83       	std	Z+1, r23	; 0x01
    4210:	48 63       	ori	r20, 0x38	; 56
    4212:	db 01       	movw	r26, r22
    4214:	11 96       	adiw	r26, 0x01	; 1
    4216:	4c 93       	st	X, r20
    4218:	a0 81       	ld	r26, Z
    421a:	b1 81       	ldd	r27, Z+1	; 0x01
    421c:	15 96       	adiw	r26, 0x05	; 5
    421e:	2c 93       	st	X, r18
    4220:	01 90       	ld	r0, Z+
    4222:	f0 81       	ld	r31, Z
    4224:	e0 2d       	mov	r30, r0
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	84 83       	std	Z+4, r24	; 0x04
    422a:	08 95       	ret

0000422c <TWI_MasterWriteRead>:
    422c:	ef 92       	push	r14
    422e:	ff 92       	push	r15
    4230:	0f 93       	push	r16
    4232:	cf 93       	push	r28
    4234:	df 93       	push	r29
    4236:	ec 01       	movw	r28, r24
    4238:	25 36       	cpi	r18, 0x65	; 101
    423a:	08 f0       	brcs	.+2      	; 0x423e <TWI_MasterWriteRead+0x12>
    423c:	48 c0       	rjmp	.+144    	; 0x42ce <TWI_MasterWriteRead+0xa2>
    423e:	0a 31       	cpi	r16, 0x1A	; 26
    4240:	08 f0       	brcs	.+2      	; 0x4244 <TWI_MasterWriteRead+0x18>
    4242:	47 c0       	rjmp	.+142    	; 0x42d2 <TWI_MasterWriteRead+0xa6>
    4244:	fc 01       	movw	r30, r24
    4246:	ec 57       	subi	r30, 0x7C	; 124
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 81       	ld	r24, Z
    424c:	81 11       	cpse	r24, r1
    424e:	43 c0       	rjmp	.+134    	; 0x42d6 <TWI_MasterWriteRead+0xaa>
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	80 83       	st	Z, r24
    4254:	31 96       	adiw	r30, 0x01	; 1
    4256:	10 82       	st	Z, r1
    4258:	66 0f       	add	r22, r22
    425a:	6a 83       	std	Y+2, r22	; 0x02
    425c:	22 23       	and	r18, r18
    425e:	a1 f0       	breq	.+40     	; 0x4288 <TWI_MasterWriteRead+0x5c>
    4260:	7a 01       	movw	r14, r20
    4262:	6f ef       	ldi	r22, 0xFF	; 255
    4264:	62 0f       	add	r22, r18
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	6f 5f       	subi	r22, 0xFF	; 255
    426a:	7f 4f       	sbci	r23, 0xFF	; 255
    426c:	64 0f       	add	r22, r20
    426e:	75 1f       	adc	r23, r21
    4270:	fa 01       	movw	r30, r20
    4272:	df 01       	movw	r26, r30
    4274:	ae 19       	sub	r26, r14
    4276:	bf 09       	sbc	r27, r15
    4278:	91 91       	ld	r25, Z+
    427a:	ac 0f       	add	r26, r28
    427c:	bd 1f       	adc	r27, r29
    427e:	13 96       	adiw	r26, 0x03	; 3
    4280:	9c 93       	st	X, r25
    4282:	e6 17       	cp	r30, r22
    4284:	f7 07       	cpc	r31, r23
    4286:	a9 f7       	brne	.-22     	; 0x4272 <TWI_MasterWriteRead+0x46>
    4288:	fe 01       	movw	r30, r28
    428a:	e0 58       	subi	r30, 0x80	; 128
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	20 83       	st	Z, r18
    4290:	de 01       	movw	r26, r28
    4292:	af 57       	subi	r26, 0x7F	; 127
    4294:	bf 4f       	sbci	r27, 0xFF	; 255
    4296:	0c 93       	st	X, r16
    4298:	11 96       	adiw	r26, 0x01	; 1
    429a:	1c 92       	st	X, r1
    429c:	11 96       	adiw	r26, 0x01	; 1
    429e:	1c 92       	st	X, r1
    42a0:	80 81       	ld	r24, Z
    42a2:	88 23       	and	r24, r24
    42a4:	39 f0       	breq	.+14     	; 0x42b4 <TWI_MasterWriteRead+0x88>
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	8e 7f       	andi	r24, 0xFE	; 254
    42aa:	e8 81       	ld	r30, Y
    42ac:	f9 81       	ldd	r31, Y+1	; 0x01
    42ae:	86 83       	std	Z+6, r24	; 0x06
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	14 c0       	rjmp	.+40     	; 0x42dc <TWI_MasterWriteRead+0xb0>
    42b4:	fe 01       	movw	r30, r28
    42b6:	ef 57       	subi	r30, 0x7F	; 127
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	80 81       	ld	r24, Z
    42bc:	88 23       	and	r24, r24
    42be:	69 f0       	breq	.+26     	; 0x42da <TWI_MasterWriteRead+0xae>
    42c0:	8a 81       	ldd	r24, Y+2	; 0x02
    42c2:	81 60       	ori	r24, 0x01	; 1
    42c4:	e8 81       	ld	r30, Y
    42c6:	f9 81       	ldd	r31, Y+1	; 0x01
    42c8:	86 83       	std	Z+6, r24	; 0x06
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	07 c0       	rjmp	.+14     	; 0x42dc <TWI_MasterWriteRead+0xb0>
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	05 c0       	rjmp	.+10     	; 0x42dc <TWI_MasterWriteRead+0xb0>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	03 c0       	rjmp	.+6      	; 0x42dc <TWI_MasterWriteRead+0xb0>
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	01 c0       	rjmp	.+2      	; 0x42dc <TWI_MasterWriteRead+0xb0>
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	0f 91       	pop	r16
    42e2:	ff 90       	pop	r15
    42e4:	ef 90       	pop	r14
    42e6:	08 95       	ret

000042e8 <TWI_MasterWrite>:
    42e8:	0f 93       	push	r16
    42ea:	00 e0       	ldi	r16, 0x00	; 0
    42ec:	0e 94 16 21 	call	0x422c	; 0x422c <TWI_MasterWriteRead>
    42f0:	2f ef       	ldi	r18, 0xFF	; 255
    42f2:	39 ef       	ldi	r19, 0xF9	; 249
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	21 50       	subi	r18, 0x01	; 1
    42f8:	30 40       	sbci	r19, 0x00	; 0
    42fa:	90 40       	sbci	r25, 0x00	; 0
    42fc:	e1 f7       	brne	.-8      	; 0x42f6 <TWI_MasterWrite+0xe>
    42fe:	00 c0       	rjmp	.+0      	; 0x4300 <TWI_MasterWrite+0x18>
    4300:	00 00       	nop
    4302:	0f 91       	pop	r16
    4304:	08 95       	ret

00004306 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{

	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4306:	dc 01       	movw	r26, r24
    4308:	ed 91       	ld	r30, X+
    430a:	fc 91       	ld	r31, X
    430c:	11 97       	sbiw	r26, 0x01	; 1
    430e:	24 81       	ldd	r18, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    4310:	22 ff       	sbrs	r18, 2
    4312:	05 c0       	rjmp	.+10     	; 0x431e <TWI_MasterArbitrationLostBusErrorHandler+0x18>
		twi->result = TWIM_RESULT_BUS_ERROR;
    4314:	34 e0       	ldi	r19, 0x04	; 4
    4316:	ab 57       	subi	r26, 0x7B	; 123
    4318:	bf 4f       	sbci	r27, 0xFF	; 255
    431a:	3c 93       	st	X, r19
    431c:	05 c0       	rjmp	.+10     	; 0x4328 <TWI_MasterArbitrationLostBusErrorHandler+0x22>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    431e:	33 e0       	ldi	r19, 0x03	; 3
    4320:	dc 01       	movw	r26, r24
    4322:	ab 57       	subi	r26, 0x7B	; 123
    4324:	bf 4f       	sbci	r27, 0xFF	; 255
    4326:	3c 93       	st	X, r19
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    4328:	28 60       	ori	r18, 0x08	; 8
    432a:	24 83       	std	Z+4, r18	; 0x04

	twi->status = TWIM_STATUS_READY;
    432c:	fc 01       	movw	r30, r24
    432e:	ec 57       	subi	r30, 0x7C	; 124
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	10 82       	st	Z, r1
    4334:	08 95       	ret

00004336 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    4336:	cf 93       	push	r28
    4338:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite = twi->bytesToWrite;
    433a:	fc 01       	movw	r30, r24
    433c:	e0 58       	subi	r30, 0x80	; 128
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	30 81       	ld	r19, Z
	uint8_t bytesToRead = twi->bytesToRead;
    4342:	31 96       	adiw	r30, 0x01	; 1
    4344:	40 81       	ld	r20, Z

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    4346:	dc 01       	movw	r26, r24
    4348:	ed 91       	ld	r30, X+
    434a:	fc 91       	ld	r31, X
    434c:	24 81       	ldd	r18, Z+4	; 0x04
    434e:	24 ff       	sbrs	r18, 4
    4350:	0a c0       	rjmp	.+20     	; 0x4366 <TWI_MasterWriteHandler+0x30>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4352:	23 e0       	ldi	r18, 0x03	; 3
    4354:	23 83       	std	Z+3, r18	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    4356:	fc 01       	movw	r30, r24
    4358:	eb 57       	subi	r30, 0x7B	; 123
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	25 e0       	ldi	r18, 0x05	; 5
    435e:	20 83       	st	Z, r18
		twi->status = TWIM_STATUS_READY;
    4360:	31 97       	sbiw	r30, 0x01	; 1
    4362:	10 82       	st	Z, r1
    4364:	25 c0       	rjmp	.+74     	; 0x43b0 <TWI_MasterWriteHandler+0x7a>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    4366:	dc 01       	movw	r26, r24
    4368:	ae 57       	subi	r26, 0x7E	; 126
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	2c 91       	ld	r18, X
    436e:	23 17       	cp	r18, r19
    4370:	50 f4       	brcc	.+20     	; 0x4386 <TWI_MasterWriteHandler+0x50>
		uint8_t data = twi->writeData[twi->bytesWritten];
    4372:	2c 91       	ld	r18, X
    4374:	ec 01       	movw	r28, r24
    4376:	c2 0f       	add	r28, r18
    4378:	d1 1d       	adc	r29, r1
    437a:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    437c:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    437e:	8c 91       	ld	r24, X
    4380:	8f 5f       	subi	r24, 0xFF	; 255
    4382:	8c 93       	st	X, r24
    4384:	15 c0       	rjmp	.+42     	; 0x43b0 <TWI_MasterWriteHandler+0x7a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    4386:	dc 01       	movw	r26, r24
    4388:	ad 57       	subi	r26, 0x7D	; 125
    438a:	bf 4f       	sbci	r27, 0xFF	; 255
    438c:	2c 91       	ld	r18, X
    438e:	24 17       	cp	r18, r20
    4390:	30 f4       	brcc	.+12     	; 0x439e <TWI_MasterWriteHandler+0x68>
		uint8_t readAddress = twi->address | 0x01;
    4392:	dc 01       	movw	r26, r24
    4394:	12 96       	adiw	r26, 0x02	; 2
    4396:	8c 91       	ld	r24, X
    4398:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    439a:	86 83       	std	Z+6, r24	; 0x06
    439c:	09 c0       	rjmp	.+18     	; 0x43b0 <TWI_MasterWriteHandler+0x7a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    439e:	23 e0       	ldi	r18, 0x03	; 3
    43a0:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    43a2:	fc 01       	movw	r30, r24
    43a4:	eb 57       	subi	r30, 0x7B	; 123
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	21 e0       	ldi	r18, 0x01	; 1
    43aa:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    43ac:	31 97       	sbiw	r30, 0x01	; 1
    43ae:	10 82       	st	Z, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	08 95       	ret

000043b6 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    43b6:	fc 01       	movw	r30, r24
    43b8:	ed 57       	subi	r30, 0x7D	; 125
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	20 81       	ld	r18, Z
    43be:	29 31       	cpi	r18, 0x19	; 25
    43c0:	90 f4       	brcc	.+36     	; 0x43e6 <TWI_MasterReadHandler+0x30>
		uint8_t data = twi->interface->MASTER.DATA;
    43c2:	dc 01       	movw	r26, r24
    43c4:	ed 91       	ld	r30, X+
    43c6:	fc 91       	ld	r31, X
    43c8:	11 97       	sbiw	r26, 0x01	; 1
    43ca:	27 81       	ldd	r18, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    43cc:	fc 01       	movw	r30, r24
    43ce:	ed 57       	subi	r30, 0x7D	; 125
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	30 81       	ld	r19, Z
    43d4:	a3 0f       	add	r26, r19
    43d6:	b1 1d       	adc	r27, r1
    43d8:	a9 59       	subi	r26, 0x99	; 153
    43da:	bf 4f       	sbci	r27, 0xFF	; 255
    43dc:	2c 93       	st	X, r18
		twi->bytesRead++;
    43de:	20 81       	ld	r18, Z
    43e0:	2f 5f       	subi	r18, 0xFF	; 255
    43e2:	20 83       	st	Z, r18
    43e4:	0c c0       	rjmp	.+24     	; 0x43fe <TWI_MasterReadHandler+0x48>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    43e6:	dc 01       	movw	r26, r24
    43e8:	ed 91       	ld	r30, X+
    43ea:	fc 91       	ld	r31, X
    43ec:	23 e0       	ldi	r18, 0x03	; 3
    43ee:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    43f0:	22 e0       	ldi	r18, 0x02	; 2
    43f2:	fc 01       	movw	r30, r24
    43f4:	eb 57       	subi	r30, 0x7B	; 123
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    43fa:	31 97       	sbiw	r30, 0x01	; 1
    43fc:	10 82       	st	Z, r1
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    43fe:	fc 01       	movw	r30, r24
    4400:	ef 57       	subi	r30, 0x7F	; 127
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	30 81       	ld	r19, Z

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    4406:	32 96       	adiw	r30, 0x02	; 2
    4408:	20 81       	ld	r18, Z
    440a:	23 17       	cp	r18, r19
    440c:	30 f4       	brcc	.+12     	; 0x441a <TWI_MasterReadHandler+0x64>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    440e:	dc 01       	movw	r26, r24
    4410:	ed 91       	ld	r30, X+
    4412:	fc 91       	ld	r31, X
    4414:	82 e0       	ldi	r24, 0x02	; 2
    4416:	83 83       	std	Z+3, r24	; 0x03
    4418:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    441a:	dc 01       	movw	r26, r24
    441c:	ed 91       	ld	r30, X+
    441e:	fc 91       	ld	r31, X
    4420:	27 e0       	ldi	r18, 0x07	; 7
    4422:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4424:	fc 01       	movw	r30, r24
    4426:	eb 57       	subi	r30, 0x7B	; 123
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	21 e0       	ldi	r18, 0x01	; 1
    442c:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    442e:	31 97       	sbiw	r30, 0x01	; 1
    4430:	10 82       	st	Z, r1
    4432:	08 95       	ret

00004434 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4434:	dc 01       	movw	r26, r24
    4436:	ed 91       	ld	r30, X+
    4438:	fc 91       	ld	r31, X
    443a:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    443c:	32 2f       	mov	r19, r18
    443e:	3c 70       	andi	r19, 0x0C	; 12
    4440:	19 f0       	breq	.+6      	; 0x4448 <TWI_MasterInterruptHandler+0x14>
		(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    4442:	0e 94 83 21 	call	0x4306	; 0x4306 <TWI_MasterArbitrationLostBusErrorHandler>
    4446:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    4448:	26 ff       	sbrs	r18, 6
    444a:	03 c0       	rjmp	.+6      	; 0x4452 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    444c:	0e 94 9b 21 	call	0x4336	; 0x4336 <TWI_MasterWriteHandler>
    4450:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    4452:	22 23       	and	r18, r18
    4454:	1c f4       	brge	.+6      	; 0x445c <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    4456:	0e 94 db 21 	call	0x43b6	; 0x43b6 <TWI_MasterReadHandler>
    445a:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    445c:	fc 01       	movw	r30, r24
    445e:	eb 57       	subi	r30, 0x7B	; 123
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	26 e0       	ldi	r18, 0x06	; 6
    4464:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    4466:	31 97       	sbiw	r30, 0x01	; 1
    4468:	10 82       	st	Z, r1
    446a:	08 95       	ret

0000446c <__subsf3>:
    446c:	50 58       	subi	r21, 0x80	; 128

0000446e <__addsf3>:
    446e:	bb 27       	eor	r27, r27
    4470:	aa 27       	eor	r26, r26
    4472:	0e 94 4e 22 	call	0x449c	; 0x449c <__addsf3x>
    4476:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__fp_round>
    447a:	0e 94 b3 23 	call	0x4766	; 0x4766 <__fp_pscA>
    447e:	38 f0       	brcs	.+14     	; 0x448e <__addsf3+0x20>
    4480:	0e 94 ba 23 	call	0x4774	; 0x4774 <__fp_pscB>
    4484:	20 f0       	brcs	.+8      	; 0x448e <__addsf3+0x20>
    4486:	39 f4       	brne	.+14     	; 0x4496 <__addsf3+0x28>
    4488:	9f 3f       	cpi	r25, 0xFF	; 255
    448a:	19 f4       	brne	.+6      	; 0x4492 <__addsf3+0x24>
    448c:	26 f4       	brtc	.+8      	; 0x4496 <__addsf3+0x28>
    448e:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__fp_nan>
    4492:	0e f4       	brtc	.+2      	; 0x4496 <__addsf3+0x28>
    4494:	e0 95       	com	r30
    4496:	e7 fb       	bst	r30, 7
    4498:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <__fp_inf>

0000449c <__addsf3x>:
    449c:	e9 2f       	mov	r30, r25
    449e:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <__fp_split3>
    44a2:	58 f3       	brcs	.-42     	; 0x447a <__addsf3+0xc>
    44a4:	ba 17       	cp	r27, r26
    44a6:	62 07       	cpc	r22, r18
    44a8:	73 07       	cpc	r23, r19
    44aa:	84 07       	cpc	r24, r20
    44ac:	95 07       	cpc	r25, r21
    44ae:	20 f0       	brcs	.+8      	; 0x44b8 <__addsf3x+0x1c>
    44b0:	79 f4       	brne	.+30     	; 0x44d0 <__addsf3x+0x34>
    44b2:	a6 f5       	brtc	.+104    	; 0x451c <__addsf3x+0x80>
    44b4:	0c 94 f4 23 	jmp	0x47e8	; 0x47e8 <__fp_zero>
    44b8:	0e f4       	brtc	.+2      	; 0x44bc <__addsf3x+0x20>
    44ba:	e0 95       	com	r30
    44bc:	0b 2e       	mov	r0, r27
    44be:	ba 2f       	mov	r27, r26
    44c0:	a0 2d       	mov	r26, r0
    44c2:	0b 01       	movw	r0, r22
    44c4:	b9 01       	movw	r22, r18
    44c6:	90 01       	movw	r18, r0
    44c8:	0c 01       	movw	r0, r24
    44ca:	ca 01       	movw	r24, r20
    44cc:	a0 01       	movw	r20, r0
    44ce:	11 24       	eor	r1, r1
    44d0:	ff 27       	eor	r31, r31
    44d2:	59 1b       	sub	r21, r25
    44d4:	99 f0       	breq	.+38     	; 0x44fc <__addsf3x+0x60>
    44d6:	59 3f       	cpi	r21, 0xF9	; 249
    44d8:	50 f4       	brcc	.+20     	; 0x44ee <__addsf3x+0x52>
    44da:	50 3e       	cpi	r21, 0xE0	; 224
    44dc:	68 f1       	brcs	.+90     	; 0x4538 <__addsf3x+0x9c>
    44de:	1a 16       	cp	r1, r26
    44e0:	f0 40       	sbci	r31, 0x00	; 0
    44e2:	a2 2f       	mov	r26, r18
    44e4:	23 2f       	mov	r18, r19
    44e6:	34 2f       	mov	r19, r20
    44e8:	44 27       	eor	r20, r20
    44ea:	58 5f       	subi	r21, 0xF8	; 248
    44ec:	f3 cf       	rjmp	.-26     	; 0x44d4 <__addsf3x+0x38>
    44ee:	46 95       	lsr	r20
    44f0:	37 95       	ror	r19
    44f2:	27 95       	ror	r18
    44f4:	a7 95       	ror	r26
    44f6:	f0 40       	sbci	r31, 0x00	; 0
    44f8:	53 95       	inc	r21
    44fa:	c9 f7       	brne	.-14     	; 0x44ee <__addsf3x+0x52>
    44fc:	7e f4       	brtc	.+30     	; 0x451c <__addsf3x+0x80>
    44fe:	1f 16       	cp	r1, r31
    4500:	ba 0b       	sbc	r27, r26
    4502:	62 0b       	sbc	r22, r18
    4504:	73 0b       	sbc	r23, r19
    4506:	84 0b       	sbc	r24, r20
    4508:	ba f0       	brmi	.+46     	; 0x4538 <__addsf3x+0x9c>
    450a:	91 50       	subi	r25, 0x01	; 1
    450c:	a1 f0       	breq	.+40     	; 0x4536 <__addsf3x+0x9a>
    450e:	ff 0f       	add	r31, r31
    4510:	bb 1f       	adc	r27, r27
    4512:	66 1f       	adc	r22, r22
    4514:	77 1f       	adc	r23, r23
    4516:	88 1f       	adc	r24, r24
    4518:	c2 f7       	brpl	.-16     	; 0x450a <__addsf3x+0x6e>
    451a:	0e c0       	rjmp	.+28     	; 0x4538 <__addsf3x+0x9c>
    451c:	ba 0f       	add	r27, r26
    451e:	62 1f       	adc	r22, r18
    4520:	73 1f       	adc	r23, r19
    4522:	84 1f       	adc	r24, r20
    4524:	48 f4       	brcc	.+18     	; 0x4538 <__addsf3x+0x9c>
    4526:	87 95       	ror	r24
    4528:	77 95       	ror	r23
    452a:	67 95       	ror	r22
    452c:	b7 95       	ror	r27
    452e:	f7 95       	ror	r31
    4530:	9e 3f       	cpi	r25, 0xFE	; 254
    4532:	08 f0       	brcs	.+2      	; 0x4536 <__addsf3x+0x9a>
    4534:	b0 cf       	rjmp	.-160    	; 0x4496 <__addsf3+0x28>
    4536:	93 95       	inc	r25
    4538:	88 0f       	add	r24, r24
    453a:	08 f0       	brcs	.+2      	; 0x453e <__addsf3x+0xa2>
    453c:	99 27       	eor	r25, r25
    453e:	ee 0f       	add	r30, r30
    4540:	97 95       	ror	r25
    4542:	87 95       	ror	r24
    4544:	08 95       	ret

00004546 <__cmpsf2>:
    4546:	0e 94 86 23 	call	0x470c	; 0x470c <__fp_cmp>
    454a:	08 f4       	brcc	.+2      	; 0x454e <__cmpsf2+0x8>
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	08 95       	ret

00004550 <__divsf3>:
    4550:	0e 94 bc 22 	call	0x4578	; 0x4578 <__divsf3x>
    4554:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__fp_round>
    4558:	0e 94 ba 23 	call	0x4774	; 0x4774 <__fp_pscB>
    455c:	58 f0       	brcs	.+22     	; 0x4574 <__divsf3+0x24>
    455e:	0e 94 b3 23 	call	0x4766	; 0x4766 <__fp_pscA>
    4562:	40 f0       	brcs	.+16     	; 0x4574 <__divsf3+0x24>
    4564:	29 f4       	brne	.+10     	; 0x4570 <__divsf3+0x20>
    4566:	5f 3f       	cpi	r21, 0xFF	; 255
    4568:	29 f0       	breq	.+10     	; 0x4574 <__divsf3+0x24>
    456a:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <__fp_inf>
    456e:	51 11       	cpse	r21, r1
    4570:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <__fp_szero>
    4574:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__fp_nan>

00004578 <__divsf3x>:
    4578:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <__fp_split3>
    457c:	68 f3       	brcs	.-38     	; 0x4558 <__divsf3+0x8>

0000457e <__divsf3_pse>:
    457e:	99 23       	and	r25, r25
    4580:	b1 f3       	breq	.-20     	; 0x456e <__divsf3+0x1e>
    4582:	55 23       	and	r21, r21
    4584:	91 f3       	breq	.-28     	; 0x456a <__divsf3+0x1a>
    4586:	95 1b       	sub	r25, r21
    4588:	55 0b       	sbc	r21, r21
    458a:	bb 27       	eor	r27, r27
    458c:	aa 27       	eor	r26, r26
    458e:	62 17       	cp	r22, r18
    4590:	73 07       	cpc	r23, r19
    4592:	84 07       	cpc	r24, r20
    4594:	38 f0       	brcs	.+14     	; 0x45a4 <__divsf3_pse+0x26>
    4596:	9f 5f       	subi	r25, 0xFF	; 255
    4598:	5f 4f       	sbci	r21, 0xFF	; 255
    459a:	22 0f       	add	r18, r18
    459c:	33 1f       	adc	r19, r19
    459e:	44 1f       	adc	r20, r20
    45a0:	aa 1f       	adc	r26, r26
    45a2:	a9 f3       	breq	.-22     	; 0x458e <__divsf3_pse+0x10>
    45a4:	35 d0       	rcall	.+106    	; 0x4610 <__divsf3_pse+0x92>
    45a6:	0e 2e       	mov	r0, r30
    45a8:	3a f0       	brmi	.+14     	; 0x45b8 <__divsf3_pse+0x3a>
    45aa:	e0 e8       	ldi	r30, 0x80	; 128
    45ac:	32 d0       	rcall	.+100    	; 0x4612 <__divsf3_pse+0x94>
    45ae:	91 50       	subi	r25, 0x01	; 1
    45b0:	50 40       	sbci	r21, 0x00	; 0
    45b2:	e6 95       	lsr	r30
    45b4:	00 1c       	adc	r0, r0
    45b6:	ca f7       	brpl	.-14     	; 0x45aa <__divsf3_pse+0x2c>
    45b8:	2b d0       	rcall	.+86     	; 0x4610 <__divsf3_pse+0x92>
    45ba:	fe 2f       	mov	r31, r30
    45bc:	29 d0       	rcall	.+82     	; 0x4610 <__divsf3_pse+0x92>
    45be:	66 0f       	add	r22, r22
    45c0:	77 1f       	adc	r23, r23
    45c2:	88 1f       	adc	r24, r24
    45c4:	bb 1f       	adc	r27, r27
    45c6:	26 17       	cp	r18, r22
    45c8:	37 07       	cpc	r19, r23
    45ca:	48 07       	cpc	r20, r24
    45cc:	ab 07       	cpc	r26, r27
    45ce:	b0 e8       	ldi	r27, 0x80	; 128
    45d0:	09 f0       	breq	.+2      	; 0x45d4 <__divsf3_pse+0x56>
    45d2:	bb 0b       	sbc	r27, r27
    45d4:	80 2d       	mov	r24, r0
    45d6:	bf 01       	movw	r22, r30
    45d8:	ff 27       	eor	r31, r31
    45da:	93 58       	subi	r25, 0x83	; 131
    45dc:	5f 4f       	sbci	r21, 0xFF	; 255
    45de:	3a f0       	brmi	.+14     	; 0x45ee <__divsf3_pse+0x70>
    45e0:	9e 3f       	cpi	r25, 0xFE	; 254
    45e2:	51 05       	cpc	r21, r1
    45e4:	78 f0       	brcs	.+30     	; 0x4604 <__divsf3_pse+0x86>
    45e6:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <__fp_inf>
    45ea:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <__fp_szero>
    45ee:	5f 3f       	cpi	r21, 0xFF	; 255
    45f0:	e4 f3       	brlt	.-8      	; 0x45ea <__divsf3_pse+0x6c>
    45f2:	98 3e       	cpi	r25, 0xE8	; 232
    45f4:	d4 f3       	brlt	.-12     	; 0x45ea <__divsf3_pse+0x6c>
    45f6:	86 95       	lsr	r24
    45f8:	77 95       	ror	r23
    45fa:	67 95       	ror	r22
    45fc:	b7 95       	ror	r27
    45fe:	f7 95       	ror	r31
    4600:	9f 5f       	subi	r25, 0xFF	; 255
    4602:	c9 f7       	brne	.-14     	; 0x45f6 <__divsf3_pse+0x78>
    4604:	88 0f       	add	r24, r24
    4606:	91 1d       	adc	r25, r1
    4608:	96 95       	lsr	r25
    460a:	87 95       	ror	r24
    460c:	97 f9       	bld	r25, 7
    460e:	08 95       	ret
    4610:	e1 e0       	ldi	r30, 0x01	; 1
    4612:	66 0f       	add	r22, r22
    4614:	77 1f       	adc	r23, r23
    4616:	88 1f       	adc	r24, r24
    4618:	bb 1f       	adc	r27, r27
    461a:	62 17       	cp	r22, r18
    461c:	73 07       	cpc	r23, r19
    461e:	84 07       	cpc	r24, r20
    4620:	ba 07       	cpc	r27, r26
    4622:	20 f0       	brcs	.+8      	; 0x462c <__divsf3_pse+0xae>
    4624:	62 1b       	sub	r22, r18
    4626:	73 0b       	sbc	r23, r19
    4628:	84 0b       	sbc	r24, r20
    462a:	ba 0b       	sbc	r27, r26
    462c:	ee 1f       	adc	r30, r30
    462e:	88 f7       	brcc	.-30     	; 0x4612 <__divsf3_pse+0x94>
    4630:	e0 95       	com	r30
    4632:	08 95       	ret

00004634 <__fixunssfsi>:
    4634:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__fp_splitA>
    4638:	88 f0       	brcs	.+34     	; 0x465c <__fixunssfsi+0x28>
    463a:	9f 57       	subi	r25, 0x7F	; 127
    463c:	98 f0       	brcs	.+38     	; 0x4664 <__fixunssfsi+0x30>
    463e:	b9 2f       	mov	r27, r25
    4640:	99 27       	eor	r25, r25
    4642:	b7 51       	subi	r27, 0x17	; 23
    4644:	b0 f0       	brcs	.+44     	; 0x4672 <__fixunssfsi+0x3e>
    4646:	e1 f0       	breq	.+56     	; 0x4680 <__fixunssfsi+0x4c>
    4648:	66 0f       	add	r22, r22
    464a:	77 1f       	adc	r23, r23
    464c:	88 1f       	adc	r24, r24
    464e:	99 1f       	adc	r25, r25
    4650:	1a f0       	brmi	.+6      	; 0x4658 <__fixunssfsi+0x24>
    4652:	ba 95       	dec	r27
    4654:	c9 f7       	brne	.-14     	; 0x4648 <__fixunssfsi+0x14>
    4656:	14 c0       	rjmp	.+40     	; 0x4680 <__fixunssfsi+0x4c>
    4658:	b1 30       	cpi	r27, 0x01	; 1
    465a:	91 f0       	breq	.+36     	; 0x4680 <__fixunssfsi+0x4c>
    465c:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__fp_zero>
    4660:	b1 e0       	ldi	r27, 0x01	; 1
    4662:	08 95       	ret
    4664:	0c 94 f4 23 	jmp	0x47e8	; 0x47e8 <__fp_zero>
    4668:	67 2f       	mov	r22, r23
    466a:	78 2f       	mov	r23, r24
    466c:	88 27       	eor	r24, r24
    466e:	b8 5f       	subi	r27, 0xF8	; 248
    4670:	39 f0       	breq	.+14     	; 0x4680 <__fixunssfsi+0x4c>
    4672:	b9 3f       	cpi	r27, 0xF9	; 249
    4674:	cc f3       	brlt	.-14     	; 0x4668 <__fixunssfsi+0x34>
    4676:	86 95       	lsr	r24
    4678:	77 95       	ror	r23
    467a:	67 95       	ror	r22
    467c:	b3 95       	inc	r27
    467e:	d9 f7       	brne	.-10     	; 0x4676 <__fixunssfsi+0x42>
    4680:	3e f4       	brtc	.+14     	; 0x4690 <__fixunssfsi+0x5c>
    4682:	90 95       	com	r25
    4684:	80 95       	com	r24
    4686:	70 95       	com	r23
    4688:	61 95       	neg	r22
    468a:	7f 4f       	sbci	r23, 0xFF	; 255
    468c:	8f 4f       	sbci	r24, 0xFF	; 255
    468e:	9f 4f       	sbci	r25, 0xFF	; 255
    4690:	08 95       	ret

00004692 <__floatunsisf>:
    4692:	e8 94       	clt
    4694:	09 c0       	rjmp	.+18     	; 0x46a8 <__floatsisf+0x12>

00004696 <__floatsisf>:
    4696:	97 fb       	bst	r25, 7
    4698:	3e f4       	brtc	.+14     	; 0x46a8 <__floatsisf+0x12>
    469a:	90 95       	com	r25
    469c:	80 95       	com	r24
    469e:	70 95       	com	r23
    46a0:	61 95       	neg	r22
    46a2:	7f 4f       	sbci	r23, 0xFF	; 255
    46a4:	8f 4f       	sbci	r24, 0xFF	; 255
    46a6:	9f 4f       	sbci	r25, 0xFF	; 255
    46a8:	99 23       	and	r25, r25
    46aa:	a9 f0       	breq	.+42     	; 0x46d6 <__floatsisf+0x40>
    46ac:	f9 2f       	mov	r31, r25
    46ae:	96 e9       	ldi	r25, 0x96	; 150
    46b0:	bb 27       	eor	r27, r27
    46b2:	93 95       	inc	r25
    46b4:	f6 95       	lsr	r31
    46b6:	87 95       	ror	r24
    46b8:	77 95       	ror	r23
    46ba:	67 95       	ror	r22
    46bc:	b7 95       	ror	r27
    46be:	f1 11       	cpse	r31, r1
    46c0:	f8 cf       	rjmp	.-16     	; 0x46b2 <__floatsisf+0x1c>
    46c2:	fa f4       	brpl	.+62     	; 0x4702 <__floatsisf+0x6c>
    46c4:	bb 0f       	add	r27, r27
    46c6:	11 f4       	brne	.+4      	; 0x46cc <__floatsisf+0x36>
    46c8:	60 ff       	sbrs	r22, 0
    46ca:	1b c0       	rjmp	.+54     	; 0x4702 <__floatsisf+0x6c>
    46cc:	6f 5f       	subi	r22, 0xFF	; 255
    46ce:	7f 4f       	sbci	r23, 0xFF	; 255
    46d0:	8f 4f       	sbci	r24, 0xFF	; 255
    46d2:	9f 4f       	sbci	r25, 0xFF	; 255
    46d4:	16 c0       	rjmp	.+44     	; 0x4702 <__floatsisf+0x6c>
    46d6:	88 23       	and	r24, r24
    46d8:	11 f0       	breq	.+4      	; 0x46de <__floatsisf+0x48>
    46da:	96 e9       	ldi	r25, 0x96	; 150
    46dc:	11 c0       	rjmp	.+34     	; 0x4700 <__floatsisf+0x6a>
    46de:	77 23       	and	r23, r23
    46e0:	21 f0       	breq	.+8      	; 0x46ea <__floatsisf+0x54>
    46e2:	9e e8       	ldi	r25, 0x8E	; 142
    46e4:	87 2f       	mov	r24, r23
    46e6:	76 2f       	mov	r23, r22
    46e8:	05 c0       	rjmp	.+10     	; 0x46f4 <__floatsisf+0x5e>
    46ea:	66 23       	and	r22, r22
    46ec:	71 f0       	breq	.+28     	; 0x470a <__floatsisf+0x74>
    46ee:	96 e8       	ldi	r25, 0x86	; 134
    46f0:	86 2f       	mov	r24, r22
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	60 e0       	ldi	r22, 0x00	; 0
    46f6:	2a f0       	brmi	.+10     	; 0x4702 <__floatsisf+0x6c>
    46f8:	9a 95       	dec	r25
    46fa:	66 0f       	add	r22, r22
    46fc:	77 1f       	adc	r23, r23
    46fe:	88 1f       	adc	r24, r24
    4700:	da f7       	brpl	.-10     	; 0x46f8 <__floatsisf+0x62>
    4702:	88 0f       	add	r24, r24
    4704:	96 95       	lsr	r25
    4706:	87 95       	ror	r24
    4708:	97 f9       	bld	r25, 7
    470a:	08 95       	ret

0000470c <__fp_cmp>:
    470c:	99 0f       	add	r25, r25
    470e:	00 08       	sbc	r0, r0
    4710:	55 0f       	add	r21, r21
    4712:	aa 0b       	sbc	r26, r26
    4714:	e0 e8       	ldi	r30, 0x80	; 128
    4716:	fe ef       	ldi	r31, 0xFE	; 254
    4718:	16 16       	cp	r1, r22
    471a:	17 06       	cpc	r1, r23
    471c:	e8 07       	cpc	r30, r24
    471e:	f9 07       	cpc	r31, r25
    4720:	c0 f0       	brcs	.+48     	; 0x4752 <__fp_cmp+0x46>
    4722:	12 16       	cp	r1, r18
    4724:	13 06       	cpc	r1, r19
    4726:	e4 07       	cpc	r30, r20
    4728:	f5 07       	cpc	r31, r21
    472a:	98 f0       	brcs	.+38     	; 0x4752 <__fp_cmp+0x46>
    472c:	62 1b       	sub	r22, r18
    472e:	73 0b       	sbc	r23, r19
    4730:	84 0b       	sbc	r24, r20
    4732:	95 0b       	sbc	r25, r21
    4734:	39 f4       	brne	.+14     	; 0x4744 <__fp_cmp+0x38>
    4736:	0a 26       	eor	r0, r26
    4738:	61 f0       	breq	.+24     	; 0x4752 <__fp_cmp+0x46>
    473a:	23 2b       	or	r18, r19
    473c:	24 2b       	or	r18, r20
    473e:	25 2b       	or	r18, r21
    4740:	21 f4       	brne	.+8      	; 0x474a <__fp_cmp+0x3e>
    4742:	08 95       	ret
    4744:	0a 26       	eor	r0, r26
    4746:	09 f4       	brne	.+2      	; 0x474a <__fp_cmp+0x3e>
    4748:	a1 40       	sbci	r26, 0x01	; 1
    474a:	a6 95       	lsr	r26
    474c:	8f ef       	ldi	r24, 0xFF	; 255
    474e:	81 1d       	adc	r24, r1
    4750:	81 1d       	adc	r24, r1
    4752:	08 95       	ret

00004754 <__fp_inf>:
    4754:	97 f9       	bld	r25, 7
    4756:	9f 67       	ori	r25, 0x7F	; 127
    4758:	80 e8       	ldi	r24, 0x80	; 128
    475a:	70 e0       	ldi	r23, 0x00	; 0
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	08 95       	ret

00004760 <__fp_nan>:
    4760:	9f ef       	ldi	r25, 0xFF	; 255
    4762:	80 ec       	ldi	r24, 0xC0	; 192
    4764:	08 95       	ret

00004766 <__fp_pscA>:
    4766:	00 24       	eor	r0, r0
    4768:	0a 94       	dec	r0
    476a:	16 16       	cp	r1, r22
    476c:	17 06       	cpc	r1, r23
    476e:	18 06       	cpc	r1, r24
    4770:	09 06       	cpc	r0, r25
    4772:	08 95       	ret

00004774 <__fp_pscB>:
    4774:	00 24       	eor	r0, r0
    4776:	0a 94       	dec	r0
    4778:	12 16       	cp	r1, r18
    477a:	13 06       	cpc	r1, r19
    477c:	14 06       	cpc	r1, r20
    477e:	05 06       	cpc	r0, r21
    4780:	08 95       	ret

00004782 <__fp_round>:
    4782:	09 2e       	mov	r0, r25
    4784:	03 94       	inc	r0
    4786:	00 0c       	add	r0, r0
    4788:	11 f4       	brne	.+4      	; 0x478e <__fp_round+0xc>
    478a:	88 23       	and	r24, r24
    478c:	52 f0       	brmi	.+20     	; 0x47a2 <__fp_round+0x20>
    478e:	bb 0f       	add	r27, r27
    4790:	40 f4       	brcc	.+16     	; 0x47a2 <__fp_round+0x20>
    4792:	bf 2b       	or	r27, r31
    4794:	11 f4       	brne	.+4      	; 0x479a <__fp_round+0x18>
    4796:	60 ff       	sbrs	r22, 0
    4798:	04 c0       	rjmp	.+8      	; 0x47a2 <__fp_round+0x20>
    479a:	6f 5f       	subi	r22, 0xFF	; 255
    479c:	7f 4f       	sbci	r23, 0xFF	; 255
    479e:	8f 4f       	sbci	r24, 0xFF	; 255
    47a0:	9f 4f       	sbci	r25, 0xFF	; 255
    47a2:	08 95       	ret

000047a4 <__fp_split3>:
    47a4:	57 fd       	sbrc	r21, 7
    47a6:	90 58       	subi	r25, 0x80	; 128
    47a8:	44 0f       	add	r20, r20
    47aa:	55 1f       	adc	r21, r21
    47ac:	59 f0       	breq	.+22     	; 0x47c4 <__fp_splitA+0x10>
    47ae:	5f 3f       	cpi	r21, 0xFF	; 255
    47b0:	71 f0       	breq	.+28     	; 0x47ce <__fp_splitA+0x1a>
    47b2:	47 95       	ror	r20

000047b4 <__fp_splitA>:
    47b4:	88 0f       	add	r24, r24
    47b6:	97 fb       	bst	r25, 7
    47b8:	99 1f       	adc	r25, r25
    47ba:	61 f0       	breq	.+24     	; 0x47d4 <__fp_splitA+0x20>
    47bc:	9f 3f       	cpi	r25, 0xFF	; 255
    47be:	79 f0       	breq	.+30     	; 0x47de <__fp_splitA+0x2a>
    47c0:	87 95       	ror	r24
    47c2:	08 95       	ret
    47c4:	12 16       	cp	r1, r18
    47c6:	13 06       	cpc	r1, r19
    47c8:	14 06       	cpc	r1, r20
    47ca:	55 1f       	adc	r21, r21
    47cc:	f2 cf       	rjmp	.-28     	; 0x47b2 <__fp_split3+0xe>
    47ce:	46 95       	lsr	r20
    47d0:	f1 df       	rcall	.-30     	; 0x47b4 <__fp_splitA>
    47d2:	08 c0       	rjmp	.+16     	; 0x47e4 <__fp_splitA+0x30>
    47d4:	16 16       	cp	r1, r22
    47d6:	17 06       	cpc	r1, r23
    47d8:	18 06       	cpc	r1, r24
    47da:	99 1f       	adc	r25, r25
    47dc:	f1 cf       	rjmp	.-30     	; 0x47c0 <__fp_splitA+0xc>
    47de:	86 95       	lsr	r24
    47e0:	71 05       	cpc	r23, r1
    47e2:	61 05       	cpc	r22, r1
    47e4:	08 94       	sec
    47e6:	08 95       	ret

000047e8 <__fp_zero>:
    47e8:	e8 94       	clt

000047ea <__fp_szero>:
    47ea:	bb 27       	eor	r27, r27
    47ec:	66 27       	eor	r22, r22
    47ee:	77 27       	eor	r23, r23
    47f0:	cb 01       	movw	r24, r22
    47f2:	97 f9       	bld	r25, 7
    47f4:	08 95       	ret

000047f6 <__gesf2>:
    47f6:	0e 94 86 23 	call	0x470c	; 0x470c <__fp_cmp>
    47fa:	08 f4       	brcc	.+2      	; 0x47fe <__gesf2+0x8>
    47fc:	8f ef       	ldi	r24, 0xFF	; 255
    47fe:	08 95       	ret

00004800 <__mulsf3>:
    4800:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3x>
    4804:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__fp_round>
    4808:	0e 94 b3 23 	call	0x4766	; 0x4766 <__fp_pscA>
    480c:	38 f0       	brcs	.+14     	; 0x481c <__mulsf3+0x1c>
    480e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__fp_pscB>
    4812:	20 f0       	brcs	.+8      	; 0x481c <__mulsf3+0x1c>
    4814:	95 23       	and	r25, r21
    4816:	11 f0       	breq	.+4      	; 0x481c <__mulsf3+0x1c>
    4818:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <__fp_inf>
    481c:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__fp_nan>
    4820:	11 24       	eor	r1, r1
    4822:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <__fp_szero>

00004826 <__mulsf3x>:
    4826:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <__fp_split3>
    482a:	70 f3       	brcs	.-36     	; 0x4808 <__mulsf3+0x8>

0000482c <__mulsf3_pse>:
    482c:	95 9f       	mul	r25, r21
    482e:	c1 f3       	breq	.-16     	; 0x4820 <__mulsf3+0x20>
    4830:	95 0f       	add	r25, r21
    4832:	50 e0       	ldi	r21, 0x00	; 0
    4834:	55 1f       	adc	r21, r21
    4836:	62 9f       	mul	r22, r18
    4838:	f0 01       	movw	r30, r0
    483a:	72 9f       	mul	r23, r18
    483c:	bb 27       	eor	r27, r27
    483e:	f0 0d       	add	r31, r0
    4840:	b1 1d       	adc	r27, r1
    4842:	63 9f       	mul	r22, r19
    4844:	aa 27       	eor	r26, r26
    4846:	f0 0d       	add	r31, r0
    4848:	b1 1d       	adc	r27, r1
    484a:	aa 1f       	adc	r26, r26
    484c:	64 9f       	mul	r22, r20
    484e:	66 27       	eor	r22, r22
    4850:	b0 0d       	add	r27, r0
    4852:	a1 1d       	adc	r26, r1
    4854:	66 1f       	adc	r22, r22
    4856:	82 9f       	mul	r24, r18
    4858:	22 27       	eor	r18, r18
    485a:	b0 0d       	add	r27, r0
    485c:	a1 1d       	adc	r26, r1
    485e:	62 1f       	adc	r22, r18
    4860:	73 9f       	mul	r23, r19
    4862:	b0 0d       	add	r27, r0
    4864:	a1 1d       	adc	r26, r1
    4866:	62 1f       	adc	r22, r18
    4868:	83 9f       	mul	r24, r19
    486a:	a0 0d       	add	r26, r0
    486c:	61 1d       	adc	r22, r1
    486e:	22 1f       	adc	r18, r18
    4870:	74 9f       	mul	r23, r20
    4872:	33 27       	eor	r19, r19
    4874:	a0 0d       	add	r26, r0
    4876:	61 1d       	adc	r22, r1
    4878:	23 1f       	adc	r18, r19
    487a:	84 9f       	mul	r24, r20
    487c:	60 0d       	add	r22, r0
    487e:	21 1d       	adc	r18, r1
    4880:	82 2f       	mov	r24, r18
    4882:	76 2f       	mov	r23, r22
    4884:	6a 2f       	mov	r22, r26
    4886:	11 24       	eor	r1, r1
    4888:	9f 57       	subi	r25, 0x7F	; 127
    488a:	50 40       	sbci	r21, 0x00	; 0
    488c:	9a f0       	brmi	.+38     	; 0x48b4 <__mulsf3_pse+0x88>
    488e:	f1 f0       	breq	.+60     	; 0x48cc <__mulsf3_pse+0xa0>
    4890:	88 23       	and	r24, r24
    4892:	4a f0       	brmi	.+18     	; 0x48a6 <__mulsf3_pse+0x7a>
    4894:	ee 0f       	add	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	bb 1f       	adc	r27, r27
    489a:	66 1f       	adc	r22, r22
    489c:	77 1f       	adc	r23, r23
    489e:	88 1f       	adc	r24, r24
    48a0:	91 50       	subi	r25, 0x01	; 1
    48a2:	50 40       	sbci	r21, 0x00	; 0
    48a4:	a9 f7       	brne	.-22     	; 0x4890 <__mulsf3_pse+0x64>
    48a6:	9e 3f       	cpi	r25, 0xFE	; 254
    48a8:	51 05       	cpc	r21, r1
    48aa:	80 f0       	brcs	.+32     	; 0x48cc <__mulsf3_pse+0xa0>
    48ac:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <__fp_inf>
    48b0:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <__fp_szero>
    48b4:	5f 3f       	cpi	r21, 0xFF	; 255
    48b6:	e4 f3       	brlt	.-8      	; 0x48b0 <__mulsf3_pse+0x84>
    48b8:	98 3e       	cpi	r25, 0xE8	; 232
    48ba:	d4 f3       	brlt	.-12     	; 0x48b0 <__mulsf3_pse+0x84>
    48bc:	86 95       	lsr	r24
    48be:	77 95       	ror	r23
    48c0:	67 95       	ror	r22
    48c2:	b7 95       	ror	r27
    48c4:	f7 95       	ror	r31
    48c6:	e7 95       	ror	r30
    48c8:	9f 5f       	subi	r25, 0xFF	; 255
    48ca:	c1 f7       	brne	.-16     	; 0x48bc <__mulsf3_pse+0x90>
    48cc:	fe 2b       	or	r31, r30
    48ce:	88 0f       	add	r24, r24
    48d0:	91 1d       	adc	r25, r1
    48d2:	96 95       	lsr	r25
    48d4:	87 95       	ror	r24
    48d6:	97 f9       	bld	r25, 7
    48d8:	08 95       	ret

000048da <__udivmodhi4>:
    48da:	aa 1b       	sub	r26, r26
    48dc:	bb 1b       	sub	r27, r27
    48de:	51 e1       	ldi	r21, 0x11	; 17
    48e0:	07 c0       	rjmp	.+14     	; 0x48f0 <__udivmodhi4_ep>

000048e2 <__udivmodhi4_loop>:
    48e2:	aa 1f       	adc	r26, r26
    48e4:	bb 1f       	adc	r27, r27
    48e6:	a6 17       	cp	r26, r22
    48e8:	b7 07       	cpc	r27, r23
    48ea:	10 f0       	brcs	.+4      	; 0x48f0 <__udivmodhi4_ep>
    48ec:	a6 1b       	sub	r26, r22
    48ee:	b7 0b       	sbc	r27, r23

000048f0 <__udivmodhi4_ep>:
    48f0:	88 1f       	adc	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	5a 95       	dec	r21
    48f6:	a9 f7       	brne	.-22     	; 0x48e2 <__udivmodhi4_loop>
    48f8:	80 95       	com	r24
    48fa:	90 95       	com	r25
    48fc:	bc 01       	movw	r22, r24
    48fe:	cd 01       	movw	r24, r26
    4900:	08 95       	ret

00004902 <__divmodhi4>:
    4902:	97 fb       	bst	r25, 7
    4904:	07 2e       	mov	r0, r23
    4906:	16 f4       	brtc	.+4      	; 0x490c <__divmodhi4+0xa>
    4908:	00 94       	com	r0
    490a:	07 d0       	rcall	.+14     	; 0x491a <__divmodhi4_neg1>
    490c:	77 fd       	sbrc	r23, 7
    490e:	09 d0       	rcall	.+18     	; 0x4922 <__divmodhi4_neg2>
    4910:	0e 94 6d 24 	call	0x48da	; 0x48da <__udivmodhi4>
    4914:	07 fc       	sbrc	r0, 7
    4916:	05 d0       	rcall	.+10     	; 0x4922 <__divmodhi4_neg2>
    4918:	3e f4       	brtc	.+14     	; 0x4928 <__divmodhi4_exit>

0000491a <__divmodhi4_neg1>:
    491a:	90 95       	com	r25
    491c:	81 95       	neg	r24
    491e:	9f 4f       	sbci	r25, 0xFF	; 255
    4920:	08 95       	ret

00004922 <__divmodhi4_neg2>:
    4922:	70 95       	com	r23
    4924:	61 95       	neg	r22
    4926:	7f 4f       	sbci	r23, 0xFF	; 255

00004928 <__divmodhi4_exit>:
    4928:	08 95       	ret

0000492a <__udivmodsi4>:
    492a:	a1 e2       	ldi	r26, 0x21	; 33
    492c:	1a 2e       	mov	r1, r26
    492e:	aa 1b       	sub	r26, r26
    4930:	bb 1b       	sub	r27, r27
    4932:	fd 01       	movw	r30, r26
    4934:	0d c0       	rjmp	.+26     	; 0x4950 <__udivmodsi4_ep>

00004936 <__udivmodsi4_loop>:
    4936:	aa 1f       	adc	r26, r26
    4938:	bb 1f       	adc	r27, r27
    493a:	ee 1f       	adc	r30, r30
    493c:	ff 1f       	adc	r31, r31
    493e:	a2 17       	cp	r26, r18
    4940:	b3 07       	cpc	r27, r19
    4942:	e4 07       	cpc	r30, r20
    4944:	f5 07       	cpc	r31, r21
    4946:	20 f0       	brcs	.+8      	; 0x4950 <__udivmodsi4_ep>
    4948:	a2 1b       	sub	r26, r18
    494a:	b3 0b       	sbc	r27, r19
    494c:	e4 0b       	sbc	r30, r20
    494e:	f5 0b       	sbc	r31, r21

00004950 <__udivmodsi4_ep>:
    4950:	66 1f       	adc	r22, r22
    4952:	77 1f       	adc	r23, r23
    4954:	88 1f       	adc	r24, r24
    4956:	99 1f       	adc	r25, r25
    4958:	1a 94       	dec	r1
    495a:	69 f7       	brne	.-38     	; 0x4936 <__udivmodsi4_loop>
    495c:	60 95       	com	r22
    495e:	70 95       	com	r23
    4960:	80 95       	com	r24
    4962:	90 95       	com	r25
    4964:	9b 01       	movw	r18, r22
    4966:	ac 01       	movw	r20, r24
    4968:	bd 01       	movw	r22, r26
    496a:	cf 01       	movw	r24, r30
    496c:	08 95       	ret

0000496e <__tablejump2__>:
    496e:	ee 0f       	add	r30, r30
    4970:	ff 1f       	adc	r31, r31
    4972:	05 90       	lpm	r0, Z+
    4974:	f4 91       	lpm	r31, Z
    4976:	e0 2d       	mov	r30, r0
    4978:	09 94       	ijmp

0000497a <__umulhisi3>:
    497a:	a2 9f       	mul	r26, r18
    497c:	b0 01       	movw	r22, r0
    497e:	b3 9f       	mul	r27, r19
    4980:	c0 01       	movw	r24, r0
    4982:	a3 9f       	mul	r26, r19
    4984:	70 0d       	add	r23, r0
    4986:	81 1d       	adc	r24, r1
    4988:	11 24       	eor	r1, r1
    498a:	91 1d       	adc	r25, r1
    498c:	b2 9f       	mul	r27, r18
    498e:	70 0d       	add	r23, r0
    4990:	81 1d       	adc	r24, r1
    4992:	11 24       	eor	r1, r1
    4994:	91 1d       	adc	r25, r1
    4996:	08 95       	ret

00004998 <eeprom_read_block>:
    4998:	e0 ec       	ldi	r30, 0xC0	; 192
    499a:	f1 e0       	ldi	r31, 0x01	; 1
    499c:	a7 85       	ldd	r26, Z+15	; 0x0f
    499e:	a7 fd       	sbrc	r26, 7
    49a0:	fd cf       	rjmp	.-6      	; 0x499c <eeprom_read_block+0x4>
    49a2:	a4 85       	ldd	r26, Z+12	; 0x0c
    49a4:	a8 60       	ori	r26, 0x08	; 8
    49a6:	a4 87       	std	Z+12, r26	; 0x0c
    49a8:	60 50       	subi	r22, 0x00	; 0
    49aa:	70 4f       	sbci	r23, 0xF0	; 240
    49ac:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <memcpy>

000049b0 <eeprom_read_byte>:
    49b0:	03 d0       	rcall	.+6      	; 0x49b8 <eeprom_mapen>
    49b2:	80 81       	ld	r24, Z
    49b4:	99 27       	eor	r25, r25
    49b6:	08 95       	ret

000049b8 <eeprom_mapen>:
    49b8:	e0 ec       	ldi	r30, 0xC0	; 192
    49ba:	f1 e0       	ldi	r31, 0x01	; 1
    49bc:	37 85       	ldd	r19, Z+15	; 0x0f
    49be:	37 fd       	sbrc	r19, 7
    49c0:	fd cf       	rjmp	.-6      	; 0x49bc <eeprom_mapen+0x4>
    49c2:	34 85       	ldd	r19, Z+12	; 0x0c
    49c4:	38 60       	ori	r19, 0x08	; 8
    49c6:	34 87       	std	Z+12, r19	; 0x0c
    49c8:	fc 01       	movw	r30, r24
    49ca:	e0 50       	subi	r30, 0x00	; 0
    49cc:	f0 4f       	sbci	r31, 0xF0	; 240
    49ce:	08 95       	ret

000049d0 <eeprom_read_word>:
    49d0:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <eeprom_mapen>
    49d4:	80 81       	ld	r24, Z
    49d6:	91 81       	ldd	r25, Z+1	; 0x01
    49d8:	08 95       	ret

000049da <eeprom_update_block>:
    49da:	dc 01       	movw	r26, r24
    49dc:	a4 0f       	add	r26, r20
    49de:	b5 1f       	adc	r27, r21
    49e0:	41 50       	subi	r20, 0x01	; 1
    49e2:	50 40       	sbci	r21, 0x00	; 0
    49e4:	48 f0       	brcs	.+18     	; 0x49f8 <eeprom_update_block+0x1e>
    49e6:	cb 01       	movw	r24, r22
    49e8:	84 0f       	add	r24, r20
    49ea:	95 1f       	adc	r25, r21
    49ec:	2e 91       	ld	r18, -X
    49ee:	0e 94 fe 24 	call	0x49fc	; 0x49fc <eeprom_update_r18>
    49f2:	41 50       	subi	r20, 0x01	; 1
    49f4:	50 40       	sbci	r21, 0x00	; 0
    49f6:	d0 f7       	brcc	.-12     	; 0x49ec <eeprom_update_block+0x12>
    49f8:	08 95       	ret

000049fa <eeprom_update_byte>:
    49fa:	26 2f       	mov	r18, r22

000049fc <eeprom_update_r18>:
    49fc:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <eeprom_mapen>
    4a00:	00 80       	ld	r0, Z
    4a02:	02 16       	cp	r0, r18
    4a04:	19 f0       	breq	.+6      	; 0x4a0c <eeprom_update_r18+0x10>
    4a06:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <eeprom_write_r18>
    4a0a:	01 97       	sbiw	r24, 0x01	; 1
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	08 95       	ret

00004a10 <eeprom_update_word>:
    4a10:	01 96       	adiw	r24, 0x01	; 1
    4a12:	27 2f       	mov	r18, r23
    4a14:	0e 94 fe 24 	call	0x49fc	; 0x49fc <eeprom_update_r18>
    4a18:	0c 94 fd 24 	jmp	0x49fa	; 0x49fa <eeprom_update_byte>

00004a1c <eeprom_write_byte>:
    4a1c:	26 2f       	mov	r18, r22

00004a1e <eeprom_write_r18>:
    4a1e:	e0 ec       	ldi	r30, 0xC0	; 192
    4a20:	f1 e0       	ldi	r31, 0x01	; 1
    4a22:	37 85       	ldd	r19, Z+15	; 0x0f
    4a24:	37 fd       	sbrc	r19, 7
    4a26:	fd cf       	rjmp	.-6      	; 0x4a22 <eeprom_write_r18+0x4>
    4a28:	34 85       	ldd	r19, Z+12	; 0x0c
    4a2a:	37 7f       	andi	r19, 0xF7	; 247
    4a2c:	34 87       	std	Z+12, r19	; 0x0c
    4a2e:	37 85       	ldd	r19, Z+15	; 0x0f
    4a30:	31 ff       	sbrs	r19, 1
    4a32:	09 c0       	rjmp	.+18     	; 0x4a46 <eeprom_write_r18+0x28>
    4a34:	36 e3       	ldi	r19, 0x36	; 54
    4a36:	32 87       	std	Z+10, r19	; 0x0a
    4a38:	38 ed       	ldi	r19, 0xD8	; 216
    4a3a:	34 bf       	out	0x34, r19	; 52
    4a3c:	31 e0       	ldi	r19, 0x01	; 1
    4a3e:	33 87       	std	Z+11, r19	; 0x0b
    4a40:	37 85       	ldd	r19, Z+15	; 0x0f
    4a42:	37 fd       	sbrc	r19, 7
    4a44:	fd cf       	rjmp	.-6      	; 0x4a40 <eeprom_write_r18+0x22>
    4a46:	33 e3       	ldi	r19, 0x33	; 51
    4a48:	32 87       	std	Z+10, r19	; 0x0a
    4a4a:	80 83       	st	Z, r24
    4a4c:	91 83       	std	Z+1, r25	; 0x01
    4a4e:	12 82       	std	Z+2, r1	; 0x02
    4a50:	24 83       	std	Z+4, r18	; 0x04
    4a52:	25 e3       	ldi	r18, 0x35	; 53
    4a54:	22 87       	std	Z+10, r18	; 0x0a
    4a56:	28 ed       	ldi	r18, 0xD8	; 216
    4a58:	31 e0       	ldi	r19, 0x01	; 1
    4a5a:	24 bf       	out	0x34, r18	; 52
    4a5c:	33 87       	std	Z+11, r19	; 0x0b
    4a5e:	01 96       	adiw	r24, 0x01	; 1
    4a60:	08 95       	ret

00004a62 <memcpy>:
    4a62:	fb 01       	movw	r30, r22
    4a64:	dc 01       	movw	r26, r24
    4a66:	02 c0       	rjmp	.+4      	; 0x4a6c <memcpy+0xa>
    4a68:	01 90       	ld	r0, Z+
    4a6a:	0d 92       	st	X+, r0
    4a6c:	41 50       	subi	r20, 0x01	; 1
    4a6e:	50 40       	sbci	r21, 0x00	; 0
    4a70:	d8 f7       	brcc	.-10     	; 0x4a68 <memcpy+0x6>
    4a72:	08 95       	ret

00004a74 <_exit>:
    4a74:	f8 94       	cli

00004a76 <__stop_program>:
    4a76:	ff cf       	rjmp	.-2      	; 0x4a76 <__stop_program>
